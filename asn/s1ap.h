/*************************************************************/
/* Copyright (C) 2016 OSS Nokalva, Inc.  All rights reserved.*/
/*************************************************************/

/* THIS FILE IS PROPRIETARY MATERIAL OF OSS NOKALVA, INC.
 * AND MAY BE USED ONLY BY DIRECT LICENSEES OF OSS NOKALVA, INC.
 * THIS FILE MAY NOT BE DISTRIBUTED.
 * THIS COPYRIGHT STATEMENT MAY NOT BE REMOVED. */

/* This file was generated by a TRIAL version of the OSS ASN.1 Tools.
 * Applications built using this file can be executed only on the machine
 * on which you run the OSS ASN.1 compiler. */

/* Generated for: Pinnacle Digital Analytics Pvt Ltd (Trial), License 73068Z. */
/* Abstract syntax: s1ap */
/* Created: Sat Sep  3 20:47:47 2016 */
/* ASN.1 compiler version: 10.3 */
/* Code generated for runtime version 10.3 or later */
/* Compiler operating system: Linux with 64-bit support */
/* Compiler machine type: AMD64 */
/* Target operating system: Linux with 64-bit support */
/* Target machine type: AMD64 */
/* C compiler options required: -m64 */
/* ASN.1 compiler options and file names specified:
 * -prefix mme -c++ -norelaxedMode -per -uper -ber -xer -exer -autoencdec
 * -allow universaltags directives_s1ap.asn s1ap.asn1
 */

#ifndef OSS_s1ap
#define OSS_s1ap

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

// **************************************************************
//
// Elementary Procedure definitions
//
// **************************************************************

#include "ossasn1.h"

#define          mmeS1AP_PDU_PDU 1
#define          mmeHandoverRequired_PDU 2
#define          mmeHandoverCommand_PDU 3
#define          mmeE_RABSubjecttoDataForwardingList_PDU 4
#define          mmeE_RABDataForwardingItem_PDU 5
#define          mmeHandoverPreparationFailure_PDU 6
#define          mmeHandoverRequest_PDU 7
#define          mmeE_RABToBeSetupListHOReq_PDU 8
#define          mmeE_RABToBeSetupItemHOReq_PDU 9
#define          mmeHandoverRequestAcknowledge_PDU 10
#define          mmeE_RABAdmittedList_PDU 11
#define          mmeE_RABAdmittedItem_PDU 12
#define          mmeE_RABFailedtoSetupListHOReqAck_PDU 13
#define          mmeE_RABFailedToSetupItemHOReqAck_PDU 14
#define          mmeHandoverFailure_PDU 15
#define          mmeHandoverNotify_PDU 16
#define          mmePathSwitchRequest_PDU 17
#define          mmeE_RABToBeSwitchedDLList_PDU 18
#define          mmeE_RABToBeSwitchedDLItem_PDU 19
#define          mmePathSwitchRequestAcknowledge_PDU 20
#define          mmeE_RABToBeSwitchedULList_PDU 21
#define          mmeE_RABToBeSwitchedULItem_PDU 22
#define          mmePathSwitchRequestFailure_PDU 23
#define          mmeHandoverCancel_PDU 24
#define          mmeHandoverCancelAcknowledge_PDU 25
#define          mmeE_RABSetupRequest_PDU 26
#define          mmeE_RABToBeSetupListBearerSUReq_PDU 27
#define          mmeE_RABToBeSetupItemBearerSUReq_PDU 28
#define          mmeE_RABSetupResponse_PDU 29
#define          mmeE_RABSetupListBearerSURes_PDU 30
#define          mmeE_RABSetupItemBearerSURes_PDU 31
#define          mmeE_RABModifyRequest_PDU 32
#define          mmeE_RABToBeModifiedListBearerModReq_PDU 33
#define          mmeE_RABToBeModifiedItemBearerModReq_PDU 34
#define          mmeE_RABModifyResponse_PDU 35
#define          mmeE_RABModifyListBearerModRes_PDU 36
#define          mmeE_RABModifyItemBearerModRes_PDU 37
#define          mmeE_RABReleaseCommand_PDU 38
#define          mmeE_RABReleaseResponse_PDU 39
#define          mmeE_RABReleaseListBearerRelComp_PDU 40
#define          mmeE_RABReleaseItemBearerRelComp_PDU 41
#define          mmeE_RABReleaseIndication_PDU 42
#define          mmeInitialContextSetupRequest_PDU 43
#define          mmeE_RABToBeSetupListCtxtSUReq_PDU 44
#define          mmeE_RABToBeSetupItemCtxtSUReq_PDU 45
#define          mmeInitialContextSetupResponse_PDU 46
#define          mmeE_RABSetupListCtxtSURes_PDU 47
#define          mmeE_RABSetupItemCtxtSURes_PDU 48
#define          mmeInitialContextSetupFailure_PDU 49
#define          mmePaging_PDU 50
#define          mmeTAIList_PDU 51
#define          mmeTAIItem_PDU 52
#define          mmeUEContextReleaseRequest_PDU 53
#define          mmeUEContextReleaseCommand_PDU 54
#define          mmeUEContextReleaseComplete_PDU 55
#define          mmeUEContextModificationRequest_PDU 56
#define          mmeUEContextModificationResponse_PDU 57
#define          mmeUEContextModificationFailure_PDU 58
#define          mmeUERadioCapabilityMatchRequest_PDU 59
#define          mmeUERadioCapabilityMatchResponse_PDU 60
#define          mmeDownlinkNASTransport_PDU 61
#define          mmeInitialUEMessage_PDU 62
#define          mmeUplinkNASTransport_PDU 63
#define          mmeNASNonDeliveryIndication_PDU 64
#define          mmeReset_PDU 65
#define          mmeResetType_PDU 66
#define          mmeResetAcknowledge_PDU 67
#define          mmeUE_associatedLogicalS1_ConnectionListResAck_PDU 68
#define          mmeErrorIndication_PDU 69
#define          mmeS1SetupRequest_PDU 70
#define          mmeS1SetupResponse_PDU 71
#define          mmeS1SetupFailure_PDU 72
#define          mmeENBConfigurationUpdate_PDU 73
#define          mmeENBConfigurationUpdateAcknowledge_PDU 74
#define          mmeENBConfigurationUpdateFailure_PDU 75
#define          mmeMMEConfigurationUpdate_PDU 76
#define          mmeMMEConfigurationUpdateAcknowledge_PDU 77
#define          mmeMMEConfigurationUpdateFailure_PDU 78
#define          mmeDownlinkS1cdma2000tunnelling_PDU 79
#define          mmeUplinkS1cdma2000tunnelling_PDU 80
#define          mmeUECapabilityInfoIndication_PDU 81
#define          mmeENBStatusTransfer_PDU 82
#define          mmeMMEStatusTransfer_PDU 83
#define          mmeTraceStart_PDU 84
#define          mmeTraceFailureIndication_PDU 85
#define          mmeDeactivateTrace_PDU 86
#define          mmeCellTrafficTrace_PDU 87
#define          mmeLocationReportingControl_PDU 88
#define          mmeLocationReportingFailureIndication_PDU 89
#define          mmeLocationReport_PDU 90
#define          mmeOverloadStart_PDU 91
#define          mmeOverloadStop_PDU 92
#define          mmeWriteReplaceWarningRequest_PDU 93
#define          mmeWriteReplaceWarningResponse_PDU 94
#define          mmeENBDirectInformationTransfer_PDU 95
#define          mmeInter_SystemInformationTransferType_PDU 96
#define          mmeMMEDirectInformationTransfer_PDU 97
#define          mmeENBConfigurationTransfer_PDU 98
#define          mmeMMEConfigurationTransfer_PDU 99
#define          mmePrivateMessage_PDU 100
#define          mmeKillRequest_PDU 101
#define          mmeKillResponse_PDU 102
#define          mmePWSRestartIndication_PDU 103
#define          mmeDownlinkUEAssociatedLPPaTransport_PDU 104
#define          mmeUplinkUEAssociatedLPPaTransport_PDU 105
#define          mmeDownlinkNonUEAssociatedLPPaTransport_PDU 106
#define          mmeUplinkNonUEAssociatedLPPaTransport_PDU 107
#define          mmeE_RABModificationIndication_PDU 108
#define          mmeE_RABToBeModifiedListBearerModInd_PDU 109
#define          mmeE_RABToBeModifiedItemBearerModInd_PDU 110
#define          mmeE_RABNotToBeModifiedListBearerModInd_PDU 111
#define          mmeE_RABNotToBeModifiedItemBearerModInd_PDU 112
#define          mmeE_RABModificationConfirm_PDU 113
#define          mmeE_RABModifyListBearerModConf_PDU 114
#define          mmeE_RABModifyItemBearerModConf_PDU 115
#define          mmeBearers_SubjectToStatusTransfer_Item_PDU 116
#define          mmeBroadcastCancelledAreaList_PDU 117
#define          mmeBroadcastCompletedAreaList_PDU 118
#define          mmeCause_PDU 119
#define          mmeCellAccessMode_PDU 120
#define          mmeCdma2000PDU_PDU 121
#define          mmeCdma2000RATType_PDU 122
#define          mmeCdma2000SectorID_PDU 123
#define          mmeCdma2000HOStatus_PDU 124
#define          mmeCdma2000HORequiredIndication_PDU 125
#define          mmeCdma2000OneXSRVCCInfo_PDU 126
#define          mmeCdma2000OneXRAND_PDU 127
#define          mmeCNDomain_PDU 128
#define          mmeConcurrentWarningMessageIndicator_PDU 129
#define          mmeCorrelation_ID_PDU 130
#define          mmeCSFallbackIndicator_PDU 131
#define          mmeAdditionalCSFallbackIndicator_PDU 132
#define          mmeCSG_Id_PDU 133
#define          mmeCSG_IdList_PDU 134
#define          mmeCSGMembershipStatus_PDU 135
#define          mmeCOUNTValueExtended_PDU 136
#define          mmeCriticalityDiagnostics_PDU 137
#define          mmeDataCodingScheme_PDU 138
#define          mmeDirect_Forwarding_Path_Availability_PDU 139
#define          mmeData_Forwarding_Not_Possible_PDU 140
#define          mmeEmergencyAreaIDListForRestart_PDU 141
#define          mmeGlobal_ENB_ID_PDU 142
#define          mmeGUMMEIList_PDU 143
#define          mmeENB_StatusTransfer_TransparentContainer_PDU 144
#define          mmeENB_UE_S1AP_ID_PDU 145
#define          mmeENBname_PDU 146
#define          mmeE_RABList_PDU 147
#define          mmeE_RABItem_PDU 148
#define          mmeEUTRAN_CGI_PDU 149
#define          mmeEUTRANRoundTripDelayEstimationInfo_PDU 150
#define          mmeExpectedUEBehaviour_PDU 151
#define          mmeExtendedRepetitionPeriod_PDU 152
#define          mmeGUMMEI_PDU 153
#define          mmeGUMMEIType_PDU 154
#define          mmeGWContextReleaseIndication_PDU 155
#define          mmeHandoverRestrictionList_PDU 156
#define          mmeHandoverType_PDU 157
#define          mmeMasked_IMEISV_PDU 158
#define          mmeKillAllWarningMessages_PDU 159
#define          mmeLAI_PDU 160
#define          mmeLPPa_PDU_PDU 161
#define          mmeLHN_ID_PDU 162
#define          mmeLoggedMBSFNMDT_PDU 163
#define          mmeM3Configuration_PDU 164
#define          mmeM4Configuration_PDU 165
#define          mmeM5Configuration_PDU 166
#define          mmeMDT_Location_Info_PDU 167
#define          mmeMDT_Configuration_PDU 168
#define          mmeManagementBasedMDTAllowed_PDU 169
#define          mmeMDTPLMNList_PDU 170
#define          mmePrivacyIndicator_PDU 171
#define          mmeMessageIdentifier_PDU 172
#define          mmeMMEname_PDU 173
#define          mmeMMERelaySupportIndicator_PDU 174
#define          mmeMME_UE_S1AP_ID_PDU 175
#define          mmeMSClassmark2_PDU 176
#define          mmeMSClassmark3_PDU 177
#define          mmeMutingAvailabilityIndication_PDU 178
#define          mmeMutingPatternInformation_PDU 179
#define          mmeNAS_PDU_PDU 180
#define          mmeNASSecurityParametersfromE_UTRAN_PDU 181
#define          mmeNASSecurityParameterstoE_UTRAN_PDU 182
#define          mmeNumberofBroadcastRequest_PDU 183
#define          mmeOverloadResponse_PDU 184
#define          mmePagingDRX_PDU 185
#define          mmePagingPriority_PDU 186
#define          mmeProSeAuthorized_PDU 187
#define          mmePS_ServiceNotAvailable_PDU 188
#define          mmeReceiveStatusOfULPDCPSDUsExtended_PDU 189
#define          mmeRelativeMMECapacity_PDU 190
#define          mmeRelayNode_Indicator_PDU 191
#define          mmeRequestType_PDU 192
#define          mmeRepetitionPeriod_PDU 193
#define          mmeRRC_Establishment_Cause_PDU 194
#define          mmeECGIListForRestart_PDU 195
#define          mmeRouting_ID_PDU 196
#define          mmeSecurityKey_PDU 197
#define          mmeSecurityContext_PDU 198
#define          mmeSerialNumber_PDU 199
#define          mmeSONInformationReport_PDU 200
#define          mmeSONConfigurationTransfer_PDU 201
#define          mmeSynchronisationInformation_PDU 202
#define          mmeSource_ToTarget_TransparentContainer_PDU 203
#define          mmeSRVCCOperationPossible_PDU 204
#define          mmeSRVCCHOIndication_PDU 205
#define          mmeServedGUMMEIs_PDU 206
#define          mmeSubscriberProfileIDforRFP_PDU 207
#define          mmeSupportedTAs_PDU 208
#define          mmeTimeSynchronisationInfo_PDU 209
#define          mmeS_TMSI_PDU 210
#define          mmeTAI_PDU 211
#define          mmeTargetID_PDU 212
#define          mmeTarget_ToSource_TransparentContainer_PDU 213
#define          mmeTimeToWait_PDU 214
#define          mmeTransportInformation_PDU 215
#define          mmeTransportLayerAddress_PDU 216
#define          mmeTraceActivation_PDU 217
#define          mmeE_UTRAN_Trace_ID_PDU 218
#define          mmeTrafficLoadReductionIndication_PDU 219
#define          mmeTunnelInformation_PDU 220
#define          mmeTAIListForRestart_PDU 221
#define          mmeUEAggregateMaximumBitrate_PDU 222
#define          mmeUE_S1AP_IDs_PDU 223
#define          mmeUE_associatedLogicalS1_ConnectionItem_PDU 224
#define          mmeUEIdentityIndexValue_PDU 225
#define          mmeUEPagingID_PDU 226
#define          mmeUERadioCapability_PDU 227
#define          mmeUERadioCapabilityForPaging_PDU 228
#define          mmeUESecurityCapabilities_PDU 229
#define          mmeUserLocationInformation_PDU 230
#define          mmeVoiceSupportMatchIndicator_PDU 231
#define          mmeWarningAreaList_PDU 232
#define          mmeWarningType_PDU 233
#define          mmeWarningSecurityInfo_PDU 234
#define          mmeWarningMessageContents_PDU 235
#define          mmeX2TNLConfigurationInfo_PDU 236
#define          mmeENBX2ExtTLAs_PDU 237
#define          mmeENBIndirectX2TransportLayerAddresses_PDU 238
#define          mmeS1AP_ELEMENTARY_PROCEDURES_OSET 1
#define          mmeS1AP_ELEMENTARY_PROCEDURES_CLASS_1_OSET 2
#define          mmeS1AP_ELEMENTARY_PROCEDURES_CLASS_2_OSET 3
#define          mmeHandoverRequiredIEs_OSET 4
#define          mmeHandoverCommandIEs_OSET 5
#define          mmeE_RABDataForwardingItemIEs_OSET 6
#define          mmeE_RABDataForwardingItem_ExtIEs_OSET 7
#define          mmeHandoverPreparationFailureIEs_OSET 8
#define          mmeHandoverRequestIEs_OSET 9
#define          mmeE_RABToBeSetupItemHOReqIEs_OSET 10
#define          mmeE_RABToBeSetupItemHOReq_ExtIEs_OSET 11
#define          mmeHandoverRequestAcknowledgeIEs_OSET 12
#define          mmeE_RABAdmittedItemIEs_OSET 13
#define          mmeE_RABAdmittedItem_ExtIEs_OSET 14
#define          mmeE_RABFailedtoSetupItemHOReqAckIEs_OSET 15
#define          mmeE_RABFailedToSetupItemHOReqAckExtIEs_OSET 16
#define          mmeHandoverFailureIEs_OSET 17
#define          mmeHandoverNotifyIEs_OSET 18
#define          mmePathSwitchRequestIEs_OSET 19
#define          mmeE_RABToBeSwitchedDLItemIEs_OSET 20
#define          mmeE_RABToBeSwitchedDLItem_ExtIEs_OSET 21
#define          mmePathSwitchRequestAcknowledgeIEs_OSET 22
#define          mmeE_RABToBeSwitchedULItemIEs_OSET 23
#define          mmeE_RABToBeSwitchedULItem_ExtIEs_OSET 24
#define          mmePathSwitchRequestFailureIEs_OSET 25
#define          mmeHandoverCancelIEs_OSET 26
#define          mmeHandoverCancelAcknowledgeIEs_OSET 27
#define          mmeE_RABSetupRequestIEs_OSET 28
#define          mmeE_RABToBeSetupItemBearerSUReqIEs_OSET 29
#define          mmeE_RABToBeSetupItemBearerSUReqExtIEs_OSET 30
#define          mmeE_RABSetupResponseIEs_OSET 31
#define          mmeE_RABSetupItemBearerSUResIEs_OSET 32
#define          mmeE_RABSetupItemBearerSUResExtIEs_OSET 33
#define          mmeE_RABModifyRequestIEs_OSET 34
#define          mmeE_RABToBeModifiedItemBearerModReqIEs_OSET 35
#define          mmeE_RABToBeModifyItemBearerModReqExtIEs_OSET 36
#define          mmeE_RABModifyResponseIEs_OSET 37
#define          mmeE_RABModifyItemBearerModResIEs_OSET 38
#define          mmeE_RABModifyItemBearerModResExtIEs_OSET 39
#define          mmeE_RABReleaseCommandIEs_OSET 40
#define          mmeE_RABReleaseResponseIEs_OSET 41
#define          mmeE_RABReleaseItemBearerRelCompIEs_OSET 42
#define          mmeE_RABReleaseItemBearerRelCompExtIEs_OSET 43
#define          mmeE_RABReleaseIndicationIEs_OSET 44
#define          mmeInitialContextSetupRequestIEs_OSET 45
#define          mmeE_RABToBeSetupItemCtxtSUReqIEs_OSET 46
#define          mmeE_RABToBeSetupItemCtxtSUReqExtIEs_OSET 47
#define          mmeInitialContextSetupResponseIEs_OSET 48
#define          mmeE_RABSetupItemCtxtSUResIEs_OSET 49
#define          mmeE_RABSetupItemCtxtSUResExtIEs_OSET 50
#define          mmeInitialContextSetupFailureIEs_OSET 51
#define          mmePagingIEs_OSET 52
#define          mmeTAIItemIEs_OSET 53
#define          mmeTAIItemExtIEs_OSET 54
#define          mmeUEContextReleaseRequest_IEs_OSET 55
#define          mmeUEContextReleaseCommand_IEs_OSET 56
#define          mmeUEContextReleaseComplete_IEs_OSET 57
#define          mmeUEContextModificationRequestIEs_OSET 58
#define          mmeUEContextModificationResponseIEs_OSET 59
#define          mmeUEContextModificationFailureIEs_OSET 60
#define          mmeUERadioCapabilityMatchRequestIEs_OSET 61
#define          mmeUERadioCapabilityMatchResponseIEs_OSET 62
#define          mmeDownlinkNASTransport_IEs_OSET 63
#define          mmeInitialUEMessage_IEs_OSET 64
#define          mmeUplinkNASTransport_IEs_OSET 65
#define          mmeNASNonDeliveryIndication_IEs_OSET 66
#define          mmeResetIEs_OSET 67
#define          mmeUE_associatedLogicalS1_ConnectionItemRes_OSET 68
#define          mmeResetAcknowledgeIEs_OSET 69
#define          mmeUE_associatedLogicalS1_ConnectionItemResAck_OSET 70
#define          mmeErrorIndicationIEs_OSET 71
#define          mmeS1SetupRequestIEs_OSET 72
#define          mmeS1SetupResponseIEs_OSET 73
#define          mmeS1SetupFailureIEs_OSET 74
#define          mmeENBConfigurationUpdateIEs_OSET 75
#define          mmeENBConfigurationUpdateAcknowledgeIEs_OSET 76
#define          mmeENBConfigurationUpdateFailureIEs_OSET 77
#define          mmeMMEConfigurationUpdateIEs_OSET 78
#define          mmeMMEConfigurationUpdateAcknowledgeIEs_OSET 79
#define          mmeMMEConfigurationUpdateFailureIEs_OSET 80
#define          mmeDownlinkS1cdma2000tunnellingIEs_OSET 81
#define          mmeUplinkS1cdma2000tunnellingIEs_OSET 82
#define          mmeUECapabilityInfoIndicationIEs_OSET 83
#define          mmeENBStatusTransferIEs_OSET 84
#define          mmeMMEStatusTransferIEs_OSET 85
#define          mmeTraceStartIEs_OSET 86
#define          mmeTraceFailureIndicationIEs_OSET 87
#define          mmeDeactivateTraceIEs_OSET 88
#define          mmeCellTrafficTraceIEs_OSET 89
#define          mmeLocationReportingControlIEs_OSET 90
#define          mmeLocationReportingFailureIndicationIEs_OSET 91
#define          mmeLocationReportIEs_OSET 92
#define          mmeOverloadStartIEs_OSET 93
#define          mmeOverloadStopIEs_OSET 94
#define          mmeWriteReplaceWarningRequestIEs_OSET 95
#define          mmeWriteReplaceWarningResponseIEs_OSET 96
#define          mmeENBDirectInformationTransferIEs_OSET 97
#define          mmeMMEDirectInformationTransferIEs_OSET 98
#define          mmeENBConfigurationTransferIEs_OSET 99
#define          mmeMMEConfigurationTransferIEs_OSET 100
#define          mmePrivateMessageIEs_OSET 101
#define          mmeKillRequestIEs_OSET 102
#define          mmeKillResponseIEs_OSET 103
#define          mmePWSRestartIndicationIEs_OSET 104
#define          mmeDownlinkUEAssociatedLPPaTransport_IEs_OSET 105
#define          mmeUplinkUEAssociatedLPPaTransport_IEs_OSET 106
#define          mmeDownlinkNonUEAssociatedLPPaTransport_IEs_OSET 107
#define          mmeUplinkNonUEAssociatedLPPaTransport_IEs_OSET 108
#define          mmeE_RABModificationIndicationIEs_OSET 109
#define          mmeE_RABToBeModifiedItemBearerModIndIEs_OSET 110
#define          mmeE_RABToBeModifiedItemBearerModInd_ExtIEs_OSET 111
#define          mmeE_RABNotToBeModifiedItemBearerModIndIEs_OSET 112
#define          mmeE_RABNotToBeModifiedItemBearerModInd_ExtIEs_OSET 113
#define          mmeE_RABModificationConfirmIEs_OSET 114
#define          mmeE_RABModifyItemBearerModConfIEs_OSET 115
#define          mmeE_RABModifyItemBearerModConfExtIEs_OSET 116
#define          mmeAllocationAndRetentionPriority_ExtIEs_OSET 117
#define          mmeBearers_SubjectToStatusTransfer_ItemIEs_OSET 118
#define          mmeBearers_SubjectToStatusTransfer_ItemExtIEs_OSET 119
#define          mmeCancelledCellinEAI_Item_ExtIEs_OSET 120
#define          mmeCancelledCellinTAI_Item_ExtIEs_OSET 121
#define          mmeCellID_Broadcast_Item_ExtIEs_OSET 122
#define          mmeCellID_Cancelled_Item_ExtIEs_OSET 123
#define          mmeCellBasedMDT_ExtIEs_OSET 124
#define          mmeCdma2000OneXSRVCCInfo_ExtIEs_OSET 125
#define          mmeCGI_ExtIEs_OSET 126
#define          mmeCSG_IdList_Item_ExtIEs_OSET 127
#define          mmeCOUNTvalue_ExtIEs_OSET 128
#define          mmeCOUNTValueExtended_ExtIEs_OSET 129
#define          mmeCriticalityDiagnostics_ExtIEs_OSET 130
#define          mmeCriticalityDiagnostics_IE_Item_ExtIEs_OSET 131
#define          mmeEmergencyAreaID_Broadcast_Item_ExtIEs_OSET 132
#define          mmeEmergencyAreaID_Cancelled_Item_ExtIEs_OSET 133
#define          mmeCompletedCellinEAI_Item_ExtIEs_OSET 134
#define          mmeGERAN_Cell_ID_ExtIEs_OSET 135
#define          mmeGlobalENB_ID_ExtIEs_OSET 136
#define          mmeENB_StatusTransfer_TransparentContainer_ExtIEs_OSET 137
#define          mmeE_RABItemIEs_OSET 138
#define          mmeE_RABItem_ExtIEs_OSET 139
#define          mmeE_RABQoSParameters_ExtIEs_OSET 140
#define          mmeEUTRAN_CGI_ExtIEs_OSET 141
#define          mmeExpectedUEBehaviour_ExtIEs_OSET 142
#define          mmeExpectedUEActivityBehaviour_ExtIEs_OSET 143
#define          mmeForbiddenTAs_Item_ExtIEs_OSET 144
#define          mmeForbiddenLAs_Item_ExtIEs_OSET 145
#define          mmeGBR_QosInformation_ExtIEs_OSET 146
#define          mmeGUMMEI_ExtIEs_OSET 147
#define          mmeHandoverRestrictionList_ExtIEs_OSET 148
#define          mmeImmediateMDT_ExtIEs_OSET 149
#define          mmeLAI_ExtIEs_OSET 150
#define          mmeListeningSubframePattern_ExtIEs_OSET 151
#define          mmeLoggedMDT_ExtIEs_OSET 152
#define          mmeLoggedMBSFNMDT_ExtIEs_OSET 153
#define          mmeM3Configuration_ExtIEs_OSET 154
#define          mmeM4Configuration_ExtIEs_OSET 155
#define          mmeM5Configuration_ExtIEs_OSET 156
#define          mmeMDT_Configuration_ExtIEs_OSET 157
#define          mmeMBSFN_ResultToLogInfo_ExtIEs_OSET 158
#define          mmeMutingPatternInformation_ExtIEs_OSET 159
#define          mmeM1PeriodicReporting_ExtIEs_OSET 160
#define          mmeProSeAuthorized_ExtIEs_OSET 161
#define          mmeRequestType_ExtIEs_OSET 162
#define          mmeRIMTransfer_ExtIEs_OSET 163
#define          mmeRLFReportInformation_ExtIEs_OSET 164
#define          mmeSecurityContext_ExtIEs_OSET 165
#define          mmeSONInformationReply_ExtIEs_OSET 166
#define          mmeSONConfigurationTransfer_ExtIEs_OSET 167
#define          mmeSynchronisationInformation_ExtIEs_OSET 168
#define          mmeSourceeNB_ID_ExtIEs_OSET 169
#define          mmeServedGUMMEIsItem_ExtIEs_OSET 170
#define          mmeSupportedTAs_Item_ExtIEs_OSET 171
#define          mmeTimeSynchronisationInfo_ExtIEs_OSET 172
#define          mmeS_TMSI_ExtIEs_OSET 173
#define          mmeTAIBasedMDT_ExtIEs_OSET 174
#define          mmeTAI_ExtIEs_OSET 175
#define          mmeTAI_Broadcast_Item_ExtIEs_OSET 176
#define          mmeTAI_Cancelled_Item_ExtIEs_OSET 177
#define          mmeTABasedMDT_ExtIEs_OSET 178
#define          mmeCompletedCellinTAI_Item_ExtIEs_OSET 179
#define          mmeTargeteNB_ID_ExtIEs_OSET 180
#define          mmeTargetRNC_ID_ExtIEs_OSET 181
#define          mmeM1ThresholdEventA2_ExtIEs_OSET 182
#define          mmeTraceActivation_ExtIEs_OSET 183
#define          mmeTunnel_Information_ExtIEs_OSET 184
#define          mmeUEAggregate_MaximumBitrates_ExtIEs_OSET 185
#define          mmeUE_S1AP_ID_pair_ExtIEs_OSET 186
#define          mmeUE_associatedLogicalS1_ConnectionItemExtIEs_OSET 187
#define          mmeUESecurityCapabilities_ExtIEs_OSET 188
#define          mmeUserLocationInformation_ExtIEs_OSET 189
#define          mmeX2TNLConfigurationInfo_ExtIEs_OSET 190
#define          mmeENBX2ExtTLA_ExtIEs_OSET 191
#define          mmeMDTMode_ExtensionIE_OSET 192
#define          mmeSONInformation_ExtensionIE_OSET 193

typedef struct mme_ObjectID {
    unsigned short  length;
    unsigned char   *value;
} mme_ObjectID;

typedef unsigned short  mmeProcedureCode;

typedef enum mmeCriticality {
    mmereject = 0,
    mmeignore = 1,
    mmenotify = 2
} mmeCriticality;

// **************************************************************
//
// IE parameter types from other modules.
//
// **************************************************************
// **************************************************************
//
// Interface Elementary Procedure Class
//
// **************************************************************
typedef struct mmeS1AP_ELEMENTARY_PROCEDURE {
    unsigned char   bit_mask;
#       define      mmeSuccessfulOutcome_present 0x80
#       define      mmeUnsuccessfulOutcome_present 0x40
#       define      mmecriticality_present 0x20
    unsigned short  InitiatingMessage;
    unsigned short  SuccessfulOutcome;  /* optional; set in bit_mask
                                         * mmeSuccessfulOutcome_present if
                                         * present */
    unsigned short  UnsuccessfulOutcome;  /* optional; set in bit_mask
                                           * mmeUnsuccessfulOutcome_present if
                                           * present */
    mmeProcedureCode procedureCode;
    mmeCriticality  criticality;  /* mmecriticality_present not set in bit_mask
                                   * implies value is ignore */
} mmeS1AP_ELEMENTARY_PROCEDURE;

typedef enum mmeCellAccessMode {
    mmehybrid = 0
} mmeCellAccessMode;

typedef enum mmeCdma2000RATType {
    mmehRPD = 0,
    mmeonexRTT = 1
} mmeCdma2000RATType;

typedef enum mmeCdma2000HOStatus {
    mmehOSuccess = 0,
    mmehOFailure = 1
} mmeCdma2000HOStatus;

typedef enum mmeCdma2000HORequiredIndication {
    mmeCdma2000HORequiredIndication_true = 0
} mmeCdma2000HORequiredIndication;

typedef enum mmeCNDomain {
    mmeps = 0,
    mmecs = 1
} mmeCNDomain;

typedef enum mmeConcurrentWarningMessageIndicator {
    mmeConcurrentWarningMessageIndicator_true = 0
} mmeConcurrentWarningMessageIndicator;

typedef enum mmeCSFallbackIndicator {
    mmecs_fallback_required = 0,
    mmecs_fallback_high_priority = 1
} mmeCSFallbackIndicator;

typedef enum mmeAdditionalCSFallbackIndicator {
    mmeno_restriction = 0,
    mmerestriction = 1
} mmeAdditionalCSFallbackIndicator;

typedef enum mmeCSGMembershipStatus {
    mmemember = 0,
    mmenot_member = 1
} mmeCSGMembershipStatus;

typedef enum mmeDirect_Forwarding_Path_Availability {
    mmedirectPathAvailable = 0
} mmeDirect_Forwarding_Path_Availability;

typedef enum mmeData_Forwarding_Not_Possible {
    mmedata_Forwarding_not_Possible = 0
} mmeData_Forwarding_Not_Possible;

typedef unsigned int    mmeENB_UE_S1AP_ID;

typedef unsigned short  mmeEUTRANRoundTripDelayEstimationInfo;

typedef unsigned int    mmeExtendedRepetitionPeriod;

typedef enum mmeGUMMEIType {
    mmenative = 0,
    mmemapped = 1
} mmeGUMMEIType;

typedef enum mmeGWContextReleaseIndication {
    mmeGWContextReleaseIndication_true = 0
} mmeGWContextReleaseIndication;

typedef enum mmeHandoverType {
    mmeintralte = 0,
    mmeltetoutran = 1,
    mmeltetogeran = 2,
    mmeutrantolte = 3,
    mmegerantolte = 4
} mmeHandoverType;

// J
// K
typedef enum mmeKillAllWarningMessages {
    mmeKillAllWarningMessages_true = 0
} mmeKillAllWarningMessages;

typedef enum mmeManagementBasedMDTAllowed {
    mmeallowed = 0
} mmeManagementBasedMDTAllowed;

typedef enum mmePrivacyIndicator {
    mmeimmediate_MDT = 0,
    mmelogged_MDT = 1
} mmePrivacyIndicator;

typedef enum mmeMMERelaySupportIndicator {
    mmeMMERelaySupportIndicator_true = 0
} mmeMMERelaySupportIndicator;

typedef unsigned int    mmeMME_UE_S1AP_ID;

typedef enum mmeMutingAvailabilityIndication {
    mmeavailable = 0,
    mmeunavailable = 1
} mmeMutingAvailabilityIndication;

typedef unsigned short  mmeNumberofBroadcastRequest;

// P
typedef enum mmePagingDRX {
    mmev32 = 0,
    mmev64 = 1,
    mmev128 = 2,
    mmev256 = 3
} mmePagingDRX;

typedef enum mmePagingPriority {
    mmepriolevel1 = 0,
    mmepriolevel2 = 1,
    mmepriolevel3 = 2,
    mmepriolevel4 = 3,
    mmepriolevel5 = 4,
    mmepriolevel6 = 5,
    mmepriolevel7 = 6,
    mmepriolevel8 = 7
} mmePagingPriority;

typedef enum mmePS_ServiceNotAvailable {
    mmeps_service_not_available = 0
} mmePS_ServiceNotAvailable;

typedef unsigned short  mmeRelativeMMECapacity;

typedef enum mmeRelayNode_Indicator {
    mmeRelayNode_Indicator_true = 0
} mmeRelayNode_Indicator;

typedef unsigned short  mmeRepetitionPeriod;

typedef enum mmeRRC_Establishment_Cause {
    mmeemergency = 0,
    mmehighPriorityAccess = 1,
    mmemt_Access = 2,
    mmemo_Signalling = 3,
    mmemo_Data = 4,
    mmedelay_TolerantAccess = 5
} mmeRRC_Establishment_Cause;

typedef unsigned short  mmeRouting_ID;

typedef enum mmeSRVCCOperationPossible {
    mmepossible = 0
} mmeSRVCCOperationPossible;

typedef enum mmeSRVCCHOIndication {
    mmepSandCS = 0,
    mmecSonly = 1
} mmeSRVCCHOIndication;

typedef unsigned short  mmeSubscriberProfileIDforRFP;

typedef enum mmeTimeToWait {
    mmev1s = 0,
    mmev2s = 1,
    mmev5s = 2,
    mmev10s = 3,
    mmev20s = 4,
    mmev60s = 5
} mmeTimeToWait;

typedef unsigned short  mmeTrafficLoadReductionIndication;

// V
typedef enum mmeVoiceSupportMatchIndicator {
    mmesupported = 0,
    mmenot_supported = 1
} mmeVoiceSupportMatchIndicator;

union mmeAll_PDU_Types_union {
    struct mmeS1AP_PDU *pdu_S1AP_PDU;  /* mmeS1AP_PDU_PDU */
    struct mmeHandoverRequired *pdu_HandoverRequired;  
                                                  /* mmeHandoverRequired_PDU */
    struct mmeHandoverCommand *pdu_HandoverCommand;  
                                                   /* mmeHandoverCommand_PDU */
    struct mmeE_RABSubjecttoDataForwardingList_ **pdu_E_RABSubjecttoDataForwardingList;                                 /* mmeE_RABSubjecttoDataForwardingList_PDU */
    struct mmeE_RABDataForwardingItem *pdu_E_RABDataForwardingItem;  
                                           /* mmeE_RABDataForwardingItem_PDU */
    struct mmeHandoverPreparationFailure *pdu_HandoverPreparationFailure;  
                                        /* mmeHandoverPreparationFailure_PDU */
    struct mmeHandoverRequest *pdu_HandoverRequest;  
                                                   /* mmeHandoverRequest_PDU */
    struct mmeE_RABToBeSetupListHOReq_ **pdu_E_RABToBeSetupListHOReq;  
                                           /* mmeE_RABToBeSetupListHOReq_PDU */
    struct mmeE_RABToBeSetupItemHOReq *pdu_E_RABToBeSetupItemHOReq;  
                                           /* mmeE_RABToBeSetupItemHOReq_PDU */
    struct mmeHandoverRequestAcknowledge *pdu_HandoverRequestAcknowledge;  
                                        /* mmeHandoverRequestAcknowledge_PDU */
    struct mmeE_RABAdmittedList_ **pdu_E_RABAdmittedList;  
                                                 /* mmeE_RABAdmittedList_PDU */
    struct mmeE_RABAdmittedItem *pdu_E_RABAdmittedItem;  
                                                 /* mmeE_RABAdmittedItem_PDU */
    struct mmeE_RABFailedtoSetupListHOReqAck_ **pdu_E_RABFailedtoSetupListHOReqAck;                                     /* mmeE_RABFailedtoSetupListHOReqAck_PDU */
    struct mmeE_RABFailedToSetupItemHOReqAck *pdu_E_RABFailedToSetupItemHOReqAck;                                       /* mmeE_RABFailedToSetupItemHOReqAck_PDU */
    struct mmeHandoverFailure *pdu_HandoverFailure;  
                                                   /* mmeHandoverFailure_PDU */
    struct mmeHandoverNotify *pdu_HandoverNotify;  /* mmeHandoverNotify_PDU */
    struct mmePathSwitchRequest *pdu_PathSwitchRequest;  
                                                 /* mmePathSwitchRequest_PDU */
    struct mmeE_RABToBeSwitchedDLList_ **pdu_E_RABToBeSwitchedDLList;  
                                           /* mmeE_RABToBeSwitchedDLList_PDU */
    struct mmeE_RABToBeSwitchedDLItem *pdu_E_RABToBeSwitchedDLItem;  
                                           /* mmeE_RABToBeSwitchedDLItem_PDU */
    struct mmePathSwitchRequestAcknowledge *pdu_PathSwitchRequestAcknowledge;                                           /* mmePathSwitchRequestAcknowledge_PDU */
    struct mmeE_RABToBeSwitchedULList_ **pdu_E_RABToBeSwitchedULList;  
                                           /* mmeE_RABToBeSwitchedULList_PDU */
    struct mmeE_RABToBeSwitchedULItem *pdu_E_RABToBeSwitchedULItem;  
                                           /* mmeE_RABToBeSwitchedULItem_PDU */
    struct mmePathSwitchRequestFailure *pdu_PathSwitchRequestFailure;  
                                          /* mmePathSwitchRequestFailure_PDU */
    struct mmeHandoverCancel *pdu_HandoverCancel;  /* mmeHandoverCancel_PDU */
    struct mmeHandoverCancelAcknowledge *pdu_HandoverCancelAcknowledge;  
                                         /* mmeHandoverCancelAcknowledge_PDU */
    struct mmeE_RABSetupRequest *pdu_E_RABSetupRequest;  
                                                 /* mmeE_RABSetupRequest_PDU */
    struct mmeE_RABToBeSetupListBearerSUReq_ **pdu_E_RABToBeSetupListBearerSUReq;                                       /* mmeE_RABToBeSetupListBearerSUReq_PDU */
    struct mmeE_RABToBeSetupItemBearerSUReq *pdu_E_RABToBeSetupItemBearerSUReq;                                         /* mmeE_RABToBeSetupItemBearerSUReq_PDU */
    struct mmeE_RABSetupResponse *pdu_E_RABSetupResponse;  
                                                /* mmeE_RABSetupResponse_PDU */
    struct mmeE_RABSetupListBearerSURes_ **pdu_E_RABSetupListBearerSURes;  
                                        /* mmeE_RABSetupListBearerSURes_PDU */
    struct mmeE_RABSetupItemBearerSURes *pdu_E_RABSetupItemBearerSURes;  
                                         /* mmeE_RABSetupItemBearerSURes_PDU */
    struct mmeE_RABModifyRequest *pdu_E_RABModifyRequest;  
                                                /* mmeE_RABModifyRequest_PDU */
    struct mmeE_RABToBeModifiedListBearerModReq_ **pdu_E_RABToBeModifiedListBearerModReq;                               /* mmeE_RABToBeModifiedListBearerModReq_PDU */
    struct mmeE_RABToBeModifiedItemBearerModReq *pdu_E_RABToBeModifiedItemBearerModReq;                                 /* mmeE_RABToBeModifiedItemBearerModReq_PDU */
    struct mmeE_RABModifyResponse *pdu_E_RABModifyResponse;  
                                               /* mmeE_RABModifyResponse_PDU */
    struct mmeE_RABModifyListBearerModRes_ **pdu_E_RABModifyListBearerModRes;                                           /* mmeE_RABModifyListBearerModRes_PDU */
    struct mmeE_RABModifyItemBearerModRes *pdu_E_RABModifyItemBearerModRes;  
                                        /* mmeE_RABModifyItemBearerModRes_PDU */
    struct mmeE_RABReleaseCommand *pdu_E_RABReleaseCommand;  
                                               /* mmeE_RABReleaseCommand_PDU */
    struct mmeE_RABReleaseResponse *pdu_E_RABReleaseResponse;  
                                              /* mmeE_RABReleaseResponse_PDU */
    struct mmeE_RABReleaseListBearerRelComp_ **pdu_E_RABReleaseListBearerRelComp;                                       /* mmeE_RABReleaseListBearerRelComp_PDU */
    struct mmeE_RABReleaseItemBearerRelComp *pdu_E_RABReleaseItemBearerRelComp;                                         /* mmeE_RABReleaseItemBearerRelComp_PDU */
    struct mmeE_RABReleaseIndication *pdu_E_RABReleaseIndication;  
                                            /* mmeE_RABReleaseIndication_PDU */
    struct mmeInitialContextSetupRequest *pdu_InitialContextSetupRequest;  
                                        /* mmeInitialContextSetupRequest_PDU */
    struct mmeE_RABToBeSetupListCtxtSUReq_ **pdu_E_RABToBeSetupListCtxtSUReq;                                           /* mmeE_RABToBeSetupListCtxtSUReq_PDU */
    struct mmeE_RABToBeSetupItemCtxtSUReq *pdu_E_RABToBeSetupItemCtxtSUReq;  
                                        /* mmeE_RABToBeSetupItemCtxtSUReq_PDU */
    struct mmeInitialContextSetupResponse *pdu_InitialContextSetupResponse;  
                                        /* mmeInitialContextSetupResponse_PDU */
    struct mmeE_RABSetupListCtxtSURes_ **pdu_E_RABSetupListCtxtSURes;  
                                           /* mmeE_RABSetupListCtxtSURes_PDU */
    struct mmeE_RABSetupItemCtxtSURes *pdu_E_RABSetupItemCtxtSURes;  
                                           /* mmeE_RABSetupItemCtxtSURes_PDU */
    struct mmeInitialContextSetupFailure *pdu_InitialContextSetupFailure;  
                                        /* mmeInitialContextSetupFailure_PDU */
    struct mmePaging *pdu_Paging;  /* mmePaging_PDU */
    struct mmeTAIList_ **pdu_TAIList;  /* mmeTAIList_PDU */
    struct mmeTAIItem *pdu_TAIItem;  /* mmeTAIItem_PDU */
    struct mmeUEContextReleaseRequest *pdu_UEContextReleaseRequest;  
                                           /* mmeUEContextReleaseRequest_PDU */
    struct mmeUEContextReleaseCommand *pdu_UEContextReleaseCommand;  
                                           /* mmeUEContextReleaseCommand_PDU */
    struct mmeUEContextReleaseComplete *pdu_UEContextReleaseComplete;  
                                          /* mmeUEContextReleaseComplete_PDU */
    struct mmeUEContextModificationRequest *pdu_UEContextModificationRequest;                                           /* mmeUEContextModificationRequest_PDU */
    struct mmeUEContextModificationResponse *pdu_UEContextModificationResponse;                                         /* mmeUEContextModificationResponse_PDU */
    struct mmeUEContextModificationFailure *pdu_UEContextModificationFailure;                                           /* mmeUEContextModificationFailure_PDU */
    struct mmeUERadioCapabilityMatchRequest *pdu_UERadioCapabilityMatchRequest;                                         /* mmeUERadioCapabilityMatchRequest_PDU */
    struct mmeUERadioCapabilityMatchResponse *pdu_UERadioCapabilityMatchResponse;                                       /* mmeUERadioCapabilityMatchResponse_PDU */
    struct mmeDownlinkNASTransport *pdu_DownlinkNASTransport;  
                                              /* mmeDownlinkNASTransport_PDU */
    struct mmeInitialUEMessage *pdu_InitialUEMessage;  
                                                  /* mmeInitialUEMessage_PDU */
    struct mmeUplinkNASTransport *pdu_UplinkNASTransport;  
                                                /* mmeUplinkNASTransport_PDU */
    struct mmeNASNonDeliveryIndication *pdu_NASNonDeliveryIndication;  
                                          /* mmeNASNonDeliveryIndication_PDU */
    struct mmeReset *pdu_Reset;  /* mmeReset_PDU */
    struct mmeResetType *pdu_ResetType;  /* mmeResetType_PDU */
    struct mmeResetAcknowledge *pdu_ResetAcknowledge;  
                                                  /* mmeResetAcknowledge_PDU */
    struct mmeUE_associatedLogicalS1_ConnectionListResAck_ **pdu_UE_associatedLogicalS1_ConnectionListResAck;           /* mmeUE_associatedLogicalS1_ConnectionListResAck_PDU */
    struct mmeErrorIndication *pdu_ErrorIndication;  
                                                   /* mmeErrorIndication_PDU */
    struct mmeS1SetupRequest *pdu_S1SetupRequest;  /* mmeS1SetupRequest_PDU */
    struct mmeS1SetupResponse *pdu_S1SetupResponse;  
                                                   /* mmeS1SetupResponse_PDU */
    struct mmeS1SetupFailure *pdu_S1SetupFailure;  /* mmeS1SetupFailure_PDU */
    struct mmeENBConfigurationUpdate *pdu_ENBConfigurationUpdate;  
                                            /* mmeENBConfigurationUpdate_PDU */
    struct mmeENBConfigurationUpdateAcknowledge *pdu_ENBConfigurationUpdateAcknowledge;                                 /* mmeENBConfigurationUpdateAcknowledge_PDU */
    struct mmeENBConfigurationUpdateFailure *pdu_ENBConfigurationUpdateFailure;                                         /* mmeENBConfigurationUpdateFailure_PDU */
    struct mmeMMEConfigurationUpdate *pdu_MMEConfigurationUpdate;  
                                            /* mmeMMEConfigurationUpdate_PDU */
    struct mmeMMEConfigurationUpdateAcknowledge *pdu_MMEConfigurationUpdateAcknowledge;                                 /* mmeMMEConfigurationUpdateAcknowledge_PDU */
    struct mmeMMEConfigurationUpdateFailure *pdu_MMEConfigurationUpdateFailure;                                         /* mmeMMEConfigurationUpdateFailure_PDU */
    struct mmeDownlinkS1cdma2000tunnelling *pdu_DownlinkS1cdma2000tunnelling;                                           /* mmeDownlinkS1cdma2000tunnelling_PDU */
    struct mmeUplinkS1cdma2000tunnelling *pdu_UplinkS1cdma2000tunnelling;  
                                        /* mmeUplinkS1cdma2000tunnelling_PDU */
    struct mmeUECapabilityInfoIndication *pdu_UECapabilityInfoIndication;  
                                        /* mmeUECapabilityInfoIndication_PDU */
    struct mmeENBStatusTransfer *pdu_ENBStatusTransfer;  
                                                 /* mmeENBStatusTransfer_PDU */
    struct mmeMMEStatusTransfer *pdu_MMEStatusTransfer;  
                                                 /* mmeMMEStatusTransfer_PDU */
    struct mmeTraceStart *pdu_TraceStart;  /* mmeTraceStart_PDU */
    struct mmeTraceFailureIndication *pdu_TraceFailureIndication;  
                                            /* mmeTraceFailureIndication_PDU */
    struct mmeDeactivateTrace *pdu_DeactivateTrace;  
                                                   /* mmeDeactivateTrace_PDU */
    struct mmeCellTrafficTrace *pdu_CellTrafficTrace;  
                                                  /* mmeCellTrafficTrace_PDU */
    struct mmeLocationReportingControl *pdu_LocationReportingControl;  
                                          /* mmeLocationReportingControl_PDU */
    struct mmeLocationReportingFailureIndication *pdu_LocationReportingFailureIndication;                               /* mmeLocationReportingFailureIndication_PDU */
    struct mmeLocationReport *pdu_LocationReport;  /* mmeLocationReport_PDU */
    struct mmeOverloadStart *pdu_OverloadStart;  /* mmeOverloadStart_PDU */
    struct mmeOverloadStop *pdu_OverloadStop;  /* mmeOverloadStop_PDU */
    struct mmeWriteReplaceWarningRequest *pdu_WriteReplaceWarningRequest;  
                                        /* mmeWriteReplaceWarningRequest_PDU */
    struct mmeWriteReplaceWarningResponse *pdu_WriteReplaceWarningResponse;  
                                        /* mmeWriteReplaceWarningResponse_PDU */
    struct mmeENBDirectInformationTransfer *pdu_ENBDirectInformationTransfer;                                           /* mmeENBDirectInformationTransfer_PDU */
    struct mmeInter_SystemInformationTransferType *pdu_Inter_SystemInformationTransferType;                             /* mmeInter_SystemInformationTransferType_PDU */
    struct mmeMMEDirectInformationTransfer *pdu_MMEDirectInformationTransfer;                                           /* mmeMMEDirectInformationTransfer_PDU */
    struct mmeENBConfigurationTransfer *pdu_ENBConfigurationTransfer;  
                                          /* mmeENBConfigurationTransfer_PDU */
    struct mmeMMEConfigurationTransfer *pdu_MMEConfigurationTransfer;  
                                          /* mmeMMEConfigurationTransfer_PDU */
    struct mmePrivateMessage *pdu_PrivateMessage;  /* mmePrivateMessage_PDU */
    struct mmeKillRequest *pdu_KillRequest;  /* mmeKillRequest_PDU */
    struct mmeKillResponse *pdu_KillResponse;  /* mmeKillResponse_PDU */
    struct mmePWSRestartIndication *pdu_PWSRestartIndication;  
                                              /* mmePWSRestartIndication_PDU */
    struct mmeDownlinkUEAssociatedLPPaTransport *pdu_DownlinkUEAssociatedLPPaTransport;                                 /* mmeDownlinkUEAssociatedLPPaTransport_PDU */
    struct mmeUplinkUEAssociatedLPPaTransport *pdu_UplinkUEAssociatedLPPaTransport;                                     /* mmeUplinkUEAssociatedLPPaTransport_PDU */
    struct mmeDownlinkNonUEAssociatedLPPaTransport *pdu_DownlinkNonUEAssociatedLPPaTransport;                           /* mmeDownlinkNonUEAssociatedLPPaTransport_PDU */
    struct mmeUplinkNonUEAssociatedLPPaTransport *pdu_UplinkNonUEAssociatedLPPaTransport;                               /* mmeUplinkNonUEAssociatedLPPaTransport_PDU */
    struct mmeE_RABModificationIndication *pdu_E_RABModificationIndication;  
                                        /* mmeE_RABModificationIndication_PDU */
    struct mmeE_RABToBeModifiedListBearerModInd_ **pdu_E_RABToBeModifiedListBearerModInd;                               /* mmeE_RABToBeModifiedListBearerModInd_PDU */
    struct mmeE_RABToBeModifiedItemBearerModInd *pdu_E_RABToBeModifiedItemBearerModInd;                                 /* mmeE_RABToBeModifiedItemBearerModInd_PDU */
    struct mmeE_RABNotToBeModifiedListBearerModInd_ **pdu_E_RABNotToBeModifiedListBearerModInd;                         /* mmeE_RABNotToBeModifiedListBearerModInd_PDU */
    struct mmeE_RABNotToBeModifiedItemBearerModInd *pdu_E_RABNotToBeModifiedItemBearerModInd;                           /* mmeE_RABNotToBeModifiedItemBearerModInd_PDU */
    struct mmeE_RABModificationConfirm *pdu_E_RABModificationConfirm;  
                                          /* mmeE_RABModificationConfirm_PDU */
    struct mmeE_RABModifyListBearerModConf_ **pdu_E_RABModifyListBearerModConf;                                         /* mmeE_RABModifyListBearerModConf_PDU */
    struct mmeE_RABModifyItemBearerModConf *pdu_E_RABModifyItemBearerModConf;                                           /* mmeE_RABModifyItemBearerModConf_PDU */
    struct mmeBearers_SubjectToStatusTransfer_Item *pdu_Bearers_SubjectToStatusTransfer_Item;                           /* mmeBearers_SubjectToStatusTransfer_Item_PDU */
    struct mmeBroadcastCancelledAreaList *pdu_BroadcastCancelledAreaList;  
                                        /* mmeBroadcastCancelledAreaList_PDU */
    struct mmeBroadcastCompletedAreaList *pdu_BroadcastCompletedAreaList;  
                                        /* mmeBroadcastCompletedAreaList_PDU */
    struct mmeCause *pdu_Cause;  /* mmeCause_PDU */
    mmeCellAccessMode *pdu_CellAccessMode;  /* mmeCellAccessMode_PDU */
    struct mmeCdma2000PDU *pdu_Cdma2000PDU;  /* mmeCdma2000PDU_PDU */
    mmeCdma2000RATType *pdu_Cdma2000RATType;  /* mmeCdma2000RATType_PDU */
    struct mmeCdma2000SectorID *pdu_Cdma2000SectorID;  
                                                  /* mmeCdma2000SectorID_PDU */
    mmeCdma2000HOStatus *pdu_Cdma2000HOStatus;  /* mmeCdma2000HOStatus_PDU */
    mmeCdma2000HORequiredIndication *pdu_Cdma2000HORequiredIndication;  
                                      /* mmeCdma2000HORequiredIndication_PDU */
    struct mmeCdma2000OneXSRVCCInfo *pdu_Cdma2000OneXSRVCCInfo;  
                                             /* mmeCdma2000OneXSRVCCInfo_PDU */
    struct mmeCdma2000OneXRAND *pdu_Cdma2000OneXRAND;  
                                                  /* mmeCdma2000OneXRAND_PDU */
    mmeCNDomain     *pdu_CNDomain;  /* mmeCNDomain_PDU */
    mmeConcurrentWarningMessageIndicator *pdu_ConcurrentWarningMessageIndicator;                                        /* mmeConcurrentWarningMessageIndicator_PDU */
    struct mmeCorrelation_ID *pdu_Correlation_ID;  /* mmeCorrelation_ID_PDU */
    mmeCSFallbackIndicator *pdu_CSFallbackIndicator;  
                                               /* mmeCSFallbackIndicator_PDU */
    mmeAdditionalCSFallbackIndicator *pdu_AdditionalCSFallbackIndicator;  
                                        /* mmeAdditionalCSFallbackIndicator_PDU */
    struct mmeCSG_Id *pdu_CSG_Id;  /* mmeCSG_Id_PDU */
    struct mmeCSG_IdList_ **pdu_CSG_IdList;  /* mmeCSG_IdList_PDU */
    mmeCSGMembershipStatus *pdu_CSGMembershipStatus;  
                                               /* mmeCSGMembershipStatus_PDU */
    struct mmeCOUNTValueExtended *pdu_COUNTValueExtended;  
                                                /* mmeCOUNTValueExtended_PDU */
    struct mmeCriticalityDiagnostics *pdu_CriticalityDiagnostics;  
                                            /* mmeCriticalityDiagnostics_PDU */
    struct mmeDataCodingScheme *pdu_DataCodingScheme;  
                                                  /* mmeDataCodingScheme_PDU */
    mmeDirect_Forwarding_Path_Availability *pdu_Direct_Forwarding_Path_Availability;                                    /* mmeDirect_Forwarding_Path_Availability_PDU */
    mmeData_Forwarding_Not_Possible *pdu_Data_Forwarding_Not_Possible;  
                                      /* mmeData_Forwarding_Not_Possible_PDU */
    struct mmeEmergencyAreaIDListForRestart_ **pdu_EmergencyAreaIDListForRestart;                                       /* mmeEmergencyAreaIDListForRestart_PDU */
    struct mmeGlobal_ENB_ID *pdu_Global_ENB_ID;  /* mmeGlobal_ENB_ID_PDU */
    struct mmeGUMMEIList_ **pdu_GUMMEIList;  /* mmeGUMMEIList_PDU */
    struct mmeENB_StatusTransfer_TransparentContainer *pdu_ENB_StatusTransfer_TransparentContainer;                     /* mmeENB_StatusTransfer_TransparentContainer_PDU */
    mmeENB_UE_S1AP_ID *pdu_ENB_UE_S1AP_ID;  /* mmeENB_UE_S1AP_ID_PDU */
    struct mmeENBname *pdu_ENBname;  /* mmeENBname_PDU */
    struct mmeE_RABList_ **pdu_E_RABList;  /* mmeE_RABList_PDU */
    struct mmeE_RABItem *pdu_E_RABItem;  /* mmeE_RABItem_PDU */
    struct mmeEUTRAN_CGI *pdu_EUTRAN_CGI;  /* mmeEUTRAN_CGI_PDU */
    mmeEUTRANRoundTripDelayEstimationInfo *pdu_EUTRANRoundTripDelayEstimationInfo;                                      /* mmeEUTRANRoundTripDelayEstimationInfo_PDU */
    struct mmeExpectedUEBehaviour *pdu_ExpectedUEBehaviour;  
                                               /* mmeExpectedUEBehaviour_PDU */
    mmeExtendedRepetitionPeriod *pdu_ExtendedRepetitionPeriod;  
                                          /* mmeExtendedRepetitionPeriod_PDU */
    struct mmeGUMMEI *pdu_GUMMEI;  /* mmeGUMMEI_PDU */
    mmeGUMMEIType   *pdu_GUMMEIType;  /* mmeGUMMEIType_PDU */
    mmeGWContextReleaseIndication *pdu_GWContextReleaseIndication;  
                                        /* mmeGWContextReleaseIndication_PDU */
    struct mmeHandoverRestrictionList *pdu_HandoverRestrictionList;  
                                           /* mmeHandoverRestrictionList_PDU */
    mmeHandoverType *pdu_HandoverType;  /* mmeHandoverType_PDU */
    struct mmeMasked_IMEISV *pdu_Masked_IMEISV;  /* mmeMasked_IMEISV_PDU */
    mmeKillAllWarningMessages *pdu_KillAllWarningMessages;  
                                            /* mmeKillAllWarningMessages_PDU */
    struct mmeLAI   *pdu_LAI;  /* mmeLAI_PDU */
    struct mmeLPPa_PDU *pdu_LPPa_PDU;  /* mmeLPPa_PDU_PDU */
    struct mmeLHN_ID *pdu_LHN_ID;  /* mmeLHN_ID_PDU */
    struct mmeLoggedMBSFNMDT *pdu_LoggedMBSFNMDT;  /* mmeLoggedMBSFNMDT_PDU */
    struct mmeM3Configuration *pdu_M3Configuration;  
                                                   /* mmeM3Configuration_PDU */
    struct mmeM4Configuration *pdu_M4Configuration;  
                                                   /* mmeM4Configuration_PDU */
    struct mmeM5Configuration *pdu_M5Configuration;  
                                                   /* mmeM5Configuration_PDU */
    struct mmeMDT_Location_Info *pdu_MDT_Location_Info;  
                                                 /* mmeMDT_Location_Info_PDU */
    struct mmeMDT_Configuration *pdu_MDT_Configuration;  
                                                 /* mmeMDT_Configuration_PDU */
    mmeManagementBasedMDTAllowed *pdu_ManagementBasedMDTAllowed;  
                                         /* mmeManagementBasedMDTAllowed_PDU */
    struct mmeMDTPLMNList_ **pdu_MDTPLMNList;  /* mmeMDTPLMNList_PDU */
    mmePrivacyIndicator *pdu_PrivacyIndicator;  /* mmePrivacyIndicator_PDU */
    struct mmeMessageIdentifier *pdu_MessageIdentifier;  
                                                 /* mmeMessageIdentifier_PDU */
    struct mmeMMEname *pdu_MMEname;  /* mmeMMEname_PDU */
    mmeMMERelaySupportIndicator *pdu_MMERelaySupportIndicator;  
                                          /* mmeMMERelaySupportIndicator_PDU */
    mmeMME_UE_S1AP_ID *pdu_MME_UE_S1AP_ID;  /* mmeMME_UE_S1AP_ID_PDU */
    struct mmeMSClassmark2 *pdu_MSClassmark2;  /* mmeMSClassmark2_PDU */
    struct mmeMSClassmark3 *pdu_MSClassmark3;  /* mmeMSClassmark3_PDU */
    mmeMutingAvailabilityIndication *pdu_MutingAvailabilityIndication;  
                                      /* mmeMutingAvailabilityIndication_PDU */
    struct mmeMutingPatternInformation *pdu_MutingPatternInformation;  
                                          /* mmeMutingPatternInformation_PDU */
    struct mmeNAS_PDU *pdu_NAS_PDU;  /* mmeNAS_PDU_PDU */
    struct mmeNASSecurityParametersfromE_UTRAN *pdu_NASSecurityParametersfromE_UTRAN;                                   /* mmeNASSecurityParametersfromE_UTRAN_PDU */
    struct mmeNASSecurityParameterstoE_UTRAN *pdu_NASSecurityParameterstoE_UTRAN;                                       /* mmeNASSecurityParameterstoE_UTRAN_PDU */
    mmeNumberofBroadcastRequest *pdu_NumberofBroadcastRequest;  
                                          /* mmeNumberofBroadcastRequest_PDU */
    struct mmeOverloadResponse *pdu_OverloadResponse;  
                                                  /* mmeOverloadResponse_PDU */
    mmePagingDRX    *pdu_PagingDRX;  /* mmePagingDRX_PDU */
    mmePagingPriority *pdu_PagingPriority;  /* mmePagingPriority_PDU */
    struct mmeProSeAuthorized *pdu_ProSeAuthorized;  
                                                   /* mmeProSeAuthorized_PDU */
    mmePS_ServiceNotAvailable *pdu_PS_ServiceNotAvailable;  
                                            /* mmePS_ServiceNotAvailable_PDU */
    struct mmeReceiveStatusOfULPDCPSDUsExtended *pdu_ReceiveStatusOfULPDCPSDUsExtended;                                 /* mmeReceiveStatusOfULPDCPSDUsExtended_PDU */
    mmeRelativeMMECapacity *pdu_RelativeMMECapacity;  
                                               /* mmeRelativeMMECapacity_PDU */
    mmeRelayNode_Indicator *pdu_RelayNode_Indicator;  
                                               /* mmeRelayNode_Indicator_PDU */
    struct mmeRequestType *pdu_RequestType;  /* mmeRequestType_PDU */
    mmeRepetitionPeriod *pdu_RepetitionPeriod;  /* mmeRepetitionPeriod_PDU */
    mmeRRC_Establishment_Cause *pdu_RRC_Establishment_Cause;  
                                           /* mmeRRC_Establishment_Cause_PDU */
    struct mmeECGIListForRestart_ **pdu_ECGIListForRestart;  
                                                /* mmeECGIListForRestart_PDU */
    mmeRouting_ID   *pdu_Routing_ID;  /* mmeRouting_ID_PDU */
    struct mmeSecurityKey *pdu_SecurityKey;  /* mmeSecurityKey_PDU */
    struct mmeSecurityContext *pdu_SecurityContext;  
                                                   /* mmeSecurityContext_PDU */
    struct mmeSerialNumber *pdu_SerialNumber;  /* mmeSerialNumber_PDU */
    struct mmeSONInformationReport *pdu_SONInformationReport;  
                                              /* mmeSONInformationReport_PDU */
    struct mmeSONConfigurationTransfer *pdu_SONConfigurationTransfer;  
                                          /* mmeSONConfigurationTransfer_PDU */
    struct mmeSynchronisationInformation *pdu_SynchronisationInformation;  
                                        /* mmeSynchronisationInformation_PDU */
    struct mmeSource_ToTarget_TransparentContainer *pdu_Source_ToTarget_TransparentContainer;                           /* mmeSource_ToTarget_TransparentContainer_PDU */
    mmeSRVCCOperationPossible *pdu_SRVCCOperationPossible;  
                                            /* mmeSRVCCOperationPossible_PDU */
    mmeSRVCCHOIndication *pdu_SRVCCHOIndication;  
                                                 /* mmeSRVCCHOIndication_PDU */
    struct mmeServedGUMMEIs_ **pdu_ServedGUMMEIs;  /* mmeServedGUMMEIs_PDU */
    mmeSubscriberProfileIDforRFP *pdu_SubscriberProfileIDforRFP;  
                                         /* mmeSubscriberProfileIDforRFP_PDU */
    struct mmeSupportedTAs_ **pdu_SupportedTAs;  /* mmeSupportedTAs_PDU */
    struct mmeTimeSynchronisationInfo *pdu_TimeSynchronisationInfo;  
                                           /* mmeTimeSynchronisationInfo_PDU */
    struct mmeS_TMSI *pdu_S_TMSI;  /* mmeS_TMSI_PDU */
    struct mmeTAI   *pdu_TAI;  /* mmeTAI_PDU */
    struct mmeTargetID *pdu_TargetID;  /* mmeTargetID_PDU */
    struct mmeTarget_ToSource_TransparentContainer *pdu_Target_ToSource_TransparentContainer;                           /* mmeTarget_ToSource_TransparentContainer_PDU */
    mmeTimeToWait   *pdu_TimeToWait;  /* mmeTimeToWait_PDU */
    struct mmeTransportInformation *pdu_TransportInformation;  
                                              /* mmeTransportInformation_PDU */
    struct mmeTransportLayerAddress *pdu_TransportLayerAddress;  
                                             /* mmeTransportLayerAddress_PDU */
    struct mmeTraceActivation *pdu_TraceActivation;  
                                                   /* mmeTraceActivation_PDU */
    struct mmeE_UTRAN_Trace_ID *pdu_E_UTRAN_Trace_ID;  
                                                  /* mmeE_UTRAN_Trace_ID_PDU */
    mmeTrafficLoadReductionIndication *pdu_TrafficLoadReductionIndication;  
                                        /* mmeTrafficLoadReductionIndication_PDU */
    struct mmeTunnelInformation *pdu_TunnelInformation;  
                                                 /* mmeTunnelInformation_PDU */
    struct mmeTAIListForRestart_ **pdu_TAIListForRestart;  
                                                 /* mmeTAIListForRestart_PDU */
    struct mmeUEAggregateMaximumBitrate *pdu_UEAggregateMaximumBitrate;  
                                         /* mmeUEAggregateMaximumBitrate_PDU */
    struct mmeUE_S1AP_IDs *pdu_UE_S1AP_IDs;  /* mmeUE_S1AP_IDs_PDU */
    struct mmeUE_associatedLogicalS1_ConnectionItem *pdu_UE_associatedLogicalS1_ConnectionItem;                         /* mmeUE_associatedLogicalS1_ConnectionItem_PDU */
    struct mmeUEIdentityIndexValue *pdu_UEIdentityIndexValue;  
                                              /* mmeUEIdentityIndexValue_PDU */
    struct mmeUEPagingID *pdu_UEPagingID;  /* mmeUEPagingID_PDU */
    struct mmeUERadioCapability *pdu_UERadioCapability;  
                                                 /* mmeUERadioCapability_PDU */
    struct mmeUERadioCapabilityForPaging *pdu_UERadioCapabilityForPaging;  
                                        /* mmeUERadioCapabilityForPaging_PDU */
    struct mmeUESecurityCapabilities *pdu_UESecurityCapabilities;  
                                            /* mmeUESecurityCapabilities_PDU */
    struct mmeUserLocationInformation *pdu_UserLocationInformation;  
                                           /* mmeUserLocationInformation_PDU */
    mmeVoiceSupportMatchIndicator *pdu_VoiceSupportMatchIndicator;  
                                        /* mmeVoiceSupportMatchIndicator_PDU */
    struct mmeWarningAreaList *pdu_WarningAreaList;  
                                                   /* mmeWarningAreaList_PDU */
    struct mmeWarningType *pdu_WarningType;  /* mmeWarningType_PDU */
    struct mmeWarningSecurityInfo *pdu_WarningSecurityInfo;  
                                               /* mmeWarningSecurityInfo_PDU */
    struct mmeWarningMessageContents *pdu_WarningMessageContents;  
                                            /* mmeWarningMessageContents_PDU */
    struct mmeX2TNLConfigurationInfo *pdu_X2TNLConfigurationInfo;  
                                            /* mmeX2TNLConfigurationInfo_PDU */
    struct mmeENBX2ExtTLAs_ **pdu_ENBX2ExtTLAs;  /* mmeENBX2ExtTLAs_PDU */
    struct mmeENBIndirectX2TransportLayerAddresses_ **pdu_ENBIndirectX2TransportLayerAddresses;                         /* mmeENBIndirectX2TransportLayerAddresses_PDU */
};

enum mmeS1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_PDUs {
    mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_UNKNOWN = 0,

    mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_HandoverRequired = mmeHandoverRequired_PDU,
    mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_HandoverRequest = mmeHandoverRequest_PDU,
    mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_PathSwitchRequest = mmePathSwitchRequest_PDU,
    mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_E_RABSetupRequest = mmeE_RABSetupRequest_PDU,
    mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_E_RABModifyRequest = mmeE_RABModifyRequest_PDU,
    mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_E_RABReleaseCommand = mmeE_RABReleaseCommand_PDU,
    mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_InitialContextSetupRequest = mmeInitialContextSetupRequest_PDU,
    mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_HandoverCancel = mmeHandoverCancel_PDU,
    mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_KillRequest = mmeKillRequest_PDU,
    mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_Reset = mmeReset_PDU,
    mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_S1SetupRequest = mmeS1SetupRequest_PDU,
    mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_UEContextModificationRequest = mmeUEContextModificationRequest_PDU,
    mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_UEContextReleaseCommand = mmeUEContextReleaseCommand_PDU,
    mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_ENBConfigurationUpdate = mmeENBConfigurationUpdate_PDU,
    mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_MMEConfigurationUpdate = mmeMMEConfigurationUpdate_PDU,
    mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_WriteReplaceWarningRequest = mmeWriteReplaceWarningRequest_PDU,
    mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_HandoverNotify = mmeHandoverNotify_PDU,
    mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_E_RABReleaseIndication = mmeE_RABReleaseIndication_PDU,
    mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_Paging = mmePaging_PDU,
    mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_DownlinkNASTransport = mmeDownlinkNASTransport_PDU,
    mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_InitialUEMessage = mmeInitialUEMessage_PDU,
    mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_UplinkNASTransport = mmeUplinkNASTransport_PDU,
    mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_ErrorIndication = mmeErrorIndication_PDU,
    mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_NASNonDeliveryIndication = mmeNASNonDeliveryIndication_PDU,
    mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_UEContextReleaseRequest = mmeUEContextReleaseRequest_PDU,
    mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_DownlinkS1cdma2000tunnelling = mmeDownlinkS1cdma2000tunnelling_PDU,
    mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_UplinkS1cdma2000tunnelling = mmeUplinkS1cdma2000tunnelling_PDU,
    mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_UECapabilityInfoIndication = mmeUECapabilityInfoIndication_PDU,
    mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_ENBStatusTransfer = mmeENBStatusTransfer_PDU,
    mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_MMEStatusTransfer = mmeMMEStatusTransfer_PDU,
    mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_DeactivateTrace = mmeDeactivateTrace_PDU,
    mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_TraceStart = mmeTraceStart_PDU,
    mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_TraceFailureIndication = mmeTraceFailureIndication_PDU,
    mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_CellTrafficTrace = mmeCellTrafficTrace_PDU,
    mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_LocationReportingControl = mmeLocationReportingControl_PDU,
    mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_LocationReportingFailureIndication = mmeLocationReportingFailureIndication_PDU,
    mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_LocationReport = mmeLocationReport_PDU,
    mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_OverloadStart = mmeOverloadStart_PDU,
    mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_OverloadStop = mmeOverloadStop_PDU,
    mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_ENBDirectInformationTransfer = mmeENBDirectInformationTransfer_PDU,
    mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_MMEDirectInformationTransfer = mmeMMEDirectInformationTransfer_PDU,
    mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_ENBConfigurationTransfer = mmeENBConfigurationTransfer_PDU,
    mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_MMEConfigurationTransfer = mmeMMEConfigurationTransfer_PDU,
    mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_PrivateMessage = mmePrivateMessage_PDU,

    mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_MAX = INT_MAX
};

union mmeS1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_union {
    struct mmeHandoverRequired *pdu_HandoverRequired;  
     /* mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_HandoverRequired */
    struct mmeHandoverRequest *pdu_HandoverRequest;  
      /* mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_HandoverRequest */
    struct mmePathSwitchRequest *pdu_PathSwitchRequest;  
    /* mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_PathSwitchRequest */
    struct mmeE_RABSetupRequest *pdu_E_RABSetupRequest;  
    /* mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_E_RABSetupRequest */
    struct mmeE_RABModifyRequest *pdu_E_RABModifyRequest;  
   /* mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_E_RABModifyRequest */
    struct mmeE_RABReleaseCommand *pdu_E_RABReleaseCommand;  
  /* mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_E_RABReleaseCommand */
    struct mmeInitialContextSetupRequest *pdu_InitialContextSetupRequest;  
                                        /* mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_InitialContextSetupRequest */
    struct mmeHandoverCancel *pdu_HandoverCancel;  
       /* mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_HandoverCancel */
    struct mmeKillRequest *pdu_KillRequest;  
          /* mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_KillRequest */
    struct mmeReset *pdu_Reset;  
                /* mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_Reset */
    struct mmeS1SetupRequest *pdu_S1SetupRequest;  
       /* mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_S1SetupRequest */
    struct mmeUEContextModificationRequest *pdu_UEContextModificationRequest;                                           /* mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_UEContextModificationRequest */
    struct mmeUEContextReleaseCommand *pdu_UEContextReleaseCommand;  
  /* mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_UEContextReleaseCommand */
    struct mmeENBConfigurationUpdate *pdu_ENBConfigurationUpdate;  
 /* mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_ENBConfigurationUpdate */
    struct mmeMMEConfigurationUpdate *pdu_MMEConfigurationUpdate;  
 /* mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_MMEConfigurationUpdate */
    struct mmeWriteReplaceWarningRequest *pdu_WriteReplaceWarningRequest;  
                                        /* mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_WriteReplaceWarningRequest */
    struct mmeHandoverNotify *pdu_HandoverNotify;  
       /* mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_HandoverNotify */
    struct mmeE_RABReleaseIndication *pdu_E_RABReleaseIndication;  
 /* mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_E_RABReleaseIndication */
    struct mmePaging *pdu_Paging;  
               /* mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_Paging */
    struct mmeDownlinkNASTransport *pdu_DownlinkNASTransport;  
 /* mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_DownlinkNASTransport */
    struct mmeInitialUEMessage *pdu_InitialUEMessage;  
     /* mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_InitialUEMessage */
    struct mmeUplinkNASTransport *pdu_UplinkNASTransport;  
   /* mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_UplinkNASTransport */
    struct mmeErrorIndication *pdu_ErrorIndication;  
      /* mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_ErrorIndication */
    struct mmeNASNonDeliveryIndication *pdu_NASNonDeliveryIndication;  
   /* mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_NASNonDeliveryIndication */
    struct mmeUEContextReleaseRequest *pdu_UEContextReleaseRequest;  
  /* mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_UEContextReleaseRequest */
    struct mmeDownlinkS1cdma2000tunnelling *pdu_DownlinkS1cdma2000tunnelling;                                           /* mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_DownlinkS1cdma2000tunnelling */
    struct mmeUplinkS1cdma2000tunnelling *pdu_UplinkS1cdma2000tunnelling;  
                                        /* mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_UplinkS1cdma2000tunnelling */
    struct mmeUECapabilityInfoIndication *pdu_UECapabilityInfoIndication;  
                                        /* mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_UECapabilityInfoIndication */
    struct mmeENBStatusTransfer *pdu_ENBStatusTransfer;  
    /* mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_ENBStatusTransfer */
    struct mmeMMEStatusTransfer *pdu_MMEStatusTransfer;  
    /* mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_MMEStatusTransfer */
    struct mmeDeactivateTrace *pdu_DeactivateTrace;  
      /* mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_DeactivateTrace */
    struct mmeTraceStart *pdu_TraceStart;  
           /* mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_TraceStart */
    struct mmeTraceFailureIndication *pdu_TraceFailureIndication;  
 /* mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_TraceFailureIndication */
    struct mmeCellTrafficTrace *pdu_CellTrafficTrace;  
     /* mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_CellTrafficTrace */
    struct mmeLocationReportingControl *pdu_LocationReportingControl;  
   /* mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_LocationReportingControl */
    struct mmeLocationReportingFailureIndication *pdu_LocationReportingFailureIndication;                               /* mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_LocationReportingFailureIndication */
    struct mmeLocationReport *pdu_LocationReport;  
       /* mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_LocationReport */
    struct mmeOverloadStart *pdu_OverloadStart;  
        /* mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_OverloadStart */
    struct mmeOverloadStop *pdu_OverloadStop;  
         /* mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_OverloadStop */
    struct mmeENBDirectInformationTransfer *pdu_ENBDirectInformationTransfer;                                           /* mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_ENBDirectInformationTransfer */
    struct mmeMMEDirectInformationTransfer *pdu_MMEDirectInformationTransfer;                                           /* mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_MMEDirectInformationTransfer */
    struct mmeENBConfigurationTransfer *pdu_ENBConfigurationTransfer;  
   /* mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_ENBConfigurationTransfer */
    struct mmeMMEConfigurationTransfer *pdu_MMEConfigurationTransfer;  
   /* mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_MMEConfigurationTransfer */
    struct mmePrivateMessage *pdu_PrivateMessage;  
       /* mmePDU_S1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_PrivateMessage */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeS1AP_ELEMENTARY_PROCEDURES_InitiatingMessage {
    mmeS1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_PDUs pduNum;
    OssBuf          encoded;
    mmeS1AP_ELEMENTARY_PROCEDURES_InitiatingMessage_union decoded;
} mmeS1AP_ELEMENTARY_PROCEDURES_InitiatingMessage;

typedef struct mmeInitiatingMessage {
    mmeProcedureCode procedureCode;
    mmeCriticality  criticality;
    mmeS1AP_ELEMENTARY_PROCEDURES_InitiatingMessage value;
} mmeInitiatingMessage;

enum mmeS1AP_ELEMENTARY_PROCEDURES_SuccessfulOutcome_PDUs {
    mmePDU_S1AP_ELEMENTARY_PROCEDURES_SuccessfulOutcome_UNKNOWN = 0,

    mmePDU_S1AP_ELEMENTARY_PROCEDURES_SuccessfulOutcome_HandoverCommand = mmeHandoverCommand_PDU,
    mmePDU_S1AP_ELEMENTARY_PROCEDURES_SuccessfulOutcome_HandoverRequestAcknowledge = mmeHandoverRequestAcknowledge_PDU,
    mmePDU_S1AP_ELEMENTARY_PROCEDURES_SuccessfulOutcome_PathSwitchRequestAcknowledge = mmePathSwitchRequestAcknowledge_PDU,
    mmePDU_S1AP_ELEMENTARY_PROCEDURES_SuccessfulOutcome_E_RABSetupResponse = mmeE_RABSetupResponse_PDU,
    mmePDU_S1AP_ELEMENTARY_PROCEDURES_SuccessfulOutcome_E_RABModifyResponse = mmeE_RABModifyResponse_PDU,
    mmePDU_S1AP_ELEMENTARY_PROCEDURES_SuccessfulOutcome_E_RABReleaseResponse = mmeE_RABReleaseResponse_PDU,
    mmePDU_S1AP_ELEMENTARY_PROCEDURES_SuccessfulOutcome_InitialContextSetupResponse = mmeInitialContextSetupResponse_PDU,
    mmePDU_S1AP_ELEMENTARY_PROCEDURES_SuccessfulOutcome_HandoverCancelAcknowledge = mmeHandoverCancelAcknowledge_PDU,
    mmePDU_S1AP_ELEMENTARY_PROCEDURES_SuccessfulOutcome_KillResponse = mmeKillResponse_PDU,
    mmePDU_S1AP_ELEMENTARY_PROCEDURES_SuccessfulOutcome_ResetAcknowledge = mmeResetAcknowledge_PDU,
    mmePDU_S1AP_ELEMENTARY_PROCEDURES_SuccessfulOutcome_S1SetupResponse = mmeS1SetupResponse_PDU,
    mmePDU_S1AP_ELEMENTARY_PROCEDURES_SuccessfulOutcome_UEContextModificationResponse = mmeUEContextModificationResponse_PDU,
    mmePDU_S1AP_ELEMENTARY_PROCEDURES_SuccessfulOutcome_UEContextReleaseComplete = mmeUEContextReleaseComplete_PDU,
    mmePDU_S1AP_ELEMENTARY_PROCEDURES_SuccessfulOutcome_ENBConfigurationUpdateAcknowledge = mmeENBConfigurationUpdateAcknowledge_PDU,
    mmePDU_S1AP_ELEMENTARY_PROCEDURES_SuccessfulOutcome_MMEConfigurationUpdateAcknowledge = mmeMMEConfigurationUpdateAcknowledge_PDU,
    mmePDU_S1AP_ELEMENTARY_PROCEDURES_SuccessfulOutcome_WriteReplaceWarningResponse = mmeWriteReplaceWarningResponse_PDU,

    mmePDU_S1AP_ELEMENTARY_PROCEDURES_SuccessfulOutcome_MAX = INT_MAX
};

union mmeS1AP_ELEMENTARY_PROCEDURES_SuccessfulOutcome_union {
    struct mmeHandoverCommand *pdu_HandoverCommand;  
      /* mmePDU_S1AP_ELEMENTARY_PROCEDURES_SuccessfulOutcome_HandoverCommand */
    struct mmeHandoverRequestAcknowledge *pdu_HandoverRequestAcknowledge;  
                                        /* mmePDU_S1AP_ELEMENTARY_PROCEDURES_SuccessfulOutcome_HandoverRequestAcknowledge */
    struct mmePathSwitchRequestAcknowledge *pdu_PathSwitchRequestAcknowledge;                                           /* mmePDU_S1AP_ELEMENTARY_PROCEDURES_SuccessfulOutcome_PathSwitchRequestAcknowledge */
    struct mmeE_RABSetupResponse *pdu_E_RABSetupResponse;  
   /* mmePDU_S1AP_ELEMENTARY_PROCEDURES_SuccessfulOutcome_E_RABSetupResponse */
    struct mmeE_RABModifyResponse *pdu_E_RABModifyResponse;  
  /* mmePDU_S1AP_ELEMENTARY_PROCEDURES_SuccessfulOutcome_E_RABModifyResponse */
    struct mmeE_RABReleaseResponse *pdu_E_RABReleaseResponse;  
 /* mmePDU_S1AP_ELEMENTARY_PROCEDURES_SuccessfulOutcome_E_RABReleaseResponse */
    struct mmeInitialContextSetupResponse *pdu_InitialContextSetupResponse;  
                                        /* mmePDU_S1AP_ELEMENTARY_PROCEDURES_SuccessfulOutcome_InitialContextSetupResponse */
    struct mmeHandoverCancelAcknowledge *pdu_HandoverCancelAcknowledge;  
    /* mmePDU_S1AP_ELEMENTARY_PROCEDURES_SuccessfulOutcome_HandoverCancelAcknowledge */
    struct mmeKillResponse *pdu_KillResponse;  
         /* mmePDU_S1AP_ELEMENTARY_PROCEDURES_SuccessfulOutcome_KillResponse */
    struct mmeResetAcknowledge *pdu_ResetAcknowledge;  
     /* mmePDU_S1AP_ELEMENTARY_PROCEDURES_SuccessfulOutcome_ResetAcknowledge */
    struct mmeS1SetupResponse *pdu_S1SetupResponse;  
      /* mmePDU_S1AP_ELEMENTARY_PROCEDURES_SuccessfulOutcome_S1SetupResponse */
    struct mmeUEContextModificationResponse *pdu_UEContextModificationResponse;                                         /* mmePDU_S1AP_ELEMENTARY_PROCEDURES_SuccessfulOutcome_UEContextModificationResponse */
    struct mmeUEContextReleaseComplete *pdu_UEContextReleaseComplete;  
   /* mmePDU_S1AP_ELEMENTARY_PROCEDURES_SuccessfulOutcome_UEContextReleaseComplete */
    struct mmeENBConfigurationUpdateAcknowledge *pdu_ENBConfigurationUpdateAcknowledge;                                 /* mmePDU_S1AP_ELEMENTARY_PROCEDURES_SuccessfulOutcome_ENBConfigurationUpdateAcknowledge */
    struct mmeMMEConfigurationUpdateAcknowledge *pdu_MMEConfigurationUpdateAcknowledge;                                 /* mmePDU_S1AP_ELEMENTARY_PROCEDURES_SuccessfulOutcome_MMEConfigurationUpdateAcknowledge */
    struct mmeWriteReplaceWarningResponse *pdu_WriteReplaceWarningResponse;  
                                        /* mmePDU_S1AP_ELEMENTARY_PROCEDURES_SuccessfulOutcome_WriteReplaceWarningResponse */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeS1AP_ELEMENTARY_PROCEDURES_SuccessfulOutcome {
    mmeS1AP_ELEMENTARY_PROCEDURES_SuccessfulOutcome_PDUs pduNum;
    OssBuf          encoded;
    mmeS1AP_ELEMENTARY_PROCEDURES_SuccessfulOutcome_union decoded;
} mmeS1AP_ELEMENTARY_PROCEDURES_SuccessfulOutcome;

typedef struct mmeSuccessfulOutcome {
    mmeProcedureCode procedureCode;
    mmeCriticality  criticality;
    mmeS1AP_ELEMENTARY_PROCEDURES_SuccessfulOutcome value;
} mmeSuccessfulOutcome;

enum mmeS1AP_ELEMENTARY_PROCEDURES_UnsuccessfulOutcome_PDUs {
    mmePDU_S1AP_ELEMENTARY_PROCEDURES_UnsuccessfulOutcome_UNKNOWN = 0,

    mmePDU_S1AP_ELEMENTARY_PROCEDURES_UnsuccessfulOutcome_HandoverPreparationFailure = mmeHandoverPreparationFailure_PDU,
    mmePDU_S1AP_ELEMENTARY_PROCEDURES_UnsuccessfulOutcome_HandoverFailure = mmeHandoverFailure_PDU,
    mmePDU_S1AP_ELEMENTARY_PROCEDURES_UnsuccessfulOutcome_PathSwitchRequestFailure = mmePathSwitchRequestFailure_PDU,
    mmePDU_S1AP_ELEMENTARY_PROCEDURES_UnsuccessfulOutcome_InitialContextSetupFailure = mmeInitialContextSetupFailure_PDU,
    mmePDU_S1AP_ELEMENTARY_PROCEDURES_UnsuccessfulOutcome_S1SetupFailure = mmeS1SetupFailure_PDU,
    mmePDU_S1AP_ELEMENTARY_PROCEDURES_UnsuccessfulOutcome_UEContextModificationFailure = mmeUEContextModificationFailure_PDU,
    mmePDU_S1AP_ELEMENTARY_PROCEDURES_UnsuccessfulOutcome_ENBConfigurationUpdateFailure = mmeENBConfigurationUpdateFailure_PDU,
    mmePDU_S1AP_ELEMENTARY_PROCEDURES_UnsuccessfulOutcome_MMEConfigurationUpdateFailure = mmeMMEConfigurationUpdateFailure_PDU,

    mmePDU_S1AP_ELEMENTARY_PROCEDURES_UnsuccessfulOutcome_MAX = INT_MAX
};

union mmeS1AP_ELEMENTARY_PROCEDURES_UnsuccessfulOutcome_union {
    struct mmeHandoverPreparationFailure *pdu_HandoverPreparationFailure;  
                                        /* mmePDU_S1AP_ELEMENTARY_PROCEDURES_UnsuccessfulOutcome_HandoverPreparationFailure */
    struct mmeHandoverFailure *pdu_HandoverFailure;  
    /* mmePDU_S1AP_ELEMENTARY_PROCEDURES_UnsuccessfulOutcome_HandoverFailure */
    struct mmePathSwitchRequestFailure *pdu_PathSwitchRequestFailure;  
     /* mmePDU_S1AP_ELEMENTARY_PROCEDURES_UnsuccessfulOutcome_PathSwitchRequestFailure */
    struct mmeInitialContextSetupFailure *pdu_InitialContextSetupFailure;  
                                        /* mmePDU_S1AP_ELEMENTARY_PROCEDURES_UnsuccessfulOutcome_InitialContextSetupFailure */
    struct mmeS1SetupFailure *pdu_S1SetupFailure;  
     /* mmePDU_S1AP_ELEMENTARY_PROCEDURES_UnsuccessfulOutcome_S1SetupFailure */
    struct mmeUEContextModificationFailure *pdu_UEContextModificationFailure;                                           /* mmePDU_S1AP_ELEMENTARY_PROCEDURES_UnsuccessfulOutcome_UEContextModificationFailure */
    struct mmeENBConfigurationUpdateFailure *pdu_ENBConfigurationUpdateFailure;                                         /* mmePDU_S1AP_ELEMENTARY_PROCEDURES_UnsuccessfulOutcome_ENBConfigurationUpdateFailure */
    struct mmeMMEConfigurationUpdateFailure *pdu_MMEConfigurationUpdateFailure;                                         /* mmePDU_S1AP_ELEMENTARY_PROCEDURES_UnsuccessfulOutcome_MMEConfigurationUpdateFailure */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeS1AP_ELEMENTARY_PROCEDURES_UnsuccessfulOutcome {
    mmeS1AP_ELEMENTARY_PROCEDURES_UnsuccessfulOutcome_PDUs pduNum;
    OssBuf          encoded;
    mmeS1AP_ELEMENTARY_PROCEDURES_UnsuccessfulOutcome_union decoded;
} mmeS1AP_ELEMENTARY_PROCEDURES_UnsuccessfulOutcome;

typedef struct mmeUnsuccessfulOutcome {
    mmeProcedureCode procedureCode;
    mmeCriticality  criticality;
    mmeS1AP_ELEMENTARY_PROCEDURES_UnsuccessfulOutcome value;
} mmeUnsuccessfulOutcome;

// **************************************************************
//
// Interface PDU Definition
//
// **************************************************************
typedef struct mmeS1AP_PDU {
    unsigned short  choice;
#       define      mmeinitiatingMessage_chosen 1
#       define      mmesuccessfulOutcome_chosen 2
#       define      mmeunsuccessfulOutcome_chosen 3
    union _union {
        mmeInitiatingMessage initiatingMessage;  /* to choose, set choice to
                                               * mmeinitiatingMessage_chosen */
        mmeSuccessfulOutcome successfulOutcome;  /* to choose, set choice to
                                               * mmesuccessfulOutcome_chosen */
        mmeUnsuccessfulOutcome unsuccessfulOutcome;  /* to choose, set choice to
                                             * mmeunsuccessfulOutcome_chosen */
    } u;
} mmeS1AP_PDU;

typedef unsigned short  mmeProtocolIE_ID;

enum mmeHandoverRequiredIEs_Value_PDUs {
    mmePDU_HandoverRequiredIEs_Value_UNKNOWN = 0,

    mmePDU_HandoverRequiredIEs_Value_MME_UE_S1AP_ID = mmeMME_UE_S1AP_ID_PDU,
    mmePDU_HandoverRequiredIEs_Value_ENB_UE_S1AP_ID = mmeENB_UE_S1AP_ID_PDU,
    mmePDU_HandoverRequiredIEs_Value_HandoverType = mmeHandoverType_PDU,
    mmePDU_HandoverRequiredIEs_Value_Cause = mmeCause_PDU,
    mmePDU_HandoverRequiredIEs_Value_TargetID = mmeTargetID_PDU,
    mmePDU_HandoverRequiredIEs_Value_Direct_Forwarding_Path_Availability = mmeDirect_Forwarding_Path_Availability_PDU,
    mmePDU_HandoverRequiredIEs_Value_SRVCCHOIndication = mmeSRVCCHOIndication_PDU,
    mmePDU_HandoverRequiredIEs_Value_Source_ToTarget_TransparentContainer = mmeSource_ToTarget_TransparentContainer_PDU,
    mmePDU_HandoverRequiredIEs_Value_MSClassmark2 = mmeMSClassmark2_PDU,
    mmePDU_HandoverRequiredIEs_Value_MSClassmark3 = mmeMSClassmark3_PDU,
    mmePDU_HandoverRequiredIEs_Value_CSG_Id = mmeCSG_Id_PDU,
    mmePDU_HandoverRequiredIEs_Value_CellAccessMode = mmeCellAccessMode_PDU,
    mmePDU_HandoverRequiredIEs_Value_PS_ServiceNotAvailable = mmePS_ServiceNotAvailable_PDU,

    mmePDU_HandoverRequiredIEs_Value_MAX = INT_MAX
};

union mmeHandoverRequiredIEs_Value_union {
    mmeMME_UE_S1AP_ID *pdu_MME_UE_S1AP_ID;  
                          /* mmePDU_HandoverRequiredIEs_Value_MME_UE_S1AP_ID */
    mmeENB_UE_S1AP_ID *pdu_ENB_UE_S1AP_ID;  
                          /* mmePDU_HandoverRequiredIEs_Value_ENB_UE_S1AP_ID */
    mmeHandoverType *pdu_HandoverType;  
                            /* mmePDU_HandoverRequiredIEs_Value_HandoverType */
    struct mmeCause *pdu_Cause;  /* mmePDU_HandoverRequiredIEs_Value_Cause */
    struct mmeTargetID *pdu_TargetID;  
                                /* mmePDU_HandoverRequiredIEs_Value_TargetID */
    mmeDirect_Forwarding_Path_Availability *pdu_Direct_Forwarding_Path_Availability;                                    /* mmePDU_HandoverRequiredIEs_Value_Direct_Forwarding_Path_Availability */
    mmeSRVCCHOIndication *pdu_SRVCCHOIndication;  
                       /* mmePDU_HandoverRequiredIEs_Value_SRVCCHOIndication */
    struct mmeSource_ToTarget_TransparentContainer *pdu_Source_ToTarget_TransparentContainer;                           /* mmePDU_HandoverRequiredIEs_Value_Source_ToTarget_TransparentContainer */
    struct mmeMSClassmark2 *pdu_MSClassmark2;  
                            /* mmePDU_HandoverRequiredIEs_Value_MSClassmark2 */
    struct mmeMSClassmark3 *pdu_MSClassmark3;  
                            /* mmePDU_HandoverRequiredIEs_Value_MSClassmark3 */
    struct mmeCSG_Id *pdu_CSG_Id;  
                                  /* mmePDU_HandoverRequiredIEs_Value_CSG_Id */
    mmeCellAccessMode *pdu_CellAccessMode;  
                          /* mmePDU_HandoverRequiredIEs_Value_CellAccessMode */
    mmePS_ServiceNotAvailable *pdu_PS_ServiceNotAvailable;  
                  /* mmePDU_HandoverRequiredIEs_Value_PS_ServiceNotAvailable */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeHandoverRequiredIEs_Value {
    mmeHandoverRequiredIEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeHandoverRequiredIEs_Value_union decoded;
} mmeHandoverRequiredIEs_Value;

// **************************************************************
//
// HANDOVER PREPARATION ELEMENTARY PROCEDURE
//
// **************************************************************

// **************************************************************
//
// Handover Required
//
// **************************************************************
typedef struct mmeHandoverRequired {
    struct mme_seqof1 {
        struct mme_seqof1 *next;
        struct mme_seq1 {
            mmeProtocolIE_ID id;
            mmeCriticality  criticality;
            mmeHandoverRequiredIEs_Value value;
        } value;
    } *protocolIEs;
} mmeHandoverRequired;

enum mmeHandoverCommandIEs_Value_PDUs {
    mmePDU_HandoverCommandIEs_Value_UNKNOWN = 0,

    mmePDU_HandoverCommandIEs_Value_MME_UE_S1AP_ID = mmeMME_UE_S1AP_ID_PDU,
    mmePDU_HandoverCommandIEs_Value_ENB_UE_S1AP_ID = mmeENB_UE_S1AP_ID_PDU,
    mmePDU_HandoverCommandIEs_Value_HandoverType = mmeHandoverType_PDU,
    mmePDU_HandoverCommandIEs_Value_NASSecurityParametersfromE_UTRAN = mmeNASSecurityParametersfromE_UTRAN_PDU,
    mmePDU_HandoverCommandIEs_Value_E_RABSubjecttoDataForwardingList = mmeE_RABSubjecttoDataForwardingList_PDU,
    mmePDU_HandoverCommandIEs_Value_E_RABList = mmeE_RABList_PDU,
    mmePDU_HandoverCommandIEs_Value_Target_ToSource_TransparentContainer = mmeTarget_ToSource_TransparentContainer_PDU,
    mmePDU_HandoverCommandIEs_Value_CriticalityDiagnostics = mmeCriticalityDiagnostics_PDU,

    mmePDU_HandoverCommandIEs_Value_MAX = INT_MAX
};

union mmeHandoverCommandIEs_Value_union {
    mmeMME_UE_S1AP_ID *pdu_MME_UE_S1AP_ID;  
                           /* mmePDU_HandoverCommandIEs_Value_MME_UE_S1AP_ID */
    mmeENB_UE_S1AP_ID *pdu_ENB_UE_S1AP_ID;  
                           /* mmePDU_HandoverCommandIEs_Value_ENB_UE_S1AP_ID */
    mmeHandoverType *pdu_HandoverType;  
                             /* mmePDU_HandoverCommandIEs_Value_HandoverType */
    struct mmeNASSecurityParametersfromE_UTRAN *pdu_NASSecurityParametersfromE_UTRAN;                                   /* mmePDU_HandoverCommandIEs_Value_NASSecurityParametersfromE_UTRAN */
    struct mmeE_RABSubjecttoDataForwardingList_ **pdu_E_RABSubjecttoDataForwardingList;                                 /* mmePDU_HandoverCommandIEs_Value_E_RABSubjecttoDataForwardingList */
    struct mmeE_RABList_ **pdu_E_RABList;  
                                /* mmePDU_HandoverCommandIEs_Value_E_RABList */
    struct mmeTarget_ToSource_TransparentContainer *pdu_Target_ToSource_TransparentContainer;                           /* mmePDU_HandoverCommandIEs_Value_Target_ToSource_TransparentContainer */
    struct mmeCriticalityDiagnostics *pdu_CriticalityDiagnostics;  
                   /* mmePDU_HandoverCommandIEs_Value_CriticalityDiagnostics */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeHandoverCommandIEs_Value {
    mmeHandoverCommandIEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeHandoverCommandIEs_Value_union decoded;
} mmeHandoverCommandIEs_Value;

// **************************************************************
//
// Handover Command
//
// **************************************************************
typedef struct mmeHandoverCommand {
    struct mme_seqof2 {
        struct mme_seqof2 *next;
        struct mme_seq2 {
            mmeProtocolIE_ID id;
            mmeCriticality  criticality;
            mmeHandoverCommandIEs_Value value;
        } value;
    } *protocolIEs;
} mmeHandoverCommand;

enum mmeE_RABDataForwardingItemIEs_Value_PDUs {
    mmePDU_E_RABDataForwardingItemIEs_Value_UNKNOWN = 0,

    mmePDU_E_RABDataForwardingItemIEs_Value_E_RABDataForwardingItem = mmeE_RABDataForwardingItem_PDU,

    mmePDU_E_RABDataForwardingItemIEs_Value_MAX = INT_MAX
};

union mmeE_RABDataForwardingItemIEs_Value_union {
    struct mmeE_RABDataForwardingItem *pdu_E_RABDataForwardingItem;  
          /* mmePDU_E_RABDataForwardingItemIEs_Value_E_RABDataForwardingItem */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeE_RABDataForwardingItemIEs_Value {
    mmeE_RABDataForwardingItemIEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeE_RABDataForwardingItemIEs_Value_union decoded;
} mmeE_RABDataForwardingItemIEs_Value;

typedef struct mmeE_RABSubjecttoDataForwardingList_ {
    struct mmeE_RABSubjecttoDataForwardingList_ *next;
    struct mme_seq3 {
        mmeProtocolIE_ID id;
        mmeCriticality  criticality;
        mmeE_RABDataForwardingItemIEs_Value value;
    } value;
} *mmeE_RABSubjecttoDataForwardingList;

typedef long            mmeE_RAB_ID;

typedef struct mmeTransportLayerAddress {
    unsigned short  length;  /* number of significant bits */
    unsigned char   *value;
} mmeTransportLayerAddress;

typedef struct mmeGTP_TEID {
    unsigned short  length;
    unsigned char   value[4];
} mmeGTP_TEID;

typedef unsigned short  mmeProtocolExtensionID;

enum mmeE_RABDataForwardingItem_ExtIEs_Extension_PDUs {
    mmePDU_E_RABDataForwardingItem_ExtIEs_Extension_UNKNOWN = 0,
    mmePDU_E_RABDataForwardingItem_ExtIEs_Extension_MAX = INT_MAX
};

union mmeE_RABDataForwardingItem_ExtIEs_Extension_union {
    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeE_RABDataForwardingItem_ExtIEs_Extension {
    mmeE_RABDataForwardingItem_ExtIEs_Extension_PDUs pduNum;
    OssBuf          encoded;
    mmeE_RABDataForwardingItem_ExtIEs_Extension_union decoded;
} mmeE_RABDataForwardingItem_ExtIEs_Extension;

typedef struct mme_seq4 {
    mmeProtocolExtensionID id;
    mmeCriticality  criticality;
    mmeE_RABDataForwardingItem_ExtIEs_Extension extensionValue;
} mme_seq4;

typedef struct mme_seqof3_ {
    struct mme_seqof3_ *next;
    mme_seq4        value;
} *mme_seqof3;

typedef struct mmeE_RABDataForwardingItem {
    unsigned char   bit_mask;
#       define      mmeE_RABDataForwardingItem_dL_transportLayerAddress_present 0x80
#       define      mmeE_RABDataForwardingItem_dL_gTP_TEID_present 0x40
#       define      mmeE_RABDataForwardingItem_uL_TransportLayerAddress_present 0x20
#       define      mmeE_RABDataForwardingItem_uL_GTP_TEID_present 0x10
#       define      mmeE_RABDataForwardingItem_iE_Extensions_present 0x08
    mmeE_RAB_ID     e_RAB_ID;
    mmeTransportLayerAddress dL_transportLayerAddress;  /* optional; set in
                                   * bit_mask
               * mmeE_RABDataForwardingItem_dL_transportLayerAddress_present if
               * present */
    mmeGTP_TEID     dL_gTP_TEID;  /* optional; set in bit_mask
                            * mmeE_RABDataForwardingItem_dL_gTP_TEID_present if
                            * present */
    mmeTransportLayerAddress uL_TransportLayerAddress;  /* optional; set in
                                   * bit_mask
               * mmeE_RABDataForwardingItem_uL_TransportLayerAddress_present if
               * present */
    mmeGTP_TEID     uL_GTP_TEID;  /* optional; set in bit_mask
                            * mmeE_RABDataForwardingItem_uL_GTP_TEID_present if
                            * present */
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                          * mmeE_RABDataForwardingItem_iE_Extensions_present if
                          * present */
} mmeE_RABDataForwardingItem;

enum mmeHandoverPreparationFailureIEs_Value_PDUs {
    mmePDU_HandoverPreparationFailureIEs_Value_UNKNOWN = 0,

    mmePDU_HandoverPreparationFailureIEs_Value_MME_UE_S1AP_ID = mmeMME_UE_S1AP_ID_PDU,
    mmePDU_HandoverPreparationFailureIEs_Value_ENB_UE_S1AP_ID = mmeENB_UE_S1AP_ID_PDU,
    mmePDU_HandoverPreparationFailureIEs_Value_Cause = mmeCause_PDU,
    mmePDU_HandoverPreparationFailureIEs_Value_CriticalityDiagnostics = mmeCriticalityDiagnostics_PDU,

    mmePDU_HandoverPreparationFailureIEs_Value_MAX = INT_MAX
};

union mmeHandoverPreparationFailureIEs_Value_union {
    mmeMME_UE_S1AP_ID *pdu_MME_UE_S1AP_ID;  
                /* mmePDU_HandoverPreparationFailureIEs_Value_MME_UE_S1AP_ID */
    mmeENB_UE_S1AP_ID *pdu_ENB_UE_S1AP_ID;  
                /* mmePDU_HandoverPreparationFailureIEs_Value_ENB_UE_S1AP_ID */
    struct mmeCause *pdu_Cause;  
                         /* mmePDU_HandoverPreparationFailureIEs_Value_Cause */
    struct mmeCriticalityDiagnostics *pdu_CriticalityDiagnostics;  
        /* mmePDU_HandoverPreparationFailureIEs_Value_CriticalityDiagnostics */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeHandoverPreparationFailureIEs_Value {
    mmeHandoverPreparationFailureIEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeHandoverPreparationFailureIEs_Value_union decoded;
} mmeHandoverPreparationFailureIEs_Value;

typedef struct mme_seq5 {
    mmeProtocolIE_ID id;
    mmeCriticality  criticality;
    mmeHandoverPreparationFailureIEs_Value value;
} mme_seq5;

typedef struct mme_seqof4_ {
    struct mme_seqof4_ *next;
    mme_seq5        value;
} *mme_seqof4;

// **************************************************************
//
// Handover Preparation Failure
//
// **************************************************************
typedef struct mmeHandoverPreparationFailure {
    struct mme_seqof4_ *protocolIEs;
} mmeHandoverPreparationFailure;

enum mmeHandoverRequestIEs_Value_PDUs {
    mmePDU_HandoverRequestIEs_Value_UNKNOWN = 0,

    mmePDU_HandoverRequestIEs_Value_MME_UE_S1AP_ID = mmeMME_UE_S1AP_ID_PDU,
    mmePDU_HandoverRequestIEs_Value_HandoverType = mmeHandoverType_PDU,
    mmePDU_HandoverRequestIEs_Value_Cause = mmeCause_PDU,
    mmePDU_HandoverRequestIEs_Value_UEAggregateMaximumBitrate = mmeUEAggregateMaximumBitrate_PDU,
    mmePDU_HandoverRequestIEs_Value_E_RABToBeSetupListHOReq = mmeE_RABToBeSetupListHOReq_PDU,
    mmePDU_HandoverRequestIEs_Value_Source_ToTarget_TransparentContainer = mmeSource_ToTarget_TransparentContainer_PDU,
    mmePDU_HandoverRequestIEs_Value_UESecurityCapabilities = mmeUESecurityCapabilities_PDU,
    mmePDU_HandoverRequestIEs_Value_HandoverRestrictionList = mmeHandoverRestrictionList_PDU,
    mmePDU_HandoverRequestIEs_Value_TraceActivation = mmeTraceActivation_PDU,
    mmePDU_HandoverRequestIEs_Value_RequestType = mmeRequestType_PDU,
    mmePDU_HandoverRequestIEs_Value_SRVCCOperationPossible = mmeSRVCCOperationPossible_PDU,
    mmePDU_HandoverRequestIEs_Value_SecurityContext = mmeSecurityContext_PDU,
    mmePDU_HandoverRequestIEs_Value_NASSecurityParameterstoE_UTRAN = mmeNASSecurityParameterstoE_UTRAN_PDU,
    mmePDU_HandoverRequestIEs_Value_CSG_Id = mmeCSG_Id_PDU,
    mmePDU_HandoverRequestIEs_Value_CSGMembershipStatus = mmeCSGMembershipStatus_PDU,
    mmePDU_HandoverRequestIEs_Value_GUMMEI = mmeGUMMEI_PDU,
    mmePDU_HandoverRequestIEs_Value_ManagementBasedMDTAllowed = mmeManagementBasedMDTAllowed_PDU,
    mmePDU_HandoverRequestIEs_Value_MDTPLMNList = mmeMDTPLMNList_PDU,
    mmePDU_HandoverRequestIEs_Value_Masked_IMEISV = mmeMasked_IMEISV_PDU,
    mmePDU_HandoverRequestIEs_Value_ExpectedUEBehaviour = mmeExpectedUEBehaviour_PDU,
    mmePDU_HandoverRequestIEs_Value_ProSeAuthorized = mmeProSeAuthorized_PDU,

    mmePDU_HandoverRequestIEs_Value_MAX = INT_MAX
};

union mmeHandoverRequestIEs_Value_union {
    mmeMME_UE_S1AP_ID *pdu_MME_UE_S1AP_ID;  
                           /* mmePDU_HandoverRequestIEs_Value_MME_UE_S1AP_ID */
    mmeHandoverType *pdu_HandoverType;  
                             /* mmePDU_HandoverRequestIEs_Value_HandoverType */
    struct mmeCause *pdu_Cause;  /* mmePDU_HandoverRequestIEs_Value_Cause */
    struct mmeUEAggregateMaximumBitrate *pdu_UEAggregateMaximumBitrate;  
                /* mmePDU_HandoverRequestIEs_Value_UEAggregateMaximumBitrate */
    struct mmeE_RABToBeSetupListHOReq_ **pdu_E_RABToBeSetupListHOReq;  
                  /* mmePDU_HandoverRequestIEs_Value_E_RABToBeSetupListHOReq */
    struct mmeSource_ToTarget_TransparentContainer *pdu_Source_ToTarget_TransparentContainer;                           /* mmePDU_HandoverRequestIEs_Value_Source_ToTarget_TransparentContainer */
    struct mmeUESecurityCapabilities *pdu_UESecurityCapabilities;  
                   /* mmePDU_HandoverRequestIEs_Value_UESecurityCapabilities */
    struct mmeHandoverRestrictionList *pdu_HandoverRestrictionList;  
                  /* mmePDU_HandoverRequestIEs_Value_HandoverRestrictionList */
    struct mmeTraceActivation *pdu_TraceActivation;  
                          /* mmePDU_HandoverRequestIEs_Value_TraceActivation */
    struct mmeRequestType *pdu_RequestType;  
                              /* mmePDU_HandoverRequestIEs_Value_RequestType */
    mmeSRVCCOperationPossible *pdu_SRVCCOperationPossible;  
                   /* mmePDU_HandoverRequestIEs_Value_SRVCCOperationPossible */
    struct mmeSecurityContext *pdu_SecurityContext;  
                          /* mmePDU_HandoverRequestIEs_Value_SecurityContext */
    struct mmeNASSecurityParameterstoE_UTRAN *pdu_NASSecurityParameterstoE_UTRAN;                                       /* mmePDU_HandoverRequestIEs_Value_NASSecurityParameterstoE_UTRAN */
    struct mmeCSG_Id *pdu_CSG_Id;  /* mmePDU_HandoverRequestIEs_Value_CSG_Id */
    mmeCSGMembershipStatus *pdu_CSGMembershipStatus;  
                      /* mmePDU_HandoverRequestIEs_Value_CSGMembershipStatus */
    struct mmeGUMMEI *pdu_GUMMEI;  /* mmePDU_HandoverRequestIEs_Value_GUMMEI */
    mmeManagementBasedMDTAllowed *pdu_ManagementBasedMDTAllowed;  
                /* mmePDU_HandoverRequestIEs_Value_ManagementBasedMDTAllowed */
    struct mmeMDTPLMNList_ **pdu_MDTPLMNList;  
                              /* mmePDU_HandoverRequestIEs_Value_MDTPLMNList */
    struct mmeMasked_IMEISV *pdu_Masked_IMEISV;  
                            /* mmePDU_HandoverRequestIEs_Value_Masked_IMEISV */
    struct mmeExpectedUEBehaviour *pdu_ExpectedUEBehaviour;  
                      /* mmePDU_HandoverRequestIEs_Value_ExpectedUEBehaviour */
    struct mmeProSeAuthorized *pdu_ProSeAuthorized;  
                          /* mmePDU_HandoverRequestIEs_Value_ProSeAuthorized */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeHandoverRequestIEs_Value {
    mmeHandoverRequestIEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeHandoverRequestIEs_Value_union decoded;
} mmeHandoverRequestIEs_Value;

// **************************************************************
//
// HANDOVER RESOURCE ALLOCATION ELEMENTARY PROCEDURE
//
// **************************************************************

// **************************************************************
//
// Handover Request
//
// **************************************************************
typedef struct mmeHandoverRequest {
    struct mme_seqof5 {
        struct mme_seqof5 *next;
        struct mme_seq6 {
            mmeProtocolIE_ID id;
            mmeCriticality  criticality;
            mmeHandoverRequestIEs_Value value;
        } value;
    } *protocolIEs;
} mmeHandoverRequest;

enum mmeE_RABToBeSetupItemHOReqIEs_Value_PDUs {
    mmePDU_E_RABToBeSetupItemHOReqIEs_Value_UNKNOWN = 0,

    mmePDU_E_RABToBeSetupItemHOReqIEs_Value_E_RABToBeSetupItemHOReq = mmeE_RABToBeSetupItemHOReq_PDU,

    mmePDU_E_RABToBeSetupItemHOReqIEs_Value_MAX = INT_MAX
};

union mmeE_RABToBeSetupItemHOReqIEs_Value_union {
    struct mmeE_RABToBeSetupItemHOReq *pdu_E_RABToBeSetupItemHOReq;  
          /* mmePDU_E_RABToBeSetupItemHOReqIEs_Value_E_RABToBeSetupItemHOReq */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeE_RABToBeSetupItemHOReqIEs_Value {
    mmeE_RABToBeSetupItemHOReqIEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeE_RABToBeSetupItemHOReqIEs_Value_union decoded;
} mmeE_RABToBeSetupItemHOReqIEs_Value;

typedef struct mmeE_RABToBeSetupListHOReq_ {
    struct mmeE_RABToBeSetupListHOReq_ *next;
    struct mme_seq7 {
        mmeProtocolIE_ID id;
        mmeCriticality  criticality;
        mmeE_RABToBeSetupItemHOReqIEs_Value value;
    } value;
} *mmeE_RABToBeSetupListHOReq;

// Q
typedef unsigned short  mmeQCI;

typedef unsigned short  mmePriorityLevel;
#define                     mmespare 0U
#define                     mmehighest 1U
#define                     mmelowest 14U
#define                     mmeno_priority 15U

typedef enum mmePre_emptionCapability {
    mmeshall_not_trigger_pre_emption = 0,
    mmemay_trigger_pre_emption = 1
} mmePre_emptionCapability;

typedef enum mmePre_emptionVulnerability {
    mmenot_pre_emptable = 0,
    mmepre_emptable = 1
} mmePre_emptionVulnerability;

typedef struct mmeAllocationAndRetentionPriority {
    unsigned char   bit_mask;
#       define      mmeAllocationAndRetentionPriority_iE_Extensions_present 0x80
    mmePriorityLevel priorityLevel;
    mmePre_emptionCapability pre_emptionCapability;
    mmePre_emptionVulnerability pre_emptionVulnerability;
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                   * mmeAllocationAndRetentionPriority_iE_Extensions_present if
                   * present */
} mmeAllocationAndRetentionPriority;

typedef unsigned long   mmeBitRate;

// G
typedef struct mmeGBR_QosInformation {
    unsigned char   bit_mask;
#       define      mmeGBR_QosInformation_iE_Extensions_present 0x80
    mmeBitRate      e_RAB_MaximumBitrateDL;
    mmeBitRate      e_RAB_MaximumBitrateUL;
    mmeBitRate      e_RAB_GuaranteedBitrateDL;
    mmeBitRate      e_RAB_GuaranteedBitrateUL;
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                               * mmeGBR_QosInformation_iE_Extensions_present if
                               * present */
} mmeGBR_QosInformation;

typedef struct mmeE_RABLevelQoSParameters {
    unsigned char   bit_mask;
#       define      mmegbrQosInformation_present 0x80
#       define      mmeE_RABLevelQoSParameters_iE_Extensions_present 0x40
    mmeQCI          qCI;
    mmeAllocationAndRetentionPriority allocationRetentionPriority;
    mmeGBR_QosInformation gbrQosInformation;  /* optional; set in bit_mask
                                               * mmegbrQosInformation_present if
                                               * present */
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                          * mmeE_RABLevelQoSParameters_iE_Extensions_present if
                          * present */
} mmeE_RABLevelQoSParameters;

enum mmeE_RABToBeSetupItemHOReq_ExtIEs_Extension_PDUs {
    mmePDU_E_RABToBeSetupItemHOReq_ExtIEs_Extension_UNKNOWN = 0,

    mmePDU_E_RABToBeSetupItemHOReq_ExtIEs_Extension_Data_Forwarding_Not_Possible = mmeData_Forwarding_Not_Possible_PDU,

    mmePDU_E_RABToBeSetupItemHOReq_ExtIEs_Extension_MAX = INT_MAX
};

union mmeE_RABToBeSetupItemHOReq_ExtIEs_Extension_union {
    mmeData_Forwarding_Not_Possible *pdu_Data_Forwarding_Not_Possible;  
   /* mmePDU_E_RABToBeSetupItemHOReq_ExtIEs_Extension_Data_Forwarding_Not_Possible */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeE_RABToBeSetupItemHOReq_ExtIEs_Extension {
    mmeE_RABToBeSetupItemHOReq_ExtIEs_Extension_PDUs pduNum;
    OssBuf          encoded;
    mmeE_RABToBeSetupItemHOReq_ExtIEs_Extension_union decoded;
} mmeE_RABToBeSetupItemHOReq_ExtIEs_Extension;

typedef struct mmeE_RABToBeSetupItemHOReq {
    unsigned char   bit_mask;
#       define      mmeE_RABToBeSetupItemHOReq_iE_Extensions_present 0x80
    mmeE_RAB_ID     e_RAB_ID;
    mmeTransportLayerAddress transportLayerAddress;
    mmeGTP_TEID     gTP_TEID;
    mmeE_RABLevelQoSParameters e_RABlevelQosParameters;
    struct mme_seqof9 {
        struct mme_seqof9 *next;
        struct mme_seq11 {
            mmeProtocolExtensionID id;
            mmeCriticality  criticality;
            mmeE_RABToBeSetupItemHOReq_ExtIEs_Extension extensionValue;
        } value;
    } *iE_Extensions;  /* optional; set in bit_mask
                        * mmeE_RABToBeSetupItemHOReq_iE_Extensions_present if
                        * present */
} mmeE_RABToBeSetupItemHOReq;

enum mmeHandoverRequestAcknowledgeIEs_Value_PDUs {
    mmePDU_HandoverRequestAcknowledgeIEs_Value_UNKNOWN = 0,

    mmePDU_HandoverRequestAcknowledgeIEs_Value_MME_UE_S1AP_ID = mmeMME_UE_S1AP_ID_PDU,
    mmePDU_HandoverRequestAcknowledgeIEs_Value_ENB_UE_S1AP_ID = mmeENB_UE_S1AP_ID_PDU,
    mmePDU_HandoverRequestAcknowledgeIEs_Value_E_RABAdmittedList = mmeE_RABAdmittedList_PDU,
    mmePDU_HandoverRequestAcknowledgeIEs_Value_E_RABFailedtoSetupListHOReqAck = mmeE_RABFailedtoSetupListHOReqAck_PDU,
    mmePDU_HandoverRequestAcknowledgeIEs_Value_Target_ToSource_TransparentContainer = mmeTarget_ToSource_TransparentContainer_PDU,
    mmePDU_HandoverRequestAcknowledgeIEs_Value_CSG_Id = mmeCSG_Id_PDU,
    mmePDU_HandoverRequestAcknowledgeIEs_Value_CriticalityDiagnostics = mmeCriticalityDiagnostics_PDU,
    mmePDU_HandoverRequestAcknowledgeIEs_Value_CellAccessMode = mmeCellAccessMode_PDU,

    mmePDU_HandoverRequestAcknowledgeIEs_Value_MAX = INT_MAX
};

union mmeHandoverRequestAcknowledgeIEs_Value_union {
    mmeMME_UE_S1AP_ID *pdu_MME_UE_S1AP_ID;  
                /* mmePDU_HandoverRequestAcknowledgeIEs_Value_MME_UE_S1AP_ID */
    mmeENB_UE_S1AP_ID *pdu_ENB_UE_S1AP_ID;  
                /* mmePDU_HandoverRequestAcknowledgeIEs_Value_ENB_UE_S1AP_ID */
    struct mmeE_RABAdmittedList_ **pdu_E_RABAdmittedList;  
             /* mmePDU_HandoverRequestAcknowledgeIEs_Value_E_RABAdmittedList */
    struct mmeE_RABFailedtoSetupListHOReqAck_ **pdu_E_RABFailedtoSetupListHOReqAck;                                     /* mmePDU_HandoverRequestAcknowledgeIEs_Value_E_RABFailedtoSetupListHOReqAck */
    struct mmeTarget_ToSource_TransparentContainer *pdu_Target_ToSource_TransparentContainer;                           /* mmePDU_HandoverRequestAcknowledgeIEs_Value_Target_ToSource_TransparentContainer */
    struct mmeCSG_Id *pdu_CSG_Id;  
                        /* mmePDU_HandoverRequestAcknowledgeIEs_Value_CSG_Id */
    struct mmeCriticalityDiagnostics *pdu_CriticalityDiagnostics;  
        /* mmePDU_HandoverRequestAcknowledgeIEs_Value_CriticalityDiagnostics */
    mmeCellAccessMode *pdu_CellAccessMode;  
                /* mmePDU_HandoverRequestAcknowledgeIEs_Value_CellAccessMode */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeHandoverRequestAcknowledgeIEs_Value {
    mmeHandoverRequestAcknowledgeIEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeHandoverRequestAcknowledgeIEs_Value_union decoded;
} mmeHandoverRequestAcknowledgeIEs_Value;

// **************************************************************
//
// Handover Request Acknowledge
//
// **************************************************************
typedef struct mmeHandoverRequestAcknowledge {
    struct mme_seqof10 {
        struct mme_seqof10 *next;
        struct mme_seq12 {
            mmeProtocolIE_ID id;
            mmeCriticality  criticality;
            mmeHandoverRequestAcknowledgeIEs_Value value;
        } value;
    } *protocolIEs;
} mmeHandoverRequestAcknowledge;

enum mmeE_RABAdmittedItemIEs_Value_PDUs {
    mmePDU_E_RABAdmittedItemIEs_Value_UNKNOWN = 0,

    mmePDU_E_RABAdmittedItemIEs_Value_E_RABAdmittedItem = mmeE_RABAdmittedItem_PDU,

    mmePDU_E_RABAdmittedItemIEs_Value_MAX = INT_MAX
};

union mmeE_RABAdmittedItemIEs_Value_union {
    struct mmeE_RABAdmittedItem *pdu_E_RABAdmittedItem;  
                      /* mmePDU_E_RABAdmittedItemIEs_Value_E_RABAdmittedItem */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeE_RABAdmittedItemIEs_Value {
    mmeE_RABAdmittedItemIEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeE_RABAdmittedItemIEs_Value_union decoded;
} mmeE_RABAdmittedItemIEs_Value;

typedef struct mmeE_RABAdmittedList_ {
    struct mmeE_RABAdmittedList_ *next;
    struct mme_seq13 {
        mmeProtocolIE_ID id;
        mmeCriticality  criticality;
        mmeE_RABAdmittedItemIEs_Value value;
    } value;
} *mmeE_RABAdmittedList;

typedef struct mmeE_RABAdmittedItem {
    unsigned char   bit_mask;
#       define      mmeE_RABAdmittedItem_dL_transportLayerAddress_present 0x80
#       define      mmeE_RABAdmittedItem_dL_gTP_TEID_present 0x40
#       define      mmeE_RABAdmittedItem_uL_TransportLayerAddress_present 0x20
#       define      mmeE_RABAdmittedItem_uL_GTP_TEID_present 0x10
#       define      mmeE_RABAdmittedItem_iE_Extensions_present 0x08
    mmeE_RAB_ID     e_RAB_ID;
    mmeTransportLayerAddress transportLayerAddress;
    mmeGTP_TEID     gTP_TEID;
    mmeTransportLayerAddress dL_transportLayerAddress;  /* optional; set in
                                   * bit_mask
                     * mmeE_RABAdmittedItem_dL_transportLayerAddress_present if
                     * present */
    mmeGTP_TEID     dL_gTP_TEID;  /* optional; set in bit_mask
                                   * mmeE_RABAdmittedItem_dL_gTP_TEID_present if
                                   * present */
    mmeTransportLayerAddress uL_TransportLayerAddress;  /* optional; set in
                                   * bit_mask
                     * mmeE_RABAdmittedItem_uL_TransportLayerAddress_present if
                     * present */
    mmeGTP_TEID     uL_GTP_TEID;  /* optional; set in bit_mask
                                   * mmeE_RABAdmittedItem_uL_GTP_TEID_present if
                                   * present */
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                                * mmeE_RABAdmittedItem_iE_Extensions_present if
                                * present */
} mmeE_RABAdmittedItem;

enum mmeE_RABFailedtoSetupItemHOReqAckIEs_Value_PDUs {
    mmePDU_E_RABFailedtoSetupItemHOReqAckIEs_Value_UNKNOWN = 0,

    mmePDU_E_RABFailedtoSetupItemHOReqAckIEs_Value_E_RABFailedToSetupItemHOReqAck = mmeE_RABFailedToSetupItemHOReqAck_PDU,

    mmePDU_E_RABFailedtoSetupItemHOReqAckIEs_Value_MAX = INT_MAX
};

union mmeE_RABFailedtoSetupItemHOReqAckIEs_Value_union {
    struct mmeE_RABFailedToSetupItemHOReqAck *pdu_E_RABFailedToSetupItemHOReqAck;                                       /* mmePDU_E_RABFailedtoSetupItemHOReqAckIEs_Value_E_RABFailedToSetupItemHOReqAck */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeE_RABFailedtoSetupItemHOReqAckIEs_Value {
    mmeE_RABFailedtoSetupItemHOReqAckIEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeE_RABFailedtoSetupItemHOReqAckIEs_Value_union decoded;
} mmeE_RABFailedtoSetupItemHOReqAckIEs_Value;

typedef struct mmeE_RABFailedtoSetupListHOReqAck_ {
    struct mmeE_RABFailedtoSetupListHOReqAck_ *next;
    struct mme_seq15 {
        mmeProtocolIE_ID id;
        mmeCriticality  criticality;
        mmeE_RABFailedtoSetupItemHOReqAckIEs_Value value;
    } value;
} *mmeE_RABFailedtoSetupListHOReqAck;

typedef enum mmeCauseRadioNetwork {
    mmeCauseRadioNetwork_unspecified = 0,
    mmetx2relocoverall_expiry = 1,
    mmesuccessful_handover = 2,
    mmerelease_due_to_eutran_generated_reason = 3,
    mmehandover_cancelled = 4,
    mmepartial_handover = 5,
    mmeho_failure_in_target_EPC_eNB_or_target_system = 6,
    mmeho_target_not_allowed = 7,
    mmetS1relocoverall_expiry = 8,
    mmetS1relocprep_expiry = 9,
    mmecell_not_available = 10,
    mmeunknown_targetID = 11,
    mmeno_radio_resources_available_in_target_cell = 12,
    mmeunknown_mme_ue_s1ap_id = 13,
    mmeunknown_enb_ue_s1ap_id = 14,
    mmeunknown_pair_ue_s1ap_id = 15,
    mmehandover_desirable_for_radio_reason = 16,
    mmetime_critical_handover = 17,
    mmeresource_optimisation_handover = 18,
    mmereduce_load_in_serving_cell = 19,
    mmeuser_inactivity = 20,
    mmeradio_connection_with_ue_lost = 21,
    mmeload_balancing_tau_required = 22,
    mmecs_fallback_triggered = 23,
    mmeue_not_available_for_ps_service = 24,
    mmeradio_resources_not_available = 25,
    mmefailure_in_radio_interface_procedure = 26,
    mmeinvalid_qos_combination = 27,
    mmeinterrat_redirection = 28,
    mmeinteraction_with_other_procedure = 29,
    mmeunknown_E_RAB_ID = 30,
    mmemultiple_E_RAB_ID_instances = 31,
    mmeencryption_and_or_integrity_protection_algorithms_not_supported = 32,
    mmes1_intra_system_handover_triggered = 33,
    mmes1_inter_system_handover_triggered = 34,
    mmex2_handover_triggered = 35,
    mmeredirection_towards_1xRTT = 36,
    mmenot_supported_QCI_value = 37,
    mmeinvalid_CSG_Id = 38
} mmeCauseRadioNetwork;

typedef enum mmeCauseTransport {
    mmetransport_resource_unavailable = 0,
    mmeCauseTransport_unspecified = 1
} mmeCauseTransport;

typedef enum mmeCauseNas {
    mmenormal_release = 0,
    mmeauthentication_failure = 1,
    mmedetach = 2,
    mmeCauseNas_unspecified = 3,
    mmecsg_subscription_expiry = 4
} mmeCauseNas;

typedef enum mmeCauseProtocol {
    mmetransfer_syntax_error = 0,
    mmeabstract_syntax_error_reject = 1,
    mmeabstract_syntax_error_ignore_and_notify = 2,
    mmemessage_not_compatible_with_receiver_state = 3,
    mmesemantic_error = 4,
    mmeabstract_syntax_error_falsely_constructed_message = 5,
    mmeCauseProtocol_unspecified = 6
} mmeCauseProtocol;

typedef enum mmeCauseMisc {
    mmecontrol_processing_overload = 0,
    mmenot_enough_user_plane_processing_resources = 1,
    mmehardware_failure = 2,
    mmeom_intervention = 3,
    mmeCauseMisc_unspecified = 4,
    mmeunknown_PLMN = 5
} mmeCauseMisc;

typedef struct mmeCause {
    unsigned short  choice;
#       define      mmeradioNetwork_chosen 1
#       define      mmetransport_chosen 2
#       define      mmenas_chosen 3
#       define      mmeprotocol_chosen 4
#       define      mmemisc_chosen 5
    union _union {
        mmeCauseRadioNetwork radioNetwork;  /* to choose, set choice to
                                             * mmeradioNetwork_chosen */
        mmeCauseTransport transport;  /* to choose, set choice to
                                       * mmetransport_chosen */
        mmeCauseNas     nas;  /* to choose, set choice to mmenas_chosen */
        mmeCauseProtocol protocol;  /* to choose, set choice to
                                     * mmeprotocol_chosen */
        mmeCauseMisc    misc;  /* to choose, set choice to mmemisc_chosen */
    } u;
} mmeCause;

typedef struct mmeE_RABFailedToSetupItemHOReqAck {
    unsigned char   bit_mask;
#       define      mmeE_RABFailedToSetupItemHOReqAck_iE_Extensions_present 0x80
    mmeE_RAB_ID     e_RAB_ID;
    mmeCause        cause;
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                   * mmeE_RABFailedToSetupItemHOReqAck_iE_Extensions_present if
                   * present */
} mmeE_RABFailedToSetupItemHOReqAck;

enum mmeHandoverFailureIEs_Value_PDUs {
    mmePDU_HandoverFailureIEs_Value_UNKNOWN = 0,

    mmePDU_HandoverFailureIEs_Value_MME_UE_S1AP_ID = mmeMME_UE_S1AP_ID_PDU,
    mmePDU_HandoverFailureIEs_Value_Cause = mmeCause_PDU,
    mmePDU_HandoverFailureIEs_Value_CriticalityDiagnostics = mmeCriticalityDiagnostics_PDU,

    mmePDU_HandoverFailureIEs_Value_MAX = INT_MAX
};

union mmeHandoverFailureIEs_Value_union {
    mmeMME_UE_S1AP_ID *pdu_MME_UE_S1AP_ID;  
                           /* mmePDU_HandoverFailureIEs_Value_MME_UE_S1AP_ID */
    mmeCause        *pdu_Cause;  /* mmePDU_HandoverFailureIEs_Value_Cause */
    struct mmeCriticalityDiagnostics *pdu_CriticalityDiagnostics;  
                   /* mmePDU_HandoverFailureIEs_Value_CriticalityDiagnostics */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeHandoverFailureIEs_Value {
    mmeHandoverFailureIEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeHandoverFailureIEs_Value_union decoded;
} mmeHandoverFailureIEs_Value;

// **************************************************************
//
// Handover Failure
//
// **************************************************************
typedef struct mmeHandoverFailure {
    struct mme_seqof13 {
        struct mme_seqof13 *next;
        struct mme_seq17 {
            mmeProtocolIE_ID id;
            mmeCriticality  criticality;
            mmeHandoverFailureIEs_Value value;
        } value;
    } *protocolIEs;
} mmeHandoverFailure;

enum mmeHandoverNotifyIEs_Value_PDUs {
    mmePDU_HandoverNotifyIEs_Value_UNKNOWN = 0,

    mmePDU_HandoverNotifyIEs_Value_MME_UE_S1AP_ID = mmeMME_UE_S1AP_ID_PDU,
    mmePDU_HandoverNotifyIEs_Value_ENB_UE_S1AP_ID = mmeENB_UE_S1AP_ID_PDU,
    mmePDU_HandoverNotifyIEs_Value_EUTRAN_CGI = mmeEUTRAN_CGI_PDU,
    mmePDU_HandoverNotifyIEs_Value_TAI = mmeTAI_PDU,
    mmePDU_HandoverNotifyIEs_Value_TunnelInformation = mmeTunnelInformation_PDU,
    mmePDU_HandoverNotifyIEs_Value_LHN_ID = mmeLHN_ID_PDU,

    mmePDU_HandoverNotifyIEs_Value_MAX = INT_MAX
};

union mmeHandoverNotifyIEs_Value_union {
    mmeMME_UE_S1AP_ID *pdu_MME_UE_S1AP_ID;  
                            /* mmePDU_HandoverNotifyIEs_Value_MME_UE_S1AP_ID */
    mmeENB_UE_S1AP_ID *pdu_ENB_UE_S1AP_ID;  
                            /* mmePDU_HandoverNotifyIEs_Value_ENB_UE_S1AP_ID */
    struct mmeEUTRAN_CGI *pdu_EUTRAN_CGI;  
                                /* mmePDU_HandoverNotifyIEs_Value_EUTRAN_CGI */
    struct mmeTAI   *pdu_TAI;  /* mmePDU_HandoverNotifyIEs_Value_TAI */
    struct mmeTunnelInformation *pdu_TunnelInformation;  
                         /* mmePDU_HandoverNotifyIEs_Value_TunnelInformation */
    struct mmeLHN_ID *pdu_LHN_ID;  /* mmePDU_HandoverNotifyIEs_Value_LHN_ID */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeHandoverNotifyIEs_Value {
    mmeHandoverNotifyIEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeHandoverNotifyIEs_Value_union decoded;
} mmeHandoverNotifyIEs_Value;

// **************************************************************
//
// HANDOVER NOTIFICATION ELEMENTARY PROCEDURE
//
// **************************************************************

// **************************************************************
//
// Handover Notify
//
// **************************************************************
typedef struct mmeHandoverNotify {
    struct mme_seqof14 {
        struct mme_seqof14 *next;
        struct mme_seq18 {
            mmeProtocolIE_ID id;
            mmeCriticality  criticality;
            mmeHandoverNotifyIEs_Value value;
        } value;
    } *protocolIEs;
} mmeHandoverNotify;

enum mmePathSwitchRequestIEs_Value_PDUs {
    mmePDU_PathSwitchRequestIEs_Value_UNKNOWN = 0,

    mmePDU_PathSwitchRequestIEs_Value_ENB_UE_S1AP_ID = mmeENB_UE_S1AP_ID_PDU,
    mmePDU_PathSwitchRequestIEs_Value_E_RABToBeSwitchedDLList = mmeE_RABToBeSwitchedDLList_PDU,
    mmePDU_PathSwitchRequestIEs_Value_MME_UE_S1AP_ID = mmeMME_UE_S1AP_ID_PDU,
    mmePDU_PathSwitchRequestIEs_Value_EUTRAN_CGI = mmeEUTRAN_CGI_PDU,
    mmePDU_PathSwitchRequestIEs_Value_TAI = mmeTAI_PDU,
    mmePDU_PathSwitchRequestIEs_Value_UESecurityCapabilities = mmeUESecurityCapabilities_PDU,
    mmePDU_PathSwitchRequestIEs_Value_CSG_Id = mmeCSG_Id_PDU,
    mmePDU_PathSwitchRequestIEs_Value_CellAccessMode = mmeCellAccessMode_PDU,
    mmePDU_PathSwitchRequestIEs_Value_GUMMEI = mmeGUMMEI_PDU,
    mmePDU_PathSwitchRequestIEs_Value_CSGMembershipStatus = mmeCSGMembershipStatus_PDU,
    mmePDU_PathSwitchRequestIEs_Value_TunnelInformation = mmeTunnelInformation_PDU,
    mmePDU_PathSwitchRequestIEs_Value_LHN_ID = mmeLHN_ID_PDU,

    mmePDU_PathSwitchRequestIEs_Value_MAX = INT_MAX
};

union mmePathSwitchRequestIEs_Value_union {
    mmeENB_UE_S1AP_ID *pdu_ENB_UE_S1AP_ID;  
                         /* mmePDU_PathSwitchRequestIEs_Value_ENB_UE_S1AP_ID */
    struct mmeE_RABToBeSwitchedDLList_ **pdu_E_RABToBeSwitchedDLList;  
                /* mmePDU_PathSwitchRequestIEs_Value_E_RABToBeSwitchedDLList */
    mmeMME_UE_S1AP_ID *pdu_MME_UE_S1AP_ID;  
                         /* mmePDU_PathSwitchRequestIEs_Value_MME_UE_S1AP_ID */
    struct mmeEUTRAN_CGI *pdu_EUTRAN_CGI;  
                             /* mmePDU_PathSwitchRequestIEs_Value_EUTRAN_CGI */
    struct mmeTAI   *pdu_TAI;  /* mmePDU_PathSwitchRequestIEs_Value_TAI */
    struct mmeUESecurityCapabilities *pdu_UESecurityCapabilities;  
                 /* mmePDU_PathSwitchRequestIEs_Value_UESecurityCapabilities */
    struct mmeCSG_Id *pdu_CSG_Id;  
                                 /* mmePDU_PathSwitchRequestIEs_Value_CSG_Id */
    mmeCellAccessMode *pdu_CellAccessMode;  
                         /* mmePDU_PathSwitchRequestIEs_Value_CellAccessMode */
    struct mmeGUMMEI *pdu_GUMMEI;  
                                 /* mmePDU_PathSwitchRequestIEs_Value_GUMMEI */
    mmeCSGMembershipStatus *pdu_CSGMembershipStatus;  
                    /* mmePDU_PathSwitchRequestIEs_Value_CSGMembershipStatus */
    struct mmeTunnelInformation *pdu_TunnelInformation;  
                      /* mmePDU_PathSwitchRequestIEs_Value_TunnelInformation */
    struct mmeLHN_ID *pdu_LHN_ID;  
                                 /* mmePDU_PathSwitchRequestIEs_Value_LHN_ID */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmePathSwitchRequestIEs_Value {
    mmePathSwitchRequestIEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmePathSwitchRequestIEs_Value_union decoded;
} mmePathSwitchRequestIEs_Value;

// **************************************************************
//
// PATH SWITCH REQUEST ELEMENTARY PROCEDURE
//
// **************************************************************

// **************************************************************
//
// Path Switch Request
//
// **************************************************************
typedef struct mmePathSwitchRequest {
    struct mme_seqof15 {
        struct mme_seqof15 *next;
        struct mme_seq19 {
            mmeProtocolIE_ID id;
            mmeCriticality  criticality;
            mmePathSwitchRequestIEs_Value value;
        } value;
    } *protocolIEs;
} mmePathSwitchRequest;

enum mmeE_RABToBeSwitchedDLItemIEs_Value_PDUs {
    mmePDU_E_RABToBeSwitchedDLItemIEs_Value_UNKNOWN = 0,

    mmePDU_E_RABToBeSwitchedDLItemIEs_Value_E_RABToBeSwitchedDLItem = mmeE_RABToBeSwitchedDLItem_PDU,

    mmePDU_E_RABToBeSwitchedDLItemIEs_Value_MAX = INT_MAX
};

union mmeE_RABToBeSwitchedDLItemIEs_Value_union {
    struct mmeE_RABToBeSwitchedDLItem *pdu_E_RABToBeSwitchedDLItem;  
          /* mmePDU_E_RABToBeSwitchedDLItemIEs_Value_E_RABToBeSwitchedDLItem */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeE_RABToBeSwitchedDLItemIEs_Value {
    mmeE_RABToBeSwitchedDLItemIEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeE_RABToBeSwitchedDLItemIEs_Value_union decoded;
} mmeE_RABToBeSwitchedDLItemIEs_Value;

typedef struct mmeE_RABToBeSwitchedDLList_ {
    struct mmeE_RABToBeSwitchedDLList_ *next;
    struct mme_seq20 {
        mmeProtocolIE_ID id;
        mmeCriticality  criticality;
        mmeE_RABToBeSwitchedDLItemIEs_Value value;
    } value;
} *mmeE_RABToBeSwitchedDLList;

typedef struct mmeE_RABToBeSwitchedDLItem {
    unsigned char   bit_mask;
#       define      mmeE_RABToBeSwitchedDLItem_iE_Extensions_present 0x80
    mmeE_RAB_ID     e_RAB_ID;
    mmeTransportLayerAddress transportLayerAddress;
    mmeGTP_TEID     gTP_TEID;
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                          * mmeE_RABToBeSwitchedDLItem_iE_Extensions_present if
                          * present */
} mmeE_RABToBeSwitchedDLItem;

enum mmePathSwitchRequestAcknowledgeIEs_Value_PDUs {
    mmePDU_PathSwitchRequestAcknowledgeIEs_Value_UNKNOWN = 0,

    mmePDU_PathSwitchRequestAcknowledgeIEs_Value_MME_UE_S1AP_ID = mmeMME_UE_S1AP_ID_PDU,
    mmePDU_PathSwitchRequestAcknowledgeIEs_Value_ENB_UE_S1AP_ID = mmeENB_UE_S1AP_ID_PDU,
    mmePDU_PathSwitchRequestAcknowledgeIEs_Value_UEAggregateMaximumBitrate = mmeUEAggregateMaximumBitrate_PDU,
    mmePDU_PathSwitchRequestAcknowledgeIEs_Value_E_RABToBeSwitchedULList = mmeE_RABToBeSwitchedULList_PDU,
    mmePDU_PathSwitchRequestAcknowledgeIEs_Value_E_RABList = mmeE_RABList_PDU,
    mmePDU_PathSwitchRequestAcknowledgeIEs_Value_SecurityContext = mmeSecurityContext_PDU,
    mmePDU_PathSwitchRequestAcknowledgeIEs_Value_CriticalityDiagnostics = mmeCriticalityDiagnostics_PDU,
    mmePDU_PathSwitchRequestAcknowledgeIEs_Value_CSGMembershipStatus = mmeCSGMembershipStatus_PDU,
    mmePDU_PathSwitchRequestAcknowledgeIEs_Value_ProSeAuthorized = mmeProSeAuthorized_PDU,

    mmePDU_PathSwitchRequestAcknowledgeIEs_Value_MAX = INT_MAX
};

union mmePathSwitchRequestAcknowledgeIEs_Value_union {
    mmeMME_UE_S1AP_ID *pdu_MME_UE_S1AP_ID;  
              /* mmePDU_PathSwitchRequestAcknowledgeIEs_Value_MME_UE_S1AP_ID */
    mmeENB_UE_S1AP_ID *pdu_ENB_UE_S1AP_ID;  
              /* mmePDU_PathSwitchRequestAcknowledgeIEs_Value_ENB_UE_S1AP_ID */
    struct mmeUEAggregateMaximumBitrate *pdu_UEAggregateMaximumBitrate;  
   /* mmePDU_PathSwitchRequestAcknowledgeIEs_Value_UEAggregateMaximumBitrate */
    struct mmeE_RABToBeSwitchedULList_ **pdu_E_RABToBeSwitchedULList;  
     /* mmePDU_PathSwitchRequestAcknowledgeIEs_Value_E_RABToBeSwitchedULList */
    struct mmeE_RABList_ **pdu_E_RABList;  
                   /* mmePDU_PathSwitchRequestAcknowledgeIEs_Value_E_RABList */
    struct mmeSecurityContext *pdu_SecurityContext;  
             /* mmePDU_PathSwitchRequestAcknowledgeIEs_Value_SecurityContext */
    struct mmeCriticalityDiagnostics *pdu_CriticalityDiagnostics;  
      /* mmePDU_PathSwitchRequestAcknowledgeIEs_Value_CriticalityDiagnostics */
    mmeCSGMembershipStatus *pdu_CSGMembershipStatus;  
         /* mmePDU_PathSwitchRequestAcknowledgeIEs_Value_CSGMembershipStatus */
    struct mmeProSeAuthorized *pdu_ProSeAuthorized;  
             /* mmePDU_PathSwitchRequestAcknowledgeIEs_Value_ProSeAuthorized */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmePathSwitchRequestAcknowledgeIEs_Value {
    mmePathSwitchRequestAcknowledgeIEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmePathSwitchRequestAcknowledgeIEs_Value_union decoded;
} mmePathSwitchRequestAcknowledgeIEs_Value;

// **************************************************************
//
// Path Switch Request Acknowledge
//
// **************************************************************
typedef struct mmePathSwitchRequestAcknowledge {
    struct mme_seqof17 {
        struct mme_seqof17 *next;
        struct mme_seq22 {
            mmeProtocolIE_ID id;
            mmeCriticality  criticality;
            mmePathSwitchRequestAcknowledgeIEs_Value value;
        } value;
    } *protocolIEs;
} mmePathSwitchRequestAcknowledge;

enum mmeE_RABToBeSwitchedULItemIEs_Value_PDUs {
    mmePDU_E_RABToBeSwitchedULItemIEs_Value_UNKNOWN = 0,

    mmePDU_E_RABToBeSwitchedULItemIEs_Value_E_RABToBeSwitchedULItem = mmeE_RABToBeSwitchedULItem_PDU,

    mmePDU_E_RABToBeSwitchedULItemIEs_Value_MAX = INT_MAX
};

union mmeE_RABToBeSwitchedULItemIEs_Value_union {
    struct mmeE_RABToBeSwitchedULItem *pdu_E_RABToBeSwitchedULItem;  
          /* mmePDU_E_RABToBeSwitchedULItemIEs_Value_E_RABToBeSwitchedULItem */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeE_RABToBeSwitchedULItemIEs_Value {
    mmeE_RABToBeSwitchedULItemIEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeE_RABToBeSwitchedULItemIEs_Value_union decoded;
} mmeE_RABToBeSwitchedULItemIEs_Value;

typedef struct mmeE_RABToBeSwitchedULList_ {
    struct mmeE_RABToBeSwitchedULList_ *next;
    struct mme_seq23 {
        mmeProtocolIE_ID id;
        mmeCriticality  criticality;
        mmeE_RABToBeSwitchedULItemIEs_Value value;
    } value;
} *mmeE_RABToBeSwitchedULList;

typedef struct mmeE_RABToBeSwitchedULItem {
    unsigned char   bit_mask;
#       define      mmeE_RABToBeSwitchedULItem_iE_Extensions_present 0x80
    mmeE_RAB_ID     e_RAB_ID;
    mmeTransportLayerAddress transportLayerAddress;
    mmeGTP_TEID     gTP_TEID;
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                          * mmeE_RABToBeSwitchedULItem_iE_Extensions_present if
                          * present */
} mmeE_RABToBeSwitchedULItem;

// **************************************************************
//
// Path Switch Request Failure
//
// **************************************************************
typedef struct mmePathSwitchRequestFailure {
    struct mme_seqof4_ *protocolIEs;
} mmePathSwitchRequestFailure;

enum mmeHandoverCancelIEs_Value_PDUs {
    mmePDU_HandoverCancelIEs_Value_UNKNOWN = 0,

    mmePDU_HandoverCancelIEs_Value_MME_UE_S1AP_ID = mmeMME_UE_S1AP_ID_PDU,
    mmePDU_HandoverCancelIEs_Value_ENB_UE_S1AP_ID = mmeENB_UE_S1AP_ID_PDU,
    mmePDU_HandoverCancelIEs_Value_Cause = mmeCause_PDU,

    mmePDU_HandoverCancelIEs_Value_MAX = INT_MAX
};

union mmeHandoverCancelIEs_Value_union {
    mmeMME_UE_S1AP_ID *pdu_MME_UE_S1AP_ID;  
                            /* mmePDU_HandoverCancelIEs_Value_MME_UE_S1AP_ID */
    mmeENB_UE_S1AP_ID *pdu_ENB_UE_S1AP_ID;  
                            /* mmePDU_HandoverCancelIEs_Value_ENB_UE_S1AP_ID */
    mmeCause        *pdu_Cause;  /* mmePDU_HandoverCancelIEs_Value_Cause */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeHandoverCancelIEs_Value {
    mmeHandoverCancelIEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeHandoverCancelIEs_Value_union decoded;
} mmeHandoverCancelIEs_Value;

typedef struct mme_seq26 {
    mmeProtocolIE_ID id;
    mmeCriticality  criticality;
    mmeHandoverCancelIEs_Value value;
} mme_seq26;

typedef struct mme_seqof20_ {
    struct mme_seqof20_ *next;
    mme_seq26       value;
} *mme_seqof20;

// **************************************************************
//
// HANDOVER CANCEL ELEMENTARY PROCEDURE
//
// **************************************************************

// **************************************************************
//
// Handover Cancel
//
// **************************************************************
typedef struct mmeHandoverCancel {
    struct mme_seqof20_ *protocolIEs;
} mmeHandoverCancel;

enum mmeHandoverCancelAcknowledgeIEs_Value_PDUs {
    mmePDU_HandoverCancelAcknowledgeIEs_Value_UNKNOWN = 0,

    mmePDU_HandoverCancelAcknowledgeIEs_Value_MME_UE_S1AP_ID = mmeMME_UE_S1AP_ID_PDU,
    mmePDU_HandoverCancelAcknowledgeIEs_Value_ENB_UE_S1AP_ID = mmeENB_UE_S1AP_ID_PDU,
    mmePDU_HandoverCancelAcknowledgeIEs_Value_CriticalityDiagnostics = mmeCriticalityDiagnostics_PDU,

    mmePDU_HandoverCancelAcknowledgeIEs_Value_MAX = INT_MAX
};

union mmeHandoverCancelAcknowledgeIEs_Value_union {
    mmeMME_UE_S1AP_ID *pdu_MME_UE_S1AP_ID;  
                 /* mmePDU_HandoverCancelAcknowledgeIEs_Value_MME_UE_S1AP_ID */
    mmeENB_UE_S1AP_ID *pdu_ENB_UE_S1AP_ID;  
                 /* mmePDU_HandoverCancelAcknowledgeIEs_Value_ENB_UE_S1AP_ID */
    struct mmeCriticalityDiagnostics *pdu_CriticalityDiagnostics;  
         /* mmePDU_HandoverCancelAcknowledgeIEs_Value_CriticalityDiagnostics */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeHandoverCancelAcknowledgeIEs_Value {
    mmeHandoverCancelAcknowledgeIEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeHandoverCancelAcknowledgeIEs_Value_union decoded;
} mmeHandoverCancelAcknowledgeIEs_Value;

typedef struct mme_seq27 {
    mmeProtocolIE_ID id;
    mmeCriticality  criticality;
    mmeHandoverCancelAcknowledgeIEs_Value value;
} mme_seq27;

typedef struct mme_seqof21_ {
    struct mme_seqof21_ *next;
    mme_seq27       value;
} *mme_seqof21;

// **************************************************************
//
// Handover Cancel Request Acknowledge
//
// **************************************************************
typedef struct mmeHandoverCancelAcknowledge {
    struct mme_seqof21_ *protocolIEs;
} mmeHandoverCancelAcknowledge;

enum mmeE_RABSetupRequestIEs_Value_PDUs {
    mmePDU_E_RABSetupRequestIEs_Value_UNKNOWN = 0,

    mmePDU_E_RABSetupRequestIEs_Value_MME_UE_S1AP_ID = mmeMME_UE_S1AP_ID_PDU,
    mmePDU_E_RABSetupRequestIEs_Value_ENB_UE_S1AP_ID = mmeENB_UE_S1AP_ID_PDU,
    mmePDU_E_RABSetupRequestIEs_Value_UEAggregateMaximumBitrate = mmeUEAggregateMaximumBitrate_PDU,
    mmePDU_E_RABSetupRequestIEs_Value_E_RABToBeSetupListBearerSUReq = mmeE_RABToBeSetupListBearerSUReq_PDU,

    mmePDU_E_RABSetupRequestIEs_Value_MAX = INT_MAX
};

union mmeE_RABSetupRequestIEs_Value_union {
    mmeMME_UE_S1AP_ID *pdu_MME_UE_S1AP_ID;  
                         /* mmePDU_E_RABSetupRequestIEs_Value_MME_UE_S1AP_ID */
    mmeENB_UE_S1AP_ID *pdu_ENB_UE_S1AP_ID;  
                         /* mmePDU_E_RABSetupRequestIEs_Value_ENB_UE_S1AP_ID */
    struct mmeUEAggregateMaximumBitrate *pdu_UEAggregateMaximumBitrate;  
              /* mmePDU_E_RABSetupRequestIEs_Value_UEAggregateMaximumBitrate */
    struct mmeE_RABToBeSetupListBearerSUReq_ **pdu_E_RABToBeSetupListBearerSUReq;                                       /* mmePDU_E_RABSetupRequestIEs_Value_E_RABToBeSetupListBearerSUReq */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeE_RABSetupRequestIEs_Value {
    mmeE_RABSetupRequestIEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeE_RABSetupRequestIEs_Value_union decoded;
} mmeE_RABSetupRequestIEs_Value;

// **************************************************************
//
// E-RAB SETUP ELEMENTARY PROCEDURE
//
// **************************************************************

// **************************************************************
//
// E-RAB Setup Request
//
// **************************************************************
typedef struct mmeE_RABSetupRequest {
    struct mme_seqof22 {
        struct mme_seqof22 *next;
        struct mme_seq28 {
            mmeProtocolIE_ID id;
            mmeCriticality  criticality;
            mmeE_RABSetupRequestIEs_Value value;
        } value;
    } *protocolIEs;
} mmeE_RABSetupRequest;

enum mmeE_RABToBeSetupItemBearerSUReqIEs_Value_PDUs {
    mmePDU_E_RABToBeSetupItemBearerSUReqIEs_Value_UNKNOWN = 0,

    mmePDU_E_RABToBeSetupItemBearerSUReqIEs_Value_E_RABToBeSetupItemBearerSUReq = mmeE_RABToBeSetupItemBearerSUReq_PDU,

    mmePDU_E_RABToBeSetupItemBearerSUReqIEs_Value_MAX = INT_MAX
};

union mmeE_RABToBeSetupItemBearerSUReqIEs_Value_union {
    struct mmeE_RABToBeSetupItemBearerSUReq *pdu_E_RABToBeSetupItemBearerSUReq;                                         /* mmePDU_E_RABToBeSetupItemBearerSUReqIEs_Value_E_RABToBeSetupItemBearerSUReq */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeE_RABToBeSetupItemBearerSUReqIEs_Value {
    mmeE_RABToBeSetupItemBearerSUReqIEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeE_RABToBeSetupItemBearerSUReqIEs_Value_union decoded;
} mmeE_RABToBeSetupItemBearerSUReqIEs_Value;

typedef struct mmeE_RABToBeSetupListBearerSUReq_ {
    struct mmeE_RABToBeSetupListBearerSUReq_ *next;
    struct mme_seq29 {
        mmeProtocolIE_ID id;
        mmeCriticality  criticality;
        mmeE_RABToBeSetupItemBearerSUReqIEs_Value value;
    } value;
} *mmeE_RABToBeSetupListBearerSUReq;

// N
typedef struct mmeNAS_PDU {
    unsigned int    length;
    unsigned char   *value;
} mmeNAS_PDU;

enum mmeE_RABToBeSetupItemBearerSUReqExtIEs_Extension_PDUs {
    mmePDU_E_RABToBeSetupItemBearerSUReqExtIEs_Extension_UNKNOWN = 0,

    mmePDU_E_RABToBeSetupItemBearerSUReqExtIEs_Extension_Correlation_ID = mmeCorrelation_ID_PDU,

    mmePDU_E_RABToBeSetupItemBearerSUReqExtIEs_Extension_MAX = INT_MAX
};

union mmeE_RABToBeSetupItemBearerSUReqExtIEs_Extension_union {
    struct mmeCorrelation_ID *pdu_Correlation_ID;  
      /* mmePDU_E_RABToBeSetupItemBearerSUReqExtIEs_Extension_Correlation_ID */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeE_RABToBeSetupItemBearerSUReqExtIEs_Extension {
    mmeE_RABToBeSetupItemBearerSUReqExtIEs_Extension_PDUs pduNum;
    OssBuf          encoded;
    mmeE_RABToBeSetupItemBearerSUReqExtIEs_Extension_union decoded;
} mmeE_RABToBeSetupItemBearerSUReqExtIEs_Extension;

typedef struct mme_seq30 {
    mmeProtocolExtensionID id;
    mmeCriticality  criticality;
    mmeE_RABToBeSetupItemBearerSUReqExtIEs_Extension extensionValue;
} mme_seq30;

typedef struct mme_seqof23_ {
    struct mme_seqof23_ *next;
    mme_seq30       value;
} *mme_seqof23;

typedef struct mmeE_RABToBeSetupItemBearerSUReq {
    unsigned char   bit_mask;
#       define      mmeE_RABToBeSetupItemBearerSUReq_iE_Extensions_present 0x80
    mmeE_RAB_ID     e_RAB_ID;
    mmeE_RABLevelQoSParameters e_RABlevelQoSParameters;
    mmeTransportLayerAddress transportLayerAddress;
    mmeGTP_TEID     gTP_TEID;
    mmeNAS_PDU      nAS_PDU;
    struct mme_seqof23_ *iE_Extensions;  /* optional; set in bit_mask
                    * mmeE_RABToBeSetupItemBearerSUReq_iE_Extensions_present if
                    * present */
} mmeE_RABToBeSetupItemBearerSUReq;

enum mmeE_RABSetupResponseIEs_Value_PDUs {
    mmePDU_E_RABSetupResponseIEs_Value_UNKNOWN = 0,

    mmePDU_E_RABSetupResponseIEs_Value_MME_UE_S1AP_ID = mmeMME_UE_S1AP_ID_PDU,
    mmePDU_E_RABSetupResponseIEs_Value_ENB_UE_S1AP_ID = mmeENB_UE_S1AP_ID_PDU,
    mmePDU_E_RABSetupResponseIEs_Value_E_RABSetupListBearerSURes = mmeE_RABSetupListBearerSURes_PDU,
    mmePDU_E_RABSetupResponseIEs_Value_E_RABList = mmeE_RABList_PDU,
    mmePDU_E_RABSetupResponseIEs_Value_CriticalityDiagnostics = mmeCriticalityDiagnostics_PDU,

    mmePDU_E_RABSetupResponseIEs_Value_MAX = INT_MAX
};

union mmeE_RABSetupResponseIEs_Value_union {
    mmeMME_UE_S1AP_ID *pdu_MME_UE_S1AP_ID;  
                        /* mmePDU_E_RABSetupResponseIEs_Value_MME_UE_S1AP_ID */
    mmeENB_UE_S1AP_ID *pdu_ENB_UE_S1AP_ID;  
                        /* mmePDU_E_RABSetupResponseIEs_Value_ENB_UE_S1AP_ID */
    struct mmeE_RABSetupListBearerSURes_ **pdu_E_RABSetupListBearerSURes;  
                                        /* mmePDU_E_RABSetupResponseIEs_Value_E_RABSetupListBearerSURes */
    struct mmeE_RABList_ **pdu_E_RABList;  
                             /* mmePDU_E_RABSetupResponseIEs_Value_E_RABList */
    struct mmeCriticalityDiagnostics *pdu_CriticalityDiagnostics;  
                /* mmePDU_E_RABSetupResponseIEs_Value_CriticalityDiagnostics */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeE_RABSetupResponseIEs_Value {
    mmeE_RABSetupResponseIEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeE_RABSetupResponseIEs_Value_union decoded;
} mmeE_RABSetupResponseIEs_Value;

// **************************************************************
//
// E-RAB Setup Response
//
// **************************************************************
typedef struct mmeE_RABSetupResponse {
    struct mme_seqof24 {
        struct mme_seqof24 *next;
        struct mme_seq31 {
            mmeProtocolIE_ID id;
            mmeCriticality  criticality;
            mmeE_RABSetupResponseIEs_Value value;
        } value;
    } *protocolIEs;
} mmeE_RABSetupResponse;

enum mmeE_RABSetupItemBearerSUResIEs_Value_PDUs {
    mmePDU_E_RABSetupItemBearerSUResIEs_Value_UNKNOWN = 0,

    mmePDU_E_RABSetupItemBearerSUResIEs_Value_E_RABSetupItemBearerSURes = mmeE_RABSetupItemBearerSURes_PDU,

    mmePDU_E_RABSetupItemBearerSUResIEs_Value_MAX = INT_MAX
};

union mmeE_RABSetupItemBearerSUResIEs_Value_union {
    struct mmeE_RABSetupItemBearerSURes *pdu_E_RABSetupItemBearerSURes;  
      /* mmePDU_E_RABSetupItemBearerSUResIEs_Value_E_RABSetupItemBearerSURes */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeE_RABSetupItemBearerSUResIEs_Value {
    mmeE_RABSetupItemBearerSUResIEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeE_RABSetupItemBearerSUResIEs_Value_union decoded;
} mmeE_RABSetupItemBearerSUResIEs_Value;

typedef struct mmeE_RABSetupListBearerSURes_ {
    struct mmeE_RABSetupListBearerSURes_ *next;
    struct mme_seq32 {
        mmeProtocolIE_ID id;
        mmeCriticality  criticality;
        mmeE_RABSetupItemBearerSUResIEs_Value value;
    } value;
} *mmeE_RABSetupListBearerSURes;

typedef struct mmeE_RABSetupItemBearerSURes {
    unsigned char   bit_mask;
#       define      mmeE_RABSetupItemBearerSURes_iE_Extensions_present 0x80
    mmeE_RAB_ID     e_RAB_ID;
    mmeTransportLayerAddress transportLayerAddress;
    mmeGTP_TEID     gTP_TEID;
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                        * mmeE_RABSetupItemBearerSURes_iE_Extensions_present if
                        * present */
} mmeE_RABSetupItemBearerSURes;

enum mmeE_RABModifyRequestIEs_Value_PDUs {
    mmePDU_E_RABModifyRequestIEs_Value_UNKNOWN = 0,

    mmePDU_E_RABModifyRequestIEs_Value_MME_UE_S1AP_ID = mmeMME_UE_S1AP_ID_PDU,
    mmePDU_E_RABModifyRequestIEs_Value_ENB_UE_S1AP_ID = mmeENB_UE_S1AP_ID_PDU,
    mmePDU_E_RABModifyRequestIEs_Value_UEAggregateMaximumBitrate = mmeUEAggregateMaximumBitrate_PDU,
    mmePDU_E_RABModifyRequestIEs_Value_E_RABToBeModifiedListBearerModReq = mmeE_RABToBeModifiedListBearerModReq_PDU,

    mmePDU_E_RABModifyRequestIEs_Value_MAX = INT_MAX
};

union mmeE_RABModifyRequestIEs_Value_union {
    mmeMME_UE_S1AP_ID *pdu_MME_UE_S1AP_ID;  
                        /* mmePDU_E_RABModifyRequestIEs_Value_MME_UE_S1AP_ID */
    mmeENB_UE_S1AP_ID *pdu_ENB_UE_S1AP_ID;  
                        /* mmePDU_E_RABModifyRequestIEs_Value_ENB_UE_S1AP_ID */
    struct mmeUEAggregateMaximumBitrate *pdu_UEAggregateMaximumBitrate;  
             /* mmePDU_E_RABModifyRequestIEs_Value_UEAggregateMaximumBitrate */
    struct mmeE_RABToBeModifiedListBearerModReq_ **pdu_E_RABToBeModifiedListBearerModReq;                               /* mmePDU_E_RABModifyRequestIEs_Value_E_RABToBeModifiedListBearerModReq */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeE_RABModifyRequestIEs_Value {
    mmeE_RABModifyRequestIEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeE_RABModifyRequestIEs_Value_union decoded;
} mmeE_RABModifyRequestIEs_Value;

// **************************************************************
//
// E-RAB MODIFY ELEMENTARY PROCEDURE
//
// **************************************************************

// **************************************************************
//
// E-RAB Modify Request
//
// **************************************************************
typedef struct mmeE_RABModifyRequest {
    struct mme_seqof26 {
        struct mme_seqof26 *next;
        struct mme_seq34 {
            mmeProtocolIE_ID id;
            mmeCriticality  criticality;
            mmeE_RABModifyRequestIEs_Value value;
        } value;
    } *protocolIEs;
} mmeE_RABModifyRequest;

enum mmeE_RABToBeModifiedItemBearerModReqIEs_Value_PDUs {
    mmePDU_E_RABToBeModifiedItemBearerModReqIEs_Value_UNKNOWN = 0,

    mmePDU_E_RABToBeModifiedItemBearerModReqIEs_Value_E_RABToBeModifiedItemBearerModReq = mmeE_RABToBeModifiedItemBearerModReq_PDU,

    mmePDU_E_RABToBeModifiedItemBearerModReqIEs_Value_MAX = INT_MAX
};

union mmeE_RABToBeModifiedItemBearerModReqIEs_Value_union {
    struct mmeE_RABToBeModifiedItemBearerModReq *pdu_E_RABToBeModifiedItemBearerModReq;                                 /* mmePDU_E_RABToBeModifiedItemBearerModReqIEs_Value_E_RABToBeModifiedItemBearerModReq */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeE_RABToBeModifiedItemBearerModReqIEs_Value {
    mmeE_RABToBeModifiedItemBearerModReqIEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeE_RABToBeModifiedItemBearerModReqIEs_Value_union decoded;
} mmeE_RABToBeModifiedItemBearerModReqIEs_Value;

typedef struct mmeE_RABToBeModifiedListBearerModReq_ {
    struct mmeE_RABToBeModifiedListBearerModReq_ *next;
    struct mme_seq35 {
        mmeProtocolIE_ID id;
        mmeCriticality  criticality;
        mmeE_RABToBeModifiedItemBearerModReqIEs_Value value;
    } value;
} *mmeE_RABToBeModifiedListBearerModReq;

enum mmeE_RABToBeModifyItemBearerModReqExtIEs_Extension_PDUs {
    mmePDU_E_RABToBeModifyItemBearerModReqExtIEs_Extension_UNKNOWN = 0,

    mmePDU_E_RABToBeModifyItemBearerModReqExtIEs_Extension_TransportInformation = mmeTransportInformation_PDU,

    mmePDU_E_RABToBeModifyItemBearerModReqExtIEs_Extension_MAX = INT_MAX
};

union mmeE_RABToBeModifyItemBearerModReqExtIEs_Extension_union {
    struct mmeTransportInformation *pdu_TransportInformation;  
  /* mmePDU_E_RABToBeModifyItemBearerModReqExtIEs_Extension_TransportInformation */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeE_RABToBeModifyItemBearerModReqExtIEs_Extension {
    mmeE_RABToBeModifyItemBearerModReqExtIEs_Extension_PDUs pduNum;
    OssBuf          encoded;
    mmeE_RABToBeModifyItemBearerModReqExtIEs_Extension_union decoded;
} mmeE_RABToBeModifyItemBearerModReqExtIEs_Extension;

typedef struct mmeE_RABToBeModifiedItemBearerModReq {
    unsigned char   bit_mask;
#       define      mmeE_RABToBeModifiedItemBearerModReq_iE_Extensions_present 0x80
    mmeE_RAB_ID     e_RAB_ID;
    mmeE_RABLevelQoSParameters e_RABLevelQoSParameters;
    mmeNAS_PDU      nAS_PDU;
    struct mme_seqof27 {
        struct mme_seqof27 *next;
        struct mme_seq36 {
            mmeProtocolExtensionID id;
            mmeCriticality  criticality;
            mmeE_RABToBeModifyItemBearerModReqExtIEs_Extension extensionValue;
        } value;
    } *iE_Extensions;  /* optional; set in bit_mask
                * mmeE_RABToBeModifiedItemBearerModReq_iE_Extensions_present if
                * present */
} mmeE_RABToBeModifiedItemBearerModReq;

enum mmeE_RABModifyResponseIEs_Value_PDUs {
    mmePDU_E_RABModifyResponseIEs_Value_UNKNOWN = 0,

    mmePDU_E_RABModifyResponseIEs_Value_MME_UE_S1AP_ID = mmeMME_UE_S1AP_ID_PDU,
    mmePDU_E_RABModifyResponseIEs_Value_ENB_UE_S1AP_ID = mmeENB_UE_S1AP_ID_PDU,
    mmePDU_E_RABModifyResponseIEs_Value_E_RABModifyListBearerModRes = mmeE_RABModifyListBearerModRes_PDU,
    mmePDU_E_RABModifyResponseIEs_Value_E_RABList = mmeE_RABList_PDU,
    mmePDU_E_RABModifyResponseIEs_Value_CriticalityDiagnostics = mmeCriticalityDiagnostics_PDU,

    mmePDU_E_RABModifyResponseIEs_Value_MAX = INT_MAX
};

union mmeE_RABModifyResponseIEs_Value_union {
    mmeMME_UE_S1AP_ID *pdu_MME_UE_S1AP_ID;  
                       /* mmePDU_E_RABModifyResponseIEs_Value_MME_UE_S1AP_ID */
    mmeENB_UE_S1AP_ID *pdu_ENB_UE_S1AP_ID;  
                       /* mmePDU_E_RABModifyResponseIEs_Value_ENB_UE_S1AP_ID */
    struct mmeE_RABModifyListBearerModRes_ **pdu_E_RABModifyListBearerModRes;                                           /* mmePDU_E_RABModifyResponseIEs_Value_E_RABModifyListBearerModRes */
    struct mmeE_RABList_ **pdu_E_RABList;  
                            /* mmePDU_E_RABModifyResponseIEs_Value_E_RABList */
    struct mmeCriticalityDiagnostics *pdu_CriticalityDiagnostics;  
               /* mmePDU_E_RABModifyResponseIEs_Value_CriticalityDiagnostics */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeE_RABModifyResponseIEs_Value {
    mmeE_RABModifyResponseIEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeE_RABModifyResponseIEs_Value_union decoded;
} mmeE_RABModifyResponseIEs_Value;

// **************************************************************
//
// E-RAB Modify Response
//
// **************************************************************
typedef struct mmeE_RABModifyResponse {
    struct mme_seqof28 {
        struct mme_seqof28 *next;
        struct mme_seq37 {
            mmeProtocolIE_ID id;
            mmeCriticality  criticality;
            mmeE_RABModifyResponseIEs_Value value;
        } value;
    } *protocolIEs;
} mmeE_RABModifyResponse;

enum mmeE_RABModifyItemBearerModResIEs_Value_PDUs {
    mmePDU_E_RABModifyItemBearerModResIEs_Value_UNKNOWN = 0,

    mmePDU_E_RABModifyItemBearerModResIEs_Value_E_RABModifyItemBearerModRes = mmeE_RABModifyItemBearerModRes_PDU,

    mmePDU_E_RABModifyItemBearerModResIEs_Value_MAX = INT_MAX
};

union mmeE_RABModifyItemBearerModResIEs_Value_union {
    struct mmeE_RABModifyItemBearerModRes *pdu_E_RABModifyItemBearerModRes;  
                                        /* mmePDU_E_RABModifyItemBearerModResIEs_Value_E_RABModifyItemBearerModRes */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeE_RABModifyItemBearerModResIEs_Value {
    mmeE_RABModifyItemBearerModResIEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeE_RABModifyItemBearerModResIEs_Value_union decoded;
} mmeE_RABModifyItemBearerModResIEs_Value;

typedef struct mmeE_RABModifyListBearerModRes_ {
    struct mmeE_RABModifyListBearerModRes_ *next;
    struct mme_seq38 {
        mmeProtocolIE_ID id;
        mmeCriticality  criticality;
        mmeE_RABModifyItemBearerModResIEs_Value value;
    } value;
} *mmeE_RABModifyListBearerModRes;

typedef struct mmeE_RABModifyItemBearerModRes {
    unsigned char   bit_mask;
#       define      mmeE_RABModifyItemBearerModRes_iE_Extensions_present 0x80
    mmeE_RAB_ID     e_RAB_ID;
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                      * mmeE_RABModifyItemBearerModRes_iE_Extensions_present if
                      * present */
} mmeE_RABModifyItemBearerModRes;

enum mmeE_RABReleaseCommandIEs_Value_PDUs {
    mmePDU_E_RABReleaseCommandIEs_Value_UNKNOWN = 0,

    mmePDU_E_RABReleaseCommandIEs_Value_MME_UE_S1AP_ID = mmeMME_UE_S1AP_ID_PDU,
    mmePDU_E_RABReleaseCommandIEs_Value_ENB_UE_S1AP_ID = mmeENB_UE_S1AP_ID_PDU,
    mmePDU_E_RABReleaseCommandIEs_Value_UEAggregateMaximumBitrate = mmeUEAggregateMaximumBitrate_PDU,
    mmePDU_E_RABReleaseCommandIEs_Value_E_RABList = mmeE_RABList_PDU,
    mmePDU_E_RABReleaseCommandIEs_Value_NAS_PDU = mmeNAS_PDU_PDU,

    mmePDU_E_RABReleaseCommandIEs_Value_MAX = INT_MAX
};

union mmeE_RABReleaseCommandIEs_Value_union {
    mmeMME_UE_S1AP_ID *pdu_MME_UE_S1AP_ID;  
                       /* mmePDU_E_RABReleaseCommandIEs_Value_MME_UE_S1AP_ID */
    mmeENB_UE_S1AP_ID *pdu_ENB_UE_S1AP_ID;  
                       /* mmePDU_E_RABReleaseCommandIEs_Value_ENB_UE_S1AP_ID */
    struct mmeUEAggregateMaximumBitrate *pdu_UEAggregateMaximumBitrate;  
            /* mmePDU_E_RABReleaseCommandIEs_Value_UEAggregateMaximumBitrate */
    struct mmeE_RABList_ **pdu_E_RABList;  
                            /* mmePDU_E_RABReleaseCommandIEs_Value_E_RABList */
    mmeNAS_PDU      *pdu_NAS_PDU;  
                              /* mmePDU_E_RABReleaseCommandIEs_Value_NAS_PDU */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeE_RABReleaseCommandIEs_Value {
    mmeE_RABReleaseCommandIEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeE_RABReleaseCommandIEs_Value_union decoded;
} mmeE_RABReleaseCommandIEs_Value;

// **************************************************************
//
// E-RAB RELEASE ELEMENTARY PROCEDURE
//
// **************************************************************

// **************************************************************
//
// E-RAB Release Command
//
// **************************************************************
typedef struct mmeE_RABReleaseCommand {
    struct mme_seqof30 {
        struct mme_seqof30 *next;
        struct mme_seq40 {
            mmeProtocolIE_ID id;
            mmeCriticality  criticality;
            mmeE_RABReleaseCommandIEs_Value value;
        } value;
    } *protocolIEs;
} mmeE_RABReleaseCommand;

enum mmeE_RABReleaseResponseIEs_Value_PDUs {
    mmePDU_E_RABReleaseResponseIEs_Value_UNKNOWN = 0,

    mmePDU_E_RABReleaseResponseIEs_Value_MME_UE_S1AP_ID = mmeMME_UE_S1AP_ID_PDU,
    mmePDU_E_RABReleaseResponseIEs_Value_ENB_UE_S1AP_ID = mmeENB_UE_S1AP_ID_PDU,
    mmePDU_E_RABReleaseResponseIEs_Value_E_RABReleaseListBearerRelComp = mmeE_RABReleaseListBearerRelComp_PDU,
    mmePDU_E_RABReleaseResponseIEs_Value_E_RABList = mmeE_RABList_PDU,
    mmePDU_E_RABReleaseResponseIEs_Value_CriticalityDiagnostics = mmeCriticalityDiagnostics_PDU,
    mmePDU_E_RABReleaseResponseIEs_Value_UserLocationInformation = mmeUserLocationInformation_PDU,

    mmePDU_E_RABReleaseResponseIEs_Value_MAX = INT_MAX
};

union mmeE_RABReleaseResponseIEs_Value_union {
    mmeMME_UE_S1AP_ID *pdu_MME_UE_S1AP_ID;  
                      /* mmePDU_E_RABReleaseResponseIEs_Value_MME_UE_S1AP_ID */
    mmeENB_UE_S1AP_ID *pdu_ENB_UE_S1AP_ID;  
                      /* mmePDU_E_RABReleaseResponseIEs_Value_ENB_UE_S1AP_ID */
    struct mmeE_RABReleaseListBearerRelComp_ **pdu_E_RABReleaseListBearerRelComp;                                       /* mmePDU_E_RABReleaseResponseIEs_Value_E_RABReleaseListBearerRelComp */
    struct mmeE_RABList_ **pdu_E_RABList;  
                           /* mmePDU_E_RABReleaseResponseIEs_Value_E_RABList */
    struct mmeCriticalityDiagnostics *pdu_CriticalityDiagnostics;  
              /* mmePDU_E_RABReleaseResponseIEs_Value_CriticalityDiagnostics */
    struct mmeUserLocationInformation *pdu_UserLocationInformation;  
             /* mmePDU_E_RABReleaseResponseIEs_Value_UserLocationInformation */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeE_RABReleaseResponseIEs_Value {
    mmeE_RABReleaseResponseIEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeE_RABReleaseResponseIEs_Value_union decoded;
} mmeE_RABReleaseResponseIEs_Value;

// **************************************************************
//
// E-RAB Release Response
//
// **************************************************************
typedef struct mmeE_RABReleaseResponse {
    struct mme_seqof31 {
        struct mme_seqof31 *next;
        struct mme_seq41 {
            mmeProtocolIE_ID id;
            mmeCriticality  criticality;
            mmeE_RABReleaseResponseIEs_Value value;
        } value;
    } *protocolIEs;
} mmeE_RABReleaseResponse;

enum mmeE_RABReleaseItemBearerRelCompIEs_Value_PDUs {
    mmePDU_E_RABReleaseItemBearerRelCompIEs_Value_UNKNOWN = 0,

    mmePDU_E_RABReleaseItemBearerRelCompIEs_Value_E_RABReleaseItemBearerRelComp = mmeE_RABReleaseItemBearerRelComp_PDU,

    mmePDU_E_RABReleaseItemBearerRelCompIEs_Value_MAX = INT_MAX
};

union mmeE_RABReleaseItemBearerRelCompIEs_Value_union {
    struct mmeE_RABReleaseItemBearerRelComp *pdu_E_RABReleaseItemBearerRelComp;                                         /* mmePDU_E_RABReleaseItemBearerRelCompIEs_Value_E_RABReleaseItemBearerRelComp */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeE_RABReleaseItemBearerRelCompIEs_Value {
    mmeE_RABReleaseItemBearerRelCompIEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeE_RABReleaseItemBearerRelCompIEs_Value_union decoded;
} mmeE_RABReleaseItemBearerRelCompIEs_Value;

typedef struct mmeE_RABReleaseListBearerRelComp_ {
    struct mmeE_RABReleaseListBearerRelComp_ *next;
    struct mme_seq42 {
        mmeProtocolIE_ID id;
        mmeCriticality  criticality;
        mmeE_RABReleaseItemBearerRelCompIEs_Value value;
    } value;
} *mmeE_RABReleaseListBearerRelComp;

typedef struct mmeE_RABReleaseItemBearerRelComp {
    unsigned char   bit_mask;
#       define      mmeE_RABReleaseItemBearerRelComp_iE_Extensions_present 0x80
    mmeE_RAB_ID     e_RAB_ID;
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                    * mmeE_RABReleaseItemBearerRelComp_iE_Extensions_present if
                    * present */
} mmeE_RABReleaseItemBearerRelComp;

enum mmeE_RABReleaseIndicationIEs_Value_PDUs {
    mmePDU_E_RABReleaseIndicationIEs_Value_UNKNOWN = 0,

    mmePDU_E_RABReleaseIndicationIEs_Value_MME_UE_S1AP_ID = mmeMME_UE_S1AP_ID_PDU,
    mmePDU_E_RABReleaseIndicationIEs_Value_ENB_UE_S1AP_ID = mmeENB_UE_S1AP_ID_PDU,
    mmePDU_E_RABReleaseIndicationIEs_Value_E_RABList = mmeE_RABList_PDU,
    mmePDU_E_RABReleaseIndicationIEs_Value_UserLocationInformation = mmeUserLocationInformation_PDU,

    mmePDU_E_RABReleaseIndicationIEs_Value_MAX = INT_MAX
};

union mmeE_RABReleaseIndicationIEs_Value_union {
    mmeMME_UE_S1AP_ID *pdu_MME_UE_S1AP_ID;  
                    /* mmePDU_E_RABReleaseIndicationIEs_Value_MME_UE_S1AP_ID */
    mmeENB_UE_S1AP_ID *pdu_ENB_UE_S1AP_ID;  
                    /* mmePDU_E_RABReleaseIndicationIEs_Value_ENB_UE_S1AP_ID */
    struct mmeE_RABList_ **pdu_E_RABList;  
                         /* mmePDU_E_RABReleaseIndicationIEs_Value_E_RABList */
    struct mmeUserLocationInformation *pdu_UserLocationInformation;  
           /* mmePDU_E_RABReleaseIndicationIEs_Value_UserLocationInformation */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeE_RABReleaseIndicationIEs_Value {
    mmeE_RABReleaseIndicationIEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeE_RABReleaseIndicationIEs_Value_union decoded;
} mmeE_RABReleaseIndicationIEs_Value;

// **************************************************************
//
// E-RAB RELEASE INDICATION ELEMENTARY PROCEDURE
//
// **************************************************************

// **************************************************************
//
// E-RAB Release Indication
//
// **************************************************************
typedef struct mmeE_RABReleaseIndication {
    struct mme_seqof33 {
        struct mme_seqof33 *next;
        struct mme_seq44 {
            mmeProtocolIE_ID id;
            mmeCriticality  criticality;
            mmeE_RABReleaseIndicationIEs_Value value;
        } value;
    } *protocolIEs;
} mmeE_RABReleaseIndication;

enum mmeInitialContextSetupRequestIEs_Value_PDUs {
    mmePDU_InitialContextSetupRequestIEs_Value_UNKNOWN = 0,

    mmePDU_InitialContextSetupRequestIEs_Value_MME_UE_S1AP_ID = mmeMME_UE_S1AP_ID_PDU,
    mmePDU_InitialContextSetupRequestIEs_Value_ENB_UE_S1AP_ID = mmeENB_UE_S1AP_ID_PDU,
    mmePDU_InitialContextSetupRequestIEs_Value_UEAggregateMaximumBitrate = mmeUEAggregateMaximumBitrate_PDU,
    mmePDU_InitialContextSetupRequestIEs_Value_E_RABToBeSetupListCtxtSUReq = mmeE_RABToBeSetupListCtxtSUReq_PDU,
    mmePDU_InitialContextSetupRequestIEs_Value_UESecurityCapabilities = mmeUESecurityCapabilities_PDU,
    mmePDU_InitialContextSetupRequestIEs_Value_SecurityKey = mmeSecurityKey_PDU,
    mmePDU_InitialContextSetupRequestIEs_Value_TraceActivation = mmeTraceActivation_PDU,
    mmePDU_InitialContextSetupRequestIEs_Value_HandoverRestrictionList = mmeHandoverRestrictionList_PDU,
    mmePDU_InitialContextSetupRequestIEs_Value_UERadioCapability = mmeUERadioCapability_PDU,
    mmePDU_InitialContextSetupRequestIEs_Value_SubscriberProfileIDforRFP = mmeSubscriberProfileIDforRFP_PDU,
    mmePDU_InitialContextSetupRequestIEs_Value_CSFallbackIndicator = mmeCSFallbackIndicator_PDU,
    mmePDU_InitialContextSetupRequestIEs_Value_SRVCCOperationPossible = mmeSRVCCOperationPossible_PDU,
    mmePDU_InitialContextSetupRequestIEs_Value_CSGMembershipStatus = mmeCSGMembershipStatus_PDU,
    mmePDU_InitialContextSetupRequestIEs_Value_LAI = mmeLAI_PDU,
    mmePDU_InitialContextSetupRequestIEs_Value_GUMMEI = mmeGUMMEI_PDU,
    mmePDU_InitialContextSetupRequestIEs_Value_ManagementBasedMDTAllowed = mmeManagementBasedMDTAllowed_PDU,
    mmePDU_InitialContextSetupRequestIEs_Value_MDTPLMNList = mmeMDTPLMNList_PDU,
    mmePDU_InitialContextSetupRequestIEs_Value_AdditionalCSFallbackIndicator = mmeAdditionalCSFallbackIndicator_PDU,
    mmePDU_InitialContextSetupRequestIEs_Value_Masked_IMEISV = mmeMasked_IMEISV_PDU,
    mmePDU_InitialContextSetupRequestIEs_Value_ExpectedUEBehaviour = mmeExpectedUEBehaviour_PDU,
    mmePDU_InitialContextSetupRequestIEs_Value_ProSeAuthorized = mmeProSeAuthorized_PDU,

    mmePDU_InitialContextSetupRequestIEs_Value_MAX = INT_MAX
};

union mmeInitialContextSetupRequestIEs_Value_union {
    mmeMME_UE_S1AP_ID *pdu_MME_UE_S1AP_ID;  
                /* mmePDU_InitialContextSetupRequestIEs_Value_MME_UE_S1AP_ID */
    mmeENB_UE_S1AP_ID *pdu_ENB_UE_S1AP_ID;  
                /* mmePDU_InitialContextSetupRequestIEs_Value_ENB_UE_S1AP_ID */
    struct mmeUEAggregateMaximumBitrate *pdu_UEAggregateMaximumBitrate;  
     /* mmePDU_InitialContextSetupRequestIEs_Value_UEAggregateMaximumBitrate */
    struct mmeE_RABToBeSetupListCtxtSUReq_ **pdu_E_RABToBeSetupListCtxtSUReq;                                           /* mmePDU_InitialContextSetupRequestIEs_Value_E_RABToBeSetupListCtxtSUReq */
    struct mmeUESecurityCapabilities *pdu_UESecurityCapabilities;  
        /* mmePDU_InitialContextSetupRequestIEs_Value_UESecurityCapabilities */
    struct mmeSecurityKey *pdu_SecurityKey;  
                   /* mmePDU_InitialContextSetupRequestIEs_Value_SecurityKey */
    struct mmeTraceActivation *pdu_TraceActivation;  
               /* mmePDU_InitialContextSetupRequestIEs_Value_TraceActivation */
    struct mmeHandoverRestrictionList *pdu_HandoverRestrictionList;  
       /* mmePDU_InitialContextSetupRequestIEs_Value_HandoverRestrictionList */
    struct mmeUERadioCapability *pdu_UERadioCapability;  
             /* mmePDU_InitialContextSetupRequestIEs_Value_UERadioCapability */
    mmeSubscriberProfileIDforRFP *pdu_SubscriberProfileIDforRFP;  
     /* mmePDU_InitialContextSetupRequestIEs_Value_SubscriberProfileIDforRFP */
    mmeCSFallbackIndicator *pdu_CSFallbackIndicator;  
           /* mmePDU_InitialContextSetupRequestIEs_Value_CSFallbackIndicator */
    mmeSRVCCOperationPossible *pdu_SRVCCOperationPossible;  
        /* mmePDU_InitialContextSetupRequestIEs_Value_SRVCCOperationPossible */
    mmeCSGMembershipStatus *pdu_CSGMembershipStatus;  
           /* mmePDU_InitialContextSetupRequestIEs_Value_CSGMembershipStatus */
    struct mmeLAI   *pdu_LAI;  
                           /* mmePDU_InitialContextSetupRequestIEs_Value_LAI */
    struct mmeGUMMEI *pdu_GUMMEI;  
                        /* mmePDU_InitialContextSetupRequestIEs_Value_GUMMEI */
    mmeManagementBasedMDTAllowed *pdu_ManagementBasedMDTAllowed;  
     /* mmePDU_InitialContextSetupRequestIEs_Value_ManagementBasedMDTAllowed */
    struct mmeMDTPLMNList_ **pdu_MDTPLMNList;  
                   /* mmePDU_InitialContextSetupRequestIEs_Value_MDTPLMNList */
    mmeAdditionalCSFallbackIndicator *pdu_AdditionalCSFallbackIndicator;  
                                        /* mmePDU_InitialContextSetupRequestIEs_Value_AdditionalCSFallbackIndicator */
    struct mmeMasked_IMEISV *pdu_Masked_IMEISV;  
                 /* mmePDU_InitialContextSetupRequestIEs_Value_Masked_IMEISV */
    struct mmeExpectedUEBehaviour *pdu_ExpectedUEBehaviour;  
           /* mmePDU_InitialContextSetupRequestIEs_Value_ExpectedUEBehaviour */
    struct mmeProSeAuthorized *pdu_ProSeAuthorized;  
               /* mmePDU_InitialContextSetupRequestIEs_Value_ProSeAuthorized */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeInitialContextSetupRequestIEs_Value {
    mmeInitialContextSetupRequestIEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeInitialContextSetupRequestIEs_Value_union decoded;
} mmeInitialContextSetupRequestIEs_Value;

// **************************************************************
//
// INITIAL CONTEXT SETUP ELEMENTARY PROCEDURE
//
// **************************************************************
// **************************************************************
//
// Initial Context Setup Request
//
// **************************************************************
typedef struct mmeInitialContextSetupRequest {
    struct mme_seqof34 {
        struct mme_seqof34 *next;
        struct mme_seq45 {
            mmeProtocolIE_ID id;
            mmeCriticality  criticality;
            mmeInitialContextSetupRequestIEs_Value value;
        } value;
    } *protocolIEs;
} mmeInitialContextSetupRequest;

enum mmeE_RABToBeSetupItemCtxtSUReqIEs_Value_PDUs {
    mmePDU_E_RABToBeSetupItemCtxtSUReqIEs_Value_UNKNOWN = 0,

    mmePDU_E_RABToBeSetupItemCtxtSUReqIEs_Value_E_RABToBeSetupItemCtxtSUReq = mmeE_RABToBeSetupItemCtxtSUReq_PDU,

    mmePDU_E_RABToBeSetupItemCtxtSUReqIEs_Value_MAX = INT_MAX
};

union mmeE_RABToBeSetupItemCtxtSUReqIEs_Value_union {
    struct mmeE_RABToBeSetupItemCtxtSUReq *pdu_E_RABToBeSetupItemCtxtSUReq;  
                                        /* mmePDU_E_RABToBeSetupItemCtxtSUReqIEs_Value_E_RABToBeSetupItemCtxtSUReq */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeE_RABToBeSetupItemCtxtSUReqIEs_Value {
    mmeE_RABToBeSetupItemCtxtSUReqIEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeE_RABToBeSetupItemCtxtSUReqIEs_Value_union decoded;
} mmeE_RABToBeSetupItemCtxtSUReqIEs_Value;

typedef struct mmeE_RABToBeSetupListCtxtSUReq_ {
    struct mmeE_RABToBeSetupListCtxtSUReq_ *next;
    struct mme_seq46 {
        mmeProtocolIE_ID id;
        mmeCriticality  criticality;
        mmeE_RABToBeSetupItemCtxtSUReqIEs_Value value;
    } value;
} *mmeE_RABToBeSetupListCtxtSUReq;

typedef struct mmeE_RABToBeSetupItemCtxtSUReq {
    unsigned char   bit_mask;
#       define      mmenAS_PDU_present 0x80
#       define      mmeE_RABToBeSetupItemCtxtSUReq_iE_Extensions_present 0x40
    mmeE_RAB_ID     e_RAB_ID;
    mmeE_RABLevelQoSParameters e_RABlevelQoSParameters;
    mmeTransportLayerAddress transportLayerAddress;
    mmeGTP_TEID     gTP_TEID;
    mmeNAS_PDU      nAS_PDU;  /* optional; set in bit_mask mmenAS_PDU_present if
                               * present */
    struct mme_seqof23_ *iE_Extensions;  /* optional; set in bit_mask
                      * mmeE_RABToBeSetupItemCtxtSUReq_iE_Extensions_present if
                      * present */
} mmeE_RABToBeSetupItemCtxtSUReq;

enum mmeInitialContextSetupResponseIEs_Value_PDUs {
    mmePDU_InitialContextSetupResponseIEs_Value_UNKNOWN = 0,

    mmePDU_InitialContextSetupResponseIEs_Value_MME_UE_S1AP_ID = mmeMME_UE_S1AP_ID_PDU,
    mmePDU_InitialContextSetupResponseIEs_Value_ENB_UE_S1AP_ID = mmeENB_UE_S1AP_ID_PDU,
    mmePDU_InitialContextSetupResponseIEs_Value_E_RABSetupListCtxtSURes = mmeE_RABSetupListCtxtSURes_PDU,
    mmePDU_InitialContextSetupResponseIEs_Value_E_RABList = mmeE_RABList_PDU,
    mmePDU_InitialContextSetupResponseIEs_Value_CriticalityDiagnostics = mmeCriticalityDiagnostics_PDU,

    mmePDU_InitialContextSetupResponseIEs_Value_MAX = INT_MAX
};

union mmeInitialContextSetupResponseIEs_Value_union {
    mmeMME_UE_S1AP_ID *pdu_MME_UE_S1AP_ID;  
               /* mmePDU_InitialContextSetupResponseIEs_Value_MME_UE_S1AP_ID */
    mmeENB_UE_S1AP_ID *pdu_ENB_UE_S1AP_ID;  
               /* mmePDU_InitialContextSetupResponseIEs_Value_ENB_UE_S1AP_ID */
    struct mmeE_RABSetupListCtxtSURes_ **pdu_E_RABSetupListCtxtSURes;  
      /* mmePDU_InitialContextSetupResponseIEs_Value_E_RABSetupListCtxtSURes */
    struct mmeE_RABList_ **pdu_E_RABList;  
                    /* mmePDU_InitialContextSetupResponseIEs_Value_E_RABList */
    struct mmeCriticalityDiagnostics *pdu_CriticalityDiagnostics;  
       /* mmePDU_InitialContextSetupResponseIEs_Value_CriticalityDiagnostics */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeInitialContextSetupResponseIEs_Value {
    mmeInitialContextSetupResponseIEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeInitialContextSetupResponseIEs_Value_union decoded;
} mmeInitialContextSetupResponseIEs_Value;

// **************************************************************
//
// Initial Context Setup Response
//
// **************************************************************
typedef struct mmeInitialContextSetupResponse {
    struct mme_seqof36 {
        struct mme_seqof36 *next;
        struct mme_seq48 {
            mmeProtocolIE_ID id;
            mmeCriticality  criticality;
            mmeInitialContextSetupResponseIEs_Value value;
        } value;
    } *protocolIEs;
} mmeInitialContextSetupResponse;

enum mmeE_RABSetupItemCtxtSUResIEs_Value_PDUs {
    mmePDU_E_RABSetupItemCtxtSUResIEs_Value_UNKNOWN = 0,

    mmePDU_E_RABSetupItemCtxtSUResIEs_Value_E_RABSetupItemCtxtSURes = mmeE_RABSetupItemCtxtSURes_PDU,

    mmePDU_E_RABSetupItemCtxtSUResIEs_Value_MAX = INT_MAX
};

union mmeE_RABSetupItemCtxtSUResIEs_Value_union {
    struct mmeE_RABSetupItemCtxtSURes *pdu_E_RABSetupItemCtxtSURes;  
          /* mmePDU_E_RABSetupItemCtxtSUResIEs_Value_E_RABSetupItemCtxtSURes */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeE_RABSetupItemCtxtSUResIEs_Value {
    mmeE_RABSetupItemCtxtSUResIEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeE_RABSetupItemCtxtSUResIEs_Value_union decoded;
} mmeE_RABSetupItemCtxtSUResIEs_Value;

typedef struct mmeE_RABSetupListCtxtSURes_ {
    struct mmeE_RABSetupListCtxtSURes_ *next;
    struct mme_seq49 {
        mmeProtocolIE_ID id;
        mmeCriticality  criticality;
        mmeE_RABSetupItemCtxtSUResIEs_Value value;
    } value;
} *mmeE_RABSetupListCtxtSURes;

typedef struct mmeE_RABSetupItemCtxtSURes {
    unsigned char   bit_mask;
#       define      mmeE_RABSetupItemCtxtSURes_iE_Extensions_present 0x80
    mmeE_RAB_ID     e_RAB_ID;
    mmeTransportLayerAddress transportLayerAddress;
    mmeGTP_TEID     gTP_TEID;
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                          * mmeE_RABSetupItemCtxtSURes_iE_Extensions_present if
                          * present */
} mmeE_RABSetupItemCtxtSURes;

// **************************************************************
//
// Initial Context Setup Failure
//
// **************************************************************
typedef struct mmeInitialContextSetupFailure {
    struct mme_seqof4_ *protocolIEs;
} mmeInitialContextSetupFailure;

enum mmePagingIEs_Value_PDUs {
    mmePDU_PagingIEs_Value_UNKNOWN = 0,

    mmePDU_PagingIEs_Value_UEIdentityIndexValue = mmeUEIdentityIndexValue_PDU,
    mmePDU_PagingIEs_Value_UEPagingID = mmeUEPagingID_PDU,
    mmePDU_PagingIEs_Value_PagingDRX = mmePagingDRX_PDU,
    mmePDU_PagingIEs_Value_CNDomain = mmeCNDomain_PDU,
    mmePDU_PagingIEs_Value_TAIList = mmeTAIList_PDU,
    mmePDU_PagingIEs_Value_CSG_IdList = mmeCSG_IdList_PDU,
    mmePDU_PagingIEs_Value_PagingPriority = mmePagingPriority_PDU,
    mmePDU_PagingIEs_Value_UERadioCapabilityForPaging = mmeUERadioCapabilityForPaging_PDU,

    mmePDU_PagingIEs_Value_MAX     = INT_MAX
};

union mmePagingIEs_Value_union {
    struct mmeUEIdentityIndexValue *pdu_UEIdentityIndexValue;  
                              /* mmePDU_PagingIEs_Value_UEIdentityIndexValue */
    struct mmeUEPagingID *pdu_UEPagingID;  
                                        /* mmePDU_PagingIEs_Value_UEPagingID */
    mmePagingDRX    *pdu_PagingDRX;  /* mmePDU_PagingIEs_Value_PagingDRX */
    mmeCNDomain     *pdu_CNDomain;  /* mmePDU_PagingIEs_Value_CNDomain */
    struct mmeTAIList_ **pdu_TAIList;  /* mmePDU_PagingIEs_Value_TAIList */
    struct mmeCSG_IdList_ **pdu_CSG_IdList;  
                                        /* mmePDU_PagingIEs_Value_CSG_IdList */
    mmePagingPriority *pdu_PagingPriority;  
                                    /* mmePDU_PagingIEs_Value_PagingPriority */
    struct mmeUERadioCapabilityForPaging *pdu_UERadioCapabilityForPaging;  
                                        /* mmePDU_PagingIEs_Value_UERadioCapabilityForPaging */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmePagingIEs_Value {
    mmePagingIEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmePagingIEs_Value_union decoded;
} mmePagingIEs_Value;

// **************************************************************
//
// PAGING ELEMENTARY PROCEDURE
//
// **************************************************************

// **************************************************************
//
// Paging
//
// **************************************************************
typedef struct mmePaging {
    struct mme_seqof39 {
        struct mme_seqof39 *next;
        struct mme_seq52 {
            mmeProtocolIE_ID id;
            mmeCriticality  criticality;
            mmePagingIEs_Value value;
        } value;
    } *protocolIEs;
} mmePaging;

enum mmeTAIItemIEs_Value_PDUs {
    mmePDU_TAIItemIEs_Value_UNKNOWN = 0,

    mmePDU_TAIItemIEs_Value_TAIItem = mmeTAIItem_PDU,

    mmePDU_TAIItemIEs_Value_MAX    = INT_MAX
};

union mmeTAIItemIEs_Value_union {
    struct mmeTAIItem *pdu_TAIItem;  /* mmePDU_TAIItemIEs_Value_TAIItem */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeTAIItemIEs_Value {
    mmeTAIItemIEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeTAIItemIEs_Value_union decoded;
} mmeTAIItemIEs_Value;

typedef struct mmeTAIList_ {
    struct mmeTAIList_ *next;
    struct mme_seq53 {
        mmeProtocolIE_ID id;
        mmeCriticality  criticality;
        mmeTAIItemIEs_Value value;
    } value;
} *mmeTAIList;

typedef struct mmeTBCD_STRING {
    unsigned short  length;
    unsigned char   value[3];
} mmeTBCD_STRING;

typedef mmeTBCD_STRING  mmePLMNidentity;

// T
typedef struct mmeTAC {
    unsigned short  length;
    unsigned char   value[2];
} mmeTAC;

typedef struct mmeTAI {
    unsigned char   bit_mask;
#       define      mmeTAI_iE_Extensions_present 0x80
    mmePLMNidentity pLMNidentity;
    mmeTAC          tAC;
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                                         * mmeTAI_iE_Extensions_present if
                                         * present */
} mmeTAI;

typedef struct mmeTAIItem {
    unsigned char   bit_mask;
#       define      mmeTAIItem_iE_Extensions_present 0x80
    mmeTAI          tAI;
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                                         * mmeTAIItem_iE_Extensions_present if
                                         * present */
} mmeTAIItem;

enum mmeUEContextReleaseRequest_IEs_Value_PDUs {
    mmePDU_UEContextReleaseRequest_IEs_Value_UNKNOWN = 0,

    mmePDU_UEContextReleaseRequest_IEs_Value_MME_UE_S1AP_ID = mmeMME_UE_S1AP_ID_PDU,
    mmePDU_UEContextReleaseRequest_IEs_Value_ENB_UE_S1AP_ID = mmeENB_UE_S1AP_ID_PDU,
    mmePDU_UEContextReleaseRequest_IEs_Value_Cause = mmeCause_PDU,
    mmePDU_UEContextReleaseRequest_IEs_Value_GWContextReleaseIndication = mmeGWContextReleaseIndication_PDU,

    mmePDU_UEContextReleaseRequest_IEs_Value_MAX = INT_MAX
};

union mmeUEContextReleaseRequest_IEs_Value_union {
    mmeMME_UE_S1AP_ID *pdu_MME_UE_S1AP_ID;  
                  /* mmePDU_UEContextReleaseRequest_IEs_Value_MME_UE_S1AP_ID */
    mmeENB_UE_S1AP_ID *pdu_ENB_UE_S1AP_ID;  
                  /* mmePDU_UEContextReleaseRequest_IEs_Value_ENB_UE_S1AP_ID */
    mmeCause        *pdu_Cause;  
                           /* mmePDU_UEContextReleaseRequest_IEs_Value_Cause */
    mmeGWContextReleaseIndication *pdu_GWContextReleaseIndication;  
      /* mmePDU_UEContextReleaseRequest_IEs_Value_GWContextReleaseIndication */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeUEContextReleaseRequest_IEs_Value {
    mmeUEContextReleaseRequest_IEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeUEContextReleaseRequest_IEs_Value_union decoded;
} mmeUEContextReleaseRequest_IEs_Value;

// **************************************************************
//
// UE CONTEXT RELEASE ELEMENTARY PROCEDURE
//
// **************************************************************

// **************************************************************
//
// UE Context Release Request
//
// **************************************************************
typedef struct mmeUEContextReleaseRequest {
    struct mme_seqof42 {
        struct mme_seqof42 *next;
        struct mme_seq56 {
            mmeProtocolIE_ID id;
            mmeCriticality  criticality;
            mmeUEContextReleaseRequest_IEs_Value value;
        } value;
    } *protocolIEs;
} mmeUEContextReleaseRequest;

enum mmeUEContextReleaseCommand_IEs_Value_PDUs {
    mmePDU_UEContextReleaseCommand_IEs_Value_UNKNOWN = 0,

    mmePDU_UEContextReleaseCommand_IEs_Value_UE_S1AP_IDs = mmeUE_S1AP_IDs_PDU,
    mmePDU_UEContextReleaseCommand_IEs_Value_Cause = mmeCause_PDU,

    mmePDU_UEContextReleaseCommand_IEs_Value_MAX = INT_MAX
};

union mmeUEContextReleaseCommand_IEs_Value_union {
    struct mmeUE_S1AP_IDs *pdu_UE_S1AP_IDs;  
                     /* mmePDU_UEContextReleaseCommand_IEs_Value_UE_S1AP_IDs */
    mmeCause        *pdu_Cause;  
                           /* mmePDU_UEContextReleaseCommand_IEs_Value_Cause */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeUEContextReleaseCommand_IEs_Value {
    mmeUEContextReleaseCommand_IEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeUEContextReleaseCommand_IEs_Value_union decoded;
} mmeUEContextReleaseCommand_IEs_Value;

// **************************************************************
//
// UE Context Release Command
//
// **************************************************************
typedef struct mmeUEContextReleaseCommand {
    struct mme_seqof43 {
        struct mme_seqof43 *next;
        struct mme_seq57 {
            mmeProtocolIE_ID id;
            mmeCriticality  criticality;
            mmeUEContextReleaseCommand_IEs_Value value;
        } value;
    } *protocolIEs;
} mmeUEContextReleaseCommand;

enum mmeUEContextReleaseComplete_IEs_Value_PDUs {
    mmePDU_UEContextReleaseComplete_IEs_Value_UNKNOWN = 0,

    mmePDU_UEContextReleaseComplete_IEs_Value_MME_UE_S1AP_ID = mmeMME_UE_S1AP_ID_PDU,
    mmePDU_UEContextReleaseComplete_IEs_Value_ENB_UE_S1AP_ID = mmeENB_UE_S1AP_ID_PDU,
    mmePDU_UEContextReleaseComplete_IEs_Value_CriticalityDiagnostics = mmeCriticalityDiagnostics_PDU,
    mmePDU_UEContextReleaseComplete_IEs_Value_UserLocationInformation = mmeUserLocationInformation_PDU,

    mmePDU_UEContextReleaseComplete_IEs_Value_MAX = INT_MAX
};

union mmeUEContextReleaseComplete_IEs_Value_union {
    mmeMME_UE_S1AP_ID *pdu_MME_UE_S1AP_ID;  
                 /* mmePDU_UEContextReleaseComplete_IEs_Value_MME_UE_S1AP_ID */
    mmeENB_UE_S1AP_ID *pdu_ENB_UE_S1AP_ID;  
                 /* mmePDU_UEContextReleaseComplete_IEs_Value_ENB_UE_S1AP_ID */
    struct mmeCriticalityDiagnostics *pdu_CriticalityDiagnostics;  
         /* mmePDU_UEContextReleaseComplete_IEs_Value_CriticalityDiagnostics */
    struct mmeUserLocationInformation *pdu_UserLocationInformation;  
        /* mmePDU_UEContextReleaseComplete_IEs_Value_UserLocationInformation */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeUEContextReleaseComplete_IEs_Value {
    mmeUEContextReleaseComplete_IEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeUEContextReleaseComplete_IEs_Value_union decoded;
} mmeUEContextReleaseComplete_IEs_Value;

// **************************************************************
//
// UE Context Release Complete
//
// **************************************************************
typedef struct mmeUEContextReleaseComplete {
    struct mme_seqof44 {
        struct mme_seqof44 *next;
        struct mme_seq58 {
            mmeProtocolIE_ID id;
            mmeCriticality  criticality;
            mmeUEContextReleaseComplete_IEs_Value value;
        } value;
    } *protocolIEs;
} mmeUEContextReleaseComplete;

enum mmeUEContextModificationRequestIEs_Value_PDUs {
    mmePDU_UEContextModificationRequestIEs_Value_UNKNOWN = 0,

    mmePDU_UEContextModificationRequestIEs_Value_MME_UE_S1AP_ID = mmeMME_UE_S1AP_ID_PDU,
    mmePDU_UEContextModificationRequestIEs_Value_ENB_UE_S1AP_ID = mmeENB_UE_S1AP_ID_PDU,
    mmePDU_UEContextModificationRequestIEs_Value_SecurityKey = mmeSecurityKey_PDU,
    mmePDU_UEContextModificationRequestIEs_Value_SubscriberProfileIDforRFP = mmeSubscriberProfileIDforRFP_PDU,
    mmePDU_UEContextModificationRequestIEs_Value_UEAggregateMaximumBitrate = mmeUEAggregateMaximumBitrate_PDU,
    mmePDU_UEContextModificationRequestIEs_Value_CSFallbackIndicator = mmeCSFallbackIndicator_PDU,
    mmePDU_UEContextModificationRequestIEs_Value_UESecurityCapabilities = mmeUESecurityCapabilities_PDU,
    mmePDU_UEContextModificationRequestIEs_Value_CSGMembershipStatus = mmeCSGMembershipStatus_PDU,
    mmePDU_UEContextModificationRequestIEs_Value_LAI = mmeLAI_PDU,
    mmePDU_UEContextModificationRequestIEs_Value_AdditionalCSFallbackIndicator = mmeAdditionalCSFallbackIndicator_PDU,
    mmePDU_UEContextModificationRequestIEs_Value_ProSeAuthorized = mmeProSeAuthorized_PDU,

    mmePDU_UEContextModificationRequestIEs_Value_MAX = INT_MAX
};

union mmeUEContextModificationRequestIEs_Value_union {
    mmeMME_UE_S1AP_ID *pdu_MME_UE_S1AP_ID;  
              /* mmePDU_UEContextModificationRequestIEs_Value_MME_UE_S1AP_ID */
    mmeENB_UE_S1AP_ID *pdu_ENB_UE_S1AP_ID;  
              /* mmePDU_UEContextModificationRequestIEs_Value_ENB_UE_S1AP_ID */
    struct mmeSecurityKey *pdu_SecurityKey;  
                 /* mmePDU_UEContextModificationRequestIEs_Value_SecurityKey */
    mmeSubscriberProfileIDforRFP *pdu_SubscriberProfileIDforRFP;  
   /* mmePDU_UEContextModificationRequestIEs_Value_SubscriberProfileIDforRFP */
    struct mmeUEAggregateMaximumBitrate *pdu_UEAggregateMaximumBitrate;  
   /* mmePDU_UEContextModificationRequestIEs_Value_UEAggregateMaximumBitrate */
    mmeCSFallbackIndicator *pdu_CSFallbackIndicator;  
         /* mmePDU_UEContextModificationRequestIEs_Value_CSFallbackIndicator */
    struct mmeUESecurityCapabilities *pdu_UESecurityCapabilities;  
      /* mmePDU_UEContextModificationRequestIEs_Value_UESecurityCapabilities */
    mmeCSGMembershipStatus *pdu_CSGMembershipStatus;  
         /* mmePDU_UEContextModificationRequestIEs_Value_CSGMembershipStatus */
    struct mmeLAI   *pdu_LAI;  
                         /* mmePDU_UEContextModificationRequestIEs_Value_LAI */
    mmeAdditionalCSFallbackIndicator *pdu_AdditionalCSFallbackIndicator;  
                                        /* mmePDU_UEContextModificationRequestIEs_Value_AdditionalCSFallbackIndicator */
    struct mmeProSeAuthorized *pdu_ProSeAuthorized;  
             /* mmePDU_UEContextModificationRequestIEs_Value_ProSeAuthorized */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeUEContextModificationRequestIEs_Value {
    mmeUEContextModificationRequestIEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeUEContextModificationRequestIEs_Value_union decoded;
} mmeUEContextModificationRequestIEs_Value;

// **************************************************************
//
// UE CONTEXT MODIFICATION ELEMENTARY PROCEDURE
//
// **************************************************************

// **************************************************************
//
// UE Context Modification Request
//
// **************************************************************
typedef struct mmeUEContextModificationRequest {
    struct mme_seqof45 {
        struct mme_seqof45 *next;
        struct mme_seq59 {
            mmeProtocolIE_ID id;
            mmeCriticality  criticality;
            mmeUEContextModificationRequestIEs_Value value;
        } value;
    } *protocolIEs;
} mmeUEContextModificationRequest;

// **************************************************************
//
// UE Context Modification Response
//
// **************************************************************
typedef struct mmeUEContextModificationResponse {
    struct mme_seqof21_ *protocolIEs;
} mmeUEContextModificationResponse;

// **************************************************************
//
// UE Context Modification Failure
//
// **************************************************************
typedef struct mmeUEContextModificationFailure {
    struct mme_seqof4_ *protocolIEs;
} mmeUEContextModificationFailure;

enum mmeUERadioCapabilityMatchRequestIEs_Value_PDUs {
    mmePDU_UERadioCapabilityMatchRequestIEs_Value_UNKNOWN = 0,

    mmePDU_UERadioCapabilityMatchRequestIEs_Value_MME_UE_S1AP_ID = mmeMME_UE_S1AP_ID_PDU,
    mmePDU_UERadioCapabilityMatchRequestIEs_Value_ENB_UE_S1AP_ID = mmeENB_UE_S1AP_ID_PDU,
    mmePDU_UERadioCapabilityMatchRequestIEs_Value_UERadioCapability = mmeUERadioCapability_PDU,

    mmePDU_UERadioCapabilityMatchRequestIEs_Value_MAX = INT_MAX
};

union mmeUERadioCapabilityMatchRequestIEs_Value_union {
    mmeMME_UE_S1AP_ID *pdu_MME_UE_S1AP_ID;  
             /* mmePDU_UERadioCapabilityMatchRequestIEs_Value_MME_UE_S1AP_ID */
    mmeENB_UE_S1AP_ID *pdu_ENB_UE_S1AP_ID;  
             /* mmePDU_UERadioCapabilityMatchRequestIEs_Value_ENB_UE_S1AP_ID */
    struct mmeUERadioCapability *pdu_UERadioCapability;  
          /* mmePDU_UERadioCapabilityMatchRequestIEs_Value_UERadioCapability */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeUERadioCapabilityMatchRequestIEs_Value {
    mmeUERadioCapabilityMatchRequestIEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeUERadioCapabilityMatchRequestIEs_Value_union decoded;
} mmeUERadioCapabilityMatchRequestIEs_Value;

// **************************************************************
//
// UE RADIO CAPABILITY MATCH ELEMENTARY PROCEDURE
//
// **************************************************************

// **************************************************************
//
// UE Radio Capability Match Request
//
// **************************************************************
typedef struct mmeUERadioCapabilityMatchRequest {
    struct mme_seqof48 {
        struct mme_seqof48 *next;
        struct mme_seq62 {
            mmeProtocolIE_ID id;
            mmeCriticality  criticality;
            mmeUERadioCapabilityMatchRequestIEs_Value value;
        } value;
    } *protocolIEs;
} mmeUERadioCapabilityMatchRequest;

enum mmeUERadioCapabilityMatchResponseIEs_Value_PDUs {
    mmePDU_UERadioCapabilityMatchResponseIEs_Value_UNKNOWN = 0,

    mmePDU_UERadioCapabilityMatchResponseIEs_Value_MME_UE_S1AP_ID = mmeMME_UE_S1AP_ID_PDU,
    mmePDU_UERadioCapabilityMatchResponseIEs_Value_ENB_UE_S1AP_ID = mmeENB_UE_S1AP_ID_PDU,
    mmePDU_UERadioCapabilityMatchResponseIEs_Value_VoiceSupportMatchIndicator = mmeVoiceSupportMatchIndicator_PDU,
    mmePDU_UERadioCapabilityMatchResponseIEs_Value_CriticalityDiagnostics = mmeCriticalityDiagnostics_PDU,

    mmePDU_UERadioCapabilityMatchResponseIEs_Value_MAX = INT_MAX
};

union mmeUERadioCapabilityMatchResponseIEs_Value_union {
    mmeMME_UE_S1AP_ID *pdu_MME_UE_S1AP_ID;  
            /* mmePDU_UERadioCapabilityMatchResponseIEs_Value_MME_UE_S1AP_ID */
    mmeENB_UE_S1AP_ID *pdu_ENB_UE_S1AP_ID;  
            /* mmePDU_UERadioCapabilityMatchResponseIEs_Value_ENB_UE_S1AP_ID */
    mmeVoiceSupportMatchIndicator *pdu_VoiceSupportMatchIndicator;  
/* mmePDU_UERadioCapabilityMatchResponseIEs_Value_VoiceSupportMatchIndicator */
    struct mmeCriticalityDiagnostics *pdu_CriticalityDiagnostics;  
    /* mmePDU_UERadioCapabilityMatchResponseIEs_Value_CriticalityDiagnostics */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeUERadioCapabilityMatchResponseIEs_Value {
    mmeUERadioCapabilityMatchResponseIEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeUERadioCapabilityMatchResponseIEs_Value_union decoded;
} mmeUERadioCapabilityMatchResponseIEs_Value;

// **************************************************************
//
// UE Radio Capability Match Response
//
// **************************************************************
typedef struct mmeUERadioCapabilityMatchResponse {
    struct mme_seqof49 {
        struct mme_seqof49 *next;
        struct mme_seq63 {
            mmeProtocolIE_ID id;
            mmeCriticality  criticality;
            mmeUERadioCapabilityMatchResponseIEs_Value value;
        } value;
    } *protocolIEs;
} mmeUERadioCapabilityMatchResponse;

enum mmeDownlinkNASTransport_IEs_Value_PDUs {
    mmePDU_DownlinkNASTransport_IEs_Value_UNKNOWN = 0,

    mmePDU_DownlinkNASTransport_IEs_Value_MME_UE_S1AP_ID = mmeMME_UE_S1AP_ID_PDU,
    mmePDU_DownlinkNASTransport_IEs_Value_ENB_UE_S1AP_ID = mmeENB_UE_S1AP_ID_PDU,
    mmePDU_DownlinkNASTransport_IEs_Value_NAS_PDU = mmeNAS_PDU_PDU,
    mmePDU_DownlinkNASTransport_IEs_Value_HandoverRestrictionList = mmeHandoverRestrictionList_PDU,
    mmePDU_DownlinkNASTransport_IEs_Value_SubscriberProfileIDforRFP = mmeSubscriberProfileIDforRFP_PDU,
    mmePDU_DownlinkNASTransport_IEs_Value_SRVCCOperationPossible = mmeSRVCCOperationPossible_PDU,

    mmePDU_DownlinkNASTransport_IEs_Value_MAX = INT_MAX
};

union mmeDownlinkNASTransport_IEs_Value_union {
    mmeMME_UE_S1AP_ID *pdu_MME_UE_S1AP_ID;  
                     /* mmePDU_DownlinkNASTransport_IEs_Value_MME_UE_S1AP_ID */
    mmeENB_UE_S1AP_ID *pdu_ENB_UE_S1AP_ID;  
                     /* mmePDU_DownlinkNASTransport_IEs_Value_ENB_UE_S1AP_ID */
    mmeNAS_PDU      *pdu_NAS_PDU;  
                            /* mmePDU_DownlinkNASTransport_IEs_Value_NAS_PDU */
    struct mmeHandoverRestrictionList *pdu_HandoverRestrictionList;  
            /* mmePDU_DownlinkNASTransport_IEs_Value_HandoverRestrictionList */
    mmeSubscriberProfileIDforRFP *pdu_SubscriberProfileIDforRFP;  
          /* mmePDU_DownlinkNASTransport_IEs_Value_SubscriberProfileIDforRFP */
    mmeSRVCCOperationPossible *pdu_SRVCCOperationPossible;  
             /* mmePDU_DownlinkNASTransport_IEs_Value_SRVCCOperationPossible */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeDownlinkNASTransport_IEs_Value {
    mmeDownlinkNASTransport_IEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeDownlinkNASTransport_IEs_Value_union decoded;
} mmeDownlinkNASTransport_IEs_Value;

// **************************************************************
//
// NAS TRANSPORT ELEMENTARY PROCEDURES
//
// **************************************************************

// **************************************************************
//
// DOWNLINK NAS TRANSPORT
//
// **************************************************************
typedef struct mmeDownlinkNASTransport {
    struct mme_seqof50 {
        struct mme_seqof50 *next;
        struct mme_seq64 {
            mmeProtocolIE_ID id;
            mmeCriticality  criticality;
            mmeDownlinkNASTransport_IEs_Value value;
        } value;
    } *protocolIEs;
} mmeDownlinkNASTransport;

enum mmeInitialUEMessage_IEs_Value_PDUs {
    mmePDU_InitialUEMessage_IEs_Value_UNKNOWN = 0,

    mmePDU_InitialUEMessage_IEs_Value_ENB_UE_S1AP_ID = mmeENB_UE_S1AP_ID_PDU,
    mmePDU_InitialUEMessage_IEs_Value_NAS_PDU = mmeNAS_PDU_PDU,
    mmePDU_InitialUEMessage_IEs_Value_TAI = mmeTAI_PDU,
    mmePDU_InitialUEMessage_IEs_Value_EUTRAN_CGI = mmeEUTRAN_CGI_PDU,
    mmePDU_InitialUEMessage_IEs_Value_RRC_Establishment_Cause = mmeRRC_Establishment_Cause_PDU,
    mmePDU_InitialUEMessage_IEs_Value_S_TMSI = mmeS_TMSI_PDU,
    mmePDU_InitialUEMessage_IEs_Value_CSG_Id = mmeCSG_Id_PDU,
    mmePDU_InitialUEMessage_IEs_Value_GUMMEI = mmeGUMMEI_PDU,
    mmePDU_InitialUEMessage_IEs_Value_CellAccessMode = mmeCellAccessMode_PDU,
    mmePDU_InitialUEMessage_IEs_Value_TransportLayerAddress = mmeTransportLayerAddress_PDU,
    mmePDU_InitialUEMessage_IEs_Value_RelayNode_Indicator = mmeRelayNode_Indicator_PDU,
    mmePDU_InitialUEMessage_IEs_Value_GUMMEIType = mmeGUMMEIType_PDU,
    mmePDU_InitialUEMessage_IEs_Value_TunnelInformation = mmeTunnelInformation_PDU,
    mmePDU_InitialUEMessage_IEs_Value_LHN_ID = mmeLHN_ID_PDU,

    mmePDU_InitialUEMessage_IEs_Value_MAX = INT_MAX
};

union mmeInitialUEMessage_IEs_Value_union {
    mmeENB_UE_S1AP_ID *pdu_ENB_UE_S1AP_ID;  
                         /* mmePDU_InitialUEMessage_IEs_Value_ENB_UE_S1AP_ID */
    mmeNAS_PDU      *pdu_NAS_PDU;  
                                /* mmePDU_InitialUEMessage_IEs_Value_NAS_PDU */
    mmeTAI          *pdu_TAI;  /* mmePDU_InitialUEMessage_IEs_Value_TAI */
    struct mmeEUTRAN_CGI *pdu_EUTRAN_CGI;  
                             /* mmePDU_InitialUEMessage_IEs_Value_EUTRAN_CGI */
    mmeRRC_Establishment_Cause *pdu_RRC_Establishment_Cause;  
                /* mmePDU_InitialUEMessage_IEs_Value_RRC_Establishment_Cause */
    struct mmeS_TMSI *pdu_S_TMSI;  
                                 /* mmePDU_InitialUEMessage_IEs_Value_S_TMSI */
    struct mmeCSG_Id *pdu_CSG_Id;  
                                 /* mmePDU_InitialUEMessage_IEs_Value_CSG_Id */
    struct mmeGUMMEI *pdu_GUMMEI;  
                                 /* mmePDU_InitialUEMessage_IEs_Value_GUMMEI */
    mmeCellAccessMode *pdu_CellAccessMode;  
                         /* mmePDU_InitialUEMessage_IEs_Value_CellAccessMode */
    mmeTransportLayerAddress *pdu_TransportLayerAddress;  
                  /* mmePDU_InitialUEMessage_IEs_Value_TransportLayerAddress */
    mmeRelayNode_Indicator *pdu_RelayNode_Indicator;  
                    /* mmePDU_InitialUEMessage_IEs_Value_RelayNode_Indicator */
    mmeGUMMEIType   *pdu_GUMMEIType;  
                             /* mmePDU_InitialUEMessage_IEs_Value_GUMMEIType */
    struct mmeTunnelInformation *pdu_TunnelInformation;  
                      /* mmePDU_InitialUEMessage_IEs_Value_TunnelInformation */
    struct mmeLHN_ID *pdu_LHN_ID;  
                                 /* mmePDU_InitialUEMessage_IEs_Value_LHN_ID */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeInitialUEMessage_IEs_Value {
    mmeInitialUEMessage_IEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeInitialUEMessage_IEs_Value_union decoded;
} mmeInitialUEMessage_IEs_Value;

// **************************************************************
//
// INITIAL UE MESSAGE
//
// **************************************************************
typedef struct mmeInitialUEMessage {
    struct mme_seqof51 {
        struct mme_seqof51 *next;
        struct mme_seq65 {
            mmeProtocolIE_ID id;
            mmeCriticality  criticality;
            mmeInitialUEMessage_IEs_Value value;
        } value;
    } *protocolIEs;
} mmeInitialUEMessage;

enum mmeUplinkNASTransport_IEs_Value_PDUs {
    mmePDU_UplinkNASTransport_IEs_Value_UNKNOWN = 0,

    mmePDU_UplinkNASTransport_IEs_Value_MME_UE_S1AP_ID = mmeMME_UE_S1AP_ID_PDU,
    mmePDU_UplinkNASTransport_IEs_Value_ENB_UE_S1AP_ID = mmeENB_UE_S1AP_ID_PDU,
    mmePDU_UplinkNASTransport_IEs_Value_NAS_PDU = mmeNAS_PDU_PDU,
    mmePDU_UplinkNASTransport_IEs_Value_EUTRAN_CGI = mmeEUTRAN_CGI_PDU,
    mmePDU_UplinkNASTransport_IEs_Value_TAI = mmeTAI_PDU,
    mmePDU_UplinkNASTransport_IEs_Value_TransportLayerAddress = mmeTransportLayerAddress_PDU,
    mmePDU_UplinkNASTransport_IEs_Value_LHN_ID = mmeLHN_ID_PDU,

    mmePDU_UplinkNASTransport_IEs_Value_MAX = INT_MAX
};

union mmeUplinkNASTransport_IEs_Value_union {
    mmeMME_UE_S1AP_ID *pdu_MME_UE_S1AP_ID;  
                       /* mmePDU_UplinkNASTransport_IEs_Value_MME_UE_S1AP_ID */
    mmeENB_UE_S1AP_ID *pdu_ENB_UE_S1AP_ID;  
                       /* mmePDU_UplinkNASTransport_IEs_Value_ENB_UE_S1AP_ID */
    mmeNAS_PDU      *pdu_NAS_PDU;  
                              /* mmePDU_UplinkNASTransport_IEs_Value_NAS_PDU */
    struct mmeEUTRAN_CGI *pdu_EUTRAN_CGI;  
                           /* mmePDU_UplinkNASTransport_IEs_Value_EUTRAN_CGI */
    mmeTAI          *pdu_TAI;  /* mmePDU_UplinkNASTransport_IEs_Value_TAI */
    mmeTransportLayerAddress *pdu_TransportLayerAddress;  
                /* mmePDU_UplinkNASTransport_IEs_Value_TransportLayerAddress */
    struct mmeLHN_ID *pdu_LHN_ID;  
                               /* mmePDU_UplinkNASTransport_IEs_Value_LHN_ID */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeUplinkNASTransport_IEs_Value {
    mmeUplinkNASTransport_IEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeUplinkNASTransport_IEs_Value_union decoded;
} mmeUplinkNASTransport_IEs_Value;

// **************************************************************
//
// UPLINK NAS TRANSPORT
//
// **************************************************************
typedef struct mmeUplinkNASTransport {
    struct mme_seqof52 {
        struct mme_seqof52 *next;
        struct mme_seq66 {
            mmeProtocolIE_ID id;
            mmeCriticality  criticality;
            mmeUplinkNASTransport_IEs_Value value;
        } value;
    } *protocolIEs;
} mmeUplinkNASTransport;

enum mmeNASNonDeliveryIndication_IEs_Value_PDUs {
    mmePDU_NASNonDeliveryIndication_IEs_Value_UNKNOWN = 0,

    mmePDU_NASNonDeliveryIndication_IEs_Value_MME_UE_S1AP_ID = mmeMME_UE_S1AP_ID_PDU,
    mmePDU_NASNonDeliveryIndication_IEs_Value_ENB_UE_S1AP_ID = mmeENB_UE_S1AP_ID_PDU,
    mmePDU_NASNonDeliveryIndication_IEs_Value_NAS_PDU = mmeNAS_PDU_PDU,
    mmePDU_NASNonDeliveryIndication_IEs_Value_Cause = mmeCause_PDU,

    mmePDU_NASNonDeliveryIndication_IEs_Value_MAX = INT_MAX
};

union mmeNASNonDeliveryIndication_IEs_Value_union {
    mmeMME_UE_S1AP_ID *pdu_MME_UE_S1AP_ID;  
                 /* mmePDU_NASNonDeliveryIndication_IEs_Value_MME_UE_S1AP_ID */
    mmeENB_UE_S1AP_ID *pdu_ENB_UE_S1AP_ID;  
                 /* mmePDU_NASNonDeliveryIndication_IEs_Value_ENB_UE_S1AP_ID */
    mmeNAS_PDU      *pdu_NAS_PDU;  
                        /* mmePDU_NASNonDeliveryIndication_IEs_Value_NAS_PDU */
    mmeCause        *pdu_Cause;  
                          /* mmePDU_NASNonDeliveryIndication_IEs_Value_Cause */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeNASNonDeliveryIndication_IEs_Value {
    mmeNASNonDeliveryIndication_IEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeNASNonDeliveryIndication_IEs_Value_union decoded;
} mmeNASNonDeliveryIndication_IEs_Value;

// **************************************************************
//
// NAS NON DELIVERY INDICATION
//
// **************************************************************
typedef struct mmeNASNonDeliveryIndication {
    struct mme_seqof53 {
        struct mme_seqof53 *next;
        struct mme_seq67 {
            mmeProtocolIE_ID id;
            mmeCriticality  criticality;
            mmeNASNonDeliveryIndication_IEs_Value value;
        } value;
    } *protocolIEs;
} mmeNASNonDeliveryIndication;

enum mmeResetIEs_Value_PDUs {
    mmePDU_ResetIEs_Value_UNKNOWN  = 0,

    mmePDU_ResetIEs_Value_Cause    = mmeCause_PDU,
    mmePDU_ResetIEs_Value_ResetType = mmeResetType_PDU,

    mmePDU_ResetIEs_Value_MAX      = INT_MAX
};

union mmeResetIEs_Value_union {
    mmeCause        *pdu_Cause;  /* mmePDU_ResetIEs_Value_Cause */
    struct mmeResetType *pdu_ResetType;  /* mmePDU_ResetIEs_Value_ResetType */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeResetIEs_Value {
    mmeResetIEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeResetIEs_Value_union decoded;
} mmeResetIEs_Value;

// **************************************************************
//
// RESET ELEMENTARY PROCEDURE
//
// **************************************************************

// **************************************************************
//
// Reset
//
// **************************************************************
typedef struct mmeReset {
    struct mme_seqof54 {
        struct mme_seqof54 *next;
        struct mme_seq68 {
            mmeProtocolIE_ID id;
            mmeCriticality  criticality;
            mmeResetIEs_Value value;
        } value;
    } *protocolIEs;
} mmeReset;

typedef enum mmeResetAll {
    mmereset_all = 0
} mmeResetAll;

typedef struct mmeResetType {
    unsigned short  choice;
#       define      mmes1_Interface_chosen 1
#       define      mmepartOfS1_Interface_chosen 2
    union _union {
        mmeResetAll     s1_Interface;  /* to choose, set choice to
                                        * mmes1_Interface_chosen */
        struct mmeUE_associatedLogicalS1_ConnectionListRes_ *partOfS1_Interface;                                        /* to choose, set choice to
                                         * mmepartOfS1_Interface_chosen */
    } u;
} mmeResetType;

enum mmeUE_associatedLogicalS1_ConnectionItemRes_Value_PDUs {
    mmePDU_UE_associatedLogicalS1_ConnectionItemRes_Value_UNKNOWN = 0,

    mmePDU_UE_associatedLogicalS1_ConnectionItemRes_Value_UE_associatedLogicalS1_ConnectionItem = mmeUE_associatedLogicalS1_ConnectionItem_PDU,

    mmePDU_UE_associatedLogicalS1_ConnectionItemRes_Value_MAX = INT_MAX
};

union mmeUE_associatedLogicalS1_ConnectionItemRes_Value_union {
    struct mmeUE_associatedLogicalS1_ConnectionItem *pdu_UE_associatedLogicalS1_ConnectionItem;                         /* mmePDU_UE_associatedLogicalS1_ConnectionItemRes_Value_UE_associatedLogicalS1_ConnectionItem */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeUE_associatedLogicalS1_ConnectionItemRes_Value {
    mmeUE_associatedLogicalS1_ConnectionItemRes_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeUE_associatedLogicalS1_ConnectionItemRes_Value_union decoded;
} mmeUE_associatedLogicalS1_ConnectionItemRes_Value;

typedef struct mme_seq69 {
    mmeProtocolIE_ID id;
    mmeCriticality  criticality;
    mmeUE_associatedLogicalS1_ConnectionItemRes_Value value;
} mme_seq69;

typedef struct mmeUE_associatedLogicalS1_ConnectionListRes_ {
    struct mmeUE_associatedLogicalS1_ConnectionListRes_ *next;
    mme_seq69       value;
} *mmeUE_associatedLogicalS1_ConnectionListRes;

enum mmeResetAcknowledgeIEs_Value_PDUs {
    mmePDU_ResetAcknowledgeIEs_Value_UNKNOWN = 0,

    mmePDU_ResetAcknowledgeIEs_Value_UE_associatedLogicalS1_ConnectionListResAck = mmeUE_associatedLogicalS1_ConnectionListResAck_PDU,
    mmePDU_ResetAcknowledgeIEs_Value_CriticalityDiagnostics = mmeCriticalityDiagnostics_PDU,

    mmePDU_ResetAcknowledgeIEs_Value_MAX = INT_MAX
};

union mmeResetAcknowledgeIEs_Value_union {
    struct mmeUE_associatedLogicalS1_ConnectionListResAck_ **pdu_UE_associatedLogicalS1_ConnectionListResAck;           /* mmePDU_ResetAcknowledgeIEs_Value_UE_associatedLogicalS1_ConnectionListResAck */
    struct mmeCriticalityDiagnostics *pdu_CriticalityDiagnostics;  
                  /* mmePDU_ResetAcknowledgeIEs_Value_CriticalityDiagnostics */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeResetAcknowledgeIEs_Value {
    mmeResetAcknowledgeIEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeResetAcknowledgeIEs_Value_union decoded;
} mmeResetAcknowledgeIEs_Value;

// **************************************************************
//
// Reset Acknowledge
//
// **************************************************************
typedef struct mmeResetAcknowledge {
    struct mme_seqof55 {
        struct mme_seqof55 *next;
        struct mme_seq70 {
            mmeProtocolIE_ID id;
            mmeCriticality  criticality;
            mmeResetAcknowledgeIEs_Value value;
        } value;
    } *protocolIEs;
} mmeResetAcknowledge;

typedef struct mmeUE_associatedLogicalS1_ConnectionListResAck_ {
    struct mmeUE_associatedLogicalS1_ConnectionListResAck_ *next;
    mme_seq69       value;
} *mmeUE_associatedLogicalS1_ConnectionListResAck;

// **************************************************************
//
// ERROR INDICATION ELEMENTARY PROCEDURE
//
// **************************************************************

// **************************************************************
//
// Error Indication
//
// **************************************************************
typedef struct mmeErrorIndication {
    struct mme_seqof4_ *protocolIEs;
} mmeErrorIndication;

enum mmeS1SetupRequestIEs_Value_PDUs {
    mmePDU_S1SetupRequestIEs_Value_UNKNOWN = 0,

    mmePDU_S1SetupRequestIEs_Value_Global_ENB_ID = mmeGlobal_ENB_ID_PDU,
    mmePDU_S1SetupRequestIEs_Value_ENBname = mmeENBname_PDU,
    mmePDU_S1SetupRequestIEs_Value_SupportedTAs = mmeSupportedTAs_PDU,
    mmePDU_S1SetupRequestIEs_Value_PagingDRX = mmePagingDRX_PDU,
    mmePDU_S1SetupRequestIEs_Value_CSG_IdList = mmeCSG_IdList_PDU,

    mmePDU_S1SetupRequestIEs_Value_MAX = INT_MAX
};

union mmeS1SetupRequestIEs_Value_union {
    struct mmeGlobal_ENB_ID *pdu_Global_ENB_ID;  
                             /* mmePDU_S1SetupRequestIEs_Value_Global_ENB_ID */
    struct mmeENBname *pdu_ENBname;  
                                   /* mmePDU_S1SetupRequestIEs_Value_ENBname */
    struct mmeSupportedTAs_ **pdu_SupportedTAs;  
                              /* mmePDU_S1SetupRequestIEs_Value_SupportedTAs */
    mmePagingDRX    *pdu_PagingDRX;  
                                 /* mmePDU_S1SetupRequestIEs_Value_PagingDRX */
    struct mmeCSG_IdList_ **pdu_CSG_IdList;  
                                /* mmePDU_S1SetupRequestIEs_Value_CSG_IdList */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeS1SetupRequestIEs_Value {
    mmeS1SetupRequestIEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeS1SetupRequestIEs_Value_union decoded;
} mmeS1SetupRequestIEs_Value;

// **************************************************************
//
// S1 SETUP ELEMENTARY PROCEDURE
//
// **************************************************************

// **************************************************************
//
// S1 Setup Request
//
// **************************************************************
typedef struct mmeS1SetupRequest {
    struct mme_seqof57 {
        struct mme_seqof57 *next;
        struct mme_seq73 {
            mmeProtocolIE_ID id;
            mmeCriticality  criticality;
            mmeS1SetupRequestIEs_Value value;
        } value;
    } *protocolIEs;
} mmeS1SetupRequest;

enum mmeS1SetupResponseIEs_Value_PDUs {
    mmePDU_S1SetupResponseIEs_Value_UNKNOWN = 0,

    mmePDU_S1SetupResponseIEs_Value_MMEname = mmeMMEname_PDU,
    mmePDU_S1SetupResponseIEs_Value_ServedGUMMEIs = mmeServedGUMMEIs_PDU,
    mmePDU_S1SetupResponseIEs_Value_RelativeMMECapacity = mmeRelativeMMECapacity_PDU,
    mmePDU_S1SetupResponseIEs_Value_MMERelaySupportIndicator = mmeMMERelaySupportIndicator_PDU,
    mmePDU_S1SetupResponseIEs_Value_CriticalityDiagnostics = mmeCriticalityDiagnostics_PDU,

    mmePDU_S1SetupResponseIEs_Value_MAX = INT_MAX
};

union mmeS1SetupResponseIEs_Value_union {
    struct mmeMMEname *pdu_MMEname;  
                                  /* mmePDU_S1SetupResponseIEs_Value_MMEname */
    struct mmeServedGUMMEIs_ **pdu_ServedGUMMEIs;  
                            /* mmePDU_S1SetupResponseIEs_Value_ServedGUMMEIs */
    mmeRelativeMMECapacity *pdu_RelativeMMECapacity;  
                      /* mmePDU_S1SetupResponseIEs_Value_RelativeMMECapacity */
    mmeMMERelaySupportIndicator *pdu_MMERelaySupportIndicator;  
                 /* mmePDU_S1SetupResponseIEs_Value_MMERelaySupportIndicator */
    struct mmeCriticalityDiagnostics *pdu_CriticalityDiagnostics;  
                   /* mmePDU_S1SetupResponseIEs_Value_CriticalityDiagnostics */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeS1SetupResponseIEs_Value {
    mmeS1SetupResponseIEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeS1SetupResponseIEs_Value_union decoded;
} mmeS1SetupResponseIEs_Value;

// **************************************************************
//
// S1 Setup Response
//
// **************************************************************
typedef struct mmeS1SetupResponse {
    struct mme_seqof58 {
        struct mme_seqof58 *next;
        struct mme_seq74 {
            mmeProtocolIE_ID id;
            mmeCriticality  criticality;
            mmeS1SetupResponseIEs_Value value;
        } value;
    } *protocolIEs;
} mmeS1SetupResponse;

enum mmeS1SetupFailureIEs_Value_PDUs {
    mmePDU_S1SetupFailureIEs_Value_UNKNOWN = 0,

    mmePDU_S1SetupFailureIEs_Value_Cause = mmeCause_PDU,
    mmePDU_S1SetupFailureIEs_Value_TimeToWait = mmeTimeToWait_PDU,
    mmePDU_S1SetupFailureIEs_Value_CriticalityDiagnostics = mmeCriticalityDiagnostics_PDU,

    mmePDU_S1SetupFailureIEs_Value_MAX = INT_MAX
};

union mmeS1SetupFailureIEs_Value_union {
    mmeCause        *pdu_Cause;  /* mmePDU_S1SetupFailureIEs_Value_Cause */
    mmeTimeToWait   *pdu_TimeToWait;  
                                /* mmePDU_S1SetupFailureIEs_Value_TimeToWait */
    struct mmeCriticalityDiagnostics *pdu_CriticalityDiagnostics;  
                    /* mmePDU_S1SetupFailureIEs_Value_CriticalityDiagnostics */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeS1SetupFailureIEs_Value {
    mmeS1SetupFailureIEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeS1SetupFailureIEs_Value_union decoded;
} mmeS1SetupFailureIEs_Value;

typedef struct mme_seq75 {
    mmeProtocolIE_ID id;
    mmeCriticality  criticality;
    mmeS1SetupFailureIEs_Value value;
} mme_seq75;

typedef struct mme_seqof59_ {
    struct mme_seqof59_ *next;
    mme_seq75       value;
} *mme_seqof59;

// **************************************************************
//
// S1 Setup Failure
//
// **************************************************************
typedef struct mmeS1SetupFailure {
    struct mme_seqof59_ *protocolIEs;
} mmeS1SetupFailure;

enum mmeENBConfigurationUpdateIEs_Value_PDUs {
    mmePDU_ENBConfigurationUpdateIEs_Value_UNKNOWN = 0,

    mmePDU_ENBConfigurationUpdateIEs_Value_ENBname = mmeENBname_PDU,
    mmePDU_ENBConfigurationUpdateIEs_Value_SupportedTAs = mmeSupportedTAs_PDU,
    mmePDU_ENBConfigurationUpdateIEs_Value_CSG_IdList = mmeCSG_IdList_PDU,
    mmePDU_ENBConfigurationUpdateIEs_Value_PagingDRX = mmePagingDRX_PDU,

    mmePDU_ENBConfigurationUpdateIEs_Value_MAX = INT_MAX
};

union mmeENBConfigurationUpdateIEs_Value_union {
    struct mmeENBname *pdu_ENBname;  
                           /* mmePDU_ENBConfigurationUpdateIEs_Value_ENBname */
    struct mmeSupportedTAs_ **pdu_SupportedTAs;  
                      /* mmePDU_ENBConfigurationUpdateIEs_Value_SupportedTAs */
    struct mmeCSG_IdList_ **pdu_CSG_IdList;  
                        /* mmePDU_ENBConfigurationUpdateIEs_Value_CSG_IdList */
    mmePagingDRX    *pdu_PagingDRX;  
                         /* mmePDU_ENBConfigurationUpdateIEs_Value_PagingDRX */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeENBConfigurationUpdateIEs_Value {
    mmeENBConfigurationUpdateIEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeENBConfigurationUpdateIEs_Value_union decoded;
} mmeENBConfigurationUpdateIEs_Value;

// **************************************************************
//
// ENB CONFIGURATION UPDATE ELEMENTARY PROCEDURE
//
// **************************************************************

// **************************************************************
//
// eNB Configuration Update 
//
// **************************************************************
typedef struct mmeENBConfigurationUpdate {
    struct mme_seqof60 {
        struct mme_seqof60 *next;
        struct mme_seq76 {
            mmeProtocolIE_ID id;
            mmeCriticality  criticality;
            mmeENBConfigurationUpdateIEs_Value value;
        } value;
    } *protocolIEs;
} mmeENBConfigurationUpdate;

enum mmeENBConfigurationUpdateAcknowledgeIEs_Value_PDUs {
    mmePDU_ENBConfigurationUpdateAcknowledgeIEs_Value_UNKNOWN = 0,

    mmePDU_ENBConfigurationUpdateAcknowledgeIEs_Value_CriticalityDiagnostics = mmeCriticalityDiagnostics_PDU,

    mmePDU_ENBConfigurationUpdateAcknowledgeIEs_Value_MAX = INT_MAX
};

union mmeENBConfigurationUpdateAcknowledgeIEs_Value_union {
    struct mmeCriticalityDiagnostics *pdu_CriticalityDiagnostics;  
 /* mmePDU_ENBConfigurationUpdateAcknowledgeIEs_Value_CriticalityDiagnostics */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeENBConfigurationUpdateAcknowledgeIEs_Value {
    mmeENBConfigurationUpdateAcknowledgeIEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeENBConfigurationUpdateAcknowledgeIEs_Value_union decoded;
} mmeENBConfigurationUpdateAcknowledgeIEs_Value;

typedef struct mme_seq77 {
    mmeProtocolIE_ID id;
    mmeCriticality  criticality;
    mmeENBConfigurationUpdateAcknowledgeIEs_Value value;
} mme_seq77;

typedef struct mme_seqof61_ {
    struct mme_seqof61_ *next;
    mme_seq77       value;
} *mme_seqof61;

// **************************************************************
//
// eNB Configuration Update Acknowledge
//
// **************************************************************
typedef struct mmeENBConfigurationUpdateAcknowledge {
    struct mme_seqof61_ *protocolIEs;
} mmeENBConfigurationUpdateAcknowledge;

// **************************************************************
//
// eNB Configuration Update Failure
//
// **************************************************************
typedef struct mmeENBConfigurationUpdateFailure {
    struct mme_seqof59_ *protocolIEs;
} mmeENBConfigurationUpdateFailure;

enum mmeMMEConfigurationUpdateIEs_Value_PDUs {
    mmePDU_MMEConfigurationUpdateIEs_Value_UNKNOWN = 0,

    mmePDU_MMEConfigurationUpdateIEs_Value_MMEname = mmeMMEname_PDU,
    mmePDU_MMEConfigurationUpdateIEs_Value_ServedGUMMEIs = mmeServedGUMMEIs_PDU,
    mmePDU_MMEConfigurationUpdateIEs_Value_RelativeMMECapacity = mmeRelativeMMECapacity_PDU,

    mmePDU_MMEConfigurationUpdateIEs_Value_MAX = INT_MAX
};

union mmeMMEConfigurationUpdateIEs_Value_union {
    struct mmeMMEname *pdu_MMEname;  
                           /* mmePDU_MMEConfigurationUpdateIEs_Value_MMEname */
    struct mmeServedGUMMEIs_ **pdu_ServedGUMMEIs;  
                     /* mmePDU_MMEConfigurationUpdateIEs_Value_ServedGUMMEIs */
    mmeRelativeMMECapacity *pdu_RelativeMMECapacity;  
               /* mmePDU_MMEConfigurationUpdateIEs_Value_RelativeMMECapacity */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeMMEConfigurationUpdateIEs_Value {
    mmeMMEConfigurationUpdateIEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeMMEConfigurationUpdateIEs_Value_union decoded;
} mmeMMEConfigurationUpdateIEs_Value;

// **************************************************************
//
// MME CONFIGURATION UPDATE ELEMENTARY PROCEDURE
//
// **************************************************************

// **************************************************************
//
// MME Configuration Update 
//
// **************************************************************
typedef struct mmeMMEConfigurationUpdate {
    struct mme_seqof63 {
        struct mme_seqof63 *next;
        struct mme_seq79 {
            mmeProtocolIE_ID id;
            mmeCriticality  criticality;
            mmeMMEConfigurationUpdateIEs_Value value;
        } value;
    } *protocolIEs;
} mmeMMEConfigurationUpdate;

// **************************************************************
//
// MME Configuration Update Acknowledge
//
// **************************************************************
typedef struct mmeMMEConfigurationUpdateAcknowledge {
    struct mme_seqof61_ *protocolIEs;
} mmeMMEConfigurationUpdateAcknowledge;

// **************************************************************
//
// MME Configuration Update Failure
//
// **************************************************************
typedef struct mmeMMEConfigurationUpdateFailure {
    struct mme_seqof59_ *protocolIEs;
} mmeMMEConfigurationUpdateFailure;

enum mmeDownlinkS1cdma2000tunnellingIEs_Value_PDUs {
    mmePDU_DownlinkS1cdma2000tunnellingIEs_Value_UNKNOWN = 0,

    mmePDU_DownlinkS1cdma2000tunnellingIEs_Value_MME_UE_S1AP_ID = mmeMME_UE_S1AP_ID_PDU,
    mmePDU_DownlinkS1cdma2000tunnellingIEs_Value_ENB_UE_S1AP_ID = mmeENB_UE_S1AP_ID_PDU,
    mmePDU_DownlinkS1cdma2000tunnellingIEs_Value_E_RABSubjecttoDataForwardingList = mmeE_RABSubjecttoDataForwardingList_PDU,
    mmePDU_DownlinkS1cdma2000tunnellingIEs_Value_Cdma2000HOStatus = mmeCdma2000HOStatus_PDU,
    mmePDU_DownlinkS1cdma2000tunnellingIEs_Value_Cdma2000RATType = mmeCdma2000RATType_PDU,
    mmePDU_DownlinkS1cdma2000tunnellingIEs_Value_Cdma2000PDU = mmeCdma2000PDU_PDU,

    mmePDU_DownlinkS1cdma2000tunnellingIEs_Value_MAX = INT_MAX
};

union mmeDownlinkS1cdma2000tunnellingIEs_Value_union {
    mmeMME_UE_S1AP_ID *pdu_MME_UE_S1AP_ID;  
              /* mmePDU_DownlinkS1cdma2000tunnellingIEs_Value_MME_UE_S1AP_ID */
    mmeENB_UE_S1AP_ID *pdu_ENB_UE_S1AP_ID;  
              /* mmePDU_DownlinkS1cdma2000tunnellingIEs_Value_ENB_UE_S1AP_ID */
    struct mmeE_RABSubjecttoDataForwardingList_ **pdu_E_RABSubjecttoDataForwardingList;                                 /* mmePDU_DownlinkS1cdma2000tunnellingIEs_Value_E_RABSubjecttoDataForwardingList */
    mmeCdma2000HOStatus *pdu_Cdma2000HOStatus;  
            /* mmePDU_DownlinkS1cdma2000tunnellingIEs_Value_Cdma2000HOStatus */
    mmeCdma2000RATType *pdu_Cdma2000RATType;  
             /* mmePDU_DownlinkS1cdma2000tunnellingIEs_Value_Cdma2000RATType */
    struct mmeCdma2000PDU *pdu_Cdma2000PDU;  
                 /* mmePDU_DownlinkS1cdma2000tunnellingIEs_Value_Cdma2000PDU */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeDownlinkS1cdma2000tunnellingIEs_Value {
    mmeDownlinkS1cdma2000tunnellingIEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeDownlinkS1cdma2000tunnellingIEs_Value_union decoded;
} mmeDownlinkS1cdma2000tunnellingIEs_Value;

// **************************************************************
//
// DOWNLINK S1 CDMA2000 TUNNELLING ELEMENTARY PROCEDURE
//
// **************************************************************

// **************************************************************
//
// Downlink S1 CDMA2000 Tunnelling
//
// **************************************************************
typedef struct mmeDownlinkS1cdma2000tunnelling {
    struct mme_seqof66 {
        struct mme_seqof66 *next;
        struct mme_seq82 {
            mmeProtocolIE_ID id;
            mmeCriticality  criticality;
            mmeDownlinkS1cdma2000tunnellingIEs_Value value;
        } value;
    } *protocolIEs;
} mmeDownlinkS1cdma2000tunnelling;

enum mmeUplinkS1cdma2000tunnellingIEs_Value_PDUs {
    mmePDU_UplinkS1cdma2000tunnellingIEs_Value_UNKNOWN = 0,

    mmePDU_UplinkS1cdma2000tunnellingIEs_Value_MME_UE_S1AP_ID = mmeMME_UE_S1AP_ID_PDU,
    mmePDU_UplinkS1cdma2000tunnellingIEs_Value_ENB_UE_S1AP_ID = mmeENB_UE_S1AP_ID_PDU,
    mmePDU_UplinkS1cdma2000tunnellingIEs_Value_Cdma2000RATType = mmeCdma2000RATType_PDU,
    mmePDU_UplinkS1cdma2000tunnellingIEs_Value_Cdma2000SectorID = mmeCdma2000SectorID_PDU,
    mmePDU_UplinkS1cdma2000tunnellingIEs_Value_Cdma2000HORequiredIndication = mmeCdma2000HORequiredIndication_PDU,
    mmePDU_UplinkS1cdma2000tunnellingIEs_Value_Cdma2000OneXSRVCCInfo = mmeCdma2000OneXSRVCCInfo_PDU,
    mmePDU_UplinkS1cdma2000tunnellingIEs_Value_Cdma2000OneXRAND = mmeCdma2000OneXRAND_PDU,
    mmePDU_UplinkS1cdma2000tunnellingIEs_Value_Cdma2000PDU = mmeCdma2000PDU_PDU,
    mmePDU_UplinkS1cdma2000tunnellingIEs_Value_EUTRANRoundTripDelayEstimationInfo = mmeEUTRANRoundTripDelayEstimationInfo_PDU,

    mmePDU_UplinkS1cdma2000tunnellingIEs_Value_MAX = INT_MAX
};

union mmeUplinkS1cdma2000tunnellingIEs_Value_union {
    mmeMME_UE_S1AP_ID *pdu_MME_UE_S1AP_ID;  
                /* mmePDU_UplinkS1cdma2000tunnellingIEs_Value_MME_UE_S1AP_ID */
    mmeENB_UE_S1AP_ID *pdu_ENB_UE_S1AP_ID;  
                /* mmePDU_UplinkS1cdma2000tunnellingIEs_Value_ENB_UE_S1AP_ID */
    mmeCdma2000RATType *pdu_Cdma2000RATType;  
               /* mmePDU_UplinkS1cdma2000tunnellingIEs_Value_Cdma2000RATType */
    struct mmeCdma2000SectorID *pdu_Cdma2000SectorID;  
              /* mmePDU_UplinkS1cdma2000tunnellingIEs_Value_Cdma2000SectorID */
    mmeCdma2000HORequiredIndication *pdu_Cdma2000HORequiredIndication;  
  /* mmePDU_UplinkS1cdma2000tunnellingIEs_Value_Cdma2000HORequiredIndication */
    struct mmeCdma2000OneXSRVCCInfo *pdu_Cdma2000OneXSRVCCInfo;  
         /* mmePDU_UplinkS1cdma2000tunnellingIEs_Value_Cdma2000OneXSRVCCInfo */
    struct mmeCdma2000OneXRAND *pdu_Cdma2000OneXRAND;  
              /* mmePDU_UplinkS1cdma2000tunnellingIEs_Value_Cdma2000OneXRAND */
    struct mmeCdma2000PDU *pdu_Cdma2000PDU;  
                   /* mmePDU_UplinkS1cdma2000tunnellingIEs_Value_Cdma2000PDU */
    mmeEUTRANRoundTripDelayEstimationInfo *pdu_EUTRANRoundTripDelayEstimationInfo;                                      /* mmePDU_UplinkS1cdma2000tunnellingIEs_Value_EUTRANRoundTripDelayEstimationInfo */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeUplinkS1cdma2000tunnellingIEs_Value {
    mmeUplinkS1cdma2000tunnellingIEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeUplinkS1cdma2000tunnellingIEs_Value_union decoded;
} mmeUplinkS1cdma2000tunnellingIEs_Value;

// **************************************************************
//
// UPLINK S1 CDMA2000 TUNNELLING ELEMENTARY PROCEDURE
//
// **************************************************************

// **************************************************************
//
// Uplink S1 CDMA2000 Tunnelling
//
// **************************************************************
typedef struct mmeUplinkS1cdma2000tunnelling {
    struct mme_seqof67 {
        struct mme_seqof67 *next;
        struct mme_seq83 {
            mmeProtocolIE_ID id;
            mmeCriticality  criticality;
            mmeUplinkS1cdma2000tunnellingIEs_Value value;
        } value;
    } *protocolIEs;
} mmeUplinkS1cdma2000tunnelling;

enum mmeUECapabilityInfoIndicationIEs_Value_PDUs {
    mmePDU_UECapabilityInfoIndicationIEs_Value_UNKNOWN = 0,

    mmePDU_UECapabilityInfoIndicationIEs_Value_MME_UE_S1AP_ID = mmeMME_UE_S1AP_ID_PDU,
    mmePDU_UECapabilityInfoIndicationIEs_Value_ENB_UE_S1AP_ID = mmeENB_UE_S1AP_ID_PDU,
    mmePDU_UECapabilityInfoIndicationIEs_Value_UERadioCapability = mmeUERadioCapability_PDU,
    mmePDU_UECapabilityInfoIndicationIEs_Value_UERadioCapabilityForPaging = mmeUERadioCapabilityForPaging_PDU,

    mmePDU_UECapabilityInfoIndicationIEs_Value_MAX = INT_MAX
};

union mmeUECapabilityInfoIndicationIEs_Value_union {
    mmeMME_UE_S1AP_ID *pdu_MME_UE_S1AP_ID;  
                /* mmePDU_UECapabilityInfoIndicationIEs_Value_MME_UE_S1AP_ID */
    mmeENB_UE_S1AP_ID *pdu_ENB_UE_S1AP_ID;  
                /* mmePDU_UECapabilityInfoIndicationIEs_Value_ENB_UE_S1AP_ID */
    struct mmeUERadioCapability *pdu_UERadioCapability;  
             /* mmePDU_UECapabilityInfoIndicationIEs_Value_UERadioCapability */
    struct mmeUERadioCapabilityForPaging *pdu_UERadioCapabilityForPaging;  
                                        /* mmePDU_UECapabilityInfoIndicationIEs_Value_UERadioCapabilityForPaging */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeUECapabilityInfoIndicationIEs_Value {
    mmeUECapabilityInfoIndicationIEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeUECapabilityInfoIndicationIEs_Value_union decoded;
} mmeUECapabilityInfoIndicationIEs_Value;

// **************************************************************
//
// UE CAPABILITY INFO INDICATION ELEMENTARY PROCEDURE
//
// **************************************************************

// **************************************************************
//
// UE Capability Info Indication
//
// **************************************************************
typedef struct mmeUECapabilityInfoIndication {
    struct mme_seqof68 {
        struct mme_seqof68 *next;
        struct mme_seq84 {
            mmeProtocolIE_ID id;
            mmeCriticality  criticality;
            mmeUECapabilityInfoIndicationIEs_Value value;
        } value;
    } *protocolIEs;
} mmeUECapabilityInfoIndication;

enum mmeENBStatusTransferIEs_Value_PDUs {
    mmePDU_ENBStatusTransferIEs_Value_UNKNOWN = 0,

    mmePDU_ENBStatusTransferIEs_Value_MME_UE_S1AP_ID = mmeMME_UE_S1AP_ID_PDU,
    mmePDU_ENBStatusTransferIEs_Value_ENB_UE_S1AP_ID = mmeENB_UE_S1AP_ID_PDU,
    mmePDU_ENBStatusTransferIEs_Value_ENB_StatusTransfer_TransparentContainer = mmeENB_StatusTransfer_TransparentContainer_PDU,

    mmePDU_ENBStatusTransferIEs_Value_MAX = INT_MAX
};

union mmeENBStatusTransferIEs_Value_union {
    mmeMME_UE_S1AP_ID *pdu_MME_UE_S1AP_ID;  
                         /* mmePDU_ENBStatusTransferIEs_Value_MME_UE_S1AP_ID */
    mmeENB_UE_S1AP_ID *pdu_ENB_UE_S1AP_ID;  
                         /* mmePDU_ENBStatusTransferIEs_Value_ENB_UE_S1AP_ID */
    struct mmeENB_StatusTransfer_TransparentContainer *pdu_ENB_StatusTransfer_TransparentContainer;                     /* mmePDU_ENBStatusTransferIEs_Value_ENB_StatusTransfer_TransparentContainer */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeENBStatusTransferIEs_Value {
    mmeENBStatusTransferIEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeENBStatusTransferIEs_Value_union decoded;
} mmeENBStatusTransferIEs_Value;

typedef struct mme_seq85 {
    mmeProtocolIE_ID id;
    mmeCriticality  criticality;
    mmeENBStatusTransferIEs_Value value;
} mme_seq85;

typedef struct mme_seqof69_ {
    struct mme_seqof69_ *next;
    mme_seq85       value;
} *mme_seqof69;

// **************************************************************
//
// eNB STATUS TRANSFER ELEMENTARY PROCEDURE
//
// **************************************************************

// **************************************************************
//
// eNB Status Transfer
//
// **************************************************************
typedef struct mmeENBStatusTransfer {
    struct mme_seqof69_ *protocolIEs;
} mmeENBStatusTransfer;

// **************************************************************
//
// MME STATUS TRANSFER ELEMENTARY PROCEDURE
//
// **************************************************************

// **************************************************************
//
// MME Status Transfer
//
// **************************************************************
typedef struct mmeMMEStatusTransfer {
    struct mme_seqof69_ *protocolIEs;
} mmeMMEStatusTransfer;

enum mmeTraceStartIEs_Value_PDUs {
    mmePDU_TraceStartIEs_Value_UNKNOWN = 0,

    mmePDU_TraceStartIEs_Value_MME_UE_S1AP_ID = mmeMME_UE_S1AP_ID_PDU,
    mmePDU_TraceStartIEs_Value_ENB_UE_S1AP_ID = mmeENB_UE_S1AP_ID_PDU,
    mmePDU_TraceStartIEs_Value_TraceActivation = mmeTraceActivation_PDU,

    mmePDU_TraceStartIEs_Value_MAX = INT_MAX
};

union mmeTraceStartIEs_Value_union {
    mmeMME_UE_S1AP_ID *pdu_MME_UE_S1AP_ID;  
                                /* mmePDU_TraceStartIEs_Value_MME_UE_S1AP_ID */
    mmeENB_UE_S1AP_ID *pdu_ENB_UE_S1AP_ID;  
                                /* mmePDU_TraceStartIEs_Value_ENB_UE_S1AP_ID */
    struct mmeTraceActivation *pdu_TraceActivation;  
                               /* mmePDU_TraceStartIEs_Value_TraceActivation */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeTraceStartIEs_Value {
    mmeTraceStartIEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeTraceStartIEs_Value_union decoded;
} mmeTraceStartIEs_Value;

// **************************************************************
//
// TRACE ELEMENTARY PROCEDURES
//
// **************************************************************
// **************************************************************
//
// Trace Start
//
// **************************************************************
typedef struct mmeTraceStart {
    struct mme_seqof71 {
        struct mme_seqof71 *next;
        struct mme_seq87 {
            mmeProtocolIE_ID id;
            mmeCriticality  criticality;
            mmeTraceStartIEs_Value value;
        } value;
    } *protocolIEs;
} mmeTraceStart;

enum mmeTraceFailureIndicationIEs_Value_PDUs {
    mmePDU_TraceFailureIndicationIEs_Value_UNKNOWN = 0,

    mmePDU_TraceFailureIndicationIEs_Value_MME_UE_S1AP_ID = mmeMME_UE_S1AP_ID_PDU,
    mmePDU_TraceFailureIndicationIEs_Value_ENB_UE_S1AP_ID = mmeENB_UE_S1AP_ID_PDU,
    mmePDU_TraceFailureIndicationIEs_Value_E_UTRAN_Trace_ID = mmeE_UTRAN_Trace_ID_PDU,
    mmePDU_TraceFailureIndicationIEs_Value_Cause = mmeCause_PDU,

    mmePDU_TraceFailureIndicationIEs_Value_MAX = INT_MAX
};

union mmeTraceFailureIndicationIEs_Value_union {
    mmeMME_UE_S1AP_ID *pdu_MME_UE_S1AP_ID;  
                    /* mmePDU_TraceFailureIndicationIEs_Value_MME_UE_S1AP_ID */
    mmeENB_UE_S1AP_ID *pdu_ENB_UE_S1AP_ID;  
                    /* mmePDU_TraceFailureIndicationIEs_Value_ENB_UE_S1AP_ID */
    struct mmeE_UTRAN_Trace_ID *pdu_E_UTRAN_Trace_ID;  
                  /* mmePDU_TraceFailureIndicationIEs_Value_E_UTRAN_Trace_ID */
    mmeCause        *pdu_Cause;  
                             /* mmePDU_TraceFailureIndicationIEs_Value_Cause */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeTraceFailureIndicationIEs_Value {
    mmeTraceFailureIndicationIEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeTraceFailureIndicationIEs_Value_union decoded;
} mmeTraceFailureIndicationIEs_Value;

// **************************************************************
//
// Trace Failure Indication
//
// **************************************************************
typedef struct mmeTraceFailureIndication {
    struct mme_seqof72 {
        struct mme_seqof72 *next;
        struct mme_seq88 {
            mmeProtocolIE_ID id;
            mmeCriticality  criticality;
            mmeTraceFailureIndicationIEs_Value value;
        } value;
    } *protocolIEs;
} mmeTraceFailureIndication;

enum mmeDeactivateTraceIEs_Value_PDUs {
    mmePDU_DeactivateTraceIEs_Value_UNKNOWN = 0,

    mmePDU_DeactivateTraceIEs_Value_MME_UE_S1AP_ID = mmeMME_UE_S1AP_ID_PDU,
    mmePDU_DeactivateTraceIEs_Value_ENB_UE_S1AP_ID = mmeENB_UE_S1AP_ID_PDU,
    mmePDU_DeactivateTraceIEs_Value_E_UTRAN_Trace_ID = mmeE_UTRAN_Trace_ID_PDU,

    mmePDU_DeactivateTraceIEs_Value_MAX = INT_MAX
};

union mmeDeactivateTraceIEs_Value_union {
    mmeMME_UE_S1AP_ID *pdu_MME_UE_S1AP_ID;  
                           /* mmePDU_DeactivateTraceIEs_Value_MME_UE_S1AP_ID */
    mmeENB_UE_S1AP_ID *pdu_ENB_UE_S1AP_ID;  
                           /* mmePDU_DeactivateTraceIEs_Value_ENB_UE_S1AP_ID */
    struct mmeE_UTRAN_Trace_ID *pdu_E_UTRAN_Trace_ID;  
                         /* mmePDU_DeactivateTraceIEs_Value_E_UTRAN_Trace_ID */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeDeactivateTraceIEs_Value {
    mmeDeactivateTraceIEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeDeactivateTraceIEs_Value_union decoded;
} mmeDeactivateTraceIEs_Value;

// **************************************************************
//
// DEACTIVATE TRACE ELEMENTARY PROCEDURE
//
// **************************************************************

// **************************************************************
//
// Deactivate Trace
//
// **************************************************************
typedef struct mmeDeactivateTrace {
    struct mme_seqof73 {
        struct mme_seqof73 *next;
        struct mme_seq89 {
            mmeProtocolIE_ID id;
            mmeCriticality  criticality;
            mmeDeactivateTraceIEs_Value value;
        } value;
    } *protocolIEs;
} mmeDeactivateTrace;

enum mmeCellTrafficTraceIEs_Value_PDUs {
    mmePDU_CellTrafficTraceIEs_Value_UNKNOWN = 0,

    mmePDU_CellTrafficTraceIEs_Value_MME_UE_S1AP_ID = mmeMME_UE_S1AP_ID_PDU,
    mmePDU_CellTrafficTraceIEs_Value_ENB_UE_S1AP_ID = mmeENB_UE_S1AP_ID_PDU,
    mmePDU_CellTrafficTraceIEs_Value_E_UTRAN_Trace_ID = mmeE_UTRAN_Trace_ID_PDU,
    mmePDU_CellTrafficTraceIEs_Value_EUTRAN_CGI = mmeEUTRAN_CGI_PDU,
    mmePDU_CellTrafficTraceIEs_Value_TransportLayerAddress = mmeTransportLayerAddress_PDU,
    mmePDU_CellTrafficTraceIEs_Value_PrivacyIndicator = mmePrivacyIndicator_PDU,

    mmePDU_CellTrafficTraceIEs_Value_MAX = INT_MAX
};

union mmeCellTrafficTraceIEs_Value_union {
    mmeMME_UE_S1AP_ID *pdu_MME_UE_S1AP_ID;  
                          /* mmePDU_CellTrafficTraceIEs_Value_MME_UE_S1AP_ID */
    mmeENB_UE_S1AP_ID *pdu_ENB_UE_S1AP_ID;  
                          /* mmePDU_CellTrafficTraceIEs_Value_ENB_UE_S1AP_ID */
    struct mmeE_UTRAN_Trace_ID *pdu_E_UTRAN_Trace_ID;  
                        /* mmePDU_CellTrafficTraceIEs_Value_E_UTRAN_Trace_ID */
    struct mmeEUTRAN_CGI *pdu_EUTRAN_CGI;  
                              /* mmePDU_CellTrafficTraceIEs_Value_EUTRAN_CGI */
    mmeTransportLayerAddress *pdu_TransportLayerAddress;  
                   /* mmePDU_CellTrafficTraceIEs_Value_TransportLayerAddress */
    mmePrivacyIndicator *pdu_PrivacyIndicator;  
                        /* mmePDU_CellTrafficTraceIEs_Value_PrivacyIndicator */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeCellTrafficTraceIEs_Value {
    mmeCellTrafficTraceIEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeCellTrafficTraceIEs_Value_union decoded;
} mmeCellTrafficTraceIEs_Value;

// **************************************************************
//
// CELL TRAFFIC TRACE ELEMENTARY PROCEDURE
//
// **************************************************************

// **************************************************************
//
// Cell Traffic Trace
//
// **************************************************************
typedef struct mmeCellTrafficTrace {
    struct mme_seqof74 {
        struct mme_seqof74 *next;
        struct mme_seq90 {
            mmeProtocolIE_ID id;
            mmeCriticality  criticality;
            mmeCellTrafficTraceIEs_Value value;
        } value;
    } *protocolIEs;
} mmeCellTrafficTrace;

enum mmeLocationReportingControlIEs_Value_PDUs {
    mmePDU_LocationReportingControlIEs_Value_UNKNOWN = 0,

    mmePDU_LocationReportingControlIEs_Value_MME_UE_S1AP_ID = mmeMME_UE_S1AP_ID_PDU,
    mmePDU_LocationReportingControlIEs_Value_ENB_UE_S1AP_ID = mmeENB_UE_S1AP_ID_PDU,
    mmePDU_LocationReportingControlIEs_Value_RequestType = mmeRequestType_PDU,

    mmePDU_LocationReportingControlIEs_Value_MAX = INT_MAX
};

union mmeLocationReportingControlIEs_Value_union {
    mmeMME_UE_S1AP_ID *pdu_MME_UE_S1AP_ID;  
                  /* mmePDU_LocationReportingControlIEs_Value_MME_UE_S1AP_ID */
    mmeENB_UE_S1AP_ID *pdu_ENB_UE_S1AP_ID;  
                  /* mmePDU_LocationReportingControlIEs_Value_ENB_UE_S1AP_ID */
    struct mmeRequestType *pdu_RequestType;  
                     /* mmePDU_LocationReportingControlIEs_Value_RequestType */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeLocationReportingControlIEs_Value {
    mmeLocationReportingControlIEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeLocationReportingControlIEs_Value_union decoded;
} mmeLocationReportingControlIEs_Value;

// **************************************************************
//
// LOCATION ELEMENTARY PROCEDURES
//
// **************************************************************

// **************************************************************
//
// Location Reporting Control
//
// **************************************************************
typedef struct mmeLocationReportingControl {
    struct mme_seqof75 {
        struct mme_seqof75 *next;
        struct mme_seq91 {
            mmeProtocolIE_ID id;
            mmeCriticality  criticality;
            mmeLocationReportingControlIEs_Value value;
        } value;
    } *protocolIEs;
} mmeLocationReportingControl;

// **************************************************************
//
// Location Report Failure Indication
//
// **************************************************************
typedef struct mmeLocationReportingFailureIndication {
    struct mme_seqof20_ *protocolIEs;
} mmeLocationReportingFailureIndication;

enum mmeLocationReportIEs_Value_PDUs {
    mmePDU_LocationReportIEs_Value_UNKNOWN = 0,

    mmePDU_LocationReportIEs_Value_MME_UE_S1AP_ID = mmeMME_UE_S1AP_ID_PDU,
    mmePDU_LocationReportIEs_Value_ENB_UE_S1AP_ID = mmeENB_UE_S1AP_ID_PDU,
    mmePDU_LocationReportIEs_Value_EUTRAN_CGI = mmeEUTRAN_CGI_PDU,
    mmePDU_LocationReportIEs_Value_TAI = mmeTAI_PDU,
    mmePDU_LocationReportIEs_Value_RequestType = mmeRequestType_PDU,

    mmePDU_LocationReportIEs_Value_MAX = INT_MAX
};

union mmeLocationReportIEs_Value_union {
    mmeMME_UE_S1AP_ID *pdu_MME_UE_S1AP_ID;  
                            /* mmePDU_LocationReportIEs_Value_MME_UE_S1AP_ID */
    mmeENB_UE_S1AP_ID *pdu_ENB_UE_S1AP_ID;  
                            /* mmePDU_LocationReportIEs_Value_ENB_UE_S1AP_ID */
    struct mmeEUTRAN_CGI *pdu_EUTRAN_CGI;  
                                /* mmePDU_LocationReportIEs_Value_EUTRAN_CGI */
    mmeTAI          *pdu_TAI;  /* mmePDU_LocationReportIEs_Value_TAI */
    struct mmeRequestType *pdu_RequestType;  
                               /* mmePDU_LocationReportIEs_Value_RequestType */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeLocationReportIEs_Value {
    mmeLocationReportIEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeLocationReportIEs_Value_union decoded;
} mmeLocationReportIEs_Value;

// **************************************************************
//
// Location Report 
//
// **************************************************************
typedef struct mmeLocationReport {
    struct mme_seqof77 {
        struct mme_seqof77 *next;
        struct mme_seq93 {
            mmeProtocolIE_ID id;
            mmeCriticality  criticality;
            mmeLocationReportIEs_Value value;
        } value;
    } *protocolIEs;
} mmeLocationReport;

enum mmeOverloadStartIEs_Value_PDUs {
    mmePDU_OverloadStartIEs_Value_UNKNOWN = 0,

    mmePDU_OverloadStartIEs_Value_OverloadResponse = mmeOverloadResponse_PDU,
    mmePDU_OverloadStartIEs_Value_GUMMEIList = mmeGUMMEIList_PDU,
    mmePDU_OverloadStartIEs_Value_TrafficLoadReductionIndication = mmeTrafficLoadReductionIndication_PDU,

    mmePDU_OverloadStartIEs_Value_MAX = INT_MAX
};

union mmeOverloadStartIEs_Value_union {
    struct mmeOverloadResponse *pdu_OverloadResponse;  
                           /* mmePDU_OverloadStartIEs_Value_OverloadResponse */
    struct mmeGUMMEIList_ **pdu_GUMMEIList;  
                                 /* mmePDU_OverloadStartIEs_Value_GUMMEIList */
    mmeTrafficLoadReductionIndication *pdu_TrafficLoadReductionIndication;  
                                        /* mmePDU_OverloadStartIEs_Value_TrafficLoadReductionIndication */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeOverloadStartIEs_Value {
    mmeOverloadStartIEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeOverloadStartIEs_Value_union decoded;
} mmeOverloadStartIEs_Value;

// **************************************************************
//
// OVERLOAD ELEMENTARY PROCEDURES
//
// **************************************************************

// **************************************************************
//
// Overload Start
//
// **************************************************************
typedef struct mmeOverloadStart {
    struct mme_seqof78 {
        struct mme_seqof78 *next;
        struct mme_seq94 {
            mmeProtocolIE_ID id;
            mmeCriticality  criticality;
            mmeOverloadStartIEs_Value value;
        } value;
    } *protocolIEs;
} mmeOverloadStart;

enum mmeOverloadStopIEs_Value_PDUs {
    mmePDU_OverloadStopIEs_Value_UNKNOWN = 0,

    mmePDU_OverloadStopIEs_Value_GUMMEIList = mmeGUMMEIList_PDU,

    mmePDU_OverloadStopIEs_Value_MAX = INT_MAX
};

union mmeOverloadStopIEs_Value_union {
    struct mmeGUMMEIList_ **pdu_GUMMEIList;  
                                  /* mmePDU_OverloadStopIEs_Value_GUMMEIList */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeOverloadStopIEs_Value {
    mmeOverloadStopIEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeOverloadStopIEs_Value_union decoded;
} mmeOverloadStopIEs_Value;

// **************************************************************
//
// Overload Stop
//
// **************************************************************
typedef struct mmeOverloadStop {
    struct mme_seqof79 {
        struct mme_seqof79 *next;
        struct mme_seq95 {
            mmeProtocolIE_ID id;
            mmeCriticality  criticality;
            mmeOverloadStopIEs_Value value;
        } value;
    } *protocolIEs;
} mmeOverloadStop;

enum mmeWriteReplaceWarningRequestIEs_Value_PDUs {
    mmePDU_WriteReplaceWarningRequestIEs_Value_UNKNOWN = 0,

    mmePDU_WriteReplaceWarningRequestIEs_Value_MessageIdentifier = mmeMessageIdentifier_PDU,
    mmePDU_WriteReplaceWarningRequestIEs_Value_SerialNumber = mmeSerialNumber_PDU,
    mmePDU_WriteReplaceWarningRequestIEs_Value_WarningAreaList = mmeWarningAreaList_PDU,
    mmePDU_WriteReplaceWarningRequestIEs_Value_RepetitionPeriod = mmeRepetitionPeriod_PDU,
    mmePDU_WriteReplaceWarningRequestIEs_Value_ExtendedRepetitionPeriod = mmeExtendedRepetitionPeriod_PDU,
    mmePDU_WriteReplaceWarningRequestIEs_Value_NumberofBroadcastRequest = mmeNumberofBroadcastRequest_PDU,
    mmePDU_WriteReplaceWarningRequestIEs_Value_WarningType = mmeWarningType_PDU,
    mmePDU_WriteReplaceWarningRequestIEs_Value_WarningSecurityInfo = mmeWarningSecurityInfo_PDU,
    mmePDU_WriteReplaceWarningRequestIEs_Value_DataCodingScheme = mmeDataCodingScheme_PDU,
    mmePDU_WriteReplaceWarningRequestIEs_Value_WarningMessageContents = mmeWarningMessageContents_PDU,
    mmePDU_WriteReplaceWarningRequestIEs_Value_ConcurrentWarningMessageIndicator = mmeConcurrentWarningMessageIndicator_PDU,

    mmePDU_WriteReplaceWarningRequestIEs_Value_MAX = INT_MAX
};

union mmeWriteReplaceWarningRequestIEs_Value_union {
    struct mmeMessageIdentifier *pdu_MessageIdentifier;  
             /* mmePDU_WriteReplaceWarningRequestIEs_Value_MessageIdentifier */
    struct mmeSerialNumber *pdu_SerialNumber;  
                  /* mmePDU_WriteReplaceWarningRequestIEs_Value_SerialNumber */
    struct mmeWarningAreaList *pdu_WarningAreaList;  
               /* mmePDU_WriteReplaceWarningRequestIEs_Value_WarningAreaList */
    mmeRepetitionPeriod *pdu_RepetitionPeriod;  
              /* mmePDU_WriteReplaceWarningRequestIEs_Value_RepetitionPeriod */
    mmeExtendedRepetitionPeriod *pdu_ExtendedRepetitionPeriod;  
      /* mmePDU_WriteReplaceWarningRequestIEs_Value_ExtendedRepetitionPeriod */
    mmeNumberofBroadcastRequest *pdu_NumberofBroadcastRequest;  
      /* mmePDU_WriteReplaceWarningRequestIEs_Value_NumberofBroadcastRequest */
    struct mmeWarningType *pdu_WarningType;  
                   /* mmePDU_WriteReplaceWarningRequestIEs_Value_WarningType */
    struct mmeWarningSecurityInfo *pdu_WarningSecurityInfo;  
           /* mmePDU_WriteReplaceWarningRequestIEs_Value_WarningSecurityInfo */
    struct mmeDataCodingScheme *pdu_DataCodingScheme;  
              /* mmePDU_WriteReplaceWarningRequestIEs_Value_DataCodingScheme */
    struct mmeWarningMessageContents *pdu_WarningMessageContents;  
        /* mmePDU_WriteReplaceWarningRequestIEs_Value_WarningMessageContents */
    mmeConcurrentWarningMessageIndicator *pdu_ConcurrentWarningMessageIndicator;                                        /* mmePDU_WriteReplaceWarningRequestIEs_Value_ConcurrentWarningMessageIndicator */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeWriteReplaceWarningRequestIEs_Value {
    mmeWriteReplaceWarningRequestIEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeWriteReplaceWarningRequestIEs_Value_union decoded;
} mmeWriteReplaceWarningRequestIEs_Value;

// **************************************************************
//
// WRITE-REPLACE WARNING ELEMENTARY PROCEDURE 
//
// **************************************************************
// **************************************************************
//
// Write-Replace Warning Request
//
// **************************************************************
typedef struct mmeWriteReplaceWarningRequest {
    struct mme_seqof80 {
        struct mme_seqof80 *next;
        struct mme_seq96 {
            mmeProtocolIE_ID id;
            mmeCriticality  criticality;
            mmeWriteReplaceWarningRequestIEs_Value value;
        } value;
    } *protocolIEs;
} mmeWriteReplaceWarningRequest;

enum mmeWriteReplaceWarningResponseIEs_Value_PDUs {
    mmePDU_WriteReplaceWarningResponseIEs_Value_UNKNOWN = 0,

    mmePDU_WriteReplaceWarningResponseIEs_Value_MessageIdentifier = mmeMessageIdentifier_PDU,
    mmePDU_WriteReplaceWarningResponseIEs_Value_SerialNumber = mmeSerialNumber_PDU,
    mmePDU_WriteReplaceWarningResponseIEs_Value_BroadcastCompletedAreaList = mmeBroadcastCompletedAreaList_PDU,
    mmePDU_WriteReplaceWarningResponseIEs_Value_CriticalityDiagnostics = mmeCriticalityDiagnostics_PDU,

    mmePDU_WriteReplaceWarningResponseIEs_Value_MAX = INT_MAX
};

union mmeWriteReplaceWarningResponseIEs_Value_union {
    struct mmeMessageIdentifier *pdu_MessageIdentifier;  
            /* mmePDU_WriteReplaceWarningResponseIEs_Value_MessageIdentifier */
    struct mmeSerialNumber *pdu_SerialNumber;  
                 /* mmePDU_WriteReplaceWarningResponseIEs_Value_SerialNumber */
    struct mmeBroadcastCompletedAreaList *pdu_BroadcastCompletedAreaList;  
                                        /* mmePDU_WriteReplaceWarningResponseIEs_Value_BroadcastCompletedAreaList */
    struct mmeCriticalityDiagnostics *pdu_CriticalityDiagnostics;  
       /* mmePDU_WriteReplaceWarningResponseIEs_Value_CriticalityDiagnostics */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeWriteReplaceWarningResponseIEs_Value {
    mmeWriteReplaceWarningResponseIEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeWriteReplaceWarningResponseIEs_Value_union decoded;
} mmeWriteReplaceWarningResponseIEs_Value;

// **************************************************************
//
// Write-Replace Warning Response
//
// **************************************************************
typedef struct mmeWriteReplaceWarningResponse {
    struct mme_seqof81 {
        struct mme_seqof81 *next;
        struct mme_seq97 {
            mmeProtocolIE_ID id;
            mmeCriticality  criticality;
            mmeWriteReplaceWarningResponseIEs_Value value;
        } value;
    } *protocolIEs;
} mmeWriteReplaceWarningResponse;

enum mmeENBDirectInformationTransferIEs_Value_PDUs {
    mmePDU_ENBDirectInformationTransferIEs_Value_UNKNOWN = 0,

    mmePDU_ENBDirectInformationTransferIEs_Value_Inter_SystemInformationTransferType = mmeInter_SystemInformationTransferType_PDU,

    mmePDU_ENBDirectInformationTransferIEs_Value_MAX = INT_MAX
};

union mmeENBDirectInformationTransferIEs_Value_union {
    struct mmeInter_SystemInformationTransferType *pdu_Inter_SystemInformationTransferType;                             /* mmePDU_ENBDirectInformationTransferIEs_Value_Inter_SystemInformationTransferType */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeENBDirectInformationTransferIEs_Value {
    mmeENBDirectInformationTransferIEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeENBDirectInformationTransferIEs_Value_union decoded;
} mmeENBDirectInformationTransferIEs_Value;

typedef struct mme_seq98 {
    mmeProtocolIE_ID id;
    mmeCriticality  criticality;
    mmeENBDirectInformationTransferIEs_Value value;
} mme_seq98;

typedef struct mme_seqof82_ {
    struct mme_seqof82_ *next;
    mme_seq98       value;
} *mme_seqof82;

// **************************************************************
//
// eNB DIRECT INFORMATION TRANSFER ELEMENTARY PROCEDURE
//
// **************************************************************

// **************************************************************
//
// eNB Direct Information Transfer
//
// **************************************************************
typedef struct mmeENBDirectInformationTransfer {
    struct mme_seqof82_ *protocolIEs;
} mmeENBDirectInformationTransfer;

typedef struct mmeRIMInformation {
    unsigned int    length;
    unsigned char   *value;
} mmeRIMInformation;

// L
typedef struct mmeLAC {
    unsigned short  length;
    unsigned char   value[2];
} mmeLAC;

typedef struct mmeLAI {
    unsigned char   bit_mask;
#       define      mmeLAI_iE_Extensions_present 0x80
    mmePLMNidentity pLMNidentity;
    mmeLAC          lAC;
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                                         * mmeLAI_iE_Extensions_present if
                                         * present */
} mmeLAI;

typedef struct mmeRAC {
    unsigned short  length;
    unsigned char   value[1];
} mmeRAC;

typedef struct mmeCI {
    unsigned short  length;
    unsigned char   value[2];
} mmeCI;

typedef struct mmeGERAN_Cell_ID {
    unsigned char   bit_mask;
#       define      mmeGERAN_Cell_ID_iE_Extensions_present 0x80
    mmeLAI          lAI;
    mmeRAC          rAC;
    mmeCI           cI;
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                                    * mmeGERAN_Cell_ID_iE_Extensions_present if
                                    * present */
} mmeGERAN_Cell_ID;

typedef unsigned short  mmeRNC_ID;

typedef unsigned short  mmeExtendedRNC_ID;

typedef struct mmeTargetRNC_ID {
    unsigned char   bit_mask;
#       define      mmeTargetRNC_ID_rAC_present 0x80
#       define      mmeextendedRNC_ID_present 0x40
#       define      mmeTargetRNC_ID_iE_Extensions_present 0x20
    mmeLAI          lAI;
    mmeRAC          rAC;  /* optional; set in bit_mask
                           * mmeTargetRNC_ID_rAC_present if present */
    mmeRNC_ID       rNC_ID;
    mmeExtendedRNC_ID extendedRNC_ID;  /* optional; set in bit_mask
                                        * mmeextendedRNC_ID_present if
                                        * present */
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                                         * mmeTargetRNC_ID_iE_Extensions_present
                                         * if present */
} mmeTargetRNC_ID;

typedef struct mmeRIMRoutingAddress {
    unsigned short  choice;
#       define      mmegERAN_Cell_ID_chosen 1
#       define      mmeRIMRoutingAddress_targetRNC_ID_chosen 2
#       define      mmeeHRPD_Sector_ID_chosen 3
    union _union {
        mmeGERAN_Cell_ID gERAN_Cell_ID;  /* to choose, set choice to
                                          * mmegERAN_Cell_ID_chosen */
        mmeTargetRNC_ID targetRNC_ID;  /* extension #1; to choose, set choice to
                                  * mmeRIMRoutingAddress_targetRNC_ID_chosen */
        struct mme_octet1 {
            unsigned short  length;
            unsigned char   value[16];
        } eHRPD_Sector_ID;  /* extension #2; to choose, set choice to
                             * mmeeHRPD_Sector_ID_chosen */
    } u;
} mmeRIMRoutingAddress;

typedef struct mmeRIMTransfer {
    unsigned char   bit_mask;
#       define      mmerIMRoutingAddress_present 0x80
#       define      mmeRIMTransfer_iE_Extensions_present 0x40
    mmeRIMInformation rIMInformation;
    mmeRIMRoutingAddress rIMRoutingAddress;  /* optional; set in bit_mask
                                              * mmerIMRoutingAddress_present if
                                              * present */
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                                         * mmeRIMTransfer_iE_Extensions_present
                                         * if present */
} mmeRIMTransfer;

typedef struct mmeInter_SystemInformationTransferType {
    unsigned short  choice;
#       define      mmerIMTransfer_chosen 1
    union _union {
        mmeRIMTransfer  rIMTransfer;  /* to choose, set choice to
                                       * mmerIMTransfer_chosen */
    } u;
} mmeInter_SystemInformationTransferType;

// **************************************************************
//
// MME DIRECT INFORMATION TRANSFER ELEMENTARY PROCEDURE
//
// **************************************************************

// **************************************************************
//
// MME Direct Information Transfer
//
// **************************************************************
typedef struct mmeMMEDirectInformationTransfer {
    struct mme_seqof82_ *protocolIEs;
} mmeMMEDirectInformationTransfer;

enum mmeENBConfigurationTransferIEs_Value_PDUs {
    mmePDU_ENBConfigurationTransferIEs_Value_UNKNOWN = 0,

    mmePDU_ENBConfigurationTransferIEs_Value_SONConfigurationTransfer = mmeSONConfigurationTransfer_PDU,

    mmePDU_ENBConfigurationTransferIEs_Value_MAX = INT_MAX
};

union mmeENBConfigurationTransferIEs_Value_union {
    struct mmeSONConfigurationTransfer *pdu_SONConfigurationTransfer;  
        /* mmePDU_ENBConfigurationTransferIEs_Value_SONConfigurationTransfer */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeENBConfigurationTransferIEs_Value {
    mmeENBConfigurationTransferIEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeENBConfigurationTransferIEs_Value_union decoded;
} mmeENBConfigurationTransferIEs_Value;

typedef struct mme_seq104 {
    mmeProtocolIE_ID id;
    mmeCriticality  criticality;
    mmeENBConfigurationTransferIEs_Value value;
} mme_seq104;

typedef struct mme_seqof88_ {
    struct mme_seqof88_ *next;
    mme_seq104      value;
} *mme_seqof88;

// **************************************************************
//
// eNB CONFIGURATION TRANSFER ELEMENTARY PROCEDURE
//
// **************************************************************
// **************************************************************
//
// eNB Configuration Transfer
//
// **************************************************************
typedef struct mmeENBConfigurationTransfer {
    struct mme_seqof88_ *protocolIEs;
} mmeENBConfigurationTransfer;

// **************************************************************
//
// MME CONFIGURATION TRANSFER ELEMENTARY PROCEDURE
//
// **************************************************************

// **************************************************************
//
// MME Configuration Transfer
//
// **************************************************************
typedef struct mmeMMEConfigurationTransfer {
    struct mme_seqof88_ *protocolIEs;
} mmeMMEConfigurationTransfer;

typedef struct mmePrivateIE_ID {
    unsigned short  choice;
#       define      mmelocal_chosen 1
#       define      mmeglobal_chosen 2
    union _union {
        unsigned short  local;  /* to choose, set choice to mmelocal_chosen */
        mme_ObjectID    global;  /* to choose, set choice to mmeglobal_chosen */
    } u;
} mmePrivateIE_ID;

typedef struct mmePrivateIE_Field {
    mmePrivateIE_ID id;
    mmeCriticality  criticality;
    mmeE_RABDataForwardingItem_ExtIEs_Extension value;
} mmePrivateIE_Field;

typedef struct mmePrivateIE_Container_ {
    struct mmePrivateIE_Container_ *next;
    mmePrivateIE_Field value;
} *mmePrivateIE_Container;

// **************************************************************
//
// PRIVATE MESSAGE ELEMENTARY PROCEDURE
//
// **************************************************************

// **************************************************************
//
// Private Message
//
// **************************************************************
typedef struct mmePrivateMessage {
    struct mmePrivateIE_Container_ *privateIEs;
} mmePrivateMessage;

enum mmeKillRequestIEs_Value_PDUs {
    mmePDU_KillRequestIEs_Value_UNKNOWN = 0,

    mmePDU_KillRequestIEs_Value_MessageIdentifier = mmeMessageIdentifier_PDU,
    mmePDU_KillRequestIEs_Value_SerialNumber = mmeSerialNumber_PDU,
    mmePDU_KillRequestIEs_Value_WarningAreaList = mmeWarningAreaList_PDU,
    mmePDU_KillRequestIEs_Value_KillAllWarningMessages = mmeKillAllWarningMessages_PDU,

    mmePDU_KillRequestIEs_Value_MAX = INT_MAX
};

union mmeKillRequestIEs_Value_union {
    struct mmeMessageIdentifier *pdu_MessageIdentifier;  
                            /* mmePDU_KillRequestIEs_Value_MessageIdentifier */
    struct mmeSerialNumber *pdu_SerialNumber;  
                                 /* mmePDU_KillRequestIEs_Value_SerialNumber */
    struct mmeWarningAreaList *pdu_WarningAreaList;  
                              /* mmePDU_KillRequestIEs_Value_WarningAreaList */
    mmeKillAllWarningMessages *pdu_KillAllWarningMessages;  
                       /* mmePDU_KillRequestIEs_Value_KillAllWarningMessages */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeKillRequestIEs_Value {
    mmeKillRequestIEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeKillRequestIEs_Value_union decoded;
} mmeKillRequestIEs_Value;

// **************************************************************
//
// KILL PROCEDURE
//
// **************************************************************

// **************************************************************
//
// Kill Request
//
// **************************************************************
typedef struct mmeKillRequest {
    struct mme_seqof91 {
        struct mme_seqof91 *next;
        struct mme_seq106 {
            mmeProtocolIE_ID id;
            mmeCriticality  criticality;
            mmeKillRequestIEs_Value value;
        } value;
    } *protocolIEs;
} mmeKillRequest;

enum mmeKillResponseIEs_Value_PDUs {
    mmePDU_KillResponseIEs_Value_UNKNOWN = 0,

    mmePDU_KillResponseIEs_Value_MessageIdentifier = mmeMessageIdentifier_PDU,
    mmePDU_KillResponseIEs_Value_SerialNumber = mmeSerialNumber_PDU,
    mmePDU_KillResponseIEs_Value_BroadcastCancelledAreaList = mmeBroadcastCancelledAreaList_PDU,
    mmePDU_KillResponseIEs_Value_CriticalityDiagnostics = mmeCriticalityDiagnostics_PDU,

    mmePDU_KillResponseIEs_Value_MAX = INT_MAX
};

union mmeKillResponseIEs_Value_union {
    struct mmeMessageIdentifier *pdu_MessageIdentifier;  
                           /* mmePDU_KillResponseIEs_Value_MessageIdentifier */
    struct mmeSerialNumber *pdu_SerialNumber;  
                                /* mmePDU_KillResponseIEs_Value_SerialNumber */
    struct mmeBroadcastCancelledAreaList *pdu_BroadcastCancelledAreaList;  
                                        /* mmePDU_KillResponseIEs_Value_BroadcastCancelledAreaList */
    struct mmeCriticalityDiagnostics *pdu_CriticalityDiagnostics;  
                      /* mmePDU_KillResponseIEs_Value_CriticalityDiagnostics */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeKillResponseIEs_Value {
    mmeKillResponseIEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeKillResponseIEs_Value_union decoded;
} mmeKillResponseIEs_Value;

// **************************************************************
//
// Kill Response
//
// **************************************************************
typedef struct mmeKillResponse {
    struct mme_seqof92 {
        struct mme_seqof92 *next;
        struct mme_seq107 {
            mmeProtocolIE_ID id;
            mmeCriticality  criticality;
            mmeKillResponseIEs_Value value;
        } value;
    } *protocolIEs;
} mmeKillResponse;

enum mmePWSRestartIndicationIEs_Value_PDUs {
    mmePDU_PWSRestartIndicationIEs_Value_UNKNOWN = 0,

    mmePDU_PWSRestartIndicationIEs_Value_ECGIListForRestart = mmeECGIListForRestart_PDU,
    mmePDU_PWSRestartIndicationIEs_Value_Global_ENB_ID = mmeGlobal_ENB_ID_PDU,
    mmePDU_PWSRestartIndicationIEs_Value_TAIListForRestart = mmeTAIListForRestart_PDU,
    mmePDU_PWSRestartIndicationIEs_Value_EmergencyAreaIDListForRestart = mmeEmergencyAreaIDListForRestart_PDU,

    mmePDU_PWSRestartIndicationIEs_Value_MAX = INT_MAX
};

union mmePWSRestartIndicationIEs_Value_union {
    struct mmeECGIListForRestart_ **pdu_ECGIListForRestart;  
                  /* mmePDU_PWSRestartIndicationIEs_Value_ECGIListForRestart */
    struct mmeGlobal_ENB_ID *pdu_Global_ENB_ID;  
                       /* mmePDU_PWSRestartIndicationIEs_Value_Global_ENB_ID */
    struct mmeTAIListForRestart_ **pdu_TAIListForRestart;  
                   /* mmePDU_PWSRestartIndicationIEs_Value_TAIListForRestart */
    struct mmeEmergencyAreaIDListForRestart_ **pdu_EmergencyAreaIDListForRestart;                                       /* mmePDU_PWSRestartIndicationIEs_Value_EmergencyAreaIDListForRestart */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmePWSRestartIndicationIEs_Value {
    mmePWSRestartIndicationIEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmePWSRestartIndicationIEs_Value_union decoded;
} mmePWSRestartIndicationIEs_Value;

// **************************************************************
//
// PWS RESTART INDICATION PROCEDURE
//
// **************************************************************

// **************************************************************
//
// PWS Restart Indication
//
// **************************************************************
typedef struct mmePWSRestartIndication {
    struct mme_seqof93 {
        struct mme_seqof93 *next;
        struct mme_seq108 {
            mmeProtocolIE_ID id;
            mmeCriticality  criticality;
            mmePWSRestartIndicationIEs_Value value;
        } value;
    } *protocolIEs;
} mmePWSRestartIndication;

enum mmeDownlinkUEAssociatedLPPaTransport_IEs_Value_PDUs {
    mmePDU_DownlinkUEAssociatedLPPaTransport_IEs_Value_UNKNOWN = 0,

    mmePDU_DownlinkUEAssociatedLPPaTransport_IEs_Value_MME_UE_S1AP_ID = mmeMME_UE_S1AP_ID_PDU,
    mmePDU_DownlinkUEAssociatedLPPaTransport_IEs_Value_ENB_UE_S1AP_ID = mmeENB_UE_S1AP_ID_PDU,
    mmePDU_DownlinkUEAssociatedLPPaTransport_IEs_Value_Routing_ID = mmeRouting_ID_PDU,
    mmePDU_DownlinkUEAssociatedLPPaTransport_IEs_Value_LPPa_PDU = mmeLPPa_PDU_PDU,

    mmePDU_DownlinkUEAssociatedLPPaTransport_IEs_Value_MAX = INT_MAX
};

union mmeDownlinkUEAssociatedLPPaTransport_IEs_Value_union {
    mmeMME_UE_S1AP_ID *pdu_MME_UE_S1AP_ID;  
        /* mmePDU_DownlinkUEAssociatedLPPaTransport_IEs_Value_MME_UE_S1AP_ID */
    mmeENB_UE_S1AP_ID *pdu_ENB_UE_S1AP_ID;  
        /* mmePDU_DownlinkUEAssociatedLPPaTransport_IEs_Value_ENB_UE_S1AP_ID */
    mmeRouting_ID   *pdu_Routing_ID;  
            /* mmePDU_DownlinkUEAssociatedLPPaTransport_IEs_Value_Routing_ID */
    struct mmeLPPa_PDU *pdu_LPPa_PDU;  
              /* mmePDU_DownlinkUEAssociatedLPPaTransport_IEs_Value_LPPa_PDU */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeDownlinkUEAssociatedLPPaTransport_IEs_Value {
    mmeDownlinkUEAssociatedLPPaTransport_IEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeDownlinkUEAssociatedLPPaTransport_IEs_Value_union decoded;
} mmeDownlinkUEAssociatedLPPaTransport_IEs_Value;

typedef struct mme_seq109 {
    mmeProtocolIE_ID id;
    mmeCriticality  criticality;
    mmeDownlinkUEAssociatedLPPaTransport_IEs_Value value;
} mme_seq109;

typedef struct mme_seqof94_ {
    struct mme_seqof94_ *next;
    mme_seq109      value;
} *mme_seqof94;

// **************************************************************
//
// LPPA TRANSPORT ELEMENTARY PROCEDURES
//
// **************************************************************

// **************************************************************
//
// DOWNLINK UE ASSOCIATED LPPA TRANSPORT
//
// **************************************************************
typedef struct mmeDownlinkUEAssociatedLPPaTransport {
    struct mme_seqof94_ *protocolIEs;
} mmeDownlinkUEAssociatedLPPaTransport;

// **************************************************************
//
// UPLINK UE ASSOCIATED LPPA TRANSPORT
//
// **************************************************************
typedef struct mmeUplinkUEAssociatedLPPaTransport {
    struct mme_seqof94_ *protocolIEs;
} mmeUplinkUEAssociatedLPPaTransport;

enum mmeDownlinkNonUEAssociatedLPPaTransport_IEs_Value_PDUs {
    mmePDU_DownlinkNonUEAssociatedLPPaTransport_IEs_Value_UNKNOWN = 0,

    mmePDU_DownlinkNonUEAssociatedLPPaTransport_IEs_Value_Routing_ID = mmeRouting_ID_PDU,
    mmePDU_DownlinkNonUEAssociatedLPPaTransport_IEs_Value_LPPa_PDU = mmeLPPa_PDU_PDU,

    mmePDU_DownlinkNonUEAssociatedLPPaTransport_IEs_Value_MAX = INT_MAX
};

union mmeDownlinkNonUEAssociatedLPPaTransport_IEs_Value_union {
    mmeRouting_ID   *pdu_Routing_ID;  
         /* mmePDU_DownlinkNonUEAssociatedLPPaTransport_IEs_Value_Routing_ID */
    struct mmeLPPa_PDU *pdu_LPPa_PDU;  
           /* mmePDU_DownlinkNonUEAssociatedLPPaTransport_IEs_Value_LPPa_PDU */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeDownlinkNonUEAssociatedLPPaTransport_IEs_Value {
    mmeDownlinkNonUEAssociatedLPPaTransport_IEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeDownlinkNonUEAssociatedLPPaTransport_IEs_Value_union decoded;
} mmeDownlinkNonUEAssociatedLPPaTransport_IEs_Value;

typedef struct mme_seq111 {
    mmeProtocolIE_ID id;
    mmeCriticality  criticality;
    mmeDownlinkNonUEAssociatedLPPaTransport_IEs_Value value;
} mme_seq111;

typedef struct mme_seqof96_ {
    struct mme_seqof96_ *next;
    mme_seq111      value;
} *mme_seqof96;

// **************************************************************
//
// DOWNLINK NON UE ASSOCIATED LPPA TRANSPORT
//
// **************************************************************
typedef struct mmeDownlinkNonUEAssociatedLPPaTransport {
    struct mme_seqof96_ *protocolIEs;
} mmeDownlinkNonUEAssociatedLPPaTransport;

// **************************************************************
//
// UPLINK NON UE ASSOCIATED LPPA TRANSPORT
//
// **************************************************************
typedef struct mmeUplinkNonUEAssociatedLPPaTransport {
    struct mme_seqof96_ *protocolIEs;
} mmeUplinkNonUEAssociatedLPPaTransport;

enum mmeE_RABModificationIndicationIEs_Value_PDUs {
    mmePDU_E_RABModificationIndicationIEs_Value_UNKNOWN = 0,

    mmePDU_E_RABModificationIndicationIEs_Value_MME_UE_S1AP_ID = mmeMME_UE_S1AP_ID_PDU,
    mmePDU_E_RABModificationIndicationIEs_Value_ENB_UE_S1AP_ID = mmeENB_UE_S1AP_ID_PDU,
    mmePDU_E_RABModificationIndicationIEs_Value_E_RABToBeModifiedListBearerModInd = mmeE_RABToBeModifiedListBearerModInd_PDU,
    mmePDU_E_RABModificationIndicationIEs_Value_E_RABNotToBeModifiedListBearerModInd = mmeE_RABNotToBeModifiedListBearerModInd_PDU,

    mmePDU_E_RABModificationIndicationIEs_Value_MAX = INT_MAX
};

union mmeE_RABModificationIndicationIEs_Value_union {
    mmeMME_UE_S1AP_ID *pdu_MME_UE_S1AP_ID;  
               /* mmePDU_E_RABModificationIndicationIEs_Value_MME_UE_S1AP_ID */
    mmeENB_UE_S1AP_ID *pdu_ENB_UE_S1AP_ID;  
               /* mmePDU_E_RABModificationIndicationIEs_Value_ENB_UE_S1AP_ID */
    struct mmeE_RABToBeModifiedListBearerModInd_ **pdu_E_RABToBeModifiedListBearerModInd;                               /* mmePDU_E_RABModificationIndicationIEs_Value_E_RABToBeModifiedListBearerModInd */
    struct mmeE_RABNotToBeModifiedListBearerModInd_ **pdu_E_RABNotToBeModifiedListBearerModInd;                         /* mmePDU_E_RABModificationIndicationIEs_Value_E_RABNotToBeModifiedListBearerModInd */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeE_RABModificationIndicationIEs_Value {
    mmeE_RABModificationIndicationIEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeE_RABModificationIndicationIEs_Value_union decoded;
} mmeE_RABModificationIndicationIEs_Value;

// **************************************************************
//
// E-RAB MODIFICATION INDICATION ELEMENTARY PROCEDURE
//
// **************************************************************

// **************************************************************
//
// E-RAB Modification Indication
//
// **************************************************************
typedef struct mmeE_RABModificationIndication {
    struct mme_seqof98 {
        struct mme_seqof98 *next;
        struct mme_seq113 {
            mmeProtocolIE_ID id;
            mmeCriticality  criticality;
            mmeE_RABModificationIndicationIEs_Value value;
        } value;
    } *protocolIEs;
} mmeE_RABModificationIndication;

enum mmeE_RABToBeModifiedItemBearerModIndIEs_Value_PDUs {
    mmePDU_E_RABToBeModifiedItemBearerModIndIEs_Value_UNKNOWN = 0,

    mmePDU_E_RABToBeModifiedItemBearerModIndIEs_Value_E_RABToBeModifiedItemBearerModInd = mmeE_RABToBeModifiedItemBearerModInd_PDU,

    mmePDU_E_RABToBeModifiedItemBearerModIndIEs_Value_MAX = INT_MAX
};

union mmeE_RABToBeModifiedItemBearerModIndIEs_Value_union {
    struct mmeE_RABToBeModifiedItemBearerModInd *pdu_E_RABToBeModifiedItemBearerModInd;                                 /* mmePDU_E_RABToBeModifiedItemBearerModIndIEs_Value_E_RABToBeModifiedItemBearerModInd */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeE_RABToBeModifiedItemBearerModIndIEs_Value {
    mmeE_RABToBeModifiedItemBearerModIndIEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeE_RABToBeModifiedItemBearerModIndIEs_Value_union decoded;
} mmeE_RABToBeModifiedItemBearerModIndIEs_Value;

typedef struct mmeE_RABToBeModifiedListBearerModInd_ {
    struct mmeE_RABToBeModifiedListBearerModInd_ *next;
    struct mme_seq114 {
        mmeProtocolIE_ID id;
        mmeCriticality  criticality;
        mmeE_RABToBeModifiedItemBearerModIndIEs_Value value;
    } value;
} *mmeE_RABToBeModifiedListBearerModInd;

typedef struct mmeE_RABToBeModifiedItemBearerModInd {
    unsigned char   bit_mask;
#       define      mmeE_RABToBeModifiedItemBearerModInd_iE_Extensions_present 0x80
    mmeE_RAB_ID     e_RAB_ID;
    mmeTransportLayerAddress transportLayerAddress;
    mmeGTP_TEID     dL_GTP_TEID;
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                * mmeE_RABToBeModifiedItemBearerModInd_iE_Extensions_present if
                * present */
} mmeE_RABToBeModifiedItemBearerModInd;

enum mmeE_RABNotToBeModifiedItemBearerModIndIEs_Value_PDUs {
    mmePDU_E_RABNotToBeModifiedItemBearerModIndIEs_Value_UNKNOWN = 0,

    mmePDU_E_RABNotToBeModifiedItemBearerModIndIEs_Value_E_RABNotToBeModifiedItemBearerModInd = mmeE_RABNotToBeModifiedItemBearerModInd_PDU,

    mmePDU_E_RABNotToBeModifiedItemBearerModIndIEs_Value_MAX = INT_MAX
};

union mmeE_RABNotToBeModifiedItemBearerModIndIEs_Value_union {
    struct mmeE_RABNotToBeModifiedItemBearerModInd *pdu_E_RABNotToBeModifiedItemBearerModInd;                           /* mmePDU_E_RABNotToBeModifiedItemBearerModIndIEs_Value_E_RABNotToBeModifiedItemBearerModInd */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeE_RABNotToBeModifiedItemBearerModIndIEs_Value {
    mmeE_RABNotToBeModifiedItemBearerModIndIEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeE_RABNotToBeModifiedItemBearerModIndIEs_Value_union decoded;
} mmeE_RABNotToBeModifiedItemBearerModIndIEs_Value;

typedef struct mmeE_RABNotToBeModifiedListBearerModInd_ {
    struct mmeE_RABNotToBeModifiedListBearerModInd_ *next;
    struct mme_seq116 {
        mmeProtocolIE_ID id;
        mmeCriticality  criticality;
        mmeE_RABNotToBeModifiedItemBearerModIndIEs_Value value;
    } value;
} *mmeE_RABNotToBeModifiedListBearerModInd;

typedef struct mmeE_RABNotToBeModifiedItemBearerModInd {
    unsigned char   bit_mask;
#       define      mmeE_RABNotToBeModifiedItemBearerModInd_iE_Extensions_present 0x80
    mmeE_RAB_ID     e_RAB_ID;
    mmeTransportLayerAddress transportLayerAddress;
    mmeGTP_TEID     dL_GTP_TEID;
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
             * mmeE_RABNotToBeModifiedItemBearerModInd_iE_Extensions_present if
             * present */
} mmeE_RABNotToBeModifiedItemBearerModInd;

enum mmeE_RABModificationConfirmIEs_Value_PDUs {
    mmePDU_E_RABModificationConfirmIEs_Value_UNKNOWN = 0,

    mmePDU_E_RABModificationConfirmIEs_Value_MME_UE_S1AP_ID = mmeMME_UE_S1AP_ID_PDU,
    mmePDU_E_RABModificationConfirmIEs_Value_ENB_UE_S1AP_ID = mmeENB_UE_S1AP_ID_PDU,
    mmePDU_E_RABModificationConfirmIEs_Value_E_RABModifyListBearerModConf = mmeE_RABModifyListBearerModConf_PDU,
    mmePDU_E_RABModificationConfirmIEs_Value_E_RABList = mmeE_RABList_PDU,
    mmePDU_E_RABModificationConfirmIEs_Value_CriticalityDiagnostics = mmeCriticalityDiagnostics_PDU,

    mmePDU_E_RABModificationConfirmIEs_Value_MAX = INT_MAX
};

union mmeE_RABModificationConfirmIEs_Value_union {
    mmeMME_UE_S1AP_ID *pdu_MME_UE_S1AP_ID;  
                  /* mmePDU_E_RABModificationConfirmIEs_Value_MME_UE_S1AP_ID */
    mmeENB_UE_S1AP_ID *pdu_ENB_UE_S1AP_ID;  
                  /* mmePDU_E_RABModificationConfirmIEs_Value_ENB_UE_S1AP_ID */
    struct mmeE_RABModifyListBearerModConf_ **pdu_E_RABModifyListBearerModConf;                                         /* mmePDU_E_RABModificationConfirmIEs_Value_E_RABModifyListBearerModConf */
    struct mmeE_RABList_ **pdu_E_RABList;  
                       /* mmePDU_E_RABModificationConfirmIEs_Value_E_RABList */
    struct mmeCriticalityDiagnostics *pdu_CriticalityDiagnostics;  
          /* mmePDU_E_RABModificationConfirmIEs_Value_CriticalityDiagnostics */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeE_RABModificationConfirmIEs_Value {
    mmeE_RABModificationConfirmIEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeE_RABModificationConfirmIEs_Value_union decoded;
} mmeE_RABModificationConfirmIEs_Value;

// **************************************************************
//
// E-RAB Modification Confirm
//
// **************************************************************
typedef struct mmeE_RABModificationConfirm {
    struct mme_seqof101 {
        struct mme_seqof101 *next;
        struct mme_seq118 {
            mmeProtocolIE_ID id;
            mmeCriticality  criticality;
            mmeE_RABModificationConfirmIEs_Value value;
        } value;
    } *protocolIEs;
} mmeE_RABModificationConfirm;

enum mmeE_RABModifyItemBearerModConfIEs_Value_PDUs {
    mmePDU_E_RABModifyItemBearerModConfIEs_Value_UNKNOWN = 0,

    mmePDU_E_RABModifyItemBearerModConfIEs_Value_E_RABModifyItemBearerModConf = mmeE_RABModifyItemBearerModConf_PDU,

    mmePDU_E_RABModifyItemBearerModConfIEs_Value_MAX = INT_MAX
};

union mmeE_RABModifyItemBearerModConfIEs_Value_union {
    struct mmeE_RABModifyItemBearerModConf *pdu_E_RABModifyItemBearerModConf;                                           /* mmePDU_E_RABModifyItemBearerModConfIEs_Value_E_RABModifyItemBearerModConf */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeE_RABModifyItemBearerModConfIEs_Value {
    mmeE_RABModifyItemBearerModConfIEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeE_RABModifyItemBearerModConfIEs_Value_union decoded;
} mmeE_RABModifyItemBearerModConfIEs_Value;

typedef struct mmeE_RABModifyListBearerModConf_ {
    struct mmeE_RABModifyListBearerModConf_ *next;
    struct mme_seq119 {
        mmeProtocolIE_ID id;
        mmeCriticality  criticality;
        mmeE_RABModifyItemBearerModConfIEs_Value value;
    } value;
} *mmeE_RABModifyListBearerModConf;

typedef struct mmeE_RABModifyItemBearerModConf {
    unsigned char   bit_mask;
#       define      mmeE_RABModifyItemBearerModConf_iE_Extensions_present 0x80
    mmeE_RAB_ID     e_RAB_ID;
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                     * mmeE_RABModifyItemBearerModConf_iE_Extensions_present if
                     * present */
} mmeE_RABModifyItemBearerModConf;

typedef struct mmeCellBasedMDT {
    unsigned char   bit_mask;
#       define      mmeCellBasedMDT_iE_Extensions_present 0x80
    struct mmeCellIdListforMDT_ *cellIdListforMDT;
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                                         * mmeCellBasedMDT_iE_Extensions_present
                                         * if present */
} mmeCellBasedMDT;

typedef struct mmeTABasedMDT {
    unsigned char   bit_mask;
#       define      mmeTABasedMDT_iE_Extensions_present 0x80
    struct mmeTAListforMDT_ *tAListforMDT;
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                                         * mmeTABasedMDT_iE_Extensions_present
                                         * if present */
} mmeTABasedMDT;

typedef struct mmeTAIBasedMDT {
    unsigned char   bit_mask;
#       define      mmeTAIBasedMDT_iE_Extensions_present 0x80
    struct mmeTAIListforMDT_ *tAIListforMDT;
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                                         * mmeTAIBasedMDT_iE_Extensions_present
                                         * if present */
} mmeTAIBasedMDT;

// A
typedef struct mmeAreaScopeOfMDT {
    unsigned short  choice;
#       define      mmecellBased_chosen 1
#       define      mmetABased_chosen 2
#       define      mmepLMNWide_chosen 3
#       define      mmetAIBased_chosen 4
    union _union {
        mmeCellBasedMDT cellBased;  /* to choose, set choice to
                                     * mmecellBased_chosen */
        mmeTABasedMDT   tABased;  /* to choose, set choice to
                                   * mmetABased_chosen */
        Nulltype        pLMNWide;  /* to choose, set choice to
                                    * mmepLMNWide_chosen */
        mmeTAIBasedMDT  tAIBased;  /* extension #1; to choose, set choice to
                                    * mmetAIBased_chosen */
    } u;
} mmeAreaScopeOfMDT;

enum mmeBearers_SubjectToStatusTransfer_ItemIEs_Value_PDUs {
    mmePDU_Bearers_SubjectToStatusTransfer_ItemIEs_Value_UNKNOWN = 0,

    mmePDU_Bearers_SubjectToStatusTransfer_ItemIEs_Value_Bearers_SubjectToStatusTransfer_Item = mmeBearers_SubjectToStatusTransfer_Item_PDU,

    mmePDU_Bearers_SubjectToStatusTransfer_ItemIEs_Value_MAX = INT_MAX
};

union mmeBearers_SubjectToStatusTransfer_ItemIEs_Value_union {
    struct mmeBearers_SubjectToStatusTransfer_Item *pdu_Bearers_SubjectToStatusTransfer_Item;                           /* mmePDU_Bearers_SubjectToStatusTransfer_ItemIEs_Value_Bearers_SubjectToStatusTransfer_Item */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeBearers_SubjectToStatusTransfer_ItemIEs_Value {
    mmeBearers_SubjectToStatusTransfer_ItemIEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeBearers_SubjectToStatusTransfer_ItemIEs_Value_union decoded;
} mmeBearers_SubjectToStatusTransfer_ItemIEs_Value;

// B
typedef struct mmeBearers_SubjectToStatusTransferList_ {
    struct mmeBearers_SubjectToStatusTransferList_ *next;
    struct mme_seq124 {
        mmeProtocolIE_ID id;
        mmeCriticality  criticality;
        mmeBearers_SubjectToStatusTransfer_ItemIEs_Value value;
    } value;
} *mmeBearers_SubjectToStatusTransferList;

typedef unsigned short  mmePDCP_SN;

typedef unsigned int    mmeHFN;

typedef struct mmeCOUNTvalue {
    unsigned char   bit_mask;
#       define      mmeCOUNTvalue_iE_Extensions_present 0x80
    mmePDCP_SN      pDCP_SN;
    mmeHFN          hFN;
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                                         * mmeCOUNTvalue_iE_Extensions_present
                                         * if present */
} mmeCOUNTvalue;

// R
typedef struct mmeReceiveStatusofULPDCPSDUs {
    unsigned short  length;  /* number of significant bits */
    unsigned char   *value;
} mmeReceiveStatusofULPDCPSDUs;

enum mmeBearers_SubjectToStatusTransfer_ItemExtIEs_Extension_PDUs {
    mmePDU_Bearers_SubjectToStatusTransfer_ItemExtIEs_Extension_UNKNOWN = 0,

    mmePDU_Bearers_SubjectToStatusTransfer_ItemExtIEs_Extension_COUNTValueExtended = mmeCOUNTValueExtended_PDU,
    mmePDU_Bearers_SubjectToStatusTransfer_ItemExtIEs_Extension_ReceiveStatusOfULPDCPSDUsExtended = mmeReceiveStatusOfULPDCPSDUsExtended_PDU,

    mmePDU_Bearers_SubjectToStatusTransfer_ItemExtIEs_Extension_MAX = INT_MAX
};

union mmeBearers_SubjectToStatusTransfer_ItemExtIEs_Extension_union {
    struct mmeCOUNTValueExtended *pdu_COUNTValueExtended;  
     /* mmePDU_Bearers_SubjectToStatusTransfer_ItemExtIEs_Extension_COUNTValueExtended */
    struct mmeReceiveStatusOfULPDCPSDUsExtended *pdu_ReceiveStatusOfULPDCPSDUsExtended;                                 /* mmePDU_Bearers_SubjectToStatusTransfer_ItemExtIEs_Extension_ReceiveStatusOfULPDCPSDUsExtended */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeBearers_SubjectToStatusTransfer_ItemExtIEs_Extension {
    mmeBearers_SubjectToStatusTransfer_ItemExtIEs_Extension_PDUs pduNum;
    OssBuf          encoded;
    mmeBearers_SubjectToStatusTransfer_ItemExtIEs_Extension_union decoded;
} mmeBearers_SubjectToStatusTransfer_ItemExtIEs_Extension;

typedef struct mmeBearers_SubjectToStatusTransfer_Item {
    unsigned char   bit_mask;
#       define      mmereceiveStatusofULPDCPSDUs_present 0x80
#       define      mmeBearers_SubjectToStatusTransfer_Item_iE_Extensions_present 0x40
    mmeE_RAB_ID     e_RAB_ID;
    mmeCOUNTvalue   uL_COUNTvalue;
    mmeCOUNTvalue   dL_COUNTvalue;
    mmeReceiveStatusofULPDCPSDUs receiveStatusofULPDCPSDUs;  /* optional; set in
                                   * bit_mask
                                   * mmereceiveStatusofULPDCPSDUs_present if
                                   * present */
    struct mme_seqof107 {
        struct mme_seqof107 *next;
        struct mme_seq126 {
            mmeProtocolExtensionID id;
            mmeCriticality  criticality;
            mmeBearers_SubjectToStatusTransfer_ItemExtIEs_Extension extensionValue;
        } value;
    } *iE_Extensions;  /* optional; set in bit_mask
             * mmeBearers_SubjectToStatusTransfer_Item_iE_Extensions_present if
             * present */
} mmeBearers_SubjectToStatusTransfer_Item;

typedef struct mmeBPLMNs_ {
    struct mmeBPLMNs_ *next;
    mmePLMNidentity value;
} *mmeBPLMNs;

typedef struct mmeBroadcastCancelledAreaList {
    unsigned short  choice;
#       define      mmecellID_Cancelled_chosen 1
#       define      mmetAI_Cancelled_chosen 2
#       define      mmeemergencyAreaID_Cancelled_chosen 3
    union _union {
        struct mmeCellID_Cancelled_ *cellID_Cancelled;  /* to choose, set choice
                                             * to mmecellID_Cancelled_chosen */
        struct mmeTAI_Cancelled_ *tAI_Cancelled;  /* to choose, set choice to
                                                   * mmetAI_Cancelled_chosen */
        struct mmeEmergencyAreaID_Cancelled_ *emergencyAreaID_Cancelled;  
                                        /* to choose, set choice to
                                       * mmeemergencyAreaID_Cancelled_chosen */
    } u;
} mmeBroadcastCancelledAreaList;

typedef struct mmeBroadcastCompletedAreaList {
    unsigned short  choice;
#       define      mmecellID_Broadcast_chosen 1
#       define      mmetAI_Broadcast_chosen 2
#       define      mmeemergencyAreaID_Broadcast_chosen 3
    union _union {
        struct mmeCellID_Broadcast_ *cellID_Broadcast;  /* to choose, set choice
                                             * to mmecellID_Broadcast_chosen */
        struct mmeTAI_Broadcast_ *tAI_Broadcast;  /* to choose, set choice to
                                                   * mmetAI_Broadcast_chosen */
        struct mmeEmergencyAreaID_Broadcast_ *emergencyAreaID_Broadcast;  
                                        /* to choose, set choice to
                                       * mmeemergencyAreaID_Broadcast_chosen */
    } u;
} mmeBroadcastCompletedAreaList;

typedef struct mmeCellIdentity {
    unsigned short  length;  /* number of significant bits */
    unsigned char   *value;
} mmeCellIdentity;

typedef struct mmeEUTRAN_CGI {
    unsigned char   bit_mask;
#       define      mmeEUTRAN_CGI_iE_Extensions_present 0x80
    mmePLMNidentity pLMNidentity;
    mmeCellIdentity cell_ID;
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                                         * mmeEUTRAN_CGI_iE_Extensions_present
                                         * if present */
} mmeEUTRAN_CGI;

typedef unsigned short  mmeNumberOfBroadcasts;

typedef struct mmeCancelledCellinEAI_Item {
    unsigned char   bit_mask;
#       define      mmeCancelledCellinEAI_Item_iE_Extensions_present 0x80
    mmeEUTRAN_CGI   eCGI;
    mmeNumberOfBroadcasts numberOfBroadcasts;
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                          * mmeCancelledCellinEAI_Item_iE_Extensions_present if
                          * present */
} mmeCancelledCellinEAI_Item;

// C
typedef struct mmeCancelledCellinEAI_ {
    struct mmeCancelledCellinEAI_ *next;
    mmeCancelledCellinEAI_Item value;
} *mmeCancelledCellinEAI;

typedef struct mmeCancelledCellinTAI_Item {
    unsigned char   bit_mask;
#       define      mmeCancelledCellinTAI_Item_iE_Extensions_present 0x80
    mmeEUTRAN_CGI   eCGI;
    mmeNumberOfBroadcasts numberOfBroadcasts;
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                          * mmeCancelledCellinTAI_Item_iE_Extensions_present if
                          * present */
} mmeCancelledCellinTAI_Item;

typedef struct mmeCancelledCellinTAI_ {
    struct mmeCancelledCellinTAI_ *next;
    mmeCancelledCellinTAI_Item value;
} *mmeCancelledCellinTAI;

typedef struct mmeCellID_Broadcast_Item {
    unsigned char   bit_mask;
#       define      mmeCellID_Broadcast_Item_iE_Extensions_present 0x80
    mmeEUTRAN_CGI   eCGI;
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                            * mmeCellID_Broadcast_Item_iE_Extensions_present if
                            * present */
} mmeCellID_Broadcast_Item;

typedef struct mmeCellID_Broadcast_ {
    struct mmeCellID_Broadcast_ *next;
    mmeCellID_Broadcast_Item value;
} *mmeCellID_Broadcast;

typedef struct mmeCellID_Cancelled_Item {
    unsigned char   bit_mask;
#       define      mmeCellID_Cancelled_Item_iE_Extensions_present 0x80
    mmeEUTRAN_CGI   eCGI;
    mmeNumberOfBroadcasts numberOfBroadcasts;
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                            * mmeCellID_Cancelled_Item_iE_Extensions_present if
                            * present */
} mmeCellID_Cancelled_Item;

typedef struct mmeCellID_Cancelled_ {
    struct mmeCellID_Cancelled_ *next;
    mmeCellID_Cancelled_Item value;
} *mmeCellID_Cancelled;

typedef struct mmeCellIdListforMDT_ {
    struct mmeCellIdListforMDT_ *next;
    mmeEUTRAN_CGI   value;
} *mmeCellIdListforMDT;

typedef struct mmeCdma2000PDU {
    unsigned int    length;
    unsigned char   *value;
} mmeCdma2000PDU;

typedef struct mmeCdma2000SectorID {
    unsigned int    length;
    unsigned char   *value;
} mmeCdma2000SectorID;

typedef struct mmeCdma2000OneXMEID {
    unsigned int    length;
    unsigned char   *value;
} mmeCdma2000OneXMEID;

typedef struct mmeCdma2000OneXMSI {
    unsigned int    length;
    unsigned char   *value;
} mmeCdma2000OneXMSI;

typedef struct mmeCdma2000OneXPilot {
    unsigned int    length;
    unsigned char   *value;
} mmeCdma2000OneXPilot;

typedef struct mmeCdma2000OneXSRVCCInfo {
    unsigned char   bit_mask;
#       define      mmeCdma2000OneXSRVCCInfo_iE_Extensions_present 0x80
    mmeCdma2000OneXMEID cdma2000OneXMEID;
    mmeCdma2000OneXMSI cdma2000OneXMSI;
    mmeCdma2000OneXPilot cdma2000OneXPilot;
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                            * mmeCdma2000OneXSRVCCInfo_iE_Extensions_present if
                            * present */
} mmeCdma2000OneXSRVCCInfo;

typedef struct mmeCdma2000OneXRAND {
    unsigned int    length;
    unsigned char   *value;
} mmeCdma2000OneXRAND;

typedef struct mmeCGI {
    unsigned char   bit_mask;
#       define      mmeCGI_rAC_present 0x80
#       define      mmeCGI_iE_Extensions_present 0x40
    mmePLMNidentity pLMNidentity;
    mmeLAC          lAC;
    mmeCI           cI;
    mmeRAC          rAC;  /* optional; set in bit_mask mmeCGI_rAC_present if
                           * present */
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                                         * mmeCGI_iE_Extensions_present if
                                         * present */
} mmeCGI;

typedef struct mmeCorrelation_ID {
    unsigned short  length;
    unsigned char   value[4];
} mmeCorrelation_ID;

typedef struct mmeCSG_Id {
    unsigned short  length;  /* number of significant bits */
    unsigned char   *value;
} mmeCSG_Id;

typedef struct mmeCSG_IdList_Item {
    unsigned char   bit_mask;
#       define      mmeCSG_IdList_Item_iE_Extensions_present 0x80
    mmeCSG_Id       cSG_Id;
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                                  * mmeCSG_IdList_Item_iE_Extensions_present if
                                  * present */
} mmeCSG_IdList_Item;

typedef struct mmeCSG_IdList_ {
    struct mmeCSG_IdList_ *next;
    mmeCSG_IdList_Item value;
} *mmeCSG_IdList;

typedef unsigned short  mmePDCP_SNExtended;

typedef unsigned int    mmeHFNModified;

typedef struct mmeCOUNTValueExtended {
    unsigned char   bit_mask;
#       define      mmeCOUNTValueExtended_iE_Extensions_present 0x80
    mmePDCP_SNExtended pDCP_SNExtended;
    mmeHFNModified  hFNModified;
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                               * mmeCOUNTValueExtended_iE_Extensions_present if
                               * present */
} mmeCOUNTValueExtended;

typedef enum mmeTriggeringMessage {
    mmeinitiating_message = 0,
    mmesuccessful_outcome = 1,
    mmeunsuccessfull_outcome = 2
} mmeTriggeringMessage;

typedef struct mmeCriticalityDiagnostics {
    unsigned char   bit_mask;
#       define      mmeprocedureCode_present 0x80
#       define      mmetriggeringMessage_present 0x40
#       define      mmeprocedureCriticality_present 0x20
#       define      mmeiEsCriticalityDiagnostics_present 0x10
#       define      mmeCriticalityDiagnostics_iE_Extensions_present 0x08
    mmeProcedureCode procedureCode;  /* optional; set in bit_mask
                                      * mmeprocedureCode_present if present */
    mmeTriggeringMessage triggeringMessage;  /* optional; set in bit_mask
                                              * mmetriggeringMessage_present if
                                              * present */
    mmeCriticality  procedureCriticality;  /* optional; set in bit_mask
                                            * mmeprocedureCriticality_present if
                                            * present */
    struct mmeCriticalityDiagnostics_IE_List_ *iEsCriticalityDiagnostics;  
                                        /* optional; set in bit_mask
                                         * mmeiEsCriticalityDiagnostics_present
                                         * if present */
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                           * mmeCriticalityDiagnostics_iE_Extensions_present if
                           * present */
} mmeCriticalityDiagnostics;

typedef enum mmeTypeOfError {
    mmenot_understood = 0,
    mmemissing = 1
} mmeTypeOfError;

typedef struct mmeCriticalityDiagnostics_IE_Item {
    unsigned char   bit_mask;
#       define      mmeCriticalityDiagnostics_IE_Item_iE_Extensions_present 0x80
    mmeCriticality  iECriticality;
    mmeProtocolIE_ID iE_ID;
    mmeTypeOfError  typeOfError;
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                   * mmeCriticalityDiagnostics_IE_Item_iE_Extensions_present if
                   * present */
} mmeCriticalityDiagnostics_IE_Item;

typedef struct mmeCriticalityDiagnostics_IE_List_ {
    struct mmeCriticalityDiagnostics_IE_List_ *next;
    mmeCriticalityDiagnostics_IE_Item value;
} *mmeCriticalityDiagnostics_IE_List;

// D
typedef struct mmeDataCodingScheme {
    unsigned short  length;  /* number of significant bits */
    unsigned char   *value;
} mmeDataCodingScheme;

// E
typedef long            mmeEARFCN;

typedef struct mmeECGIList_ {
    struct mmeECGIList_ *next;
    mmeEUTRAN_CGI   value;
} *mmeECGIList;

typedef struct mmeEmergencyAreaID {
    unsigned short  length;
    unsigned char   value[3];
} mmeEmergencyAreaID;

typedef struct mmeEmergencyAreaIDList_ {
    struct mmeEmergencyAreaIDList_ *next;
    mmeEmergencyAreaID value;
} *mmeEmergencyAreaIDList;

typedef struct mmeEmergencyAreaID_Broadcast_Item {
    unsigned char   bit_mask;
#       define      mmeEmergencyAreaID_Broadcast_Item_iE_Extensions_present 0x80
    mmeEmergencyAreaID emergencyAreaID;
    struct mmeCompletedCellinEAI_ *completedCellinEAI;
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                   * mmeEmergencyAreaID_Broadcast_Item_iE_Extensions_present if
                   * present */
} mmeEmergencyAreaID_Broadcast_Item;

typedef struct mmeEmergencyAreaID_Broadcast_ {
    struct mmeEmergencyAreaID_Broadcast_ *next;
    mmeEmergencyAreaID_Broadcast_Item value;
} *mmeEmergencyAreaID_Broadcast;

typedef struct mmeEmergencyAreaID_Cancelled_Item {
    unsigned char   bit_mask;
#       define      mmeEmergencyAreaID_Cancelled_Item_iE_Extensions_present 0x80
    mmeEmergencyAreaID emergencyAreaID;
    struct mmeCancelledCellinEAI_ *cancelledCellinEAI;
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                   * mmeEmergencyAreaID_Cancelled_Item_iE_Extensions_present if
                   * present */
} mmeEmergencyAreaID_Cancelled_Item;

typedef struct mmeEmergencyAreaID_Cancelled_ {
    struct mmeEmergencyAreaID_Cancelled_ *next;
    mmeEmergencyAreaID_Cancelled_Item value;
} *mmeEmergencyAreaID_Cancelled;

typedef struct mmeCompletedCellinEAI_Item {
    unsigned char   bit_mask;
#       define      mmeCompletedCellinEAI_Item_iE_Extensions_present 0x80
    mmeEUTRAN_CGI   eCGI;
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                          * mmeCompletedCellinEAI_Item_iE_Extensions_present if
                          * present */
} mmeCompletedCellinEAI_Item;

typedef struct mmeCompletedCellinEAI_ {
    struct mmeCompletedCellinEAI_ *next;
    mmeCompletedCellinEAI_Item value;
} *mmeCompletedCellinEAI;

typedef struct mmeECGI_List_ {
    struct mmeECGI_List_ *next;
    mmeEUTRAN_CGI   value;
} *mmeECGI_List;

typedef struct mmeEmergencyAreaIDListForRestart_ {
    struct mmeEmergencyAreaIDListForRestart_ *next;
    mmeEmergencyAreaID value;
} *mmeEmergencyAreaIDListForRestart;

typedef struct mme_bit1 {
    unsigned short  length;  /* number of significant bits */
    unsigned char   *value;
} mme_bit1;

typedef struct mmeENB_ID {
    unsigned short  choice;
#       define      mmemacroENB_ID_chosen 1
#       define      mmehomeENB_ID_chosen 2
    union _union {
        mme_bit1        macroENB_ID;  /* to choose, set choice to
                                       * mmemacroENB_ID_chosen */
        mme_bit1        homeENB_ID;  /* to choose, set choice to
                                      * mmehomeENB_ID_chosen */
    } u;
} mmeENB_ID;

typedef struct mmeGlobal_ENB_ID {
    unsigned char   bit_mask;
#       define      mmeGlobal_ENB_ID_iE_Extensions_present 0x80
    mmePLMNidentity pLMNidentity;
    mmeENB_ID       eNB_ID;
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                                    * mmeGlobal_ENB_ID_iE_Extensions_present if
                                    * present */
} mmeGlobal_ENB_ID;

typedef struct mmeMME_Group_ID {
    unsigned short  length;
    unsigned char   value[2];
} mmeMME_Group_ID;

typedef struct mmeMME_Code {
    unsigned short  length;
    unsigned char   value[1];
} mmeMME_Code;

typedef struct mmeGUMMEI {
    unsigned char   bit_mask;
#       define      mmeGUMMEI_iE_Extensions_present 0x80
    mmePLMNidentity pLMN_Identity;
    mmeMME_Group_ID mME_Group_ID;
    mmeMME_Code     mME_Code;
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                                         * mmeGUMMEI_iE_Extensions_present if
                                         * present */
} mmeGUMMEI;

typedef struct mmeGUMMEIList_ {
    struct mmeGUMMEIList_ *next;
    mmeGUMMEI       value;
} *mmeGUMMEIList;

typedef struct mmeENB_StatusTransfer_TransparentContainer {
    unsigned char   bit_mask;
#       define      mmeENB_StatusTransfer_TransparentContainer_iE_Extensions_present 0x80
    struct mmeBearers_SubjectToStatusTransferList_ *bearers_SubjectToStatusTransferList;
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
          * mmeENB_StatusTransfer_TransparentContainer_iE_Extensions_present if
          * present */
} mmeENB_StatusTransfer_TransparentContainer;

typedef struct mmeENBname {
    unsigned short  length;
    char            *value;
} mmeENBname;

typedef struct mmeENBX2TLAs_ {
    struct mmeENBX2TLAs_ *next;
    mmeTransportLayerAddress value;
} *mmeENBX2TLAs;

typedef struct mmeEncryptionAlgorithms {
    unsigned short  length;  /* number of significant bits */
    unsigned char   *value;
} mmeEncryptionAlgorithms;

typedef struct mmeEPLMNs_ {
    struct mmeEPLMNs_ *next;
    mmePLMNidentity value;
} *mmeEPLMNs;

typedef enum mmeEventType {
    mmedirect = 0,
    mmechange_of_serve_cell = 1,
    mmestop_change_of_serve_cell = 2
} mmeEventType;

enum mmeE_RABItemIEs_Value_PDUs {
    mmePDU_E_RABItemIEs_Value_UNKNOWN = 0,

    mmePDU_E_RABItemIEs_Value_E_RABItem = mmeE_RABItem_PDU,

    mmePDU_E_RABItemIEs_Value_MAX  = INT_MAX
};

union mmeE_RABItemIEs_Value_union {
    struct mmeE_RABItem *pdu_E_RABItem;  
                                      /* mmePDU_E_RABItemIEs_Value_E_RABItem */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeE_RABItemIEs_Value {
    mmeE_RABItemIEs_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeE_RABItemIEs_Value_union decoded;
} mmeE_RABItemIEs_Value;

typedef struct mmeE_RABList_ {
    struct mmeE_RABList_ *next;
    struct mme_seq144 {
        mmeProtocolIE_ID id;
        mmeCriticality  criticality;
        mmeE_RABItemIEs_Value value;
    } value;
} *mmeE_RABList;

typedef struct mmeE_RABItem {
    unsigned char   bit_mask;
#       define      mmeE_RABItem_iE_Extensions_present 0x80
    mmeE_RAB_ID     e_RAB_ID;
    mmeCause        cause;
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                                         * mmeE_RABItem_iE_Extensions_present if
                                         * present */
} mmeE_RABItem;

typedef long            mmeExpectedActivityPeriod;

typedef long            mmeExpectedIdlePeriod;

typedef enum mmeSourceOfUEActivityBehaviourInformation {
    mmesubscription_information = 0,
    mmestatistics = 1
} mmeSourceOfUEActivityBehaviourInformation;

typedef struct mmeExpectedUEActivityBehaviour {
    unsigned char   bit_mask;
#       define      mmeexpectedActivityPeriod_present 0x80
#       define      mmeexpectedIdlePeriod_present 0x40
#       define      mmesourceofUEActivityBehaviourInformation_present 0x20
#       define      mmeExpectedUEActivityBehaviour_iE_Extensions_present 0x10
    mmeExpectedActivityPeriod expectedActivityPeriod;  /* optional; set in
                                   * bit_mask mmeexpectedActivityPeriod_present
                                   * if present */
    mmeExpectedIdlePeriod expectedIdlePeriod;  /* optional; set in bit_mask
                                                * mmeexpectedIdlePeriod_present
                                                * if present */
    mmeSourceOfUEActivityBehaviourInformation sourceofUEActivityBehaviourInformation;                                   /* optional; set in bit_mask
                         * mmesourceofUEActivityBehaviourInformation_present if
                         * present */
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                      * mmeExpectedUEActivityBehaviour_iE_Extensions_present if
                      * present */
} mmeExpectedUEActivityBehaviour;

typedef enum mmeExpectedHOInterval {
    mmesec15 = 0,
    mmesec30 = 1,
    mmesec60 = 2,
    mmesec90 = 3,
    mmesec120 = 4,
    mmesec180 = 5,
    mmelong_time = 6
} mmeExpectedHOInterval;

typedef struct mmeExpectedUEBehaviour {
    unsigned char   bit_mask;
#       define      mmeexpectedActivity_present 0x80
#       define      mmeexpectedHOInterval_present 0x40
#       define      mmeExpectedUEBehaviour_iE_Extensions_present 0x20
    mmeExpectedUEActivityBehaviour expectedActivity;  /* optional; set in
                                   * bit_mask mmeexpectedActivity_present if
                                   * present */
    mmeExpectedHOInterval expectedHOInterval;  /* optional; set in bit_mask
                                                * mmeexpectedHOInterval_present
                                                * if present */
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                              * mmeExpectedUEBehaviour_iE_Extensions_present if
                              * present */
} mmeExpectedUEBehaviour;

// F
typedef enum mmeForbiddenInterRATs {
    mmeall = 0,
    mmegeran = 1,
    mmeutran = 2,
    mmecdma2000 = 3,
    mmegeranandutran = 4,
    mmecdma2000andutran = 5
} mmeForbiddenInterRATs;

typedef struct mmeForbiddenTAs_Item {
    unsigned char   bit_mask;
#       define      mmeForbiddenTAs_Item_iE_Extensions_present 0x80
    mmePLMNidentity pLMN_Identity;
    struct mmeForbiddenTACs_ *forbiddenTACs;
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                                * mmeForbiddenTAs_Item_iE_Extensions_present if
                                * present */
} mmeForbiddenTAs_Item;

typedef struct mmeForbiddenTAs_ {
    struct mmeForbiddenTAs_ *next;
    mmeForbiddenTAs_Item value;
} *mmeForbiddenTAs;

typedef struct mmeForbiddenTACs_ {
    struct mmeForbiddenTACs_ *next;
    mmeTAC          value;
} *mmeForbiddenTACs;

typedef struct mmeForbiddenLAs_Item {
    unsigned char   bit_mask;
#       define      mmeForbiddenLAs_Item_iE_Extensions_present 0x80
    mmePLMNidentity pLMN_Identity;
    struct mmeForbiddenLACs_ *forbiddenLACs;
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                                * mmeForbiddenLAs_Item_iE_Extensions_present if
                                * present */
} mmeForbiddenLAs_Item;

typedef struct mmeForbiddenLAs_ {
    struct mmeForbiddenLAs_ *next;
    mmeForbiddenLAs_Item value;
} *mmeForbiddenLAs;

typedef struct mmeForbiddenLACs_ {
    struct mmeForbiddenLACs_ *next;
    mmeLAC          value;
} *mmeForbiddenLACs;

// H
typedef struct mmeHandoverRestrictionList {
    unsigned char   bit_mask;
#       define      mmeequivalentPLMNs_present 0x80
#       define      mmeforbiddenTAs_present 0x40
#       define      mmeforbiddenLAs_present 0x20
#       define      mmeforbiddenInterRATs_present 0x10
#       define      mmeHandoverRestrictionList_iE_Extensions_present 0x08
    mmePLMNidentity servingPLMN;
    struct mmeEPLMNs_ *equivalentPLMNs;  /* optional; set in bit_mask
                                          * mmeequivalentPLMNs_present if
                                          * present */
    struct mmeForbiddenTAs_ *forbiddenTAs;  /* optional; set in bit_mask
                                             * mmeforbiddenTAs_present if
                                             * present */
    struct mmeForbiddenLAs_ *forbiddenLAs;  /* optional; set in bit_mask
                                             * mmeforbiddenLAs_present if
                                             * present */
    mmeForbiddenInterRATs forbiddenInterRATs;  /* optional; set in bit_mask
                                                * mmeforbiddenInterRATs_present
                                                * if present */
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                          * mmeHandoverRestrictionList_iE_Extensions_present if
                          * present */
} mmeHandoverRestrictionList;

// I
typedef struct mmeMasked_IMEISV {
    unsigned short  length;  /* number of significant bits */
    unsigned char   *value;
} mmeMasked_IMEISV;

typedef struct mmeMeasurementsToActivate {
    unsigned short  length;  /* number of significant bits */
    unsigned char   *value;
} mmeMeasurementsToActivate;

typedef enum mmeM1ReportingTrigger {
    mmeperiodic = 0,
    mmea2eventtriggered = 1,
    mmea2eventtriggered_periodic = 2
} mmeM1ReportingTrigger;

typedef unsigned short  mmeThreshold_RSRP;

typedef unsigned short  mmeThreshold_RSRQ;

typedef struct mmeMeasurementThresholdA2 {
    unsigned short  choice;
#       define      mmethreshold_RSRP_chosen 1
#       define      mmethreshold_RSRQ_chosen 2
    union _union {
        mmeThreshold_RSRP threshold_RSRP;  /* to choose, set choice to
                                            * mmethreshold_RSRP_chosen */
        mmeThreshold_RSRQ threshold_RSRQ;  /* to choose, set choice to
                                            * mmethreshold_RSRQ_chosen */
    } u;
} mmeMeasurementThresholdA2;

// This is a dummy IE used only as a reference to the actual definition in relevant specification.
typedef struct mmeM1ThresholdEventA2 {
    unsigned char   bit_mask;
#       define      mmeM1ThresholdEventA2_iE_Extensions_present 0x80
    mmeMeasurementThresholdA2 measurementThreshold;
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                               * mmeM1ThresholdEventA2_iE_Extensions_present if
                               * present */
} mmeM1ThresholdEventA2;

typedef enum mmeReportIntervalMDT {
    mmems120 = 0,
    mmems240 = 1,
    mmems480 = 2,
    mmems640 = 3,
    mmeReportIntervalMDT_ms1024 = 4,
    mmeReportIntervalMDT_ms2048 = 5,
    mmeReportIntervalMDT_ms5120 = 6,
    mmeReportIntervalMDT_ms10240 = 7,
    mmeReportIntervalMDT_min1 = 8,
    mmemin6 = 9,
    mmemin12 = 10,
    mmemin30 = 11,
    mmemin60 = 12
} mmeReportIntervalMDT;

typedef enum mmeReportAmountMDT {
    mmer1 = 0,
    mmer2 = 1,
    mmer4 = 2,
    mmer8 = 3,
    mmer16 = 4,
    mmer32 = 5,
    mmer64 = 6,
    mmerinfinity = 7
} mmeReportAmountMDT;

typedef struct mmeM1PeriodicReporting {
    unsigned char   bit_mask;
#       define      mmeM1PeriodicReporting_iE_Extensions_present 0x80
    mmeReportIntervalMDT reportInterval;
    mmeReportAmountMDT reportAmount;
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                              * mmeM1PeriodicReporting_iE_Extensions_present if
                              * present */
} mmeM1PeriodicReporting;

enum mmeImmediateMDT_ExtIEs_Extension_PDUs {
    mmePDU_ImmediateMDT_ExtIEs_Extension_UNKNOWN = 0,

    mmePDU_ImmediateMDT_ExtIEs_Extension_M3Configuration = mmeM3Configuration_PDU,
    mmePDU_ImmediateMDT_ExtIEs_Extension_M4Configuration = mmeM4Configuration_PDU,
    mmePDU_ImmediateMDT_ExtIEs_Extension_M5Configuration = mmeM5Configuration_PDU,
    mmePDU_ImmediateMDT_ExtIEs_Extension_MDT_Location_Info = mmeMDT_Location_Info_PDU,

    mmePDU_ImmediateMDT_ExtIEs_Extension_MAX = INT_MAX
};

union mmeImmediateMDT_ExtIEs_Extension_union {
    struct mmeM3Configuration *pdu_M3Configuration;  
                     /* mmePDU_ImmediateMDT_ExtIEs_Extension_M3Configuration */
    struct mmeM4Configuration *pdu_M4Configuration;  
                     /* mmePDU_ImmediateMDT_ExtIEs_Extension_M4Configuration */
    struct mmeM5Configuration *pdu_M5Configuration;  
                     /* mmePDU_ImmediateMDT_ExtIEs_Extension_M5Configuration */
    struct mmeMDT_Location_Info *pdu_MDT_Location_Info;  
                   /* mmePDU_ImmediateMDT_ExtIEs_Extension_MDT_Location_Info */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeImmediateMDT_ExtIEs_Extension {
    mmeImmediateMDT_ExtIEs_Extension_PDUs pduNum;
    OssBuf          encoded;
    mmeImmediateMDT_ExtIEs_Extension_union decoded;
} mmeImmediateMDT_ExtIEs_Extension;

typedef struct mmeImmediateMDT {
    unsigned char   bit_mask;
#       define      mmem1thresholdeventA2_present 0x80
#       define      mmem1periodicReporting_present 0x40
#       define      mmeImmediateMDT_iE_Extensions_present 0x20
    mmeMeasurementsToActivate measurementsToActivate;
    mmeM1ReportingTrigger m1reportingTrigger;
    mmeM1ThresholdEventA2 m1thresholdeventA2;  /* optional; set in bit_mask
                                                * mmem1thresholdeventA2_present
                                                * if present */
// Included in case of event-triggered, or event-triggered periodic reporting for measurement M1
    mmeM1PeriodicReporting m1periodicReporting;  /* optional; set in bit_mask
                                            * mmem1periodicReporting_present if
                                            * present */
// Included in case of periodic or event-triggered periodic reporting
    struct mme_seqof133 {
        struct mme_seqof133 *next;
        struct mme_seq153 {
            mmeProtocolExtensionID id;
            mmeCriticality  criticality;
            mmeImmediateMDT_ExtIEs_Extension extensionValue;
        } value;
    } *iE_Extensions;  /* optional; set in bit_mask
                        * mmeImmediateMDT_iE_Extensions_present if present */
} mmeImmediateMDT;

typedef struct mmeIMSI {
    unsigned short  length;
    unsigned char   value[8];
} mmeIMSI;

typedef struct mmeIntegrityProtectionAlgorithms {
    unsigned short  length;  /* number of significant bits */
    unsigned char   *value;
} mmeIntegrityProtectionAlgorithms;

typedef struct mmeInterfacesToTrace {
    unsigned short  length;  /* number of significant bits */
    unsigned char   *value;
} mmeInterfacesToTrace;

// This is a dummy IE used only as a reference to the actual definition in relevant specification.
typedef struct mmeLPPa_PDU {
    unsigned int    length;
    unsigned char   *value;
} mmeLPPa_PDU;

typedef struct mmeLHN_ID {
    unsigned short  length;
    unsigned char   value[256];
} mmeLHN_ID;

typedef enum mmeLinks_to_log {
    mmeuplink = 0,
    mmedownlink = 1,
    mmeboth_uplink_and_downlink = 2
} mmeLinks_to_log;

typedef enum mme_enum1 {
    mmepattern_period_ms1280 = 0,
    mmepattern_period_ms2560 = 1,
    mmepattern_period_ms5120 = 2,
    mmepattern_period_ms10240 = 3
} mme_enum1;

typedef struct mmeListeningSubframePattern {
    unsigned char   bit_mask;
#       define      mmeListeningSubframePattern_iE_Extensions_present 0x80
    mme_enum1       pattern_period;
    long            pattern_offset;
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                         * mmeListeningSubframePattern_iE_Extensions_present if
                         * present */
} mmeListeningSubframePattern;

typedef enum mmeLoggingInterval {
    mmems128 = 0,
    mmems256 = 1,
    mmems512 = 2,
    mmeLoggingInterval_ms1024 = 3,
    mmeLoggingInterval_ms2048 = 4,
    mmems3072 = 5,
    mmems4096 = 6,
    mmems6144 = 7
} mmeLoggingInterval;

typedef enum mmeLoggingDuration {
    mmem10 = 0,
    mmem20 = 1,
    mmem40 = 2,
    mmem60 = 3,
    mmem90 = 4,
    mmem120 = 5
} mmeLoggingDuration;

typedef struct mmeLoggedMDT {
    unsigned char   bit_mask;
#       define      mmeLoggedMDT_iE_Extensions_present 0x80
    mmeLoggingInterval loggingInterval;
    mmeLoggingDuration loggingDuration;
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                                         * mmeLoggedMDT_iE_Extensions_present if
                                         * present */
} mmeLoggedMDT;

typedef struct mmeLoggedMBSFNMDT {
    unsigned char   bit_mask;
#       define      mmemBSFN_ResultToLog_present 0x80
#       define      mmeLoggedMBSFNMDT_iE_Extensions_present 0x40
    mmeLoggingInterval loggingInterval;
    mmeLoggingDuration loggingDuration;
    struct mmeMBSFN_ResultToLog_ *mBSFN_ResultToLog;  /* optional; set in
                                   * bit_mask mmemBSFN_ResultToLog_present if
                                   * present */
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                                   * mmeLoggedMBSFNMDT_iE_Extensions_present if
                                   * present */
} mmeLoggedMBSFNMDT;

typedef enum mmeM3period {
    mmems100 = 0,
    mmems1000 = 1,
    mmems10000 = 2
} mmeM3period;

// M
typedef struct mmeM3Configuration {
    unsigned char   bit_mask;
#       define      mmeM3Configuration_iE_Extensions_present 0x80
    mmeM3period     m3period;
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                                  * mmeM3Configuration_iE_Extensions_present if
                                  * present */
} mmeM3Configuration;

typedef enum mmeM4period {
    mmeM4period_ms1024 = 0,
    mmeM4period_ms2048 = 1,
    mmeM4period_ms5120 = 2,
    mmeM4period_ms10240 = 3,
    mmeM4period_min1 = 4
} mmeM4period;

typedef struct mmeM4Configuration {
    unsigned char   bit_mask;
#       define      mmeM4Configuration_iE_Extensions_present 0x80
    mmeM4period     m4period;
    mmeLinks_to_log m4_links_to_log;
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                                  * mmeM4Configuration_iE_Extensions_present if
                                  * present */
} mmeM4Configuration;

typedef enum mmeM5period {
    mmeM5period_ms1024 = 0,
    mmeM5period_ms2048 = 1,
    mmeM5period_ms5120 = 2,
    mmeM5period_ms10240 = 3,
    mmeM5period_min1 = 4
} mmeM5period;

typedef struct mmeM5Configuration {
    unsigned char   bit_mask;
#       define      mmeM5Configuration_iE_Extensions_present 0x80
    mmeM5period     m5period;
    mmeLinks_to_log m5_links_to_log;
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                                  * mmeM5Configuration_iE_Extensions_present if
                                  * present */
} mmeM5Configuration;

typedef enum mmeMDT_Activation {
    mmeimmediate_MDT_only = 0,
    mmeimmediate_MDT_and_Trace = 1,
    mmelogged_MDT_only = 2,
    mmelogged_MBSFN_MDT = 3
} mmeMDT_Activation;

typedef struct mmeMDT_Location_Info {
    unsigned short  length;  /* number of significant bits */
    unsigned char   *value;
} mmeMDT_Location_Info;

enum mmeMDTMode_ExtensionIE_Value_PDUs {
    mmePDU_MDTMode_ExtensionIE_Value_UNKNOWN = 0,

    mmePDU_MDTMode_ExtensionIE_Value_LoggedMBSFNMDT = mmeLoggedMBSFNMDT_PDU
};

union mmeMDTMode_ExtensionIE_Value_union {
    mmeLoggedMBSFNMDT *pdu_LoggedMBSFNMDT;  
                          /* mmePDU_MDTMode_ExtensionIE_Value_LoggedMBSFNMDT */
};

typedef struct mmeMDTMode_ExtensionIE_Value {
    mmeMDTMode_ExtensionIE_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeMDTMode_ExtensionIE_Value_union decoded;
} mmeMDTMode_ExtensionIE_Value;

typedef struct mmeMDTMode_Extension {
    mmeProtocolIE_ID id;
    mmeCriticality  criticality;
    mmeMDTMode_ExtensionIE_Value value;
} mmeMDTMode_Extension;

typedef struct mmeMDTMode {
    unsigned short  choice;
#       define      mmeimmediateMDT_chosen 1
#       define      mmeloggedMDT_chosen 2
#       define      mmemDTMode_Extension_chosen 3
    union _union {
        mmeImmediateMDT immediateMDT;  /* to choose, set choice to
                                        * mmeimmediateMDT_chosen */
        mmeLoggedMDT    loggedMDT;  /* to choose, set choice to
                                     * mmeloggedMDT_chosen */
        mmeMDTMode_Extension mDTMode_Extension;  /* extension #1; to choose, set
                                     * choice to mmemDTMode_Extension_chosen */
    } u;
} mmeMDTMode;

enum mmeMDT_Configuration_ExtIEs_Extension_PDUs {
    mmePDU_MDT_Configuration_ExtIEs_Extension_UNKNOWN = 0,

    mmePDU_MDT_Configuration_ExtIEs_Extension_MDTPLMNList = mmeMDTPLMNList_PDU,

    mmePDU_MDT_Configuration_ExtIEs_Extension_MAX = INT_MAX
};

union mmeMDT_Configuration_ExtIEs_Extension_union {
    struct mmeMDTPLMNList_ **pdu_MDTPLMNList;  
                    /* mmePDU_MDT_Configuration_ExtIEs_Extension_MDTPLMNList */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeMDT_Configuration_ExtIEs_Extension {
    mmeMDT_Configuration_ExtIEs_Extension_PDUs pduNum;
    OssBuf          encoded;
    mmeMDT_Configuration_ExtIEs_Extension_union decoded;
} mmeMDT_Configuration_ExtIEs_Extension;

typedef struct mmeMDT_Configuration {
    unsigned char   bit_mask;
#       define      mmeMDT_Configuration_iE_Extensions_present 0x80
    mmeMDT_Activation mdt_Activation;
    mmeAreaScopeOfMDT areaScopeOfMDT;
    mmeMDTMode      mDTMode;
    struct mme_seqof140 {
        struct mme_seqof140 *next;
        struct mme_seq160 {
            mmeProtocolExtensionID id;
            mmeCriticality  criticality;
            mmeMDT_Configuration_ExtIEs_Extension extensionValue;
        } value;
    } *iE_Extensions;  /* optional; set in bit_mask
                        * mmeMDT_Configuration_iE_Extensions_present if
                        * present */
} mmeMDT_Configuration;

typedef struct mmeMBSFN_ResultToLogInfo {
    unsigned char   bit_mask;
#       define      mmemBSFN_AreaId_present 0x80
#       define      mmeMBSFN_ResultToLogInfo_iE_Extensions_present 0x40
    unsigned short  mBSFN_AreaId;  /* optional; set in bit_mask
                                    * mmemBSFN_AreaId_present if present */
    mmeEARFCN       carrierFreq;
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                            * mmeMBSFN_ResultToLogInfo_iE_Extensions_present if
                            * present */
} mmeMBSFN_ResultToLogInfo;

typedef struct mmeMBSFN_ResultToLog_ {
    struct mmeMBSFN_ResultToLog_ *next;
    mmeMBSFN_ResultToLogInfo value;
} *mmeMBSFN_ResultToLog;

typedef struct mmeMDTPLMNList_ {
    struct mmeMDTPLMNList_ *next;
    mmePLMNidentity value;
} *mmeMDTPLMNList;

typedef struct mmeMessageIdentifier {
    unsigned short  length;  /* number of significant bits */
    unsigned char   *value;
} mmeMessageIdentifier;

typedef struct mmeMMEname {
    unsigned short  length;
    char            *value;
} mmeMMEname;

typedef struct mmeM_TMSI {
    unsigned short  length;
    unsigned char   value[4];
} mmeM_TMSI;

typedef struct mmeMSClassmark2 {
    unsigned int    length;
    unsigned char   *value;
} mmeMSClassmark2;

typedef struct mmeMSClassmark3 {
    unsigned int    length;
    unsigned char   *value;
} mmeMSClassmark3;

typedef enum mme_enum2 {
    mmems0 = 0,
    mmemuting_pattern_period_ms1280 = 1,
    mmemuting_pattern_period_ms2560 = 2,
    mmemuting_pattern_period_ms5120 = 3,
    mmemuting_pattern_period_ms10240 = 4
} mme_enum2;

typedef struct mmeMutingPatternInformation {
    unsigned char   bit_mask;
#       define      mmemuting_pattern_offset_present 0x80
#       define      mmeMutingPatternInformation_iE_Extensions_present 0x40
    mme_enum2       muting_pattern_period;
    long            muting_pattern_offset;  /* optional; set in bit_mask
                                             * mmemuting_pattern_offset_present
                                             * if present */
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                         * mmeMutingPatternInformation_iE_Extensions_present if
                         * present */
} mmeMutingPatternInformation;

typedef struct mmeNASSecurityParametersfromE_UTRAN {
    unsigned int    length;
    unsigned char   *value;
} mmeNASSecurityParametersfromE_UTRAN;

typedef struct mmeNASSecurityParameterstoE_UTRAN {
    unsigned int    length;
    unsigned char   *value;
} mmeNASSecurityParameterstoE_UTRAN;

// This is a dummy IE used only as a reference to the actual definition in relevant specification.
typedef enum mmeOverloadAction {
    mmereject_non_emergency_mo_dt = 0,
    mmereject_rrc_cr_signalling = 1,
    mmepermit_emergency_sessions_and_mobile_terminated_services_only = 2,
    mmepermit_high_priority_sessions_and_mobile_terminated_services_only = 3,
    mmereject_delay_tolerant_access = 4
} mmeOverloadAction;

typedef struct mmeOverloadResponse {
    unsigned short  choice;
#       define      mmeoverloadAction_chosen 1
    union _union {
        mmeOverloadAction overloadAction;  /* to choose, set choice to
                                            * mmeoverloadAction_chosen */
    } u;
} mmeOverloadResponse;

typedef struct mmePort_Number {
    unsigned short  length;
    unsigned char   value[2];
} mmePort_Number;

typedef enum mmeProSeDirectDiscovery {
    mmeProSeDirectDiscovery_authorized = 0,
    mmeProSeDirectDiscovery_not_authorized = 1
} mmeProSeDirectDiscovery;

typedef enum mmeProSeDirectCommunication {
    mmeProSeDirectCommunication_authorized = 0,
    mmeProSeDirectCommunication_not_authorized = 1
} mmeProSeDirectCommunication;

typedef struct mmeProSeAuthorized {
    unsigned char   bit_mask;
#       define      mmeproSeDirectDiscovery_present 0x80
#       define      mmeproSeDirectCommunication_present 0x40
#       define      mmeProSeAuthorized_iE_Extensions_present 0x20
    mmeProSeDirectDiscovery proSeDirectDiscovery;  /* optional; set in bit_mask
                                           * mmeproSeDirectDiscovery_present if
                                           * present */
    mmeProSeDirectCommunication proSeDirectCommunication;  /* optional; set in
                                   * bit_mask
                                   * mmeproSeDirectCommunication_present if
                                   * present */
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                                  * mmeProSeAuthorized_iE_Extensions_present if
                                  * present */
} mmeProSeAuthorized;

typedef struct mmeReceiveStatusOfULPDCPSDUsExtended {
    unsigned short  length;  /* number of significant bits */
    unsigned char   *value;
} mmeReceiveStatusOfULPDCPSDUsExtended;

typedef enum mmeReportArea {
    mmeecgi = 0
} mmeReportArea;

typedef struct mmeRequestType {
    unsigned char   bit_mask;
#       define      mmeRequestType_iE_Extensions_present 0x80
    mmeEventType    eventType;
    mmeReportArea   reportArea;
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                                         * mmeRequestType_iE_Extensions_present
                                         * if present */
} mmeRequestType;

typedef struct mmeUE_RLF_Report_Container {
    unsigned int    length;
    unsigned char   *value;
} mmeUE_RLF_Report_Container;

// This IE is a transparent container and shall be encoded as the rlf-Report-r9 field contained in the UEInformationResponse message as defined in TS 36.331 [16]
typedef struct mmeUE_RLF_Report_Container_for_extended_bands {
    unsigned int    length;
    unsigned char   *value;
} mmeUE_RLF_Report_Container_for_extended_bands;

typedef struct mmeRLFReportInformation {
    unsigned char   bit_mask;
#       define      mmeuE_RLF_Report_Container_for_extended_bands_present 0x80
#       define      mmeRLFReportInformation_iE_Extensions_present 0x40
    mmeUE_RLF_Report_Container uE_RLF_Report_Container;
    mmeUE_RLF_Report_Container_for_extended_bands uE_RLF_Report_Container_for_extended_bands;                           /* optional; set in bit_mask
                     * mmeuE_RLF_Report_Container_for_extended_bands_present if
                     * present */
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                             * mmeRLFReportInformation_iE_Extensions_present if
                             * present */
} mmeRLFReportInformation;

typedef struct mmeECGIListForRestart_ {
    struct mmeECGIListForRestart_ *next;
    mmeEUTRAN_CGI   value;
} *mmeECGIListForRestart;

// S
typedef struct mmeSecurityKey {
    unsigned short  length;  /* number of significant bits */
    unsigned char   *value;
} mmeSecurityKey;

typedef struct mmeSecurityContext {
    unsigned char   bit_mask;
#       define      mmeSecurityContext_iE_Extensions_present 0x80
    unsigned short  nextHopChainingCount;
    mmeSecurityKey  nextHopParameter;
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                                  * mmeSecurityContext_iE_Extensions_present if
                                  * present */
} mmeSecurityContext;

typedef struct mmeSerialNumber {
    unsigned short  length;  /* number of significant bits */
    unsigned char   *value;
} mmeSerialNumber;

typedef enum mmeSONInformationRequest {
    mmex2TNL_Configuration_Info = 0,
    mmetime_Synchronisation_Info = 1,
    mmeactivate_Muting = 2,
    mmedeactivate_Muting = 3
} mmeSONInformationRequest;

enum mmeX2TNLConfigurationInfo_ExtIEs_Extension_PDUs {
    mmePDU_X2TNLConfigurationInfo_ExtIEs_Extension_UNKNOWN = 0,

    mmePDU_X2TNLConfigurationInfo_ExtIEs_Extension_ENBX2ExtTLAs = mmeENBX2ExtTLAs_PDU,
    mmePDU_X2TNLConfigurationInfo_ExtIEs_Extension_ENBIndirectX2TransportLayerAddresses = mmeENBIndirectX2TransportLayerAddresses_PDU,

    mmePDU_X2TNLConfigurationInfo_ExtIEs_Extension_MAX = INT_MAX
};

union mmeX2TNLConfigurationInfo_ExtIEs_Extension_union {
    struct mmeENBX2ExtTLAs_ **pdu_ENBX2ExtTLAs;  
              /* mmePDU_X2TNLConfigurationInfo_ExtIEs_Extension_ENBX2ExtTLAs */
    struct mmeENBIndirectX2TransportLayerAddresses_ **pdu_ENBIndirectX2TransportLayerAddresses;                         /* mmePDU_X2TNLConfigurationInfo_ExtIEs_Extension_ENBIndirectX2TransportLayerAddresses */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeX2TNLConfigurationInfo_ExtIEs_Extension {
    mmeX2TNLConfigurationInfo_ExtIEs_Extension_PDUs pduNum;
    OssBuf          encoded;
    mmeX2TNLConfigurationInfo_ExtIEs_Extension_union decoded;
} mmeX2TNLConfigurationInfo_ExtIEs_Extension;

// X
typedef struct mmeX2TNLConfigurationInfo {
    unsigned char   bit_mask;
#       define      mmeX2TNLConfigurationInfo_iE_Extensions_present 0x80
    struct mmeENBX2TLAs_ *eNBX2TransportLayerAddresses;
    struct mme_seqof147 {
        struct mme_seqof147 *next;
        struct mme_seq167 {
            mmeProtocolExtensionID id;
            mmeCriticality  criticality;
            mmeX2TNLConfigurationInfo_ExtIEs_Extension extensionValue;
        } value;
    } *iE_Extensions;  /* optional; set in bit_mask
                        * mmeX2TNLConfigurationInfo_iE_Extensions_present if
                        * present */
} mmeX2TNLConfigurationInfo;

enum mmeSONInformationReply_ExtIEs_Extension_PDUs {
    mmePDU_SONInformationReply_ExtIEs_Extension_UNKNOWN = 0,

    mmePDU_SONInformationReply_ExtIEs_Extension_TimeSynchronisationInfo = mmeTimeSynchronisationInfo_PDU,

    mmePDU_SONInformationReply_ExtIEs_Extension_MAX = INT_MAX
};

union mmeSONInformationReply_ExtIEs_Extension_union {
    struct mmeTimeSynchronisationInfo *pdu_TimeSynchronisationInfo;  
      /* mmePDU_SONInformationReply_ExtIEs_Extension_TimeSynchronisationInfo */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeSONInformationReply_ExtIEs_Extension {
    mmeSONInformationReply_ExtIEs_Extension_PDUs pduNum;
    OssBuf          encoded;
    mmeSONInformationReply_ExtIEs_Extension_union decoded;
} mmeSONInformationReply_ExtIEs_Extension;

typedef struct mmeSONInformationReply {
    unsigned char   bit_mask;
#       define      mmex2TNLConfigurationInfo_present 0x80
#       define      mmeSONInformationReply_iE_Extensions_present 0x40
    mmeX2TNLConfigurationInfo x2TNLConfigurationInfo;  /* optional; set in
                                   * bit_mask mmex2TNLConfigurationInfo_present
                                   * if present */
    struct mme_seqof148 {
        struct mme_seqof148 *next;
        struct mme_seq168 {
            mmeProtocolExtensionID id;
            mmeCriticality  criticality;
            mmeSONInformationReply_ExtIEs_Extension extensionValue;
        } value;
    } *iE_Extensions;  /* optional; set in bit_mask
                        * mmeSONInformationReply_iE_Extensions_present if
                        * present */
} mmeSONInformationReply;

enum mmeSONInformation_ExtensionIE_Value_PDUs {
    mmePDU_SONInformation_ExtensionIE_Value_UNKNOWN = 0,

    mmePDU_SONInformation_ExtensionIE_Value_SONInformationReport = mmeSONInformationReport_PDU
};

union mmeSONInformation_ExtensionIE_Value_union {
    struct mmeSONInformationReport *pdu_SONInformationReport;  
             /* mmePDU_SONInformation_ExtensionIE_Value_SONInformationReport */
};

typedef struct mmeSONInformation_ExtensionIE_Value {
    mmeSONInformation_ExtensionIE_Value_PDUs pduNum;
    OssBuf          encoded;
    mmeSONInformation_ExtensionIE_Value_union decoded;
} mmeSONInformation_ExtensionIE_Value;

typedef struct mmeSONInformation_Extension {
    mmeProtocolIE_ID id;
    mmeCriticality  criticality;
    mmeSONInformation_ExtensionIE_Value value;
} mmeSONInformation_Extension;

typedef struct mmeSONInformation {
    unsigned short  choice;
#       define      mmesONInformationRequest_chosen 1
#       define      mmesONInformationReply_chosen 2
#       define      mmesONInformation_Extension_chosen 3
    union _union {
        mmeSONInformationRequest sONInformationRequest;  /* to choose, set
                                   * choice to
                                   * mmesONInformationRequest_chosen */
        mmeSONInformationReply sONInformationReply;  /* to choose, set choice to
                                             * mmesONInformationReply_chosen */
        mmeSONInformation_Extension sONInformation_Extension;  /* extension #1;
                                   * to choose, set choice to
                                   * mmesONInformation_Extension_chosen */
    } u;
} mmeSONInformation;

typedef struct mmeSONInformationReport {
    unsigned short  choice;
#       define      mmerLFReportInformation_chosen 1
    union _union {
        mmeRLFReportInformation rLFReportInformation;  /* to choose, set choice
                                         * to mmerLFReportInformation_chosen */
    } u;
} mmeSONInformationReport;

typedef struct mmeTargeteNB_ID {
    unsigned char   bit_mask;
#       define      mmeTargeteNB_ID_iE_Extensions_present 0x80
    mmeGlobal_ENB_ID global_ENB_ID;
    mmeTAI          selected_TAI;
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                                         * mmeTargeteNB_ID_iE_Extensions_present
                                         * if present */
} mmeTargeteNB_ID;

// This is a dummy IE used only as a reference to the actual definition in relevant specification.
typedef struct mmeSourceeNB_ID {
    unsigned char   bit_mask;
#       define      mmeSourceeNB_ID_iE_Extensions_present 0x80
    mmeGlobal_ENB_ID global_ENB_ID;
    mmeTAI          selected_TAI;
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                                         * mmeSourceeNB_ID_iE_Extensions_present
                                         * if present */
} mmeSourceeNB_ID;

enum mmeSONConfigurationTransfer_ExtIEs_Extension_PDUs {
    mmePDU_SONConfigurationTransfer_ExtIEs_Extension_UNKNOWN = 0,

    mmePDU_SONConfigurationTransfer_ExtIEs_Extension_X2TNLConfigurationInfo = mmeX2TNLConfigurationInfo_PDU,
    mmePDU_SONConfigurationTransfer_ExtIEs_Extension_SynchronisationInformation = mmeSynchronisationInformation_PDU,

    mmePDU_SONConfigurationTransfer_ExtIEs_Extension_MAX = INT_MAX
};

union mmeSONConfigurationTransfer_ExtIEs_Extension_union {
    mmeX2TNLConfigurationInfo *pdu_X2TNLConfigurationInfo;  
  /* mmePDU_SONConfigurationTransfer_ExtIEs_Extension_X2TNLConfigurationInfo */
    struct mmeSynchronisationInformation *pdu_SynchronisationInformation;  
                                        /* mmePDU_SONConfigurationTransfer_ExtIEs_Extension_SynchronisationInformation */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeSONConfigurationTransfer_ExtIEs_Extension {
    mmeSONConfigurationTransfer_ExtIEs_Extension_PDUs pduNum;
    OssBuf          encoded;
    mmeSONConfigurationTransfer_ExtIEs_Extension_union decoded;
} mmeSONConfigurationTransfer_ExtIEs_Extension;

typedef struct mmeSONConfigurationTransfer {
    unsigned char   bit_mask;
#       define      mmeSONConfigurationTransfer_iE_Extensions_present 0x80
    mmeTargeteNB_ID targeteNB_ID;
    mmeSourceeNB_ID sourceeNB_ID;
    mmeSONInformation sONInformation;
    struct mme_seqof151 {
        struct mme_seqof151 *next;
        struct mme_seq171 {
            mmeProtocolExtensionID id;
            mmeCriticality  criticality;
            mmeSONConfigurationTransfer_ExtIEs_Extension extensionValue;
        } value;
    } *iE_Extensions;  /* optional; set in bit_mask
                        * mmeSONConfigurationTransfer_iE_Extensions_present if
                        * present */
} mmeSONConfigurationTransfer;

typedef long            mmeStratumLevel;

typedef struct mmeSynchronisationInformation {
    unsigned char   bit_mask;
#       define      mmesourceStratumLevel_present 0x80
#       define      mmelisteningSubframePattern_present 0x40
#       define      mmeaggressoreCGI_List_present 0x20
#       define      mmeSynchronisationInformation_iE_Extensions_present 0x10
    mmeStratumLevel sourceStratumLevel;  /* optional; set in bit_mask
                                          * mmesourceStratumLevel_present if
                                          * present */
    mmeListeningSubframePattern listeningSubframePattern;  /* optional; set in
                                   * bit_mask
                                   * mmelisteningSubframePattern_present if
                                   * present */
    struct mmeECGI_List_ *aggressoreCGI_List;  /* optional; set in bit_mask
                                                * mmeaggressoreCGI_List_present
                                                * if present */
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                       * mmeSynchronisationInformation_iE_Extensions_present if
                       * present */
} mmeSynchronisationInformation;

typedef struct mmeSource_ToTarget_TransparentContainer {
    unsigned int    length;
    unsigned char   *value;
} mmeSource_ToTarget_TransparentContainer;

typedef struct mmeServedGUMMEIsItem {
    unsigned char   bit_mask;
#       define      mmeServedGUMMEIsItem_iE_Extensions_present 0x80
    struct mmeServedPLMNs_ *servedPLMNs;
    struct mmeServedGroupIDs_ *servedGroupIDs;
    struct mmeServedMMECs_ *servedMMECs;
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                                * mmeServedGUMMEIsItem_iE_Extensions_present if
                                * present */
} mmeServedGUMMEIsItem;

// This is a dummy IE used only as a reference to the actual definition in relevant specification.
typedef struct mmeServedGUMMEIs_ {
    struct mmeServedGUMMEIs_ *next;
    mmeServedGUMMEIsItem value;
} *mmeServedGUMMEIs;

typedef struct mmeServedGroupIDs_ {
    struct mmeServedGroupIDs_ *next;
    mmeMME_Group_ID value;
} *mmeServedGroupIDs;

typedef struct mmeServedMMECs_ {
    struct mmeServedMMECs_ *next;
    mmeMME_Code     value;
} *mmeServedMMECs;

typedef struct mmeServedPLMNs_ {
    struct mmeServedPLMNs_ *next;
    mmePLMNidentity value;
} *mmeServedPLMNs;

typedef struct mmeSupportedTAs_Item {
    unsigned char   bit_mask;
#       define      mmeSupportedTAs_Item_iE_Extensions_present 0x80
    mmeTAC          tAC;
    struct mmeBPLMNs_ *broadcastPLMNs;
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                                * mmeSupportedTAs_Item_iE_Extensions_present if
                                * present */
} mmeSupportedTAs_Item;

typedef struct mmeSupportedTAs_ {
    struct mmeSupportedTAs_ *next;
    mmeSupportedTAs_Item value;
} *mmeSupportedTAs;

typedef enum mmeSynchronisationStatus {
    mmesynchronous = 0,
    mmeasynchronous = 1
} mmeSynchronisationStatus;

enum mmeTimeSynchronisationInfo_ExtIEs_Extension_PDUs {
    mmePDU_TimeSynchronisationInfo_ExtIEs_Extension_UNKNOWN = 0,

    mmePDU_TimeSynchronisationInfo_ExtIEs_Extension_MutingAvailabilityIndication = mmeMutingAvailabilityIndication_PDU,

    mmePDU_TimeSynchronisationInfo_ExtIEs_Extension_MAX = INT_MAX
};

union mmeTimeSynchronisationInfo_ExtIEs_Extension_union {
    mmeMutingAvailabilityIndication *pdu_MutingAvailabilityIndication;  
   /* mmePDU_TimeSynchronisationInfo_ExtIEs_Extension_MutingAvailabilityIndication */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeTimeSynchronisationInfo_ExtIEs_Extension {
    mmeTimeSynchronisationInfo_ExtIEs_Extension_PDUs pduNum;
    OssBuf          encoded;
    mmeTimeSynchronisationInfo_ExtIEs_Extension_union decoded;
} mmeTimeSynchronisationInfo_ExtIEs_Extension;

typedef struct mmeTimeSynchronisationInfo {
    unsigned char   bit_mask;
#       define      mmeTimeSynchronisationInfo_iE_Extensions_present 0x80
    mmeStratumLevel stratumLevel;
    mmeSynchronisationStatus synchronisationStatus;
    struct mme_seqof155 {
        struct mme_seqof155 *next;
        struct mme_seq175 {
            mmeProtocolExtensionID id;
            mmeCriticality  criticality;
            mmeTimeSynchronisationInfo_ExtIEs_Extension extensionValue;
        } value;
    } *iE_Extensions;  /* optional; set in bit_mask
                        * mmeTimeSynchronisationInfo_iE_Extensions_present if
                        * present */
} mmeTimeSynchronisationInfo;

typedef struct mmeS_TMSI {
    unsigned char   bit_mask;
#       define      mmeS_TMSI_iE_Extensions_present 0x80
    mmeMME_Code     mMEC;
    mmeM_TMSI       m_TMSI;
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                                         * mmeS_TMSI_iE_Extensions_present if
                                         * present */
} mmeS_TMSI;

typedef struct mmeTAIListforMDT_ {
    struct mmeTAIListforMDT_ *next;
    mmeTAI          value;
} *mmeTAIListforMDT;

typedef struct mmeTAIListforWarning_ {
    struct mmeTAIListforWarning_ *next;
    mmeTAI          value;
} *mmeTAIListforWarning;

typedef struct mmeTAI_Broadcast_Item {
    unsigned char   bit_mask;
#       define      mmeTAI_Broadcast_Item_iE_Extensions_present 0x80
    mmeTAI          tAI;
    struct mmeCompletedCellinTAI_ *completedCellinTAI;
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                               * mmeTAI_Broadcast_Item_iE_Extensions_present if
                               * present */
} mmeTAI_Broadcast_Item;

typedef struct mmeTAI_Broadcast_ {
    struct mmeTAI_Broadcast_ *next;
    mmeTAI_Broadcast_Item value;
} *mmeTAI_Broadcast;

typedef struct mmeTAI_Cancelled_Item {
    unsigned char   bit_mask;
#       define      mmeTAI_Cancelled_Item_iE_Extensions_present 0x80
    mmeTAI          tAI;
    struct mmeCancelledCellinTAI_ *cancelledCellinTAI;
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                               * mmeTAI_Cancelled_Item_iE_Extensions_present if
                               * present */
} mmeTAI_Cancelled_Item;

typedef struct mmeTAI_Cancelled_ {
    struct mmeTAI_Cancelled_ *next;
    mmeTAI_Cancelled_Item value;
} *mmeTAI_Cancelled;

typedef struct mmeTAListforMDT_ {
    struct mmeTAListforMDT_ *next;
    mmeTAC          value;
} *mmeTAListforMDT;

typedef struct mmeCompletedCellinTAI_Item {
    unsigned char   bit_mask;
#       define      mmeCompletedCellinTAI_Item_iE_Extensions_present 0x80
    mmeEUTRAN_CGI   eCGI;
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                          * mmeCompletedCellinTAI_Item_iE_Extensions_present if
                          * present */
} mmeCompletedCellinTAI_Item;

typedef struct mmeCompletedCellinTAI_ {
    struct mmeCompletedCellinTAI_ *next;
    mmeCompletedCellinTAI_Item value;
} *mmeCompletedCellinTAI;

typedef struct mmeTargetID {
    unsigned short  choice;
#       define      mmetargeteNB_ID_chosen 1
#       define      mmeTargetID_targetRNC_ID_chosen 2
#       define      mmecGI_chosen 3
    union _union {
        mmeTargeteNB_ID targeteNB_ID;  /* to choose, set choice to
                                        * mmetargeteNB_ID_chosen */
        mmeTargetRNC_ID targetRNC_ID;  /* to choose, set choice to
                                        * mmeTargetID_targetRNC_ID_chosen */
        mmeCGI          cGI;  /* to choose, set choice to mmecGI_chosen */
    } u;
} mmeTargetID;

typedef struct mmeTarget_ToSource_TransparentContainer {
    unsigned int    length;
    unsigned char   *value;
} mmeTarget_ToSource_TransparentContainer;

typedef struct mmeTransportInformation {
    mmeTransportLayerAddress transportLayerAddress;
    mmeGTP_TEID     uL_GTP_TEID;
} mmeTransportInformation;

typedef struct mmeE_UTRAN_Trace_ID {
    unsigned short  length;
    unsigned char   value[8];
} mmeE_UTRAN_Trace_ID;

typedef enum mmeTraceDepth {
    mmeminimum = 0,
    mmemedium = 1,
    mmemaximum = 2,
    mmeminimumWithoutVendorSpecificExtension = 3,
    mmemediumWithoutVendorSpecificExtension = 4,
    mmemaximumWithoutVendorSpecificExtension = 5
} mmeTraceDepth;

enum mmeTraceActivation_ExtIEs_Extension_PDUs {
    mmePDU_TraceActivation_ExtIEs_Extension_UNKNOWN = 0,

    mmePDU_TraceActivation_ExtIEs_Extension_MDT_Configuration = mmeMDT_Configuration_PDU,

    mmePDU_TraceActivation_ExtIEs_Extension_MAX = INT_MAX
};

union mmeTraceActivation_ExtIEs_Extension_union {
    mmeMDT_Configuration *pdu_MDT_Configuration;  
                /* mmePDU_TraceActivation_ExtIEs_Extension_MDT_Configuration */

    mmeAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct mmeTraceActivation_ExtIEs_Extension {
    mmeTraceActivation_ExtIEs_Extension_PDUs pduNum;
    OssBuf          encoded;
    mmeTraceActivation_ExtIEs_Extension_union decoded;
} mmeTraceActivation_ExtIEs_Extension;

typedef struct mmeTraceActivation {
    unsigned char   bit_mask;
#       define      mmeTraceActivation_iE_Extensions_present 0x80
    mmeE_UTRAN_Trace_ID e_UTRAN_Trace_ID;
    mmeInterfacesToTrace interfacesToTrace;
    mmeTraceDepth   traceDepth;
    mmeTransportLayerAddress traceCollectionEntityIPAddress;
    struct mme_seqof160 {
        struct mme_seqof160 *next;
        struct mme_seq180 {
            mmeProtocolExtensionID id;
            mmeCriticality  criticality;
            mmeTraceActivation_ExtIEs_Extension extensionValue;
        } value;
    } *iE_Extensions;  /* optional; set in bit_mask
                        * mmeTraceActivation_iE_Extensions_present if present */
} mmeTraceActivation;

typedef struct mmeTunnelInformation {
    unsigned char   bit_mask;
#       define      mmeuDP_Port_Number_present 0x80
#       define      mmeTunnelInformation_iE_Extensions_present 0x40
    mmeTransportLayerAddress transportLayerAddress;
    mmePort_Number  uDP_Port_Number;  /* optional; set in bit_mask
                                       * mmeuDP_Port_Number_present if
                                       * present */
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                                * mmeTunnelInformation_iE_Extensions_present if
                                * present */
} mmeTunnelInformation;

typedef struct mmeTAIListForRestart_ {
    struct mmeTAIListForRestart_ *next;
    mmeTAI          value;
} *mmeTAIListForRestart;

// U
typedef struct mmeUEAggregateMaximumBitrate {
    unsigned char   bit_mask;
#       define      mmeUEAggregateMaximumBitrate_iE_Extensions_present 0x80
    mmeBitRate      uEaggregateMaximumBitRateDL;
    mmeBitRate      uEaggregateMaximumBitRateUL;
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                        * mmeUEAggregateMaximumBitrate_iE_Extensions_present if
                        * present */
} mmeUEAggregateMaximumBitrate;

typedef struct mmeUE_S1AP_ID_pair {
    unsigned char   bit_mask;
#       define      mmeUE_S1AP_ID_pair_iE_Extensions_present 0x80
    mmeMME_UE_S1AP_ID mME_UE_S1AP_ID;
    mmeENB_UE_S1AP_ID eNB_UE_S1AP_ID;
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                                  * mmeUE_S1AP_ID_pair_iE_Extensions_present if
                                  * present */
} mmeUE_S1AP_ID_pair;

typedef struct mmeUE_S1AP_IDs {
    unsigned short  choice;
#       define      mmeuE_S1AP_ID_pair_chosen 1
#       define      mmemME_UE_S1AP_ID_chosen 2
    union _union {
        mmeUE_S1AP_ID_pair uE_S1AP_ID_pair;  /* to choose, set choice to
                                              * mmeuE_S1AP_ID_pair_chosen */
        mmeMME_UE_S1AP_ID mME_UE_S1AP_ID;  /* to choose, set choice to
                                            * mmemME_UE_S1AP_ID_chosen */
    } u;
} mmeUE_S1AP_IDs;

typedef struct mmeUE_associatedLogicalS1_ConnectionItem {
    unsigned char   bit_mask;
#       define      mmemME_UE_S1AP_ID_present 0x80
#       define      mmeeNB_UE_S1AP_ID_present 0x40
#       define      mmeUE_associatedLogicalS1_ConnectionItem_iE_Extensions_present 0x20
    mmeMME_UE_S1AP_ID mME_UE_S1AP_ID;  /* optional; set in bit_mask
                                        * mmemME_UE_S1AP_ID_present if
                                        * present */
    mmeENB_UE_S1AP_ID eNB_UE_S1AP_ID;  /* optional; set in bit_mask
                                        * mmeeNB_UE_S1AP_ID_present if
                                        * present */
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
            * mmeUE_associatedLogicalS1_ConnectionItem_iE_Extensions_present if
            * present */
} mmeUE_associatedLogicalS1_ConnectionItem;

typedef struct mmeUEIdentityIndexValue {
    unsigned short  length;  /* number of significant bits */
    unsigned char   *value;
} mmeUEIdentityIndexValue;

// This IE is a transparent container and shall be encoded as the VisitedCellInfoList field contained in the UEInformationResponse message as defined in TS 36.331 [16]
typedef struct mmeUEPagingID {
    unsigned short  choice;
#       define      mmes_TMSI_chosen 1
#       define      mmeiMSI_chosen 2
    union _union {
        mmeS_TMSI       s_TMSI;  /* to choose, set choice to mmes_TMSI_chosen */
        mmeIMSI         iMSI;  /* to choose, set choice to mmeiMSI_chosen */
    } u;
} mmeUEPagingID;

typedef struct mmeUERadioCapability {
    unsigned int    length;
    unsigned char   *value;
} mmeUERadioCapability;

typedef struct mmeUERadioCapabilityForPaging {
    unsigned int    length;
    unsigned char   *value;
} mmeUERadioCapabilityForPaging;

// This IE is a transparent container and shall be encoded as the rlf-Report-v9e0 contained in the UEInformationResponse message as defined in TS 36.331 [16]
typedef struct mmeUESecurityCapabilities {
    unsigned char   bit_mask;
#       define      mmeUESecurityCapabilities_iE_Extensions_present 0x80
    mmeEncryptionAlgorithms encryptionAlgorithms;
    mmeIntegrityProtectionAlgorithms integrityProtectionAlgorithms;
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                           * mmeUESecurityCapabilities_iE_Extensions_present if
                           * present */
} mmeUESecurityCapabilities;

typedef struct mmeUserLocationInformation {
    unsigned char   bit_mask;
#       define      mmeUserLocationInformation_iE_Extensions_present 0x80
    mmeEUTRAN_CGI   eutran_cgi;
    mmeTAI          tai;
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                          * mmeUserLocationInformation_iE_Extensions_present if
                          * present */
} mmeUserLocationInformation;

// W
typedef struct mmeWarningAreaList {
    unsigned short  choice;
#       define      mmecellIDList_chosen 1
#       define      mmetrackingAreaListforWarning_chosen 2
#       define      mmeemergencyAreaIDList_chosen 3
    union _union {
        struct mmeECGIList_ *cellIDList;  /* to choose, set choice to
                                           * mmecellIDList_chosen */
        struct mmeTAIListforWarning_ *trackingAreaListforWarning;  /* to choose,
                                   * set choice to
                                   * mmetrackingAreaListforWarning_chosen */
        struct mmeEmergencyAreaIDList_ *emergencyAreaIDList;  /* to choose, set
                                   * choice to mmeemergencyAreaIDList_chosen */
    } u;
} mmeWarningAreaList;

typedef struct mmeWarningType {
    unsigned short  length;
    unsigned char   value[2];
} mmeWarningType;

typedef struct mmeWarningSecurityInfo {
    unsigned short  length;
    unsigned char   value[50];
} mmeWarningSecurityInfo;

typedef struct mmeWarningMessageContents {
    unsigned short  length;
    unsigned char   *value;
} mmeWarningMessageContents;

typedef struct mmeENBX2ExtTLA {
    unsigned char   bit_mask;
#       define      mmeiPsecTLA_present 0x80
#       define      mmegTPTLAa_present 0x40
#       define      mmeENBX2ExtTLA_iE_Extensions_present 0x20
    mmeTransportLayerAddress iPsecTLA;  /* optional; set in bit_mask
                                         * mmeiPsecTLA_present if present */
    struct mmeENBX2GTPTLAs_ *gTPTLAa;  /* optional; set in bit_mask
                                        * mmegTPTLAa_present if present */
    struct mme_seqof3_ *iE_Extensions;  /* optional; set in bit_mask
                                         * mmeENBX2ExtTLA_iE_Extensions_present
                                         * if present */
} mmeENBX2ExtTLA;

typedef struct mmeENBX2ExtTLAs_ {
    struct mmeENBX2ExtTLAs_ *next;
    mmeENBX2ExtTLA  value;
} *mmeENBX2ExtTLAs;

typedef struct mmeENBX2GTPTLAs_ {
    struct mmeENBX2GTPTLAs_ *next;
    mmeTransportLayerAddress value;
} *mmeENBX2GTPTLAs;

typedef struct mmeENBIndirectX2TransportLayerAddresses_ {
    struct mmeENBIndirectX2TransportLayerAddresses_ *next;
    mmeTransportLayerAddress value;
} *mmeENBIndirectX2TransportLayerAddresses;
// Y
// Z

typedef enum mmePresence {
    mmeoptional = 0,
    mmeconditional = 1,
    mmemandatory = 2
} mmePresence;

// **************************************************************
//
// IE parameter types from other modules.
//
// **************************************************************
// **************************************************************
//
// Class Definition for Protocol IEs
//
// **************************************************************
typedef struct mmeS1AP_PROTOCOL_IES {
    mmeProtocolIE_ID id;
    mmeCriticality  criticality;
    unsigned short  Value;
    mmePresence     presence;
} mmeS1AP_PROTOCOL_IES;

// **************************************************************
//
// Class Definition for Protocol Extensions
//
// **************************************************************
typedef struct mmeS1AP_PROTOCOL_EXTENSION {
    mmeProtocolExtensionID id;
    mmeCriticality  criticality;
    unsigned short  Extension;
    mmePresence     presence;
} mmeS1AP_PROTOCOL_EXTENSION;

// **************************************************************
//
// Class Definition for Private IEs
//
// **************************************************************
typedef struct mmeS1AP_PRIVATE_IES {
    mmePrivateIE_ID id;
    mmeCriticality  criticality;
    unsigned short  Value;
    mmePresence     presence;
    long            _oss_unique_index;
} mmeS1AP_PRIVATE_IES;

#ifndef _OSSNOVALUES

// **************************************************************
//
// Interface Elementary Procedures
//
// **************************************************************
extern mmeS1AP_ELEMENTARY_PROCEDURE mmehandoverPreparation;

extern mmeS1AP_ELEMENTARY_PROCEDURE mmehandoverResourceAllocation;

extern mmeS1AP_ELEMENTARY_PROCEDURE mmehandoverNotification;

extern mmeS1AP_ELEMENTARY_PROCEDURE mmepathSwitchRequest;

extern mmeS1AP_ELEMENTARY_PROCEDURE mmee_RABSetup;

extern mmeS1AP_ELEMENTARY_PROCEDURE mmee_RABModify;

extern mmeS1AP_ELEMENTARY_PROCEDURE mmee_RABRelease;

extern mmeS1AP_ELEMENTARY_PROCEDURE mmee_RABReleaseIndication;

extern mmeS1AP_ELEMENTARY_PROCEDURE mmeinitialContextSetup;

extern mmeS1AP_ELEMENTARY_PROCEDURE mmeuEContextReleaseRequest;

extern mmeS1AP_ELEMENTARY_PROCEDURE mmepaging;

extern mmeS1AP_ELEMENTARY_PROCEDURE mmedownlinkNASTransport;

extern mmeS1AP_ELEMENTARY_PROCEDURE mmeinitialUEMessage;

extern mmeS1AP_ELEMENTARY_PROCEDURE mmeuplinkNASTransport;

extern mmeS1AP_ELEMENTARY_PROCEDURE mmenASNonDeliveryIndication;

extern mmeS1AP_ELEMENTARY_PROCEDURE mmehandoverCancel;

extern mmeS1AP_ELEMENTARY_PROCEDURE mmereset;

extern mmeS1AP_ELEMENTARY_PROCEDURE mmeerrorIndication;

extern mmeS1AP_ELEMENTARY_PROCEDURE mmes1Setup;

extern mmeS1AP_ELEMENTARY_PROCEDURE mmeeNBConfigurationUpdate;

extern mmeS1AP_ELEMENTARY_PROCEDURE mmemMEConfigurationUpdate;

extern mmeS1AP_ELEMENTARY_PROCEDURE mmedownlinkS1cdma2000tunnelling;

extern mmeS1AP_ELEMENTARY_PROCEDURE mmeuplinkS1cdma2000tunnelling;

extern mmeS1AP_ELEMENTARY_PROCEDURE mmeuEContextModification;

extern mmeS1AP_ELEMENTARY_PROCEDURE mmeuECapabilityInfoIndication;

extern mmeS1AP_ELEMENTARY_PROCEDURE mmeuEContextRelease;

extern mmeS1AP_ELEMENTARY_PROCEDURE mmeeNBStatusTransfer;

extern mmeS1AP_ELEMENTARY_PROCEDURE mmemMEStatusTransfer;

extern mmeS1AP_ELEMENTARY_PROCEDURE mmedeactivateTrace;

extern mmeS1AP_ELEMENTARY_PROCEDURE mmetraceStart;

extern mmeS1AP_ELEMENTARY_PROCEDURE mmetraceFailureIndication;

extern mmeS1AP_ELEMENTARY_PROCEDURE mmecellTrafficTrace;

extern mmeS1AP_ELEMENTARY_PROCEDURE mmelocationReportingControl;

extern mmeS1AP_ELEMENTARY_PROCEDURE mmelocationReportingFailureIndication;

extern mmeS1AP_ELEMENTARY_PROCEDURE mmelocationReport;

extern mmeS1AP_ELEMENTARY_PROCEDURE mmeoverloadStart;

extern mmeS1AP_ELEMENTARY_PROCEDURE mmeoverloadStop;

extern mmeS1AP_ELEMENTARY_PROCEDURE mmewriteReplaceWarning;

extern mmeS1AP_ELEMENTARY_PROCEDURE mmeeNBDirectInformationTransfer;

extern mmeS1AP_ELEMENTARY_PROCEDURE mmemMEDirectInformationTransfer;

extern mmeS1AP_ELEMENTARY_PROCEDURE mmeeNBConfigurationTransfer;

extern mmeS1AP_ELEMENTARY_PROCEDURE mmemMEConfigurationTransfer;

extern mmeS1AP_ELEMENTARY_PROCEDURE mmeprivateMessage;

extern mmeS1AP_ELEMENTARY_PROCEDURE mmepWSRestartIndication;

extern mmeS1AP_ELEMENTARY_PROCEDURE mmekill;

extern mmeS1AP_ELEMENTARY_PROCEDURE mmedownlinkUEAssociatedLPPaTransport;

extern mmeS1AP_ELEMENTARY_PROCEDURE mmeuplinkUEAssociatedLPPaTransport;

extern mmeS1AP_ELEMENTARY_PROCEDURE mmedownlinkNonUEAssociatedLPPaTransport;

extern mmeS1AP_ELEMENTARY_PROCEDURE mmeuplinkNonUEAssociatedLPPaTransport;

extern mmeS1AP_ELEMENTARY_PROCEDURE mmeuERadioCapabilityMatch;

extern mmeS1AP_ELEMENTARY_PROCEDURE mmee_RABModificationIndication;

// **************************************************************
//
// IE parameter types from other modules.
//
// **************************************************************
// **************************************************************
//
// Elementary Procedures
//
// **************************************************************
extern const mmeProcedureCode mmeid_HandoverPreparation;

extern const mmeProcedureCode mmeid_HandoverResourceAllocation;

extern const mmeProcedureCode mmeid_HandoverNotification;

extern const mmeProcedureCode mmeid_PathSwitchRequest;

extern const mmeProcedureCode mmeid_HandoverCancel;

extern const mmeProcedureCode mmeid_E_RABSetup;

extern const mmeProcedureCode mmeid_E_RABModify;

extern const mmeProcedureCode mmeid_E_RABRelease;

extern const mmeProcedureCode mmeid_E_RABReleaseIndication;

extern const mmeProcedureCode mmeid_InitialContextSetup;

extern const mmeProcedureCode mmeid_Paging;

extern const mmeProcedureCode mmeid_downlinkNASTransport;

extern const mmeProcedureCode mmeid_initialUEMessage;

extern const mmeProcedureCode mmeid_uplinkNASTransport;

extern const mmeProcedureCode mmeid_Reset;

extern const mmeProcedureCode mmeid_ErrorIndication;

extern const mmeProcedureCode mmeid_NASNonDeliveryIndication;

extern const mmeProcedureCode mmeid_S1Setup;

extern const mmeProcedureCode mmeid_UEContextReleaseRequest;

extern const mmeProcedureCode mmeid_DownlinkS1cdma2000tunnelling;

extern const mmeProcedureCode mmeid_UplinkS1cdma2000tunnelling;

extern const mmeProcedureCode mmeid_UEContextModification;

extern const mmeProcedureCode mmeid_UECapabilityInfoIndication;

extern const mmeProcedureCode mmeid_UEContextRelease;

extern const mmeProcedureCode mmeid_eNBStatusTransfer;

extern const mmeProcedureCode mmeid_MMEStatusTransfer;

extern const mmeProcedureCode mmeid_DeactivateTrace;

extern const mmeProcedureCode mmeid_TraceStart;

extern const mmeProcedureCode mmeid_TraceFailureIndication;

extern const mmeProcedureCode mmeid_ENBConfigurationUpdate;

extern const mmeProcedureCode mmeid_MMEConfigurationUpdate;

extern const mmeProcedureCode mmeid_LocationReportingControl;

extern const mmeProcedureCode mmeid_LocationReportingFailureIndication;

extern const mmeProcedureCode mmeid_LocationReport;

extern const mmeProcedureCode mmeid_OverloadStart;

extern const mmeProcedureCode mmeid_OverloadStop;

extern const mmeProcedureCode mmeid_WriteReplaceWarning;

extern const mmeProcedureCode mmeid_eNBDirectInformationTransfer;

extern const mmeProcedureCode mmeid_MMEDirectInformationTransfer;

extern const mmeProcedureCode mmeid_PrivateMessage;

extern const mmeProcedureCode mmeid_eNBConfigurationTransfer;

extern const mmeProcedureCode mmeid_MMEConfigurationTransfer;

extern const mmeProcedureCode mmeid_CellTrafficTrace;

extern const mmeProcedureCode mmeid_Kill;

extern const mmeProcedureCode mmeid_downlinkUEAssociatedLPPaTransport;

extern const mmeProcedureCode mmeid_uplinkUEAssociatedLPPaTransport;

extern const mmeProcedureCode mmeid_downlinkNonUEAssociatedLPPaTransport;

extern const mmeProcedureCode mmeid_uplinkNonUEAssociatedLPPaTransport;

extern const mmeProcedureCode mmeid_UERadioCapabilityMatch;

extern const mmeProcedureCode mmeid_PWSRestartIndication;

extern const mmeProcedureCode mmeid_E_RABModificationIndication;

// **************************************************************
//
// Extension constants
//
// **************************************************************
extern const int mmemaxPrivateIEs;

extern const int mmemaxProtocolExtensions;

extern const int mmemaxProtocolIEs;

// **************************************************************
//
// Lists
//
// **************************************************************
extern const int mmemaxnoofCSGs;

extern const int mmemaxnoofE_RABs;

extern const int mmemaxnoofTAIs;

extern const int mmemaxnoofTACs;

extern const int mmemaxnoofErrors;

extern const int mmemaxnoofBPLMNs;

extern const int mmemaxnoofPLMNsPerMME;

extern const int mmemaxnoofEPLMNs;

extern const int mmemaxnoofEPLMNsPlusOne;

extern const int mmemaxnoofForbLACs;

extern const int mmemaxnoofForbTACs;

extern const int mmemaxnoofIndividualS1ConnectionsToReset;

extern const int mmemaxnoofCellsineNB;

extern const int mmemaxnoofTAIforWarning;

extern const int mmemaxnoofCellID;

extern const int mmemaxnoofEmergencyAreaID;

extern const int mmemaxnoofCellinTAI;

extern const int mmemaxnoofCellinEAI;

extern const int mmemaxnoofeNBX2TLAs;

extern const int mmemaxnoofeNBX2ExtTLAs;

extern const int mmemaxnoofeNBX2GTPTLAs;

extern const int mmemaxnoofRATs;

extern const int mmemaxnoofGroupIDs;

extern const int mmemaxnoofMMECs;

extern const int mmemaxnoofCellIDforMDT;

extern const int mmemaxnoofTAforMDT;

extern const int mmemaxnoofMDTPLMNs;

extern const int mmemaxnoofCellsforRestart;

extern const int mmemaxnoofRestartTAIs;

extern const int mmemaxnoofRestartEmergencyAreaIDs;

extern const int mmemaxEARFCN;

extern const int mmemaxnoofMBSFNAreaMDT;

// **************************************************************
//
// IEs
//
// **************************************************************
extern const mmeProtocolIE_ID mmeid_MME_UE_S1AP_ID;

extern const mmeProtocolIE_ID mmeid_HandoverType;

extern const mmeProtocolIE_ID mmeid_Cause;

extern const mmeProtocolIE_ID mmeid_TargetID;

extern const mmeProtocolIE_ID mmeid_eNB_UE_S1AP_ID;

extern const mmeProtocolIE_ID mmeid_E_RABSubjecttoDataForwardingList;

extern const mmeProtocolIE_ID mmeid_E_RABtoReleaseListHOCmd;

extern const mmeProtocolIE_ID mmeid_E_RABDataForwardingItem;

extern const mmeProtocolIE_ID mmeid_E_RABReleaseItemBearerRelComp;

extern const mmeProtocolIE_ID mmeid_E_RABToBeSetupListBearerSUReq;

extern const mmeProtocolIE_ID mmeid_E_RABToBeSetupItemBearerSUReq;

extern const mmeProtocolIE_ID mmeid_E_RABAdmittedList;

extern const mmeProtocolIE_ID mmeid_E_RABFailedToSetupListHOReqAck;

extern const mmeProtocolIE_ID mmeid_E_RABAdmittedItem;

extern const mmeProtocolIE_ID mmeid_E_RABFailedtoSetupItemHOReqAck;

extern const mmeProtocolIE_ID mmeid_E_RABToBeSwitchedDLList;

extern const mmeProtocolIE_ID mmeid_E_RABToBeSwitchedDLItem;

extern const mmeProtocolIE_ID mmeid_E_RABToBeSetupListCtxtSUReq;

extern const mmeProtocolIE_ID mmeid_TraceActivation;

extern const mmeProtocolIE_ID mmeid_NAS_PDU;

extern const mmeProtocolIE_ID mmeid_E_RABToBeSetupItemHOReq;

extern const mmeProtocolIE_ID mmeid_E_RABSetupListBearerSURes;

extern const mmeProtocolIE_ID mmeid_E_RABFailedToSetupListBearerSURes;

extern const mmeProtocolIE_ID mmeid_E_RABToBeModifiedListBearerModReq;

extern const mmeProtocolIE_ID mmeid_E_RABModifyListBearerModRes;

extern const mmeProtocolIE_ID mmeid_E_RABFailedToModifyList;

extern const mmeProtocolIE_ID mmeid_E_RABToBeReleasedList;

extern const mmeProtocolIE_ID mmeid_E_RABFailedToReleaseList;

extern const mmeProtocolIE_ID mmeid_E_RABItem;

extern const mmeProtocolIE_ID mmeid_E_RABToBeModifiedItemBearerModReq;

extern const mmeProtocolIE_ID mmeid_E_RABModifyItemBearerModRes;

extern const mmeProtocolIE_ID mmeid_E_RABSetupItemBearerSURes;

extern const mmeProtocolIE_ID mmeid_SecurityContext;

extern const mmeProtocolIE_ID mmeid_HandoverRestrictionList;

extern const mmeProtocolIE_ID mmeid_UEPagingID;

extern const mmeProtocolIE_ID mmeid_pagingDRX;

extern const mmeProtocolIE_ID mmeid_TAIList;

extern const mmeProtocolIE_ID mmeid_TAIItem;

extern const mmeProtocolIE_ID mmeid_E_RABFailedToSetupListCtxtSURes;

extern const mmeProtocolIE_ID mmeid_E_RABSetupItemCtxtSURes;

extern const mmeProtocolIE_ID mmeid_E_RABSetupListCtxtSURes;

extern const mmeProtocolIE_ID mmeid_E_RABToBeSetupItemCtxtSUReq;

extern const mmeProtocolIE_ID mmeid_E_RABToBeSetupListHOReq;

extern const mmeProtocolIE_ID mmeid_CriticalityDiagnostics;

extern const mmeProtocolIE_ID mmeid_Global_ENB_ID;

extern const mmeProtocolIE_ID mmeid_eNBname;

extern const mmeProtocolIE_ID mmeid_MMEname;

extern const mmeProtocolIE_ID mmeid_SupportedTAs;

extern const mmeProtocolIE_ID mmeid_TimeToWait;

extern const mmeProtocolIE_ID mmeid_uEaggregateMaximumBitrate;

extern const mmeProtocolIE_ID mmeid_TAI;

extern const mmeProtocolIE_ID mmeid_E_RABReleaseListBearerRelComp;

extern const mmeProtocolIE_ID mmeid_cdma2000PDU;

extern const mmeProtocolIE_ID mmeid_cdma2000RATType;

extern const mmeProtocolIE_ID mmeid_cdma2000SectorID;

extern const mmeProtocolIE_ID mmeid_SecurityKey;

extern const mmeProtocolIE_ID mmeid_UERadioCapability;

extern const mmeProtocolIE_ID mmeid_GUMMEI_ID;

extern const mmeProtocolIE_ID mmeid_Direct_Forwarding_Path_Availability;

extern const mmeProtocolIE_ID mmeid_UEIdentityIndexValue;

extern const mmeProtocolIE_ID mmeid_cdma2000HOStatus;

extern const mmeProtocolIE_ID mmeid_cdma2000HORequiredIndication;

extern const mmeProtocolIE_ID mmeid_E_UTRAN_Trace_ID;

extern const mmeProtocolIE_ID mmeid_RelativeMMECapacity;

extern const mmeProtocolIE_ID mmeid_SourceMME_UE_S1AP_ID;

extern const mmeProtocolIE_ID mmeid_Bearers_SubjectToStatusTransfer_Item;

extern const mmeProtocolIE_ID mmeid_eNB_StatusTransfer_TransparentContainer;

extern const mmeProtocolIE_ID mmeid_UE_associatedLogicalS1_ConnectionItem;

extern const mmeProtocolIE_ID mmeid_ResetType;

extern const mmeProtocolIE_ID mmeid_UE_associatedLogicalS1_ConnectionListResAck;

extern const mmeProtocolIE_ID mmeid_E_RABToBeSwitchedULItem;

extern const mmeProtocolIE_ID mmeid_E_RABToBeSwitchedULList;

extern const mmeProtocolIE_ID mmeid_S_TMSI;

extern const mmeProtocolIE_ID mmeid_cdma2000OneXRAND;

extern const mmeProtocolIE_ID mmeid_RequestType;

extern const mmeProtocolIE_ID mmeid_UE_S1AP_IDs;

extern const mmeProtocolIE_ID mmeid_EUTRAN_CGI;

extern const mmeProtocolIE_ID mmeid_OverloadResponse;

extern const mmeProtocolIE_ID mmeid_cdma2000OneXSRVCCInfo;

extern const mmeProtocolIE_ID mmeid_Source_ToTarget_TransparentContainer;

extern const mmeProtocolIE_ID mmeid_ServedGUMMEIs;

extern const mmeProtocolIE_ID mmeid_SubscriberProfileIDforRFP;

extern const mmeProtocolIE_ID mmeid_UESecurityCapabilities;

extern const mmeProtocolIE_ID mmeid_CSFallbackIndicator;

extern const mmeProtocolIE_ID mmeid_CNDomain;

extern const mmeProtocolIE_ID mmeid_E_RABReleasedList;

extern const mmeProtocolIE_ID mmeid_MessageIdentifier;

extern const mmeProtocolIE_ID mmeid_SerialNumber;

extern const mmeProtocolIE_ID mmeid_WarningAreaList;

extern const mmeProtocolIE_ID mmeid_RepetitionPeriod;

extern const mmeProtocolIE_ID mmeid_NumberofBroadcastRequest;

extern const mmeProtocolIE_ID mmeid_WarningType;

extern const mmeProtocolIE_ID mmeid_WarningSecurityInfo;

extern const mmeProtocolIE_ID mmeid_DataCodingScheme;

extern const mmeProtocolIE_ID mmeid_WarningMessageContents;

extern const mmeProtocolIE_ID mmeid_BroadcastCompletedAreaList;

extern const mmeProtocolIE_ID mmeid_Inter_SystemInformationTransferTypeEDT;

extern const mmeProtocolIE_ID mmeid_Inter_SystemInformationTransferTypeMDT;

extern const mmeProtocolIE_ID mmeid_Target_ToSource_TransparentContainer;

extern const mmeProtocolIE_ID mmeid_SRVCCOperationPossible;

extern const mmeProtocolIE_ID mmeid_SRVCCHOIndication;

extern const mmeProtocolIE_ID mmeid_CSG_Id;

extern const mmeProtocolIE_ID mmeid_CSG_IdList;

extern const mmeProtocolIE_ID mmeid_SONConfigurationTransferECT;

extern const mmeProtocolIE_ID mmeid_SONConfigurationTransferMCT;

extern const mmeProtocolIE_ID mmeid_TraceCollectionEntityIPAddress;

extern const mmeProtocolIE_ID mmeid_MSClassmark2;

extern const mmeProtocolIE_ID mmeid_MSClassmark3;

extern const mmeProtocolIE_ID mmeid_RRC_Establishment_Cause;

extern const mmeProtocolIE_ID mmeid_NASSecurityParametersfromE_UTRAN;

extern const mmeProtocolIE_ID mmeid_NASSecurityParameterstoE_UTRAN;

extern const mmeProtocolIE_ID mmeid_DefaultPagingDRX;

extern const mmeProtocolIE_ID mmeid_Source_ToTarget_TransparentContainer_Secondary;

extern const mmeProtocolIE_ID mmeid_Target_ToSource_TransparentContainer_Secondary;

extern const mmeProtocolIE_ID mmeid_EUTRANRoundTripDelayEstimationInfo;

extern const mmeProtocolIE_ID mmeid_BroadcastCancelledAreaList;

extern const mmeProtocolIE_ID mmeid_ConcurrentWarningMessageIndicator;

extern const mmeProtocolIE_ID mmeid_Data_Forwarding_Not_Possible;

extern const mmeProtocolIE_ID mmeid_ExtendedRepetitionPeriod;

extern const mmeProtocolIE_ID mmeid_CellAccessMode;

extern const mmeProtocolIE_ID mmeid_CSGMembershipStatus;

extern const mmeProtocolIE_ID mmeid_LPPa_PDU;

extern const mmeProtocolIE_ID mmeid_Routing_ID;

extern const mmeProtocolIE_ID mmeid_Time_Synchronisation_Info;

extern const mmeProtocolIE_ID mmeid_PS_ServiceNotAvailable;

extern const mmeProtocolIE_ID mmeid_PagingPriority;

extern const mmeProtocolIE_ID mmeid_x2TNLConfigurationInfo;

extern const mmeProtocolIE_ID mmeid_eNBX2ExtendedTransportLayerAddresses;

extern const mmeProtocolIE_ID mmeid_GUMMEIList;

extern const mmeProtocolIE_ID mmeid_GW_TransportLayerAddress;

extern const mmeProtocolIE_ID mmeid_Correlation_ID;

extern const mmeProtocolIE_ID mmeid_SourceMME_GUMMEI;

extern const mmeProtocolIE_ID mmeid_MME_UE_S1AP_ID_2;

extern const mmeProtocolIE_ID mmeid_RegisteredLAI;

extern const mmeProtocolIE_ID mmeid_RelayNode_Indicator;

extern const mmeProtocolIE_ID mmeid_TrafficLoadReductionIndication;

extern const mmeProtocolIE_ID mmeid_MDTConfiguration;

extern const mmeProtocolIE_ID mmeid_MMERelaySupportIndicator;

extern const mmeProtocolIE_ID mmeid_GWContextReleaseIndication;

extern const mmeProtocolIE_ID mmeid_ManagementBasedMDTAllowed;

extern const mmeProtocolIE_ID mmeid_PrivacyIndicator;

extern const mmeProtocolIE_ID mmeid_VoiceSupportMatchIndicator;

extern const mmeProtocolIE_ID mmeid_GUMMEIType;

extern const mmeProtocolIE_ID mmeid_M3Configuration;

extern const mmeProtocolIE_ID mmeid_M4Configuration;

extern const mmeProtocolIE_ID mmeid_M5Configuration;

extern const mmeProtocolIE_ID mmeid_MDT_Location_Info;

extern const mmeProtocolIE_ID mmeid_Tunnel_Information_for_BBF;

extern const mmeProtocolIE_ID mmeid_ManagementBasedMDTPLMNList;

extern const mmeProtocolIE_ID mmeid_SignallingBasedMDTPLMNList;

extern const mmeProtocolIE_ID mmeid_ULCOUNTValueExtended;

extern const mmeProtocolIE_ID mmeid_DLCOUNTValueExtended;

extern const mmeProtocolIE_ID mmeid_ReceiveStatusOfULPDCPSDUsExtended;

extern const mmeProtocolIE_ID mmeid_ECGIListForRestart;

extern const mmeProtocolIE_ID mmeid_SIPTO_Correlation_ID;

extern const mmeProtocolIE_ID mmeid_SIPTO_L_GW_TransportLayerAddress;

extern const mmeProtocolIE_ID mmeid_TransportInformation;

extern const mmeProtocolIE_ID mmeid_LHN_ID;

extern const mmeProtocolIE_ID mmeid_AdditionalCSFallbackIndicator;

extern const mmeProtocolIE_ID mmeid_TAIListForRestart;

extern const mmeProtocolIE_ID mmeid_UserLocationInformation;

extern const mmeProtocolIE_ID mmeid_EmergencyAreaIDListForRestart;

extern const mmeProtocolIE_ID mmeid_KillAllWarningMessages;

extern const mmeProtocolIE_ID mmeid_Masked_IMEISV;

extern const mmeProtocolIE_ID mmeid_eNBIndirectX2TransportLayerAddresses;

extern const mmeProtocolIE_ID mmeid_ProSeAuthorized;

extern const mmeProtocolIE_ID mmeid_ExpectedUEBehaviour;

extern const mmeProtocolIE_ID mmeid_LoggedMBSFNMDT;

extern const mmeProtocolIE_ID mmeid_UERadioCapabilityForPaging;

extern const mmeProtocolIE_ID mmeid_E_RABToBeModifiedListBearerModInd;

extern const mmeProtocolIE_ID mmeid_E_RABToBeModifiedItemBearerModInd;

extern const mmeProtocolIE_ID mmeid_E_RABNotToBeModifiedListBearerModInd;

extern const mmeProtocolIE_ID mmeid_E_RABNotToBeModifiedItemBearerModInd;

extern const mmeProtocolIE_ID mmeid_E_RABModifyListBearerModConf;

extern const mmeProtocolIE_ID mmeid_E_RABModifyItemBearerModConf;

extern const mmeProtocolIE_ID mmeid_E_RABFailedToModifyListBearerModConf;

extern const mmeProtocolIE_ID mmeid_SON_Information_Report;

extern const mmeProtocolIE_ID mmeid_Muting_Availability_Indication;

extern const mmeProtocolIE_ID mmeid_Muting_Pattern_Information;

extern const mmeProtocolIE_ID mmeid_Synchronisation_Information;

extern const mmeProtocolIE_ID mmeid_E_RABToBeReleasedListBearerModConf;

#endif  /* #ifndef _OSSNOVALUES */


extern void *s1ap;    /* encoder-decoder control table */
#ifdef __cplusplus
}	/* extern "C" */
#endif /* __cplusplus */
#endif /* OSS_s1ap */
