/*************************************************************/
/* Copyright (C) 2017 OSS Nokalva, Inc.  All rights reserved.*/
/*************************************************************/

/* THIS FILE IS PROPRIETARY MATERIAL OF OSS NOKALVA, INC.
 * AND MAY BE USED ONLY BY DIRECT LICENSEES OF OSS NOKALVA, INC.
 * THIS FILE MAY NOT BE DISTRIBUTED.
 * THIS COPYRIGHT STATEMENT MAY NOT BE REMOVED. */

/* This file was generated by a TRIAL version of the OSS ASN.1 Tools.
 * Applications built using this file can be executed only on the machine
 * on which you run the OSS ASN.1 compiler. */

/* Generated for: Pinnacle Digital Analytics Pvt Ltd (Trial), License 74322Z. */
/* Abstract syntax: ranap */
/* Created: Fri Jan 27 17:47:22 2017 */
/* ASN.1/C++ compiler version: 6.3 */
/* Code generated for runtime version 6.3 or later */
/* Compiler operating system: Linux with 64-bit support */
/* Compiler machine type: AMD64 */
/* Target operating system: Linux with 64-bit support */
/* Target machine type: AMD64 */
/* C++ compiler options required: -m64 */
/* ASN.1 compiler options and file names specified:
 * -prefix rnp -norelaxedMode -per -uper -ber -xer -exer -autoencdec
 * -allow universaltags directives.asn ranap.asn
 */

#ifndef OSS_ranap
#define OSS_ranap

#include "oss.h"
#include "asn1.h"

/* Representation types */

enum rnpCriticality {
    rnpreject = 0,
    rnpignore = 1,
    rnpnotify = 2
};

enum rnpAccuracyFulfilmentIndicator {
    rnprequested_Accuracy_Fulfilled = 0,
    rnprequested_Accuracy_Not_Fulfilled = 1
};

enum rnpAlternativeRABConfigurationRequest {
    rnpalternative_RAB_configuration_Requested = 0
};

enum rnpCell_Access_Mode {
    rnphybrid = 0
};

enum rnpClientType {
    rnpemergency_Services = 0,
    rnpvalue_Added_Services = 1,
    rnppLMN_Operator_Services = 2,
    rnplawful_Intercept_Services = 3,
    rnppLMN_Operator_Broadcast_Services = 4,
    rnppLMN_Operator_O_et_M = 5,
    rnppLMN_Operator_Anonymous_Statistics = 6,
    rnppLMN_Operator_Target_MS_Service_Support = 7
};

enum rnpCN_DomainIndicator {
    rnpcs_domain = 0,
    rnpps_domain = 1
};

enum rnpCSFB_Information {
    rnpcsfb = 0,
    rnpcsfb_high_priority = 1
};

enum rnpCSG_Membership_Status {
    rnpmember = 0,
    rnpnon_member = 1
};

enum rnpEnd_Of_CSFB {
    rnpend_of_CSFB = 0
};

enum rnpE_UTRAN_Service_Handover {
    rnphandover_to_E_UTRAN_shall_not_be_performed = 0
};

enum rnpFrequenceLayerConvergenceFlag {
    rnpno_FLC_flag = 0
};

enum rnpHigherBitratesThan16MbpsFlag {
    rnpHigherBitratesThan16MbpsFlag_allowed = 0,
    rnpnot_allowed = 1
};

enum rnpIncludeVelocity {
    rnpIncludeVelocity_requested = 0
};

enum rnpInformationExchangeType {
    rnptransfer = 0,
    rnprequest = 1
};

enum rnpKeyStatus {
    rnpold = 0,
    rnpnew = 1
};

enum rnpLocationRelatedDataRequestTypeSpecificToGERANIuMode {
    rnpdecipheringKeysEOTD = 0,
    rnpdedicatedMobileAssistedEOTDAssistanceData = 1,
    rnpdedicatedMobileBasedEOTDAssistanceData = 2
};

enum rnpManagement_Based_MDT_Allowed {
    rnpManagement_Based_MDT_Allowed_allowed = 0
};

enum rnpMBMSBearerServiceType {
    rnpmulticast = 0,
    rnpbroadcast = 1
};

enum rnpMBMSCNDe_Registration {
    rnpnormalsessionstop = 0,
    rnpMBMSCNDe_Registration_deregister = 1
};

enum rnpMBMSCountingInformation {
    rnpcounting = 0,
    rnpnotcounting = 1
};

enum rnpMBMSLinkingInformation {
    rnpuE_has_joined_multicast_services = 0
};

enum rnpMBMSRegistrationRequestType {
    rnpregister = 0,
    rnpMBMSRegistrationRequestType_deregister = 1
};

enum rnpNonSearchingIndication {
    rnpnon_searching = 0,
    rnpsearching = 1
};

enum rnpOut_Of_UTRAN {
    rnpcell_reselection_to_EUTRAN = 0
};

enum rnpPagingCause {
    rnpterminating_conversational_call = 0,
    rnpterminating_streaming_call = 1,
    rnpterminating_interactive_call = 2,
    rnpterminating_background_call = 3,
    rnpterminating_low_priority_signalling = 4,
    rnpterminating_high_priority_signalling = 5
};

enum rnpPositioningPriority {
    rnphigh_Priority = 0,
    rnpnormal_Priority = 1
};

enum rnpRAT_Type {
    rnputran = 0,
    rnpgeran = 1
};

enum rnpRedirectionCompleted {
    rnpredirection_completed = 0
};

enum rnpRejectCauseValue {
    rnppLMN_Not_Allowed = 0,
    rnplocation_Area_Not_Allowed = 1,
    rnproaming_Not_Allowed_In_This_Location_Area = 2,
    rnpno_Suitable_Cell_In_Location_Area = 3,
    rnpgPRS_Services_Not_Allowed_In_This_PLMN = 4,
    rnpcS_PS_coordination_required = 5,
    rnpnetwork_failure = 6,
    rnpnot_authorized_for_this_CSG = 7
};

enum rnpRelocationType {
    rnpue_not_involved = 0,
    rnpue_involved = 1
};

enum rnpResponseTime {
    rnplowdelay = 0,
    rnpdelaytolerant = 1
};

enum rnpRSRVCC_HO_Indication {
    rnpps_only = 0
};

enum rnpRSRVCC_Operation_Possible {
    rnprsrvcc_possible = 0
};

enum rnpSAPI {
    rnpsapi_0 = 0,
    rnpsapi_3 = 1
};

enum rnpSession_Re_establishment_Indicator {
    rnptrue = 0
};

enum rnpSignallingIndication {
    rnpsignalling = 0
};

enum rnpSRVCC_HO_Indication {
    rnpps_and_cs = 0,
    rnpcs_only = 1
};

enum rnpSRVCC_Operation_Possible {
    rnpsrvcc_possible = 0
};

enum rnpTypeOfError {
    rnpnot_understood = 0,
    rnpmissing = 1
};

enum rnpVoiceSupportMatchIndicator {
    rnpsupported = 0,
    rnpnot_supported = 1
};

enum rnpTrafficClass {
    rnpconversational = 0,
    rnpstreaming = 1,
    rnpinteractive = 2,
    rnpbackground = 3
};

enum rnpRAB_AsymmetryIndicator {
    rnpsymmetric_bidirectional = 0,
    rnpasymmetric_unidirectional_downlink = 1,
    rnpasymmetric_unidirectional_uplink = 2,
    rnpasymmetric_bidirectional = 3
};

enum rnpDeliveryOrder {
    rnpdelivery_order_requested = 0,
    rnpdelivery_order_not_requested = 1
};

enum rnpPre_emptionCapability {
    rnpshall_not_trigger_pre_emption = 0,
    rnpmay_trigger_pre_emption = 1
};

enum rnpPre_emptionVulnerability {
    rnpnot_pre_emptable = 0,
    rnppre_emptable = 1
};

enum rnpQueuingAllowed {
    rnpqueueing_not_allowed = 0,
    rnpqueueing_allowed = 1
};

enum rnpSourceStatisticsDescriptor {
    rnpspeech = 0,
    rnpunknown = 1
};

enum rnpRelocationRequirement {
    rnplossless = 0,
    rnpnone = 1,
    rnprealtime = 2
};

enum rnpDataVolumeReportingIndication {
    rnpdo_report = 0,
    rnpdo_not_report = 1
};

enum rnpUserPlaneMode {
    rnptransparent_mode = 0,
    rnpsupport_mode_for_predefined_SDU_sizes = 1
};

enum rnpService_Handover {
    rnphandover_to_GSM_should_be_performed = 0,
    rnphandover_to_GSM_should_not_be_performed = 1,
    rnphandover_to_GSM_shall_not_be_performed = 2
};

enum rnpAlt_RAB_Parameter_MaxBitrateType {
    rnpAlt_RAB_Parameter_MaxBitrateType_unspecified = 0,
    rnpAlt_RAB_Parameter_MaxBitrateType_value_range = 1,
    rnpAlt_RAB_Parameter_MaxBitrateType_discrete_values = 2
};

enum rnpAlt_RAB_Parameter_GuaranteedBitrateType {
    rnpAlt_RAB_Parameter_GuaranteedBitrateType_unspecified = 0,
    rnpAlt_RAB_Parameter_GuaranteedBitrateType_value_range = 1,
    rnpAlt_RAB_Parameter_GuaranteedBitrateType_discrete_values = 2
};

enum rnpMBMSHCIndicator {
    rnpuncompressed_header = 0,
    rnpcompressed_header = 1
};

enum rnpTriggeringMessage {
    rnpinitiating_message = 0,
    rnpsuccessful_outcome = 1,
    rnpunsuccessfull_outcome = 2,
    rnpoutcome = 3
};

enum rnpDataPDUType {
    rnppDUtype0 = 0,
    rnppDUtype1 = 1
};

enum rnpDeliveryOfErroneousSDU {
    rnpyes = 0,
    rnpno = 1,
    rnpno_error_detection_consideration = 2
};

enum rnpEvent {
    rnpstop_change_of_service_area = 0,
    rnpdirect = 1,
    rnpchange_of_servicearea = 2,
    rnpstop_direct = 3,
    rnpperiodic = 4,
    rnpstop_periodic = 5
};

enum rnpMeasurementQuantity {
    rnpcpichEcNo = 0,
    rnpcpichRSCP = 1,
    rnppathloss = 2
};

enum rnp_enum1 {
    rnpnorth = 0,
    rnpsouth = 1
};

enum rnp_enum2 {
    rnpheight = 0,
    rnpdepth = 1
};

enum rnpLinks_to_log {
    rnpuplink = 0,
    rnpdownlink = 1,
    rnpboth_uplink_and_downlink = 2
};

enum rnp_enum3 {
    rnpiu_cs = 0,
    rnpiu_ps = 1,
    rnpiur = 2,
    rnpiub = 3,
    rnpuu = 4
};

enum rnpRequestedLocationRelatedDataType {
    rnpdecipheringKeysUEBasedOTDOA = 0,
    rnpdecipheringKeysAssistedGPS = 1,
    rnpdedicatedAssistanceDataUEBasedOTDOA = 2,
    rnpdedicatedAssistanceDataAssistedGPS = 3,
    rnpdecipheringKeysAssistedGANSS = 4,
    rnpdedicatedAssistanceDataAssistedGANSS = 5,
    rnpdecipheringKeysAssistedGPSandGANSS = 6,
    rnpdedicatedAssistanceDataAssistedGPSandGANSS = 7
};

enum rnpReportChangeOfSAI {
    rnpReportChangeOfSAI_requested = 0
};

enum rnpPeriodicReportingIndicator {
    rnpperiodicSAI = 0,
    rnpperiodicGeo = 1
};

enum rnpDirectReportingIndicator {
    rnpdirectSAI = 0,
    rnpdirectGeo = 1
};

enum rnpM4_Period {
    rnpM4_Period_ms100 = 0,
    rnpM4_Period_ms250 = 1,
    rnpM4_Period_ms500 = 2,
    rnpM4_Period_ms1000 = 3,
    rnpM4_Period_ms2000 = 4,
    rnpM4_Period_ms3000 = 5,
    rnpM4_Period_ms4000 = 6,
    rnpM4_Period_ms6000 = 7
};

enum rnpM5_Period {
    rnpM5_Period_ms100 = 0,
    rnpM5_Period_ms250 = 1,
    rnpM5_Period_ms500 = 2,
    rnpM5_Period_ms1000 = 3,
    rnpM5_Period_ms2000 = 4,
    rnpM5_Period_ms3000 = 5,
    rnpM5_Period_ms4000 = 6,
    rnpM5_Period_ms6000 = 7
};

enum rnpM6_Period {
    rnpM6_Period_ms1000 = 0,
    rnpM6_Period_ms2000 = 1,
    rnpM6_Period_ms3000 = 2,
    rnpM6_Period_ms4000 = 3,
    rnpM6_Period_ms6000 = 4,
    rnpM6_Period_ms8000 = 5,
    rnpM6_Period_ms12000 = 6,
    rnpM6_Period_ms16000 = 7,
    rnpM6_Period_ms20000 = 8,
    rnpM6_Period_ms24000 = 9,
    rnpM6_Period_ms28000 = 10,
    rnpM6_Period_ms32000 = 11,
    rnpM6_Period_ms64000 = 12
};

enum rnpM7_Period {
    rnpM7_Period_ms1000 = 0,
    rnpM7_Period_ms2000 = 1,
    rnpM7_Period_ms3000 = 2,
    rnpM7_Period_ms4000 = 3,
    rnpM7_Period_ms6000 = 4,
    rnpM7_Period_ms8000 = 5,
    rnpM7_Period_ms12000 = 6,
    rnpM7_Period_ms16000 = 7,
    rnpM7_Period_ms20000 = 8,
    rnpM7_Period_ms24000 = 9,
    rnpM7_Period_ms28000 = 10,
    rnpM7_Period_ms32000 = 11,
    rnpM7_Period_ms64000 = 12
};

enum rnpMDT_Activation {
    rnpimmediateMDTonly = 0,
    rnploggedMDTonly = 1,
    rnpimmediateMDTandTrace = 2
};

enum rnpReportInterval {
    rnpReportInterval_ms250 = 0,
    rnpReportInterval_ms500 = 1,
    rnpReportInterval_ms1000 = 2,
    rnpReportInterval_ms2000 = 3,
    rnpReportInterval_ms3000 = 4,
    rnpReportInterval_ms4000 = 5,
    rnpReportInterval_ms6000 = 6,
    rnpReportInterval_ms12000 = 7,
    rnpReportInterval_ms16000 = 8,
    rnpReportInterval_ms20000 = 9,
    rnpReportInterval_ms24000 = 10,
    rnpReportInterval_ms32000 = 11,
    rnpReportInterval_ms64000 = 12,
    rnpReportInterval_ms8000 = 13,
    rnpReportInterval_ms28000 = 14
};

enum rnpReportAmount {
    rnpn1 = 0,
    rnpn2 = 1,
    rnpn4 = 2,
    rnpn8 = 3,
    rnpn16 = 4,
    rnpn32 = 5,
    rnpn64 = 6,
    rnpinfinity = 7
};

enum rnpPDP_Type {
    rnpempty = 0,
    rnpppp = 1,
    rnposp_ihoss = 2,
    rnpipv4 = 3,
    rnpipv6 = 4
};

enum rnpPDP_Type_extension {
    rnpipv4_and_ipv6 = 0
};

enum rnpLoggingInterval {
    rnps1d28 = 0,
    rnps2d56 = 1,
    rnps5d12 = 2,
    rnps10d24 = 3,
    rnps20d48 = 4,
    rnps30d72 = 5,
    rnps40d96 = 6,
    rnps61d44 = 7
};

enum rnpLoggingDuration {
    rnpmin10 = 0,
    rnpmin20 = 1,
    rnpmin40 = 2,
    rnpmin60 = 3,
    rnpmin90 = 4,
    rnpmin120 = 5
};

enum rnp_enum4 {
    rnpemptylist = 0,
    rnpfulllist = 1
};

enum rnpReportArea {
    rnpservice_area = 0,
    rnpgeographical_area = 1
};

enum rnp_enum5 {
    rnpactivated = 0,
    rnpdeactivated = 1
};

enum rnpTraceDepth {
    rnpminimum = 0,
    rnpmedium = 1,
    rnpmaximum = 2
};

enum rnpMeasBand {
    rnpv6 = 0,
    rnpv15 = 1,
    rnpv25 = 2,
    rnpv50 = 3,
    rnpv75 = 4,
    rnpv100 = 5
};

enum rnpVerticalSpeedDirection {
    rnpupward = 0,
    rnpdownward = 1
};

enum rnpPresence {
    rnpoptional = 0,
    rnpconditional = 1,
    rnpmandatory = 2
};


const OSS_UINT32 rnpno_encryption = 0;
const OSS_UINT32 rnpstandard_UMTS_encryption_algorith_UEA1 = 1;
const OSS_UINT32 rnpstandard_UMTS_encryption_algorithm_UEA2 = 2;

const OSS_UINT32 rnpstandard_UMTS_integrity_algorithm_UIA1 = 0;
const OSS_UINT32 rnpstandard_UMTS_integrity_algorithm_UIA2 = 1;
const OSS_UINT32 rnpno_value = 15;

const OSS_UINT32 rnpTrafficHandlingPriority_spare = 0;
const OSS_UINT32 rnpTrafficHandlingPriority_highest = 1;
const OSS_UINT32 rnpTrafficHandlingPriority_lowest = 14;
const OSS_UINT32 rnpno_priority_used = 15;

const OSS_UINT32 rnpPriorityLevel_spare = 0;
const OSS_UINT32 rnpPriorityLevel_highest = 1;
const OSS_UINT32 rnpPriorityLevel_lowest = 14;
const OSS_UINT32 rnpno_priority = 15;

const OSS_UINT32 rnprab_pre_empted = 1;
const OSS_UINT32 rnptrelocoverall_expiry = 2;
const OSS_UINT32 rnptrelocprep_expiry = 3;
const OSS_UINT32 rnptreloccomplete_expiry = 4;
const OSS_UINT32 rnptqueing_expiry = 5;
const OSS_UINT32 rnprelocation_triggered = 6;
const OSS_UINT32 rnptrellocalloc_expiry = 7;
const OSS_UINT32 rnpunable_to_establish_during_relocation = 8;
const OSS_UINT32 rnpunknown_target_rnc = 9;
const OSS_UINT32 rnprelocation_cancelled = 10;
const OSS_UINT32 rnpsuccessful_relocation = 11;
const OSS_UINT32 rnprequested_ciphering_and_or_integrity_protection_algorithms_not_supported = 12;
const OSS_UINT32 rnpconflict_with_already_existing_integrity_protection_and_or_ciphering_information = 13;
const OSS_UINT32 rnpfailure_in_the_radio_interface_procedure = 14;
const OSS_UINT32 rnprelease_due_to_utran_generated_reason = 15;
const OSS_UINT32 rnpuser_inactivity = 16;
const OSS_UINT32 rnptime_critical_relocation = 17;
const OSS_UINT32 rnprequested_traffic_class_not_available = 18;
const OSS_UINT32 rnpinvalid_rab_parameters_value = 19;
const OSS_UINT32 rnprequested_maximum_bit_rate_not_available = 20;
const OSS_UINT32 rnprequested_guaranteed_bit_rate_not_available = 21;
const OSS_UINT32 rnprequested_transfer_delay_not_achievable = 22;
const OSS_UINT32 rnpinvalid_rab_parameters_combination = 23;
const OSS_UINT32 rnpcondition_violation_for_sdu_parameters = 24;
const OSS_UINT32 rnpcondition_violation_for_traffic_handling_priority = 25;
const OSS_UINT32 rnpcondition_violation_for_guaranteed_bit_rate = 26;
const OSS_UINT32 rnpuser_plane_versions_not_supported = 27;
const OSS_UINT32 rnpiu_up_failure = 28;
const OSS_UINT32 rnprelocation_failure_in_target_CN_RNC_or_target_system = 29;
const OSS_UINT32 rnpinvalid_RAB_ID = 30;
const OSS_UINT32 rnpno_remaining_rab = 31;
const OSS_UINT32 rnpinteraction_with_other_procedure = 32;
const OSS_UINT32 rnprequested_maximum_bit_rate_for_dl_not_available = 33;
const OSS_UINT32 rnprequested_maximum_bit_rate_for_ul_not_available = 34;
const OSS_UINT32 rnprequested_guaranteed_bit_rate_for_dl_not_available = 35;
const OSS_UINT32 rnprequested_guaranteed_bit_rate_for_ul_not_available = 36;
const OSS_UINT32 rnprepeated_integrity_checking_failure = 37;
const OSS_UINT32 rnprequested_request_type_not_supported = 38;
const OSS_UINT32 rnprequest_superseded = 39;
const OSS_UINT32 rnprelease_due_to_UE_generated_signalling_connection_release = 40;
const OSS_UINT32 rnpresource_optimisation_relocation = 41;
const OSS_UINT32 rnprequested_information_not_available = 42;
const OSS_UINT32 rnprelocation_desirable_for_radio_reasons = 43;
const OSS_UINT32 rnprelocation_not_supported_in_target_RNC_or_target_system = 44;
const OSS_UINT32 rnpdirected_retry = 45;
const OSS_UINT32 rnpradio_connection_with_UE_Lost = 46;
const OSS_UINT32 rnprNC_unable_to_establish_all_RFCs = 47;
const OSS_UINT32 rnpdeciphering_keys_not_available = 48;
const OSS_UINT32 rnpdedicated_assistance_data_not_available = 49;
const OSS_UINT32 rnprelocation_target_not_allowed = 50;
const OSS_UINT32 rnplocation_reporting_congestion = 51;
const OSS_UINT32 rnpreduce_load_in_serving_cell = 52;
const OSS_UINT32 rnpno_radio_resources_available_in_target_cell = 53;
const OSS_UINT32 rnpgERAN_Iumode_failure = 54;
const OSS_UINT32 rnpaccess_restricted_due_to_shared_networks = 55;
const OSS_UINT32 rnpincoming_relocation_not_supported_due_to_PUESBINE_feature = 56;
const OSS_UINT32 rnptraffic_load_in_the_target_cell_higher_than_in_the_source_cell = 57;
const OSS_UINT32 rnpmBMS_no_multicast_service_for_this_UE = 58;
const OSS_UINT32 rnpmBMS_unknown_UE_ID = 59;
const OSS_UINT32 rnpsuccessful_MBMS_session_start_no_data_bearer_necessary = 60;
const OSS_UINT32 rnpmBMS_superseded_due_to_NNSF = 61;
const OSS_UINT32 rnpmBMS_UE_linking_already_done = 62;
const OSS_UINT32 rnpmBMS_UE_de_linking_failure_no_existing_UE_linking = 63;
const OSS_UINT32 rnptMGI_unknown = 64;

const OSS_UINT32 rnpsignalling_transport_resource_failure = 65;
const OSS_UINT32 rnpiu_transport_connection_failed_to_establish = 66;

const OSS_UINT32 rnpuser_restriction_start_indication = 81;
const OSS_UINT32 rnpuser_restriction_end_indication = 82;
const OSS_UINT32 rnpnormal_release = 83;
const OSS_UINT32 rnpcsg_subscription_expiry = 84;

const OSS_UINT32 rnptransfer_syntax_error = 97;
const OSS_UINT32 rnpsemantic_error = 98;
const OSS_UINT32 rnpmessage_not_compatible_with_receiver_state = 99;
const OSS_UINT32 rnpabstract_syntax_error_reject = 100;
const OSS_UINT32 rnpabstract_syntax_error_ignore_and_notify = 101;
const OSS_UINT32 rnpabstract_syntax_error_falsely_constructed_message = 102;

const OSS_UINT32 rnpom_intervention = 113;
const OSS_UINT32 rnpno_resource_available = 114;
const OSS_UINT32 rnpunspecified_failure = 115;
const OSS_UINT32 rnpnetwork_optimisation = 116;

const OSS_UINT32 rnpiP_multicast_address_and_APN_not_valid = 257;
const OSS_UINT32 rnpmBMS_de_registration_rejected_due_to_implicit_registration = 258;
const OSS_UINT32 rnpmBMS_request_superseded = 259;
const OSS_UINT32 rnpmBMS_de_registration_during_session_not_allowed = 260;
const OSS_UINT32 rnpmBMS_no_data_bearer_necessary = 261;
const OSS_UINT32 rnpperiodicLocationInformationNotAvailable = 262;
const OSS_UINT32 rnpgTP_Resources_Unavailable = 263;
const OSS_UINT32 rnptMGI_inUse_overlapping_MBMS_service_area = 264;
const OSS_UINT32 rnpmBMS_no_cell_in_MBMS_service_area = 265;
const OSS_UINT32 rnpno_Iu_CS_UP_relocation = 266;
const OSS_UINT32 rnpsuccessful_MBMS_Session_Start_IP_Multicast_Bearer_established = 267;
const OSS_UINT32 rnpcS_fallback_triggered = 268;
const OSS_UINT32 rnpinvalid_CSG_Id = 269;
typedef OssEncOID rnp_ObjectID;

typedef OSS_UINT32 rnpProcedureCode;

class OSS_PUBLIC rnp__shared1;

class OSS_PUBLIC rnp__shared2 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp__shared1 component;

    rnp__shared2();
    rnp__shared2(const rnp__shared2 &);
    ~rnp__shared2();

    rnp__shared2 & operator = (const rnp__shared2 &);
    int operator == (const rnp__shared2 &) const;
    int operator != (const rnp__shared2 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp__shared2 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp__shared2 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp__shared2 *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared2 rnp_seqof1;

class OSS_PUBLIC rnp_seq2;

class OSS_PUBLIC rnp_seqof2 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq2 component;

    rnp_seqof2();
    rnp_seqof2(const rnp_seqof2 &);
    ~rnp_seqof2();

    rnp_seqof2 & operator = (const rnp_seqof2 &);
    int operator == (const rnp_seqof2 &) const;
    int operator != (const rnp_seqof2 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof2 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof2 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof2 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpIu_ReleaseCommand   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp__shared2 protocolIEs;
    typedef rnp_seqof2 protocolExtensions;

    rnpIu_ReleaseCommand();
    rnpIu_ReleaseCommand(const rnpIu_ReleaseCommand &);
    rnpIu_ReleaseCommand(const protocolIEs &, const protocolExtensions &);
    rnpIu_ReleaseCommand(const protocolIEs &);

    rnpIu_ReleaseCommand & operator = (const rnpIu_ReleaseCommand &);
    int operator == (const rnpIu_ReleaseCommand &) const;
    int operator != (const rnpIu_ReleaseCommand &) const;

    protocolIEs & get_protocolIEs();
    const protocolIEs & get_protocolIEs() const;
    void set_protocolIEs(const protocolIEs &);

    protocolExtensions *get_protocolExtensions();
    const protocolExtensions *get_protocolExtensions() const;
    void set_protocolExtensions(const protocolExtensions &);
    int protocolExtensions_is_present() const;
    void omit_protocolExtensions();
private:
    OSS_UINT32 bit_mask;
    protocolIEs protocolIEs_field;
    protocolExtensions protocolExtensions_field;
};

class OSS_PUBLIC rnp_seq9;

class OSS_PUBLIC rnp_seqof9 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq9 component;

    rnp_seqof9();
    rnp_seqof9(const rnp_seqof9 &);
    ~rnp_seqof9();

    rnp_seqof9 & operator = (const rnp_seqof9 &);
    int operator == (const rnp_seqof9 &) const;
    int operator != (const rnp_seqof9 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof9 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof9 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof9 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnp_seq10;

class OSS_PUBLIC rnp_seqof10 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq10 component;

    rnp_seqof10();
    rnp_seqof10(const rnp_seqof10 &);
    ~rnp_seqof10();

    rnp_seqof10 & operator = (const rnp_seqof10 &);
    int operator == (const rnp_seqof10 &) const;
    int operator != (const rnp_seqof10 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof10 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof10 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof10 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpRelocationRequired   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp_seqof9 protocolIEs;
    typedef rnp_seqof10 protocolExtensions;

    rnpRelocationRequired();
    rnpRelocationRequired(const rnpRelocationRequired &);
    rnpRelocationRequired(const protocolIEs &, const protocolExtensions &);
    rnpRelocationRequired(const protocolIEs &);

    rnpRelocationRequired & operator = (const rnpRelocationRequired &);
    int operator == (const rnpRelocationRequired &) const;
    int operator != (const rnpRelocationRequired &) const;

    protocolIEs & get_protocolIEs();
    const protocolIEs & get_protocolIEs() const;
    void set_protocolIEs(const protocolIEs &);

    protocolExtensions *get_protocolExtensions();
    const protocolExtensions *get_protocolExtensions() const;
    void set_protocolExtensions(const protocolExtensions &);
    int protocolExtensions_is_present() const;
    void omit_protocolExtensions();
private:
    OSS_UINT32 bit_mask;
    protocolIEs protocolIEs_field;
    protocolExtensions protocolExtensions_field;
};

class OSS_PUBLIC rnp_seq19;

class OSS_PUBLIC rnp_seqof19 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq19 component;

    rnp_seqof19();
    rnp_seqof19(const rnp_seqof19 &);
    ~rnp_seqof19();

    rnp_seqof19 & operator = (const rnp_seqof19 &);
    int operator == (const rnp_seqof19 &) const;
    int operator != (const rnp_seqof19 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof19 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof19 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof19 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnp_seq20;

class OSS_PUBLIC rnp_seqof20 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq20 component;

    rnp_seqof20();
    rnp_seqof20(const rnp_seqof20 &);
    ~rnp_seqof20();

    rnp_seqof20 & operator = (const rnp_seqof20 &);
    int operator == (const rnp_seqof20 &) const;
    int operator != (const rnp_seqof20 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof20 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof20 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof20 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpRelocationRequest   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp_seqof19 protocolIEs;
    typedef rnp_seqof20 protocolExtensions;

    rnpRelocationRequest();
    rnpRelocationRequest(const rnpRelocationRequest &);
    rnpRelocationRequest(const protocolIEs &, const protocolExtensions &);
    rnpRelocationRequest(const protocolIEs &);

    rnpRelocationRequest & operator = (const rnpRelocationRequest &);
    int operator == (const rnpRelocationRequest &) const;
    int operator != (const rnpRelocationRequest &) const;

    protocolIEs & get_protocolIEs();
    const protocolIEs & get_protocolIEs() const;
    void set_protocolIEs(const protocolIEs &);

    protocolExtensions *get_protocolExtensions();
    const protocolExtensions *get_protocolExtensions() const;
    void set_protocolExtensions(const protocolExtensions &);
    int protocolExtensions_is_present() const;
    void omit_protocolExtensions();
private:
    OSS_UINT32 bit_mask;
    protocolIEs protocolIEs_field;
    protocolExtensions protocolExtensions_field;
};

typedef rnp__shared2 rnp_seqof37;

class OSS_PUBLIC rnp__shared5;

class OSS_PUBLIC rnp__shared6 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp__shared5 component;

    rnp__shared6();
    rnp__shared6(const rnp__shared6 &);
    ~rnp__shared6();

    rnp__shared6 & operator = (const rnp__shared6 &);
    int operator == (const rnp__shared6 &) const;
    int operator != (const rnp__shared6 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp__shared6 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp__shared6 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp__shared6 *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared6 rnp_seqof267;

typedef rnp__shared6 rnp_seqof38;

class OSS_PUBLIC rnp__shared18   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp__shared2 protocolIEs;
    typedef rnp__shared6 protocolExtensions;

    rnp__shared18();
    rnp__shared18(const rnp__shared18 &);
    rnp__shared18(const protocolIEs &, const protocolExtensions &);
    rnp__shared18(const protocolIEs &);

    rnp__shared18 & operator = (const rnp__shared18 &);
    int operator == (const rnp__shared18 &) const;
    int operator != (const rnp__shared18 &) const;

    protocolIEs & get_protocolIEs();
    const protocolIEs & get_protocolIEs() const;
    void set_protocolIEs(const protocolIEs &);

    protocolExtensions *get_protocolExtensions();
    const protocolExtensions *get_protocolExtensions() const;
    void set_protocolExtensions(const protocolExtensions &);
    int protocolExtensions_is_present() const;
    void omit_protocolExtensions();
private:
    OSS_UINT32 bit_mask;
    protocolIEs protocolIEs_field;
    protocolExtensions protocolExtensions_field;
};

typedef rnp__shared18 rnpRelocationCancel;

class OSS_PUBLIC rnp_seq42;

class OSS_PUBLIC rnp_seqof41 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq42 component;

    rnp_seqof41();
    rnp_seqof41(const rnp_seqof41 &);
    ~rnp_seqof41();

    rnp_seqof41 & operator = (const rnp_seqof41 &);
    int operator == (const rnp_seqof41 &) const;
    int operator != (const rnp_seqof41 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof41 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof41 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof41 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnp_seq43;

class OSS_PUBLIC rnp_seqof42 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq43 component;

    rnp_seqof42();
    rnp_seqof42(const rnp_seqof42 &);
    ~rnp_seqof42();

    rnp_seqof42 & operator = (const rnp_seqof42 &);
    int operator == (const rnp_seqof42 &) const;
    int operator != (const rnp_seqof42 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof42 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof42 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof42 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpSRNS_ContextRequest   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp_seqof41 protocolIEs;
    typedef rnp_seqof42 protocolExtensions;

    rnpSRNS_ContextRequest();
    rnpSRNS_ContextRequest(const rnpSRNS_ContextRequest &);
    rnpSRNS_ContextRequest(const protocolIEs &, const protocolExtensions &);
    rnpSRNS_ContextRequest(const protocolIEs &);

    rnpSRNS_ContextRequest & operator = (const rnpSRNS_ContextRequest &);
    int operator == (const rnpSRNS_ContextRequest &) const;
    int operator != (const rnpSRNS_ContextRequest &) const;

    protocolIEs & get_protocolIEs();
    const protocolIEs & get_protocolIEs() const;
    void set_protocolIEs(const protocolIEs &);

    protocolExtensions *get_protocolExtensions();
    const protocolExtensions *get_protocolExtensions() const;
    void set_protocolExtensions(const protocolExtensions &);
    int protocolExtensions_is_present() const;
    void omit_protocolExtensions();
private:
    OSS_UINT32 bit_mask;
    protocolIEs protocolIEs_field;
    protocolExtensions protocolExtensions_field;
};

class OSS_PUBLIC rnp_seq52;

class OSS_PUBLIC rnp_seqof51 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq52 component;

    rnp_seqof51();
    rnp_seqof51(const rnp_seqof51 &);
    ~rnp_seqof51();

    rnp_seqof51 & operator = (const rnp_seqof51 &);
    int operator == (const rnp_seqof51 &) const;
    int operator != (const rnp_seqof51 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof51 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof51 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof51 *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared6 rnp_seqof52;

class OSS_PUBLIC rnpSecurityModeCommand   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp_seqof51 protocolIEs;
    typedef rnp__shared6 protocolExtensions;

    rnpSecurityModeCommand();
    rnpSecurityModeCommand(const rnpSecurityModeCommand &);
    rnpSecurityModeCommand(const protocolIEs &, const protocolExtensions &);
    rnpSecurityModeCommand(const protocolIEs &);

    rnpSecurityModeCommand & operator = (const rnpSecurityModeCommand &);
    int operator == (const rnpSecurityModeCommand &) const;
    int operator != (const rnpSecurityModeCommand &) const;

    protocolIEs & get_protocolIEs();
    const protocolIEs & get_protocolIEs() const;
    void set_protocolIEs(const protocolIEs &);

    protocolExtensions *get_protocolExtensions();
    const protocolExtensions *get_protocolExtensions() const;
    void set_protocolExtensions(const protocolExtensions &);
    int protocolExtensions_is_present() const;
    void omit_protocolExtensions();
private:
    OSS_UINT32 bit_mask;
    protocolIEs protocolIEs_field;
    protocolExtensions protocolExtensions_field;
};

class OSS_PUBLIC rnp_seq58;

class OSS_PUBLIC rnp_seqof57 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq58 component;

    rnp_seqof57();
    rnp_seqof57(const rnp_seqof57 &);
    ~rnp_seqof57();

    rnp_seqof57 & operator = (const rnp_seqof57 &);
    int operator == (const rnp_seqof57 &) const;
    int operator != (const rnp_seqof57 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof57 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof57 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof57 *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared6 rnp_seqof58;

class OSS_PUBLIC rnpDataVolumeReportRequest   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp_seqof57 protocolIEs;
    typedef rnp__shared6 protocolExtensions;

    rnpDataVolumeReportRequest();
    rnpDataVolumeReportRequest(const rnpDataVolumeReportRequest &);
    rnpDataVolumeReportRequest(const protocolIEs &, const protocolExtensions &);
    rnpDataVolumeReportRequest(const protocolIEs &);

    rnpDataVolumeReportRequest & operator = (const rnpDataVolumeReportRequest &);
    int operator == (const rnpDataVolumeReportRequest &) const;
    int operator != (const rnpDataVolumeReportRequest &) const;

    protocolIEs & get_protocolIEs();
    const protocolIEs & get_protocolIEs() const;
    void set_protocolIEs(const protocolIEs &);

    protocolExtensions *get_protocolExtensions();
    const protocolExtensions *get_protocolExtensions() const;
    void set_protocolExtensions(const protocolExtensions &);
    int protocolExtensions_is_present() const;
    void omit_protocolExtensions();
private:
    OSS_UINT32 bit_mask;
    protocolIEs protocolIEs_field;
    protocolExtensions protocolExtensions_field;
};

class OSS_PUBLIC rnp_seq66;

class OSS_PUBLIC rnp_seqof65 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq66 component;

    rnp_seqof65();
    rnp_seqof65(const rnp_seqof65 &);
    ~rnp_seqof65();

    rnp_seqof65 & operator = (const rnp_seqof65 &);
    int operator == (const rnp_seqof65 &) const;
    int operator != (const rnp_seqof65 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof65 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof65 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof65 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnp__shared20;

class OSS_PUBLIC rnp__shared21 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp__shared20 component;

    rnp__shared21();
    rnp__shared21(const rnp__shared21 &);
    ~rnp__shared21();

    rnp__shared21 & operator = (const rnp__shared21 &);
    int operator == (const rnp__shared21 &) const;
    int operator != (const rnp__shared21 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp__shared21 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp__shared21 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp__shared21 *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared21 rnp_seqof66;

class OSS_PUBLIC rnpReset   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp_seqof65 protocolIEs;
    typedef rnp__shared21 protocolExtensions;

    rnpReset();
    rnpReset(const rnpReset &);
    rnpReset(const protocolIEs &, const protocolExtensions &);
    rnpReset(const protocolIEs &);

    rnpReset & operator = (const rnpReset &);
    int operator == (const rnpReset &) const;
    int operator != (const rnpReset &) const;

    protocolIEs & get_protocolIEs();
    const protocolIEs & get_protocolIEs() const;
    void set_protocolIEs(const protocolIEs &);

    protocolExtensions *get_protocolExtensions();
    const protocolExtensions *get_protocolExtensions() const;
    void set_protocolExtensions(const protocolExtensions &);
    int protocolExtensions_is_present() const;
    void omit_protocolExtensions();
private:
    OSS_UINT32 bit_mask;
    protocolIEs protocolIEs_field;
    protocolExtensions protocolExtensions_field;
};

class OSS_PUBLIC rnp_seq70;

class OSS_PUBLIC rnp_seqof69 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq70 component;

    rnp_seqof69();
    rnp_seqof69(const rnp_seqof69 &);
    ~rnp_seqof69();

    rnp_seqof69 & operator = (const rnp_seqof69 &);
    int operator == (const rnp_seqof69 &) const;
    int operator != (const rnp_seqof69 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof69 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof69 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof69 *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared21 rnp_seqof70;

class OSS_PUBLIC rnpResetResource   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp_seqof69 protocolIEs;
    typedef rnp__shared21 protocolExtensions;

    rnpResetResource();
    rnpResetResource(const rnpResetResource &);
    rnpResetResource(const protocolIEs &, const protocolExtensions &);
    rnpResetResource(const protocolIEs &);

    rnpResetResource & operator = (const rnpResetResource &);
    int operator == (const rnpResetResource &) const;
    int operator != (const rnpResetResource &) const;

    protocolIEs & get_protocolIEs();
    const protocolIEs & get_protocolIEs() const;
    void set_protocolIEs(const protocolIEs &);

    protocolExtensions *get_protocolExtensions();
    const protocolExtensions *get_protocolExtensions() const;
    void set_protocolExtensions(const protocolExtensions &);
    int protocolExtensions_is_present() const;
    void omit_protocolExtensions();
private:
    OSS_UINT32 bit_mask;
    protocolIEs protocolIEs_field;
    protocolExtensions protocolExtensions_field;
};

class OSS_PUBLIC rnp_seq78;

class OSS_PUBLIC rnp_seqof77 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq78 component;

    rnp_seqof77();
    rnp_seqof77(const rnp_seqof77 &);
    ~rnp_seqof77();

    rnp_seqof77 & operator = (const rnp_seqof77 &);
    int operator == (const rnp_seqof77 &) const;
    int operator != (const rnp_seqof77 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof77 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof77 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof77 *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared6 rnp_seqof78;

class OSS_PUBLIC rnpRAB_ReleaseRequest   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp_seqof77 protocolIEs;
    typedef rnp__shared6 protocolExtensions;

    rnpRAB_ReleaseRequest();
    rnpRAB_ReleaseRequest(const rnpRAB_ReleaseRequest &);
    rnpRAB_ReleaseRequest(const protocolIEs &, const protocolExtensions &);
    rnpRAB_ReleaseRequest(const protocolIEs &);

    rnpRAB_ReleaseRequest & operator = (const rnpRAB_ReleaseRequest &);
    int operator == (const rnpRAB_ReleaseRequest &) const;
    int operator != (const rnpRAB_ReleaseRequest &) const;

    protocolIEs & get_protocolIEs();
    const protocolIEs & get_protocolIEs() const;
    void set_protocolIEs(const protocolIEs &);

    protocolExtensions *get_protocolExtensions();
    const protocolExtensions *get_protocolExtensions() const;
    void set_protocolExtensions(const protocolExtensions &);
    int protocolExtensions_is_present() const;
    void omit_protocolExtensions();
private:
    OSS_UINT32 bit_mask;
    protocolIEs protocolIEs_field;
    protocolExtensions protocolExtensions_field;
};

typedef rnp__shared18 rnpIu_ReleaseRequest;

class OSS_PUBLIC rnp__shared24;

class OSS_PUBLIC rnp__shared25 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp__shared24 component;

    rnp__shared25();
    rnp__shared25(const rnp__shared25 &);
    ~rnp__shared25();

    rnp__shared25 & operator = (const rnp__shared25 &);
    int operator == (const rnp__shared25 &) const;
    int operator != (const rnp__shared25 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp__shared25 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp__shared25 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp__shared25 *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared25 rnp_seqof83;

typedef rnp__shared6 rnp_seqof84;

class OSS_PUBLIC rnp__shared26   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp__shared25 protocolIEs;
    typedef rnp__shared6 protocolExtensions;

    rnp__shared26();
    rnp__shared26(const rnp__shared26 &);
    rnp__shared26(const protocolIEs &, const protocolExtensions &);
    rnp__shared26(const protocolIEs &);

    rnp__shared26 & operator = (const rnp__shared26 &);
    int operator == (const rnp__shared26 &) const;
    int operator != (const rnp__shared26 &) const;

    protocolIEs & get_protocolIEs();
    const protocolIEs & get_protocolIEs() const;
    void set_protocolIEs(const protocolIEs &);

    protocolExtensions *get_protocolExtensions();
    const protocolExtensions *get_protocolExtensions() const;
    void set_protocolExtensions(const protocolExtensions &);
    int protocolExtensions_is_present() const;
    void omit_protocolExtensions();
private:
    OSS_UINT32 bit_mask;
    protocolIEs protocolIEs_field;
    protocolExtensions protocolExtensions_field;
};

typedef rnp__shared26 rnpRelocationDetect;

typedef rnp__shared25 rnp_seqof85;

class OSS_PUBLIC rnp_seq87;

class OSS_PUBLIC rnp_seqof86 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq87 component;

    rnp_seqof86();
    rnp_seqof86(const rnp_seqof86 &);
    ~rnp_seqof86();

    rnp_seqof86 & operator = (const rnp_seqof86 &);
    int operator == (const rnp_seqof86 &) const;
    int operator != (const rnp_seqof86 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof86 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof86 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof86 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpRelocationComplete   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp__shared25 protocolIEs;
    typedef rnp_seqof86 protocolExtensions;

    rnpRelocationComplete();
    rnpRelocationComplete(const rnpRelocationComplete &);
    rnpRelocationComplete(const protocolIEs &, const protocolExtensions &);
    rnpRelocationComplete(const protocolIEs &);

    rnpRelocationComplete & operator = (const rnpRelocationComplete &);
    int operator == (const rnpRelocationComplete &) const;
    int operator != (const rnpRelocationComplete &) const;

    protocolIEs & get_protocolIEs();
    const protocolIEs & get_protocolIEs() const;
    void set_protocolIEs(const protocolIEs &);

    protocolExtensions *get_protocolExtensions();
    const protocolExtensions *get_protocolExtensions() const;
    void set_protocolExtensions(const protocolExtensions &);
    int protocolExtensions_is_present() const;
    void omit_protocolExtensions();
private:
    OSS_UINT32 bit_mask;
    protocolIEs protocolIEs_field;
    protocolExtensions protocolExtensions_field;
};

class OSS_PUBLIC rnp_seq103;

class OSS_PUBLIC rnp_seqof102 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq103 component;

    rnp_seqof102();
    rnp_seqof102(const rnp_seqof102 &);
    ~rnp_seqof102();

    rnp_seqof102 & operator = (const rnp_seqof102 &);
    int operator == (const rnp_seqof102 &) const;
    int operator != (const rnp_seqof102 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof102 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof102 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof102 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnp_seq104;

class OSS_PUBLIC rnp_seqof103 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq104 component;

    rnp_seqof103();
    rnp_seqof103(const rnp_seqof103 &);
    ~rnp_seqof103();

    rnp_seqof103 & operator = (const rnp_seqof103 &);
    int operator == (const rnp_seqof103 &) const;
    int operator != (const rnp_seqof103 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof103 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof103 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof103 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpPaging   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp_seqof102 protocolIEs;
    typedef rnp_seqof103 protocolExtensions;

    rnpPaging();
    rnpPaging(const rnpPaging &);
    rnpPaging(const protocolIEs &, const protocolExtensions &);
    rnpPaging(const protocolIEs &);

    rnpPaging & operator = (const rnpPaging &);
    int operator == (const rnpPaging &) const;
    int operator != (const rnpPaging &) const;

    protocolIEs & get_protocolIEs();
    const protocolIEs & get_protocolIEs() const;
    void set_protocolIEs(const protocolIEs &);

    protocolExtensions *get_protocolExtensions();
    const protocolExtensions *get_protocolExtensions() const;
    void set_protocolExtensions(const protocolExtensions &);
    int protocolExtensions_is_present() const;
    void omit_protocolExtensions();
private:
    OSS_UINT32 bit_mask;
    protocolIEs protocolIEs_field;
    protocolExtensions protocolExtensions_field;
};

class OSS_PUBLIC rnp_seq105;

class OSS_PUBLIC rnp_seqof104 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq105 component;

    rnp_seqof104();
    rnp_seqof104(const rnp_seqof104 &);
    ~rnp_seqof104();

    rnp_seqof104 & operator = (const rnp_seqof104 &);
    int operator == (const rnp_seqof104 &) const;
    int operator != (const rnp_seqof104 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof104 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof104 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof104 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnp_seq106;

class OSS_PUBLIC rnp_seqof105 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq106 component;

    rnp_seqof105();
    rnp_seqof105(const rnp_seqof105 &);
    ~rnp_seqof105();

    rnp_seqof105 & operator = (const rnp_seqof105 &);
    int operator == (const rnp_seqof105 &) const;
    int operator != (const rnp_seqof105 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof105 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof105 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof105 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpCommonID   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp_seqof104 protocolIEs;
    typedef rnp_seqof105 protocolExtensions;

    rnpCommonID();
    rnpCommonID(const rnpCommonID &);
    rnpCommonID(const protocolIEs &, const protocolExtensions &);
    rnpCommonID(const protocolIEs &);

    rnpCommonID & operator = (const rnpCommonID &);
    int operator == (const rnpCommonID &) const;
    int operator != (const rnpCommonID &) const;

    protocolIEs & get_protocolIEs();
    const protocolIEs & get_protocolIEs() const;
    void set_protocolIEs(const protocolIEs &);

    protocolExtensions *get_protocolExtensions();
    const protocolExtensions *get_protocolExtensions() const;
    void set_protocolExtensions(const protocolExtensions &);
    int protocolExtensions_is_present() const;
    void omit_protocolExtensions();
private:
    OSS_UINT32 bit_mask;
    protocolIEs protocolIEs_field;
    protocolExtensions protocolExtensions_field;
};

class OSS_PUBLIC rnp_seq107;

class OSS_PUBLIC rnp_seqof106 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq107 component;

    rnp_seqof106();
    rnp_seqof106(const rnp_seqof106 &);
    ~rnp_seqof106();

    rnp_seqof106 & operator = (const rnp_seqof106 &);
    int operator == (const rnp_seqof106 &) const;
    int operator != (const rnp_seqof106 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof106 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof106 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof106 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnp_seq108;

class OSS_PUBLIC rnp_seqof107 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq108 component;

    rnp_seqof107();
    rnp_seqof107(const rnp_seqof107 &);
    ~rnp_seqof107();

    rnp_seqof107 & operator = (const rnp_seqof107 &);
    int operator == (const rnp_seqof107 &) const;
    int operator != (const rnp_seqof107 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof107 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof107 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof107 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpCN_InvokeTrace   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp_seqof106 protocolIEs;
    typedef rnp_seqof107 protocolExtensions;

    rnpCN_InvokeTrace();
    rnpCN_InvokeTrace(const rnpCN_InvokeTrace &);
    rnpCN_InvokeTrace(const protocolIEs &, const protocolExtensions &);
    rnpCN_InvokeTrace(const protocolIEs &);

    rnpCN_InvokeTrace & operator = (const rnpCN_InvokeTrace &);
    int operator == (const rnpCN_InvokeTrace &) const;
    int operator != (const rnpCN_InvokeTrace &) const;

    protocolIEs & get_protocolIEs();
    const protocolIEs & get_protocolIEs() const;
    void set_protocolIEs(const protocolIEs &);

    protocolExtensions *get_protocolExtensions();
    const protocolExtensions *get_protocolExtensions() const;
    void set_protocolExtensions(const protocolExtensions &);
    int protocolExtensions_is_present() const;
    void omit_protocolExtensions();
private:
    OSS_UINT32 bit_mask;
    protocolIEs protocolIEs_field;
    protocolExtensions protocolExtensions_field;
};

class OSS_PUBLIC rnp_seq109;

class OSS_PUBLIC rnp_seqof108 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq109 component;

    rnp_seqof108();
    rnp_seqof108(const rnp_seqof108 &);
    ~rnp_seqof108();

    rnp_seqof108 & operator = (const rnp_seqof108 &);
    int operator == (const rnp_seqof108 &) const;
    int operator != (const rnp_seqof108 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof108 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof108 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof108 *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared6 rnp_seqof109;

class OSS_PUBLIC rnpCN_DeactivateTrace   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp_seqof108 protocolIEs;
    typedef rnp__shared6 protocolExtensions;

    rnpCN_DeactivateTrace();
    rnpCN_DeactivateTrace(const rnpCN_DeactivateTrace &);
    rnpCN_DeactivateTrace(const protocolIEs &, const protocolExtensions &);
    rnpCN_DeactivateTrace(const protocolIEs &);

    rnpCN_DeactivateTrace & operator = (const rnpCN_DeactivateTrace &);
    int operator == (const rnpCN_DeactivateTrace &) const;
    int operator != (const rnpCN_DeactivateTrace &) const;

    protocolIEs & get_protocolIEs();
    const protocolIEs & get_protocolIEs() const;
    void set_protocolIEs(const protocolIEs &);

    protocolExtensions *get_protocolExtensions();
    const protocolExtensions *get_protocolExtensions() const;
    void set_protocolExtensions(const protocolExtensions &);
    int protocolExtensions_is_present() const;
    void omit_protocolExtensions();
private:
    OSS_UINT32 bit_mask;
    protocolIEs protocolIEs_field;
    protocolExtensions protocolExtensions_field;
};

class OSS_PUBLIC rnp_seq111;

class OSS_PUBLIC rnp_seqof110 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq111 component;

    rnp_seqof110();
    rnp_seqof110(const rnp_seqof110 &);
    ~rnp_seqof110();

    rnp_seqof110 & operator = (const rnp_seqof110 &);
    int operator == (const rnp_seqof110 &) const;
    int operator != (const rnp_seqof110 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof110 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof110 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof110 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnp_seq112;

class OSS_PUBLIC rnp_seqof111 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq112 component;

    rnp_seqof111();
    rnp_seqof111(const rnp_seqof111 &);
    ~rnp_seqof111();

    rnp_seqof111 & operator = (const rnp_seqof111 &);
    int operator == (const rnp_seqof111 &) const;
    int operator != (const rnp_seqof111 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof111 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof111 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof111 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpLocationReportingControl   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp_seqof110 protocolIEs;
    typedef rnp_seqof111 protocolExtensions;

    rnpLocationReportingControl();
    rnpLocationReportingControl(const rnpLocationReportingControl &);
    rnpLocationReportingControl(const protocolIEs &, const protocolExtensions &);
    rnpLocationReportingControl(const protocolIEs &);

    rnpLocationReportingControl & operator = (const rnpLocationReportingControl &);
    int operator == (const rnpLocationReportingControl &) const;
    int operator != (const rnpLocationReportingControl &) const;

    protocolIEs & get_protocolIEs();
    const protocolIEs & get_protocolIEs() const;
    void set_protocolIEs(const protocolIEs &);

    protocolExtensions *get_protocolExtensions();
    const protocolExtensions *get_protocolExtensions() const;
    void set_protocolExtensions(const protocolExtensions &);
    int protocolExtensions_is_present() const;
    void omit_protocolExtensions();
private:
    OSS_UINT32 bit_mask;
    protocolIEs protocolIEs_field;
    protocolExtensions protocolExtensions_field;
};

class OSS_PUBLIC rnp_seq113;

class OSS_PUBLIC rnp_seqof112 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq113 component;

    rnp_seqof112();
    rnp_seqof112(const rnp_seqof112 &);
    ~rnp_seqof112();

    rnp_seqof112 & operator = (const rnp_seqof112 &);
    int operator == (const rnp_seqof112 &) const;
    int operator != (const rnp_seqof112 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof112 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof112 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof112 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnp_seq114;

class OSS_PUBLIC rnp_seqof113 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq114 component;

    rnp_seqof113();
    rnp_seqof113(const rnp_seqof113 &);
    ~rnp_seqof113();

    rnp_seqof113 & operator = (const rnp_seqof113 &);
    int operator == (const rnp_seqof113 &) const;
    int operator != (const rnp_seqof113 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof113 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof113 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof113 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpLocationReport   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp_seqof112 protocolIEs;
    typedef rnp_seqof113 protocolExtensions;

    rnpLocationReport();
    rnpLocationReport(const rnpLocationReport &);
    rnpLocationReport(const protocolIEs &, const protocolExtensions &);
    rnpLocationReport(const protocolIEs &);

    rnpLocationReport & operator = (const rnpLocationReport &);
    int operator == (const rnpLocationReport &) const;
    int operator != (const rnpLocationReport &) const;

    protocolIEs & get_protocolIEs();
    const protocolIEs & get_protocolIEs() const;
    void set_protocolIEs(const protocolIEs &);

    protocolExtensions *get_protocolExtensions();
    const protocolExtensions *get_protocolExtensions() const;
    void set_protocolExtensions(const protocolExtensions &);
    int protocolExtensions_is_present() const;
    void omit_protocolExtensions();
private:
    OSS_UINT32 bit_mask;
    protocolIEs protocolIEs_field;
    protocolExtensions protocolExtensions_field;
};

class OSS_PUBLIC rnp_seq115;

class OSS_PUBLIC rnp_seqof114 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq115 component;

    rnp_seqof114();
    rnp_seqof114(const rnp_seqof114 &);
    ~rnp_seqof114();

    rnp_seqof114 & operator = (const rnp_seqof114 &);
    int operator == (const rnp_seqof114 &) const;
    int operator != (const rnp_seqof114 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof114 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof114 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof114 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnp_seq116;

class OSS_PUBLIC rnp_seqof115 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq116 component;

    rnp_seqof115();
    rnp_seqof115(const rnp_seqof115 &);
    ~rnp_seqof115();

    rnp_seqof115 & operator = (const rnp_seqof115 &);
    int operator == (const rnp_seqof115 &) const;
    int operator != (const rnp_seqof115 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof115 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof115 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof115 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpInitialUE_Message   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp_seqof114 protocolIEs;
    typedef rnp_seqof115 protocolExtensions;

    rnpInitialUE_Message();
    rnpInitialUE_Message(const rnpInitialUE_Message &);
    rnpInitialUE_Message(const protocolIEs &, const protocolExtensions &);
    rnpInitialUE_Message(const protocolIEs &);

    rnpInitialUE_Message & operator = (const rnpInitialUE_Message &);
    int operator == (const rnpInitialUE_Message &) const;
    int operator != (const rnpInitialUE_Message &) const;

    protocolIEs & get_protocolIEs();
    const protocolIEs & get_protocolIEs() const;
    void set_protocolIEs(const protocolIEs &);

    protocolExtensions *get_protocolExtensions();
    const protocolExtensions *get_protocolExtensions() const;
    void set_protocolExtensions(const protocolExtensions &);
    int protocolExtensions_is_present() const;
    void omit_protocolExtensions();
private:
    OSS_UINT32 bit_mask;
    protocolIEs protocolIEs_field;
    protocolExtensions protocolExtensions_field;
};

class OSS_PUBLIC rnp_seq117;

class OSS_PUBLIC rnp_seqof116 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq117 component;

    rnp_seqof116();
    rnp_seqof116(const rnp_seqof116 &);
    ~rnp_seqof116();

    rnp_seqof116 & operator = (const rnp_seqof116 &);
    int operator == (const rnp_seqof116 &) const;
    int operator != (const rnp_seqof116 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof116 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof116 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof116 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnp_seq118;

class OSS_PUBLIC rnp_seqof117 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq118 component;

    rnp_seqof117();
    rnp_seqof117(const rnp_seqof117 &);
    ~rnp_seqof117();

    rnp_seqof117 & operator = (const rnp_seqof117 &);
    int operator == (const rnp_seqof117 &) const;
    int operator != (const rnp_seqof117 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof117 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof117 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof117 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpDirectTransfer   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp_seqof116 protocolIEs;
    typedef rnp_seqof117 protocolExtensions;

    rnpDirectTransfer();
    rnpDirectTransfer(const rnpDirectTransfer &);
    rnpDirectTransfer(const protocolIEs &, const protocolExtensions &);
    rnpDirectTransfer(const protocolIEs &);

    rnpDirectTransfer & operator = (const rnpDirectTransfer &);
    int operator == (const rnpDirectTransfer &) const;
    int operator != (const rnpDirectTransfer &) const;

    protocolIEs & get_protocolIEs();
    const protocolIEs & get_protocolIEs() const;
    void set_protocolIEs(const protocolIEs &);

    protocolExtensions *get_protocolExtensions();
    const protocolExtensions *get_protocolExtensions() const;
    void set_protocolExtensions(const protocolExtensions &);
    int protocolExtensions_is_present() const;
    void omit_protocolExtensions();
private:
    OSS_UINT32 bit_mask;
    protocolIEs protocolIEs_field;
    protocolExtensions protocolExtensions_field;
};

class OSS_PUBLIC rnp_seq120;

class OSS_PUBLIC rnp_seqof118 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq120 component;

    rnp_seqof118();
    rnp_seqof118(const rnp_seqof118 &);
    ~rnp_seqof118();

    rnp_seqof118 & operator = (const rnp_seqof118 &);
    int operator == (const rnp_seqof118 &) const;
    int operator != (const rnp_seqof118 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof118 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof118 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof118 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnp_seq121;

class OSS_PUBLIC rnp_seqof119 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq121 component;

    rnp_seqof119();
    rnp_seqof119(const rnp_seqof119 &);
    ~rnp_seqof119();

    rnp_seqof119 & operator = (const rnp_seqof119 &);
    int operator == (const rnp_seqof119 &) const;
    int operator != (const rnp_seqof119 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof119 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof119 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof119 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpOverload   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp_seqof118 protocolIEs;
    typedef rnp_seqof119 protocolExtensions;

    rnpOverload();
    rnpOverload(const rnpOverload &);
    rnpOverload(const protocolIEs &, const protocolExtensions &);
    rnpOverload(const protocolIEs &);

    rnpOverload & operator = (const rnpOverload &);
    int operator == (const rnpOverload &) const;
    int operator != (const rnpOverload &) const;

    protocolIEs & get_protocolIEs();
    const protocolIEs & get_protocolIEs() const;
    void set_protocolIEs(const protocolIEs &);

    protocolExtensions *get_protocolExtensions();
    const protocolExtensions *get_protocolExtensions() const;
    void set_protocolExtensions(const protocolExtensions &);
    int protocolExtensions_is_present() const;
    void omit_protocolExtensions();
private:
    OSS_UINT32 bit_mask;
    protocolIEs protocolIEs_field;
    protocolExtensions protocolExtensions_field;
};

class OSS_PUBLIC rnp_seq122;

class OSS_PUBLIC rnp_seqof120 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq122 component;

    rnp_seqof120();
    rnp_seqof120(const rnp_seqof120 &);
    ~rnp_seqof120();

    rnp_seqof120 & operator = (const rnp_seqof120 &);
    int operator == (const rnp_seqof120 &) const;
    int operator != (const rnp_seqof120 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof120 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof120 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof120 *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared21 rnp_seqof121;

class OSS_PUBLIC rnpErrorIndication   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp_seqof120 protocolIEs;
    typedef rnp__shared21 protocolExtensions;

    rnpErrorIndication();
    rnpErrorIndication(const rnpErrorIndication &);
    rnpErrorIndication(const protocolIEs &, const protocolExtensions &);
    rnpErrorIndication(const protocolIEs &);

    rnpErrorIndication & operator = (const rnpErrorIndication &);
    int operator == (const rnpErrorIndication &) const;
    int operator != (const rnpErrorIndication &) const;

    protocolIEs & get_protocolIEs();
    const protocolIEs & get_protocolIEs() const;
    void set_protocolIEs(const protocolIEs &);

    protocolExtensions *get_protocolExtensions();
    const protocolExtensions *get_protocolExtensions() const;
    void set_protocolExtensions(const protocolExtensions &);
    int protocolExtensions_is_present() const;
    void omit_protocolExtensions();
private:
    OSS_UINT32 bit_mask;
    protocolIEs protocolIEs_field;
    protocolExtensions protocolExtensions_field;
};

class OSS_PUBLIC rnp_seq124;

class OSS_PUBLIC rnp_seqof122 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq124 component;

    rnp_seqof122();
    rnp_seqof122(const rnp_seqof122 &);
    ~rnp_seqof122();

    rnp_seqof122 & operator = (const rnp_seqof122 &);
    int operator == (const rnp_seqof122 &) const;
    int operator != (const rnp_seqof122 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof122 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof122 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof122 *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared6 rnp_seqof123;

class OSS_PUBLIC rnpSRNS_DataForwardCommand   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp_seqof122 protocolIEs;
    typedef rnp__shared6 protocolExtensions;

    rnpSRNS_DataForwardCommand();
    rnpSRNS_DataForwardCommand(const rnpSRNS_DataForwardCommand &);
    rnpSRNS_DataForwardCommand(const protocolIEs &, const protocolExtensions &);
    rnpSRNS_DataForwardCommand(const protocolIEs &);

    rnpSRNS_DataForwardCommand & operator = (const rnpSRNS_DataForwardCommand &);
    int operator == (const rnpSRNS_DataForwardCommand &) const;
    int operator != (const rnpSRNS_DataForwardCommand &) const;

    protocolIEs & get_protocolIEs();
    const protocolIEs & get_protocolIEs() const;
    void set_protocolIEs(const protocolIEs &);

    protocolExtensions *get_protocolExtensions();
    const protocolExtensions *get_protocolExtensions() const;
    void set_protocolExtensions(const protocolExtensions &);
    int protocolExtensions_is_present() const;
    void omit_protocolExtensions();
private:
    OSS_UINT32 bit_mask;
    protocolIEs protocolIEs_field;
    protocolExtensions protocolExtensions_field;
};

class OSS_PUBLIC rnp_seq126;

class OSS_PUBLIC rnp_seqof124 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq126 component;

    rnp_seqof124();
    rnp_seqof124(const rnp_seqof124 &);
    ~rnp_seqof124();

    rnp_seqof124 & operator = (const rnp_seqof124 &);
    int operator == (const rnp_seqof124 &) const;
    int operator != (const rnp_seqof124 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof124 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof124 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof124 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnp_seq127;

class OSS_PUBLIC rnp_seqof125 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq127 component;

    rnp_seqof125();
    rnp_seqof125(const rnp_seqof125 &);
    ~rnp_seqof125();

    rnp_seqof125 & operator = (const rnp_seqof125 &);
    int operator == (const rnp_seqof125 &) const;
    int operator != (const rnp_seqof125 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof125 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof125 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof125 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpForwardSRNS_Context   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp_seqof124 protocolIEs;
    typedef rnp_seqof125 protocolExtensions;

    rnpForwardSRNS_Context();
    rnpForwardSRNS_Context(const rnpForwardSRNS_Context &);
    rnpForwardSRNS_Context(const protocolIEs &, const protocolExtensions &);
    rnpForwardSRNS_Context(const protocolIEs &);

    rnpForwardSRNS_Context & operator = (const rnpForwardSRNS_Context &);
    int operator == (const rnpForwardSRNS_Context &) const;
    int operator != (const rnpForwardSRNS_Context &) const;

    protocolIEs & get_protocolIEs();
    const protocolIEs & get_protocolIEs() const;
    void set_protocolIEs(const protocolIEs &);

    protocolExtensions *get_protocolExtensions();
    const protocolExtensions *get_protocolExtensions() const;
    void set_protocolExtensions(const protocolExtensions &);
    int protocolExtensions_is_present() const;
    void omit_protocolExtensions();
private:
    OSS_UINT32 bit_mask;
    protocolIEs protocolIEs_field;
    protocolExtensions protocolExtensions_field;
};

class OSS_PUBLIC rnpPrivateIE_Field;

class OSS_PUBLIC rnp_seqof143 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnpPrivateIE_Field component;

    rnp_seqof143();
    rnp_seqof143(const rnp_seqof143 &);
    ~rnp_seqof143();

    rnp_seqof143 & operator = (const rnp_seqof143 &);
    int operator == (const rnp_seqof143 &) const;
    int operator != (const rnp_seqof143 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof143 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof143 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof143 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpPrivateMessage   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp_seqof143 privateIEs;

    rnpPrivateMessage();
    rnpPrivateMessage(const rnpPrivateMessage &);
    rnpPrivateMessage(const privateIEs &);

    rnpPrivateMessage & operator = (const rnpPrivateMessage &);
    int operator == (const rnpPrivateMessage &) const;
    int operator != (const rnpPrivateMessage &) const;

    privateIEs & get_privateIEs();
    const privateIEs & get_privateIEs() const;
    void set_privateIEs(const privateIEs &);
private:
    privateIEs privateIEs_field;
};

class OSS_PUBLIC rnp_seq145;

class OSS_PUBLIC rnp_seqof144 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq145 component;

    rnp_seqof144();
    rnp_seqof144(const rnp_seqof144 &);
    ~rnp_seqof144();

    rnp_seqof144 & operator = (const rnp_seqof144 &);
    int operator == (const rnp_seqof144 &) const;
    int operator != (const rnp_seqof144 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof144 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof144 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof144 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnp_seq146;

class OSS_PUBLIC rnp_seqof145 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq146 component;

    rnp_seqof145();
    rnp_seqof145(const rnp_seqof145 &);
    ~rnp_seqof145();

    rnp_seqof145 & operator = (const rnp_seqof145 &);
    int operator == (const rnp_seqof145 &) const;
    int operator != (const rnp_seqof145 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof145 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof145 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof145 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpRANAP_RelocationInformation   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp_seqof144 protocolIEs;
    typedef rnp_seqof145 protocolExtensions;

    rnpRANAP_RelocationInformation();
    rnpRANAP_RelocationInformation(const rnpRANAP_RelocationInformation &);
    rnpRANAP_RelocationInformation(const protocolIEs &, const protocolExtensions &);
    rnpRANAP_RelocationInformation(const protocolIEs &);

    rnpRANAP_RelocationInformation & operator = (const rnpRANAP_RelocationInformation &);
    int operator == (const rnpRANAP_RelocationInformation &) const;
    int operator != (const rnpRANAP_RelocationInformation &) const;

    protocolIEs & get_protocolIEs();
    const protocolIEs & get_protocolIEs() const;
    void set_protocolIEs(const protocolIEs &);

    protocolExtensions *get_protocolExtensions();
    const protocolExtensions *get_protocolExtensions() const;
    void set_protocolExtensions(const protocolExtensions &);
    int protocolExtensions_is_present() const;
    void omit_protocolExtensions();
private:
    OSS_UINT32 bit_mask;
    protocolIEs protocolIEs_field;
    protocolExtensions protocolExtensions_field;
};

class OSS_PUBLIC rnp_seq128;

class OSS_PUBLIC rnp_seqof126 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq128 component;

    rnp_seqof126();
    rnp_seqof126(const rnp_seqof126 &);
    ~rnp_seqof126();

    rnp_seqof126 & operator = (const rnp_seqof126 &);
    int operator == (const rnp_seqof126 &) const;
    int operator != (const rnp_seqof126 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof126 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof126 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof126 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnp_seq129;

class OSS_PUBLIC rnp_seqof127 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq129 component;

    rnp_seqof127();
    rnp_seqof127(const rnp_seqof127 &);
    ~rnp_seqof127();

    rnp_seqof127 & operator = (const rnp_seqof127 &);
    int operator == (const rnp_seqof127 &) const;
    int operator != (const rnp_seqof127 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof127 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof127 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof127 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpRAB_AssignmentRequest   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp_seqof126 protocolIEs;
    typedef rnp_seqof127 protocolExtensions;

    rnpRAB_AssignmentRequest();
    rnpRAB_AssignmentRequest(const rnpRAB_AssignmentRequest &);
    rnpRAB_AssignmentRequest(const protocolIEs &, const protocolExtensions &);
    rnpRAB_AssignmentRequest(const protocolIEs &);

    rnpRAB_AssignmentRequest & operator = (const rnpRAB_AssignmentRequest &);
    int operator == (const rnpRAB_AssignmentRequest &) const;
    int operator != (const rnpRAB_AssignmentRequest &) const;

    protocolIEs & get_protocolIEs();
    const protocolIEs & get_protocolIEs() const;
    void set_protocolIEs(const protocolIEs &);

    protocolExtensions *get_protocolExtensions();
    const protocolExtensions *get_protocolExtensions() const;
    void set_protocolExtensions(const protocolExtensions &);
    int protocolExtensions_is_present() const;
    void omit_protocolExtensions();
private:
    OSS_UINT32 bit_mask;
    protocolIEs protocolIEs_field;
    protocolExtensions protocolExtensions_field;
};

class OSS_PUBLIC rnpRANAP_ELEMENTARY_PROCEDURES_InitiatingMessage : public OssConstrainedOpenType
{
public:
    rnpRANAP_ELEMENTARY_PROCEDURES_InitiatingMessage();
    rnpRANAP_ELEMENTARY_PROCEDURES_InitiatingMessage(const rnpRANAP_ELEMENTARY_PROCEDURES_InitiatingMessage &);
    ~rnpRANAP_ELEMENTARY_PROCEDURES_InitiatingMessage();
    rnpRANAP_ELEMENTARY_PROCEDURES_InitiatingMessage & operator = (const rnpRANAP_ELEMENTARY_PROCEDURES_InitiatingMessage &);
    int operator == (const rnpRANAP_ELEMENTARY_PROCEDURES_InitiatingMessage &) const;
    int operator != (const rnpRANAP_ELEMENTARY_PROCEDURES_InitiatingMessage &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpIu_ReleaseCommand *get_rnpIu_ReleaseCommand();
    const rnpIu_ReleaseCommand *get_rnpIu_ReleaseCommand() const;
    void set_rnpIu_ReleaseCommand(const rnpIu_ReleaseCommand &);
    rnpIu_ReleaseCommand *release_rnpIu_ReleaseCommand();
    void set_rnpIu_ReleaseCommand(rnpIu_ReleaseCommand *);

    rnpRelocationRequired *get_rnpRelocationRequired();
    const rnpRelocationRequired *get_rnpRelocationRequired() const;
    void set_rnpRelocationRequired(const rnpRelocationRequired &);
    rnpRelocationRequired *release_rnpRelocationRequired();
    void set_rnpRelocationRequired(rnpRelocationRequired *);

    rnpRelocationRequest *get_rnpRelocationRequest();
    const rnpRelocationRequest *get_rnpRelocationRequest() const;
    void set_rnpRelocationRequest(const rnpRelocationRequest &);
    rnpRelocationRequest *release_rnpRelocationRequest();
    void set_rnpRelocationRequest(rnpRelocationRequest *);

    rnp__shared18 *get_rnpRelocationCancel();
    const rnp__shared18 *get_rnpRelocationCancel() const;
    void set_rnpRelocationCancel(const rnp__shared18 &);
    rnp__shared18 *release_rnpRelocationCancel();
    void set_rnpRelocationCancel(rnp__shared18 *);

    rnpSRNS_ContextRequest *get_rnpSRNS_ContextRequest();
    const rnpSRNS_ContextRequest *get_rnpSRNS_ContextRequest() const;
    void set_rnpSRNS_ContextRequest(const rnpSRNS_ContextRequest &);
    rnpSRNS_ContextRequest *release_rnpSRNS_ContextRequest();
    void set_rnpSRNS_ContextRequest(rnpSRNS_ContextRequest *);

    rnpSecurityModeCommand *get_rnpSecurityModeCommand();
    const rnpSecurityModeCommand *get_rnpSecurityModeCommand() const;
    void set_rnpSecurityModeCommand(const rnpSecurityModeCommand &);
    rnpSecurityModeCommand *release_rnpSecurityModeCommand();
    void set_rnpSecurityModeCommand(rnpSecurityModeCommand *);

    rnpDataVolumeReportRequest *get_rnpDataVolumeReportRequest();
    const rnpDataVolumeReportRequest *get_rnpDataVolumeReportRequest() const;
    void set_rnpDataVolumeReportRequest(const rnpDataVolumeReportRequest &);
    rnpDataVolumeReportRequest *release_rnpDataVolumeReportRequest();
    void set_rnpDataVolumeReportRequest(rnpDataVolumeReportRequest *);

    rnpReset *get_rnpReset();
    const rnpReset *get_rnpReset() const;
    void set_rnpReset(const rnpReset &);
    rnpReset *release_rnpReset();
    void set_rnpReset(rnpReset *);

    rnpResetResource *get_rnpResetResource();
    const rnpResetResource *get_rnpResetResource() const;
    void set_rnpResetResource(const rnpResetResource &);
    rnpResetResource *release_rnpResetResource();
    void set_rnpResetResource(rnpResetResource *);

    rnpRAB_ReleaseRequest *get_rnpRAB_ReleaseRequest();
    const rnpRAB_ReleaseRequest *get_rnpRAB_ReleaseRequest() const;
    void set_rnpRAB_ReleaseRequest(const rnpRAB_ReleaseRequest &);
    rnpRAB_ReleaseRequest *release_rnpRAB_ReleaseRequest();
    void set_rnpRAB_ReleaseRequest(rnpRAB_ReleaseRequest *);

    rnp__shared18 *get_rnpIu_ReleaseRequest();
    const rnp__shared18 *get_rnpIu_ReleaseRequest() const;
    void set_rnpIu_ReleaseRequest(const rnp__shared18 &);
    rnp__shared18 *release_rnpIu_ReleaseRequest();
    void set_rnpIu_ReleaseRequest(rnp__shared18 *);

    rnp__shared26 *get_rnpRelocationDetect();
    const rnp__shared26 *get_rnpRelocationDetect() const;
    void set_rnpRelocationDetect(const rnp__shared26 &);
    rnp__shared26 *release_rnpRelocationDetect();
    void set_rnpRelocationDetect(rnp__shared26 *);

    rnpRelocationComplete *get_rnpRelocationComplete();
    const rnpRelocationComplete *get_rnpRelocationComplete() const;
    void set_rnpRelocationComplete(const rnpRelocationComplete &);
    rnpRelocationComplete *release_rnpRelocationComplete();
    void set_rnpRelocationComplete(rnpRelocationComplete *);

    rnpPaging *get_rnpPaging();
    const rnpPaging *get_rnpPaging() const;
    void set_rnpPaging(const rnpPaging &);
    rnpPaging *release_rnpPaging();
    void set_rnpPaging(rnpPaging *);

    rnpCommonID *get_rnpCommonID();
    const rnpCommonID *get_rnpCommonID() const;
    void set_rnpCommonID(const rnpCommonID &);
    rnpCommonID *release_rnpCommonID();
    void set_rnpCommonID(rnpCommonID *);

    rnpCN_InvokeTrace *get_rnpCN_InvokeTrace();
    const rnpCN_InvokeTrace *get_rnpCN_InvokeTrace() const;
    void set_rnpCN_InvokeTrace(const rnpCN_InvokeTrace &);
    rnpCN_InvokeTrace *release_rnpCN_InvokeTrace();
    void set_rnpCN_InvokeTrace(rnpCN_InvokeTrace *);

    rnpCN_DeactivateTrace *get_rnpCN_DeactivateTrace();
    const rnpCN_DeactivateTrace *get_rnpCN_DeactivateTrace() const;
    void set_rnpCN_DeactivateTrace(const rnpCN_DeactivateTrace &);
    rnpCN_DeactivateTrace *release_rnpCN_DeactivateTrace();
    void set_rnpCN_DeactivateTrace(rnpCN_DeactivateTrace *);

    rnpLocationReportingControl *get_rnpLocationReportingControl();
    const rnpLocationReportingControl *get_rnpLocationReportingControl() const;
    void set_rnpLocationReportingControl(const rnpLocationReportingControl &);
    rnpLocationReportingControl *release_rnpLocationReportingControl();
    void set_rnpLocationReportingControl(rnpLocationReportingControl *);

    rnpLocationReport *get_rnpLocationReport();
    const rnpLocationReport *get_rnpLocationReport() const;
    void set_rnpLocationReport(const rnpLocationReport &);
    rnpLocationReport *release_rnpLocationReport();
    void set_rnpLocationReport(rnpLocationReport *);

    rnpInitialUE_Message *get_rnpInitialUE_Message();
    const rnpInitialUE_Message *get_rnpInitialUE_Message() const;
    void set_rnpInitialUE_Message(const rnpInitialUE_Message &);
    rnpInitialUE_Message *release_rnpInitialUE_Message();
    void set_rnpInitialUE_Message(rnpInitialUE_Message *);

    rnpDirectTransfer *get_rnpDirectTransfer();
    const rnpDirectTransfer *get_rnpDirectTransfer() const;
    void set_rnpDirectTransfer(const rnpDirectTransfer &);
    rnpDirectTransfer *release_rnpDirectTransfer();
    void set_rnpDirectTransfer(rnpDirectTransfer *);

    rnpOverload *get_rnpOverload();
    const rnpOverload *get_rnpOverload() const;
    void set_rnpOverload(const rnpOverload &);
    rnpOverload *release_rnpOverload();
    void set_rnpOverload(rnpOverload *);

    rnpErrorIndication *get_rnpErrorIndication();
    const rnpErrorIndication *get_rnpErrorIndication() const;
    void set_rnpErrorIndication(const rnpErrorIndication &);
    rnpErrorIndication *release_rnpErrorIndication();
    void set_rnpErrorIndication(rnpErrorIndication *);

    rnpSRNS_DataForwardCommand *get_rnpSRNS_DataForwardCommand();
    const rnpSRNS_DataForwardCommand *get_rnpSRNS_DataForwardCommand() const;
    void set_rnpSRNS_DataForwardCommand(const rnpSRNS_DataForwardCommand &);
    rnpSRNS_DataForwardCommand *release_rnpSRNS_DataForwardCommand();
    void set_rnpSRNS_DataForwardCommand(rnpSRNS_DataForwardCommand *);

    rnpForwardSRNS_Context *get_rnpForwardSRNS_Context();
    const rnpForwardSRNS_Context *get_rnpForwardSRNS_Context() const;
    void set_rnpForwardSRNS_Context(const rnpForwardSRNS_Context &);
    rnpForwardSRNS_Context *release_rnpForwardSRNS_Context();
    void set_rnpForwardSRNS_Context(rnpForwardSRNS_Context *);

    rnpPrivateMessage *get_rnpPrivateMessage();
    const rnpPrivateMessage *get_rnpPrivateMessage() const;
    void set_rnpPrivateMessage(const rnpPrivateMessage &);
    rnpPrivateMessage *release_rnpPrivateMessage();
    void set_rnpPrivateMessage(rnpPrivateMessage *);

    rnpRANAP_RelocationInformation *get_rnpRANAP_RelocationInformation();
    const rnpRANAP_RelocationInformation *get_rnpRANAP_RelocationInformation() const;
    void set_rnpRANAP_RelocationInformation(const rnpRANAP_RelocationInformation &);
    rnpRANAP_RelocationInformation *release_rnpRANAP_RelocationInformation();
    void set_rnpRANAP_RelocationInformation(rnpRANAP_RelocationInformation *);

    rnpRAB_AssignmentRequest *get_rnpRAB_AssignmentRequest();
    const rnpRAB_AssignmentRequest *get_rnpRAB_AssignmentRequest() const;
    void set_rnpRAB_AssignmentRequest(const rnpRAB_AssignmentRequest &);
    rnpRAB_AssignmentRequest *release_rnpRAB_AssignmentRequest();
    void set_rnpRAB_AssignmentRequest(rnpRAB_AssignmentRequest *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnpInitiatingMessage   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 procedureCode;
    typedef enum rnpCriticality criticality;
    typedef rnpRANAP_ELEMENTARY_PROCEDURES_InitiatingMessage value;

    rnpInitiatingMessage();
    rnpInitiatingMessage(const rnpInitiatingMessage &);
    rnpInitiatingMessage(procedureCode, criticality, const value &);

    rnpInitiatingMessage & operator = (const rnpInitiatingMessage &);
    int operator == (const rnpInitiatingMessage &) const;
    int operator != (const rnpInitiatingMessage &) const;

    procedureCode & get_procedureCode();
    procedureCode get_procedureCode() const;
    void set_procedureCode(procedureCode);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    procedureCode procedureCode_field;
    criticality criticality_field;
    value value_field;
};

class OSS_PUBLIC rnp_seq3;

class OSS_PUBLIC rnp_seqof3 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq3 component;

    rnp_seqof3();
    rnp_seqof3(const rnp_seqof3 &);
    ~rnp_seqof3();

    rnp_seqof3 & operator = (const rnp_seqof3 &);
    int operator == (const rnp_seqof3 &) const;
    int operator != (const rnp_seqof3 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof3 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof3 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof3 *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared6 rnp_seqof4;

class OSS_PUBLIC rnpIu_ReleaseComplete   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp_seqof3 protocolIEs;
    typedef rnp__shared6 protocolExtensions;

    rnpIu_ReleaseComplete();
    rnpIu_ReleaseComplete(const rnpIu_ReleaseComplete &);
    rnpIu_ReleaseComplete(const protocolIEs &, const protocolExtensions &);
    rnpIu_ReleaseComplete(const protocolIEs &);

    rnpIu_ReleaseComplete & operator = (const rnpIu_ReleaseComplete &);
    int operator == (const rnpIu_ReleaseComplete &) const;
    int operator != (const rnpIu_ReleaseComplete &) const;

    protocolIEs & get_protocolIEs();
    const protocolIEs & get_protocolIEs() const;
    void set_protocolIEs(const protocolIEs &);

    protocolExtensions *get_protocolExtensions();
    const protocolExtensions *get_protocolExtensions() const;
    void set_protocolExtensions(const protocolExtensions &);
    int protocolExtensions_is_present() const;
    void omit_protocolExtensions();
private:
    OSS_UINT32 bit_mask;
    protocolIEs protocolIEs_field;
    protocolExtensions protocolExtensions_field;
};

class OSS_PUBLIC rnp_seq11;

class OSS_PUBLIC rnp_seqof11 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq11 component;

    rnp_seqof11();
    rnp_seqof11(const rnp_seqof11 &);
    ~rnp_seqof11();

    rnp_seqof11 & operator = (const rnp_seqof11 &);
    int operator == (const rnp_seqof11 &) const;
    int operator != (const rnp_seqof11 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof11 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof11 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof11 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnp_seq12;

class OSS_PUBLIC rnp_seqof12 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq12 component;

    rnp_seqof12();
    rnp_seqof12(const rnp_seqof12 &);
    ~rnp_seqof12();

    rnp_seqof12 & operator = (const rnp_seqof12 &);
    int operator == (const rnp_seqof12 &) const;
    int operator != (const rnp_seqof12 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof12 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof12 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof12 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpRelocationCommand   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp_seqof11 protocolIEs;
    typedef rnp_seqof12 protocolExtensions;

    rnpRelocationCommand();
    rnpRelocationCommand(const rnpRelocationCommand &);
    rnpRelocationCommand(const protocolIEs &, const protocolExtensions &);
    rnpRelocationCommand(const protocolIEs &);

    rnpRelocationCommand & operator = (const rnpRelocationCommand &);
    int operator == (const rnpRelocationCommand &) const;
    int operator != (const rnpRelocationCommand &) const;

    protocolIEs & get_protocolIEs();
    const protocolIEs & get_protocolIEs() const;
    void set_protocolIEs(const protocolIEs &);

    protocolExtensions *get_protocolExtensions();
    const protocolExtensions *get_protocolExtensions() const;
    void set_protocolExtensions(const protocolExtensions &);
    int protocolExtensions_is_present() const;
    void omit_protocolExtensions();
private:
    OSS_UINT32 bit_mask;
    protocolIEs protocolIEs_field;
    protocolExtensions protocolExtensions_field;
};

class OSS_PUBLIC rnp_seq30;

class OSS_PUBLIC rnp_seqof29 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq30 component;

    rnp_seqof29();
    rnp_seqof29(const rnp_seqof29 &);
    ~rnp_seqof29();

    rnp_seqof29 & operator = (const rnp_seqof29 &);
    int operator == (const rnp_seqof29 &) const;
    int operator != (const rnp_seqof29 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof29 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof29 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof29 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnp_seq31;

class OSS_PUBLIC rnp_seqof30 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq31 component;

    rnp_seqof30();
    rnp_seqof30(const rnp_seqof30 &);
    ~rnp_seqof30();

    rnp_seqof30 & operator = (const rnp_seqof30 &);
    int operator == (const rnp_seqof30 &) const;
    int operator != (const rnp_seqof30 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof30 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof30 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof30 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpRelocationRequestAcknowledge   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp_seqof29 protocolIEs;
    typedef rnp_seqof30 protocolExtensions;

    rnpRelocationRequestAcknowledge();
    rnpRelocationRequestAcknowledge(const rnpRelocationRequestAcknowledge &);
    rnpRelocationRequestAcknowledge(const protocolIEs &, const protocolExtensions &);
    rnpRelocationRequestAcknowledge(const protocolIEs &);

    rnpRelocationRequestAcknowledge & operator = (const rnpRelocationRequestAcknowledge &);
    int operator == (const rnpRelocationRequestAcknowledge &) const;
    int operator != (const rnpRelocationRequestAcknowledge &) const;

    protocolIEs & get_protocolIEs();
    const protocolIEs & get_protocolIEs() const;
    void set_protocolIEs(const protocolIEs &);

    protocolExtensions *get_protocolExtensions();
    const protocolExtensions *get_protocolExtensions() const;
    void set_protocolExtensions(const protocolExtensions &);
    int protocolExtensions_is_present() const;
    void omit_protocolExtensions();
private:
    OSS_UINT32 bit_mask;
    protocolIEs protocolIEs_field;
    protocolExtensions protocolExtensions_field;
};

class OSS_PUBLIC rnp_seq40;

class OSS_PUBLIC rnp_seqof39 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq40 component;

    rnp_seqof39();
    rnp_seqof39(const rnp_seqof39 &);
    ~rnp_seqof39();

    rnp_seqof39 & operator = (const rnp_seqof39 &);
    int operator == (const rnp_seqof39 &) const;
    int operator != (const rnp_seqof39 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof39 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof39 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof39 *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared6 rnp_seqof40;

class OSS_PUBLIC rnpRelocationCancelAcknowledge   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp_seqof39 protocolIEs;
    typedef rnp__shared6 protocolExtensions;

    rnpRelocationCancelAcknowledge();
    rnpRelocationCancelAcknowledge(const rnpRelocationCancelAcknowledge &);
    rnpRelocationCancelAcknowledge(const protocolIEs &, const protocolExtensions &);
    rnpRelocationCancelAcknowledge(const protocolIEs &);

    rnpRelocationCancelAcknowledge & operator = (const rnpRelocationCancelAcknowledge &);
    int operator == (const rnpRelocationCancelAcknowledge &) const;
    int operator != (const rnpRelocationCancelAcknowledge &) const;

    protocolIEs & get_protocolIEs();
    const protocolIEs & get_protocolIEs() const;
    void set_protocolIEs(const protocolIEs &);

    protocolExtensions *get_protocolExtensions();
    const protocolExtensions *get_protocolExtensions() const;
    void set_protocolExtensions(const protocolExtensions &);
    int protocolExtensions_is_present() const;
    void omit_protocolExtensions();
private:
    OSS_UINT32 bit_mask;
    protocolIEs protocolIEs_field;
    protocolExtensions protocolExtensions_field;
};

class OSS_PUBLIC rnp_seq46;

class OSS_PUBLIC rnp_seqof45 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq46 component;

    rnp_seqof45();
    rnp_seqof45(const rnp_seqof45 &);
    ~rnp_seqof45();

    rnp_seqof45 & operator = (const rnp_seqof45 &);
    int operator == (const rnp_seqof45 &) const;
    int operator != (const rnp_seqof45 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof45 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof45 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof45 *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared6 rnp_seqof46;

class OSS_PUBLIC rnpSRNS_ContextResponse   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp_seqof45 protocolIEs;
    typedef rnp__shared6 protocolExtensions;

    rnpSRNS_ContextResponse();
    rnpSRNS_ContextResponse(const rnpSRNS_ContextResponse &);
    rnpSRNS_ContextResponse(const protocolIEs &, const protocolExtensions &);
    rnpSRNS_ContextResponse(const protocolIEs &);

    rnpSRNS_ContextResponse & operator = (const rnpSRNS_ContextResponse &);
    int operator == (const rnpSRNS_ContextResponse &) const;
    int operator != (const rnpSRNS_ContextResponse &) const;

    protocolIEs & get_protocolIEs();
    const protocolIEs & get_protocolIEs() const;
    void set_protocolIEs(const protocolIEs &);

    protocolExtensions *get_protocolExtensions();
    const protocolExtensions *get_protocolExtensions() const;
    void set_protocolExtensions(const protocolExtensions &);
    int protocolExtensions_is_present() const;
    void omit_protocolExtensions();
private:
    OSS_UINT32 bit_mask;
    protocolIEs protocolIEs_field;
    protocolExtensions protocolExtensions_field;
};

class OSS_PUBLIC rnp_seq54;

class OSS_PUBLIC rnp_seqof53 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq54 component;

    rnp_seqof53();
    rnp_seqof53(const rnp_seqof53 &);
    ~rnp_seqof53();

    rnp_seqof53 & operator = (const rnp_seqof53 &);
    int operator == (const rnp_seqof53 &) const;
    int operator != (const rnp_seqof53 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof53 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof53 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof53 *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared6 rnp_seqof54;

class OSS_PUBLIC rnpSecurityModeComplete   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp_seqof53 protocolIEs;
    typedef rnp__shared6 protocolExtensions;

    rnpSecurityModeComplete();
    rnpSecurityModeComplete(const rnpSecurityModeComplete &);
    rnpSecurityModeComplete(const protocolIEs &, const protocolExtensions &);
    rnpSecurityModeComplete(const protocolIEs &);

    rnpSecurityModeComplete & operator = (const rnpSecurityModeComplete &);
    int operator == (const rnpSecurityModeComplete &) const;
    int operator != (const rnpSecurityModeComplete &) const;

    protocolIEs & get_protocolIEs();
    const protocolIEs & get_protocolIEs() const;
    void set_protocolIEs(const protocolIEs &);

    protocolExtensions *get_protocolExtensions();
    const protocolExtensions *get_protocolExtensions() const;
    void set_protocolExtensions(const protocolExtensions &);
    int protocolExtensions_is_present() const;
    void omit_protocolExtensions();
private:
    OSS_UINT32 bit_mask;
    protocolIEs protocolIEs_field;
    protocolExtensions protocolExtensions_field;
};

class OSS_PUBLIC rnp_seq62;

class OSS_PUBLIC rnp_seqof61 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq62 component;

    rnp_seqof61();
    rnp_seqof61(const rnp_seqof61 &);
    ~rnp_seqof61();

    rnp_seqof61 & operator = (const rnp_seqof61 &);
    int operator == (const rnp_seqof61 &) const;
    int operator != (const rnp_seqof61 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof61 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof61 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof61 *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared6 rnp_seqof62;

class OSS_PUBLIC rnpDataVolumeReport   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp_seqof61 protocolIEs;
    typedef rnp__shared6 protocolExtensions;

    rnpDataVolumeReport();
    rnpDataVolumeReport(const rnpDataVolumeReport &);
    rnpDataVolumeReport(const protocolIEs &, const protocolExtensions &);
    rnpDataVolumeReport(const protocolIEs &);

    rnpDataVolumeReport & operator = (const rnpDataVolumeReport &);
    int operator == (const rnpDataVolumeReport &) const;
    int operator != (const rnpDataVolumeReport &) const;

    protocolIEs & get_protocolIEs();
    const protocolIEs & get_protocolIEs() const;
    void set_protocolIEs(const protocolIEs &);

    protocolExtensions *get_protocolExtensions();
    const protocolExtensions *get_protocolExtensions() const;
    void set_protocolExtensions(const protocolExtensions &);
    int protocolExtensions_is_present() const;
    void omit_protocolExtensions();
private:
    OSS_UINT32 bit_mask;
    protocolIEs protocolIEs_field;
    protocolExtensions protocolExtensions_field;
};

class OSS_PUBLIC rnp_seq68;

class OSS_PUBLIC rnp_seqof67 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq68 component;

    rnp_seqof67();
    rnp_seqof67(const rnp_seqof67 &);
    ~rnp_seqof67();

    rnp_seqof67 & operator = (const rnp_seqof67 &);
    int operator == (const rnp_seqof67 &) const;
    int operator != (const rnp_seqof67 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof67 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof67 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof67 *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared21 rnp_seqof68;

class OSS_PUBLIC rnpResetAcknowledge   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp_seqof67 protocolIEs;
    typedef rnp__shared21 protocolExtensions;

    rnpResetAcknowledge();
    rnpResetAcknowledge(const rnpResetAcknowledge &);
    rnpResetAcknowledge(const protocolIEs &, const protocolExtensions &);
    rnpResetAcknowledge(const protocolIEs &);

    rnpResetAcknowledge & operator = (const rnpResetAcknowledge &);
    int operator == (const rnpResetAcknowledge &) const;
    int operator != (const rnpResetAcknowledge &) const;

    protocolIEs & get_protocolIEs();
    const protocolIEs & get_protocolIEs() const;
    void set_protocolIEs(const protocolIEs &);

    protocolExtensions *get_protocolExtensions();
    const protocolExtensions *get_protocolExtensions() const;
    void set_protocolExtensions(const protocolExtensions &);
    int protocolExtensions_is_present() const;
    void omit_protocolExtensions();
private:
    OSS_UINT32 bit_mask;
    protocolIEs protocolIEs_field;
    protocolExtensions protocolExtensions_field;
};

class OSS_PUBLIC rnp_seq74;

class OSS_PUBLIC rnp_seqof73 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq74 component;

    rnp_seqof73();
    rnp_seqof73(const rnp_seqof73 &);
    ~rnp_seqof73();

    rnp_seqof73 & operator = (const rnp_seqof73 &);
    int operator == (const rnp_seqof73 &) const;
    int operator != (const rnp_seqof73 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof73 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof73 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof73 *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared21 rnp_seqof74;

class OSS_PUBLIC rnpResetResourceAcknowledge   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp_seqof73 protocolIEs;
    typedef rnp__shared21 protocolExtensions;

    rnpResetResourceAcknowledge();
    rnpResetResourceAcknowledge(const rnpResetResourceAcknowledge &);
    rnpResetResourceAcknowledge(const protocolIEs &, const protocolExtensions &);
    rnpResetResourceAcknowledge(const protocolIEs &);

    rnpResetResourceAcknowledge & operator = (const rnpResetResourceAcknowledge &);
    int operator == (const rnpResetResourceAcknowledge &) const;
    int operator != (const rnpResetResourceAcknowledge &) const;

    protocolIEs & get_protocolIEs();
    const protocolIEs & get_protocolIEs() const;
    void set_protocolIEs(const protocolIEs &);

    protocolExtensions *get_protocolExtensions();
    const protocolExtensions *get_protocolExtensions() const;
    void set_protocolExtensions(const protocolExtensions &);
    int protocolExtensions_is_present() const;
    void omit_protocolExtensions();
private:
    OSS_UINT32 bit_mask;
    protocolIEs protocolIEs_field;
    protocolExtensions protocolExtensions_field;
};

class OSS_PUBLIC rnpRANAP_ELEMENTARY_PROCEDURES_SuccessfulOutcome : public OssConstrainedOpenType
{
public:
    rnpRANAP_ELEMENTARY_PROCEDURES_SuccessfulOutcome();
    rnpRANAP_ELEMENTARY_PROCEDURES_SuccessfulOutcome(const rnpRANAP_ELEMENTARY_PROCEDURES_SuccessfulOutcome &);
    ~rnpRANAP_ELEMENTARY_PROCEDURES_SuccessfulOutcome();
    rnpRANAP_ELEMENTARY_PROCEDURES_SuccessfulOutcome & operator = (const rnpRANAP_ELEMENTARY_PROCEDURES_SuccessfulOutcome &);
    int operator == (const rnpRANAP_ELEMENTARY_PROCEDURES_SuccessfulOutcome &) const;
    int operator != (const rnpRANAP_ELEMENTARY_PROCEDURES_SuccessfulOutcome &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpIu_ReleaseComplete *get_rnpIu_ReleaseComplete();
    const rnpIu_ReleaseComplete *get_rnpIu_ReleaseComplete() const;
    void set_rnpIu_ReleaseComplete(const rnpIu_ReleaseComplete &);
    rnpIu_ReleaseComplete *release_rnpIu_ReleaseComplete();
    void set_rnpIu_ReleaseComplete(rnpIu_ReleaseComplete *);

    rnpRelocationCommand *get_rnpRelocationCommand();
    const rnpRelocationCommand *get_rnpRelocationCommand() const;
    void set_rnpRelocationCommand(const rnpRelocationCommand &);
    rnpRelocationCommand *release_rnpRelocationCommand();
    void set_rnpRelocationCommand(rnpRelocationCommand *);

    rnpRelocationRequestAcknowledge *get_rnpRelocationRequestAcknowledge();
    const rnpRelocationRequestAcknowledge *get_rnpRelocationRequestAcknowledge() const;
    void set_rnpRelocationRequestAcknowledge(const rnpRelocationRequestAcknowledge &);
    rnpRelocationRequestAcknowledge *release_rnpRelocationRequestAcknowledge();
    void set_rnpRelocationRequestAcknowledge(rnpRelocationRequestAcknowledge *);

    rnpRelocationCancelAcknowledge *get_rnpRelocationCancelAcknowledge();
    const rnpRelocationCancelAcknowledge *get_rnpRelocationCancelAcknowledge() const;
    void set_rnpRelocationCancelAcknowledge(const rnpRelocationCancelAcknowledge &);
    rnpRelocationCancelAcknowledge *release_rnpRelocationCancelAcknowledge();
    void set_rnpRelocationCancelAcknowledge(rnpRelocationCancelAcknowledge *);

    rnpSRNS_ContextResponse *get_rnpSRNS_ContextResponse();
    const rnpSRNS_ContextResponse *get_rnpSRNS_ContextResponse() const;
    void set_rnpSRNS_ContextResponse(const rnpSRNS_ContextResponse &);
    rnpSRNS_ContextResponse *release_rnpSRNS_ContextResponse();
    void set_rnpSRNS_ContextResponse(rnpSRNS_ContextResponse *);

    rnpSecurityModeComplete *get_rnpSecurityModeComplete();
    const rnpSecurityModeComplete *get_rnpSecurityModeComplete() const;
    void set_rnpSecurityModeComplete(const rnpSecurityModeComplete &);
    rnpSecurityModeComplete *release_rnpSecurityModeComplete();
    void set_rnpSecurityModeComplete(rnpSecurityModeComplete *);

    rnpDataVolumeReport *get_rnpDataVolumeReport();
    const rnpDataVolumeReport *get_rnpDataVolumeReport() const;
    void set_rnpDataVolumeReport(const rnpDataVolumeReport &);
    rnpDataVolumeReport *release_rnpDataVolumeReport();
    void set_rnpDataVolumeReport(rnpDataVolumeReport *);

    rnpResetAcknowledge *get_rnpResetAcknowledge();
    const rnpResetAcknowledge *get_rnpResetAcknowledge() const;
    void set_rnpResetAcknowledge(const rnpResetAcknowledge &);
    rnpResetAcknowledge *release_rnpResetAcknowledge();
    void set_rnpResetAcknowledge(rnpResetAcknowledge *);

    rnpResetResourceAcknowledge *get_rnpResetResourceAcknowledge();
    const rnpResetResourceAcknowledge *get_rnpResetResourceAcknowledge() const;
    void set_rnpResetResourceAcknowledge(const rnpResetResourceAcknowledge &);
    rnpResetResourceAcknowledge *release_rnpResetResourceAcknowledge();
    void set_rnpResetResourceAcknowledge(rnpResetResourceAcknowledge *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnpSuccessfulOutcome   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 procedureCode;
    typedef enum rnpCriticality criticality;
    typedef rnpRANAP_ELEMENTARY_PROCEDURES_SuccessfulOutcome value;

    rnpSuccessfulOutcome();
    rnpSuccessfulOutcome(const rnpSuccessfulOutcome &);
    rnpSuccessfulOutcome(procedureCode, criticality, const value &);

    rnpSuccessfulOutcome & operator = (const rnpSuccessfulOutcome &);
    int operator == (const rnpSuccessfulOutcome &) const;
    int operator != (const rnpSuccessfulOutcome &) const;

    procedureCode & get_procedureCode();
    procedureCode get_procedureCode() const;
    void set_procedureCode(procedureCode);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    procedureCode procedureCode_field;
    criticality criticality_field;
    value value_field;
};

class OSS_PUBLIC rnp__shared37;

class OSS_PUBLIC rnp__shared38 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp__shared37 component;

    rnp__shared38();
    rnp__shared38(const rnp__shared38 &);
    ~rnp__shared38();

    rnp__shared38 & operator = (const rnp__shared38 &);
    int operator == (const rnp__shared38 &) const;
    int operator != (const rnp__shared38 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp__shared38 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp__shared38 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp__shared38 *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared38 rnp_seqof17;

class OSS_PUBLIC rnp_seq18;

class OSS_PUBLIC rnp_seqof18 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq18 component;

    rnp_seqof18();
    rnp_seqof18(const rnp_seqof18 &);
    ~rnp_seqof18();

    rnp_seqof18 & operator = (const rnp_seqof18 &);
    int operator == (const rnp_seqof18 &) const;
    int operator != (const rnp_seqof18 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof18 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof18 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof18 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpRelocationPreparationFailure   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp__shared38 protocolIEs;
    typedef rnp_seqof18 protocolExtensions;

    rnpRelocationPreparationFailure();
    rnpRelocationPreparationFailure(const rnpRelocationPreparationFailure &);
    rnpRelocationPreparationFailure(const protocolIEs &, const protocolExtensions &);
    rnpRelocationPreparationFailure(const protocolIEs &);

    rnpRelocationPreparationFailure & operator = (const rnpRelocationPreparationFailure &);
    int operator == (const rnpRelocationPreparationFailure &) const;
    int operator != (const rnpRelocationPreparationFailure &) const;

    protocolIEs & get_protocolIEs();
    const protocolIEs & get_protocolIEs() const;
    void set_protocolIEs(const protocolIEs &);

    protocolExtensions *get_protocolExtensions();
    const protocolExtensions *get_protocolExtensions() const;
    void set_protocolExtensions(const protocolExtensions &);
    int protocolExtensions_is_present() const;
    void omit_protocolExtensions();
private:
    OSS_UINT32 bit_mask;
    protocolIEs protocolIEs_field;
    protocolExtensions protocolExtensions_field;
};

typedef rnp__shared38 rnp_seqof35;

class OSS_PUBLIC rnp_seq37;

class OSS_PUBLIC rnp_seqof36 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq37 component;

    rnp_seqof36();
    rnp_seqof36(const rnp_seqof36 &);
    ~rnp_seqof36();

    rnp_seqof36 & operator = (const rnp_seqof36 &);
    int operator == (const rnp_seqof36 &) const;
    int operator != (const rnp_seqof36 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof36 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof36 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof36 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpRelocationFailure   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp__shared38 protocolIEs;
    typedef rnp_seqof36 protocolExtensions;

    rnpRelocationFailure();
    rnpRelocationFailure(const rnpRelocationFailure &);
    rnpRelocationFailure(const protocolIEs &, const protocolExtensions &);
    rnpRelocationFailure(const protocolIEs &);

    rnpRelocationFailure & operator = (const rnpRelocationFailure &);
    int operator == (const rnpRelocationFailure &) const;
    int operator != (const rnpRelocationFailure &) const;

    protocolIEs & get_protocolIEs();
    const protocolIEs & get_protocolIEs() const;
    void set_protocolIEs(const protocolIEs &);

    protocolExtensions *get_protocolExtensions();
    const protocolExtensions *get_protocolExtensions() const;
    void set_protocolExtensions(const protocolExtensions &);
    int protocolExtensions_is_present() const;
    void omit_protocolExtensions();
private:
    OSS_UINT32 bit_mask;
    protocolIEs protocolIEs_field;
    protocolExtensions protocolExtensions_field;
};

typedef rnp__shared38 rnp_seqof55;

typedef rnp__shared6 rnp_seqof56;

class OSS_PUBLIC rnp__shared39   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp__shared38 protocolIEs;
    typedef rnp__shared6 protocolExtensions;

    rnp__shared39();
    rnp__shared39(const rnp__shared39 &);
    rnp__shared39(const protocolIEs &, const protocolExtensions &);
    rnp__shared39(const protocolIEs &);

    rnp__shared39 & operator = (const rnp__shared39 &);
    int operator == (const rnp__shared39 &) const;
    int operator != (const rnp__shared39 &) const;

    protocolIEs & get_protocolIEs();
    const protocolIEs & get_protocolIEs() const;
    void set_protocolIEs(const protocolIEs &);

    protocolExtensions *get_protocolExtensions();
    const protocolExtensions *get_protocolExtensions() const;
    void set_protocolExtensions(const protocolExtensions &);
    int protocolExtensions_is_present() const;
    void omit_protocolExtensions();
private:
    OSS_UINT32 bit_mask;
    protocolIEs protocolIEs_field;
    protocolExtensions protocolExtensions_field;
};

typedef rnp__shared39 rnpSecurityModeReject;

class OSS_PUBLIC rnpRANAP_ELEMENTARY_PROCEDURES_UnsuccessfulOutcome : public OssConstrainedOpenType
{
public:
    rnpRANAP_ELEMENTARY_PROCEDURES_UnsuccessfulOutcome();
    rnpRANAP_ELEMENTARY_PROCEDURES_UnsuccessfulOutcome(const rnpRANAP_ELEMENTARY_PROCEDURES_UnsuccessfulOutcome &);
    ~rnpRANAP_ELEMENTARY_PROCEDURES_UnsuccessfulOutcome();
    rnpRANAP_ELEMENTARY_PROCEDURES_UnsuccessfulOutcome & operator = (const rnpRANAP_ELEMENTARY_PROCEDURES_UnsuccessfulOutcome &);
    int operator == (const rnpRANAP_ELEMENTARY_PROCEDURES_UnsuccessfulOutcome &) const;
    int operator != (const rnpRANAP_ELEMENTARY_PROCEDURES_UnsuccessfulOutcome &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpRelocationPreparationFailure *get_rnpRelocationPreparationFailure();
    const rnpRelocationPreparationFailure *get_rnpRelocationPreparationFailure() const;
    void set_rnpRelocationPreparationFailure(const rnpRelocationPreparationFailure &);
    rnpRelocationPreparationFailure *release_rnpRelocationPreparationFailure();
    void set_rnpRelocationPreparationFailure(rnpRelocationPreparationFailure *);

    rnpRelocationFailure *get_rnpRelocationFailure();
    const rnpRelocationFailure *get_rnpRelocationFailure() const;
    void set_rnpRelocationFailure(const rnpRelocationFailure &);
    rnpRelocationFailure *release_rnpRelocationFailure();
    void set_rnpRelocationFailure(rnpRelocationFailure *);

    rnp__shared39 *get_rnpSecurityModeReject();
    const rnp__shared39 *get_rnpSecurityModeReject() const;
    void set_rnpSecurityModeReject(const rnp__shared39 &);
    rnp__shared39 *release_rnpSecurityModeReject();
    void set_rnpSecurityModeReject(rnp__shared39 *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnpUnsuccessfulOutcome   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 procedureCode;
    typedef enum rnpCriticality criticality;
    typedef rnpRANAP_ELEMENTARY_PROCEDURES_UnsuccessfulOutcome value;

    rnpUnsuccessfulOutcome();
    rnpUnsuccessfulOutcome(const rnpUnsuccessfulOutcome &);
    rnpUnsuccessfulOutcome(procedureCode, criticality, const value &);

    rnpUnsuccessfulOutcome & operator = (const rnpUnsuccessfulOutcome &);
    int operator == (const rnpUnsuccessfulOutcome &) const;
    int operator != (const rnpUnsuccessfulOutcome &) const;

    procedureCode & get_procedureCode();
    procedureCode get_procedureCode() const;
    void set_procedureCode(procedureCode);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    procedureCode procedureCode_field;
    criticality criticality_field;
    value value_field;
};

class OSS_PUBLIC rnp_seq133;

class OSS_PUBLIC rnp_seqof132 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq133 component;

    rnp_seqof132();
    rnp_seqof132(const rnp_seqof132 &);
    ~rnp_seqof132();

    rnp_seqof132 & operator = (const rnp_seqof132 &);
    int operator == (const rnp_seqof132 &) const;
    int operator != (const rnp_seqof132 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof132 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof132 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof132 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnp_seq134;

class OSS_PUBLIC rnp_seqof133 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq134 component;

    rnp_seqof133();
    rnp_seqof133(const rnp_seqof133 &);
    ~rnp_seqof133();

    rnp_seqof133 & operator = (const rnp_seqof133 &);
    int operator == (const rnp_seqof133 &) const;
    int operator != (const rnp_seqof133 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof133 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof133 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof133 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpRAB_AssignmentResponse   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp_seqof132 protocolIEs;
    typedef rnp_seqof133 protocolExtensions;

    rnpRAB_AssignmentResponse();
    rnpRAB_AssignmentResponse(const rnpRAB_AssignmentResponse &);
    rnpRAB_AssignmentResponse(const protocolIEs &, const protocolExtensions &);
    rnpRAB_AssignmentResponse(const protocolIEs &);

    rnpRAB_AssignmentResponse & operator = (const rnpRAB_AssignmentResponse &);
    int operator == (const rnpRAB_AssignmentResponse &) const;
    int operator != (const rnpRAB_AssignmentResponse &) const;

    protocolIEs & get_protocolIEs();
    const protocolIEs & get_protocolIEs() const;
    void set_protocolIEs(const protocolIEs &);

    protocolExtensions *get_protocolExtensions();
    const protocolExtensions *get_protocolExtensions() const;
    void set_protocolExtensions(const protocolExtensions &);
    int protocolExtensions_is_present() const;
    void omit_protocolExtensions();
private:
    OSS_UINT32 bit_mask;
    protocolIEs protocolIEs_field;
    protocolExtensions protocolExtensions_field;
};

class OSS_PUBLIC rnpRANAP_ELEMENTARY_PROCEDURES_Outcome : public OssConstrainedOpenType
{
public:
    rnpRANAP_ELEMENTARY_PROCEDURES_Outcome();
    rnpRANAP_ELEMENTARY_PROCEDURES_Outcome(const rnpRANAP_ELEMENTARY_PROCEDURES_Outcome &);
    ~rnpRANAP_ELEMENTARY_PROCEDURES_Outcome();
    rnpRANAP_ELEMENTARY_PROCEDURES_Outcome & operator = (const rnpRANAP_ELEMENTARY_PROCEDURES_Outcome &);
    int operator == (const rnpRANAP_ELEMENTARY_PROCEDURES_Outcome &) const;
    int operator != (const rnpRANAP_ELEMENTARY_PROCEDURES_Outcome &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpRAB_AssignmentResponse *get_rnpRAB_AssignmentResponse();
    const rnpRAB_AssignmentResponse *get_rnpRAB_AssignmentResponse() const;
    void set_rnpRAB_AssignmentResponse(const rnpRAB_AssignmentResponse &);
    rnpRAB_AssignmentResponse *release_rnpRAB_AssignmentResponse();
    void set_rnpRAB_AssignmentResponse(rnpRAB_AssignmentResponse *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnpOutcome   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 procedureCode;
    typedef enum rnpCriticality criticality;
    typedef rnpRANAP_ELEMENTARY_PROCEDURES_Outcome value;

    rnpOutcome();
    rnpOutcome(const rnpOutcome &);
    rnpOutcome(procedureCode, criticality, const value &);

    rnpOutcome & operator = (const rnpOutcome &);
    int operator == (const rnpOutcome &) const;
    int operator != (const rnpOutcome &) const;

    procedureCode & get_procedureCode();
    procedureCode get_procedureCode() const;
    void set_procedureCode(procedureCode);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    procedureCode procedureCode_field;
    criticality criticality_field;
    value value_field;
};

class OSS_PUBLIC rnpRANAP_PDU  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	initiatingMessage_chosen = 1,
	successfulOutcome_chosen = 2,
	unsuccessfulOutcome_chosen = 3,
	outcome_chosen = 4
    };
    typedef rnpInitiatingMessage initiatingMessage;
    typedef rnpSuccessfulOutcome successfulOutcome;
    typedef rnpUnsuccessfulOutcome unsuccessfulOutcome;
    typedef rnpOutcome outcome;

    rnpRANAP_PDU();
    rnpRANAP_PDU(const rnpRANAP_PDU &);
    ~rnpRANAP_PDU();

    rnpRANAP_PDU & operator = (const rnpRANAP_PDU &);
    int operator == (const rnpRANAP_PDU &) const;
    int operator != (const rnpRANAP_PDU &) const;

    initiatingMessage *get_initiatingMessage();
    const initiatingMessage *get_initiatingMessage() const;
    void set_initiatingMessage(const initiatingMessage &);

    successfulOutcome *get_successfulOutcome();
    const successfulOutcome *get_successfulOutcome() const;
    void set_successfulOutcome(const successfulOutcome &);

    unsuccessfulOutcome *get_unsuccessfulOutcome();
    const unsuccessfulOutcome *get_unsuccessfulOutcome() const;
    void set_unsuccessfulOutcome(const unsuccessfulOutcome &);

    outcome *get_outcome();
    const outcome *get_outcome() const;
    void set_outcome(const outcome &);
private:
    union {
	initiatingMessage *initiatingMessage_field;
	successfulOutcome *successfulOutcome_field;
	unsuccessfulOutcome *unsuccessfulOutcome_field;
	outcome *outcome_field;
    };
    void cleanup();
};

typedef OSS_UINT32 rnpEncryptionAlgorithm;

typedef OSS_UINT32 rnpChosenEncryptionAlgorithm;

typedef OSS_UINT32 rnpIntegrityProtectionAlgorithm;

typedef OSS_UINT32 rnpChosenIntegrityProtectionAlgorithm;

typedef OSS_UINT32 rnpD_RNTI;

typedef OSS_UINT32 rnpDRX_CycleLengthCoefficient;

typedef OSS_INT32 rnpEARFCN_Extended;

typedef OSS_UINT32 rnpE_DCH_MAC_d_Flow_ID;

typedef OSS_UINT32 rnpExtendedRNC_ID;

typedef OSS_UINT32 rnpHS_DSCH_MAC_d_Flow_ID;

typedef OssString rnpTBCD_STRING;

typedef OSS_UINT32 rnpInformationExchangeID;

typedef OSS_UINT32 rnpInformationTransferID;

typedef OSS_UINT32 rnpNumberOfSteps;

typedef Nulltype rnpRedirectAttemptFlag;

typedef OSS_UINT32 rnpSessionUpdateID;

typedef OSS_INT32 rnpRSRQ_Extension;

typedef OSS_UINT32 rnpSubscriberProfileIDforRFP;

typedef OSS_UINT32 rnpTraceRecordingSessionReference;

typedef OSS_UINT32 rnpVerticalAccuracyCode;

typedef OssString rnpAPN;

typedef OssString rnpClassmarkInformation2;

typedef OssString rnpClassmarkInformation3;

typedef OssString rnpCorrelation_ID;

typedef OssBitString rnpCSG_Id;

typedef OssBitString rnpEncryptionKey;

typedef OssString rnpGERAN_BSC_Container;

typedef OssString rnpGERAN_Classmark;

typedef OssString rnpIMSI;

typedef OssBitString rnpIntegrityProtectionKey;

typedef OssString rnpIPMulticastAddress;

typedef OssBitString rnpIuSignallingConnectionIdentifier;

typedef OssString rnpLHN_ID;

typedef OssString rnpL3_Information;

typedef OssString rnpMBMSServiceArea;

typedef OssString rnpMBMSSessionDuration;

typedef OssString rnpMBMSSessionIdentity;

typedef OssString rnpMBMSSessionRepetitionNumber;

typedef OssString rnpMSISDN;

typedef OssString rnpNAS_PDU;

typedef OssBitString rnpNAS_SequenceNumber;

typedef OssString rnpNewBSS_To_OldBSS_Information;

typedef OssString rnpOldBSS_ToNewBSS_Information;

typedef OssString rnpOMC_ID;

typedef OssString rnpPLMNidentity;

typedef OssString rnpPositionDataSpecificToGERANIuMode;

typedef OssBitString rnpPriority_Class_Indicator;

typedef OssBitString rnpRAB_ID;

typedef OssString rnpRAC;

typedef OssString rnpRequestedGANSSAssistanceData;

typedef OssString rnpRRC_Container;

typedef OssString rnpSource_ToTarget_TransparentContainer;

typedef OssString rnpSourceBSS_ToTargetBSS_TransparentContainer;

typedef OssString rnpTarget_ToSource_TransparentContainer;

typedef OssString rnpTargetBSS_ToSourceBSS_TransparentContainer;

typedef OssString rnpTimeToMBMSDataTransfer;

typedef OssString rnpTimingDifferenceULDL;

typedef OssString rnpTraceReference;

typedef OssString rnpTraceType;

typedef OssBitString rnpTransportLayerAddress;

typedef OssString rnpTriggerID;

typedef OssString rnpUE_History_Information;

typedef OSS_UINT32 rnpProtocolIE_ID;

class OSS_PUBLIC rnpCause  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	radioNetwork_chosen = 1,
	transmissionNetwork_chosen = 2,
	nAS_chosen = 3,
	protocol_chosen = 4,
	misc_chosen = 5,
	non_Standard_chosen = 6,
	radioNetworkExtension_chosen = 7
    };
    typedef OSS_UINT32 radioNetwork;
    typedef OSS_UINT32 transmissionNetwork;
    typedef OSS_UINT32 nAS;
    typedef OSS_UINT32 protocol;
    typedef OSS_UINT32 misc;
    typedef OSS_UINT32 non_Standard;
    typedef OSS_UINT32 radioNetworkExtension;

    rnpCause();
    rnpCause(const rnpCause &);

    rnpCause & operator = (const rnpCause &);
    int operator == (const rnpCause &) const;
    int operator != (const rnpCause &) const;

    radioNetwork *get_radioNetwork();
    const radioNetwork *get_radioNetwork() const;
    void set_radioNetwork(radioNetwork);

    transmissionNetwork *get_transmissionNetwork();
    const transmissionNetwork *get_transmissionNetwork() const;
    void set_transmissionNetwork(transmissionNetwork);

    nAS *get_nAS();
    const nAS *get_nAS() const;
    void set_nAS(nAS);

    protocol *get_protocol();
    const protocol *get_protocol() const;
    void set_protocol(protocol);

    misc *get_misc();
    const misc *get_misc() const;
    void set_misc(misc);

    non_Standard *get_non_Standard();
    const non_Standard *get_non_Standard() const;
    void set_non_Standard(non_Standard);

    radioNetworkExtension *get_radioNetworkExtension();
    const radioNetworkExtension *get_radioNetworkExtension() const;
    void set_radioNetworkExtension(radioNetworkExtension);
private:
    union {
	radioNetwork radioNetwork_field;
	transmissionNetwork transmissionNetwork_field;
	nAS nAS_field;
	protocol protocol_field;
	misc misc_field;
	non_Standard non_Standard_field;
	radioNetworkExtension radioNetworkExtension_field;
    };
};

class OSS_PUBLIC rnpIu_ReleaseCommandIEs_Value : public OssConstrainedOpenType
{
public:
    rnpIu_ReleaseCommandIEs_Value();
    rnpIu_ReleaseCommandIEs_Value(const rnpIu_ReleaseCommandIEs_Value &);
    ~rnpIu_ReleaseCommandIEs_Value();
    rnpIu_ReleaseCommandIEs_Value & operator = (const rnpIu_ReleaseCommandIEs_Value &);
    int operator == (const rnpIu_ReleaseCommandIEs_Value &) const;
    int operator != (const rnpIu_ReleaseCommandIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpCause *get_rnpCause();
    const rnpCause *get_rnpCause() const;
    void set_rnpCause(const rnpCause &);
    rnpCause *release_rnpCause();
    void set_rnpCause(rnpCause *);
private:
    void cleanup_decoded();
};

typedef OSS_UINT32 rnpProtocolExtensionID;

class OSS_PUBLIC rnpIu_ReleaseCommandExtensions_Extension : public OssConstrainedOpenType
{
public:
    rnpIu_ReleaseCommandExtensions_Extension();
    rnpIu_ReleaseCommandExtensions_Extension(const rnpIu_ReleaseCommandExtensions_Extension &);
    ~rnpIu_ReleaseCommandExtensions_Extension();
    rnpIu_ReleaseCommandExtensions_Extension & operator = (const rnpIu_ReleaseCommandExtensions_Extension &);
    int operator == (const rnpIu_ReleaseCommandExtensions_Extension &) const;
    int operator != (const rnpIu_ReleaseCommandExtensions_Extension &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpEnd_Of_CSFB *get_rnpEnd_Of_CSFB();
    const rnpEnd_Of_CSFB *get_rnpEnd_Of_CSFB() const;
    void set_rnpEnd_Of_CSFB(const rnpEnd_Of_CSFB &);
    rnpEnd_Of_CSFB *release_rnpEnd_Of_CSFB();
    void set_rnpEnd_Of_CSFB(rnpEnd_Of_CSFB *);

    rnpOut_Of_UTRAN *get_rnpOut_Of_UTRAN();
    const rnpOut_Of_UTRAN *get_rnpOut_Of_UTRAN() const;
    void set_rnpOut_Of_UTRAN(const rnpOut_Of_UTRAN &);
    rnpOut_Of_UTRAN *release_rnpOut_Of_UTRAN();
    void set_rnpOut_Of_UTRAN(rnpOut_Of_UTRAN *);

    rnpPLMNidentity *get_rnpPLMNidentity();
    const rnpPLMNidentity *get_rnpPLMNidentity() const;
    void set_rnpPLMNidentity(const rnpPLMNidentity &);
    rnpPLMNidentity *release_rnpPLMNidentity();
    void set_rnpPLMNidentity(rnpPLMNidentity *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp__shared1   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpIu_ReleaseCommandIEs_Value value;

    rnp__shared1();
    rnp__shared1(const rnp__shared1 &);
    rnp__shared1(id, criticality, const value &);

    rnp__shared1 & operator = (const rnp__shared1 &);
    int operator == (const rnp__shared1 &) const;
    int operator != (const rnp__shared1 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

typedef rnp__shared1 rnp_seq1;

class OSS_PUBLIC rnp_seq2   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpIu_ReleaseCommandExtensions_Extension extensionValue;

    rnp_seq2();
    rnp_seq2(const rnp_seq2 &);
    rnp_seq2(id, criticality, const extensionValue &);

    rnp_seq2 & operator = (const rnp_seq2 &);
    int operator == (const rnp_seq2 &) const;
    int operator != (const rnp_seq2 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    extensionValue & get_extensionValue();
    const extensionValue & get_extensionValue() const;
    void set_extensionValue(const extensionValue &);
private:
    id id_field;
    criticality criticality_field;
    extensionValue extensionValue_field;
};

class OSS_PUBLIC rnp_seqof5;

class OSS_PUBLIC rnpRAB_DataVolumeReportList : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seqof5 component;

    rnpRAB_DataVolumeReportList();
    rnpRAB_DataVolumeReportList(const rnpRAB_DataVolumeReportList &);
    ~rnpRAB_DataVolumeReportList();

    rnpRAB_DataVolumeReportList & operator = (const rnpRAB_DataVolumeReportList &);
    int operator == (const rnpRAB_DataVolumeReportList &) const;
    int operator != (const rnpRAB_DataVolumeReportList &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnpRAB_DataVolumeReportList *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnpRAB_DataVolumeReportList *);

    int remove_front();
    int remove_after(OssIndex);

    rnpRAB_DataVolumeReportList *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnp_seqof7;

class OSS_PUBLIC rnpRAB_ReleasedList_IuRelComp : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seqof7 component;

    rnpRAB_ReleasedList_IuRelComp();
    rnpRAB_ReleasedList_IuRelComp(const rnpRAB_ReleasedList_IuRelComp &);
    ~rnpRAB_ReleasedList_IuRelComp();

    rnpRAB_ReleasedList_IuRelComp & operator = (const rnpRAB_ReleasedList_IuRelComp &);
    int operator == (const rnpRAB_ReleasedList_IuRelComp &) const;
    int operator != (const rnpRAB_ReleasedList_IuRelComp &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnpRAB_ReleasedList_IuRelComp *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnpRAB_ReleasedList_IuRelComp *);

    int remove_front();
    int remove_after(OssIndex);

    rnpRAB_ReleasedList_IuRelComp *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnp_seq251;

class OSS_PUBLIC rnp__shared31 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq251 component;

    rnp__shared31();
    rnp__shared31(const rnp__shared31 &);
    ~rnp__shared31();

    rnp__shared31 & operator = (const rnp__shared31 &);
    int operator == (const rnp__shared31 &) const;
    int operator != (const rnp__shared31 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp__shared31 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp__shared31 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp__shared31 *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared31 rnpCriticalityDiagnostics_IE_List;

typedef rnp__shared6 rnp_seqof245;

class OSS_PUBLIC rnpCriticalityDiagnostics   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 procedureCode;
    typedef enum rnpTriggeringMessage triggeringMessage;
    typedef enum rnpCriticality procedureCriticality;
    typedef rnp__shared31 iEsCriticalityDiagnostics;
    typedef rnp__shared6 iE_Extensions;

    rnpCriticalityDiagnostics();
    rnpCriticalityDiagnostics(const rnpCriticalityDiagnostics &);
    rnpCriticalityDiagnostics(procedureCode, triggeringMessage, procedureCriticality, 
	const iEsCriticalityDiagnostics &, const iE_Extensions &);

    rnpCriticalityDiagnostics & operator = (const rnpCriticalityDiagnostics &);
    int operator == (const rnpCriticalityDiagnostics &) const;
    int operator != (const rnpCriticalityDiagnostics &) const;

    procedureCode *get_procedureCode();
    const procedureCode *get_procedureCode() const;
    void set_procedureCode(procedureCode);
    int procedureCode_is_present() const;
    void omit_procedureCode();

    triggeringMessage *get_triggeringMessage();
    const triggeringMessage *get_triggeringMessage() const;
    void set_triggeringMessage(triggeringMessage);
    int triggeringMessage_is_present() const;
    void omit_triggeringMessage();

    procedureCriticality *get_procedureCriticality();
    const procedureCriticality *get_procedureCriticality() const;
    void set_procedureCriticality(procedureCriticality);
    int procedureCriticality_is_present() const;
    void omit_procedureCriticality();

    iEsCriticalityDiagnostics *get_iEsCriticalityDiagnostics();
    const iEsCriticalityDiagnostics *get_iEsCriticalityDiagnostics() const;
    void set_iEsCriticalityDiagnostics(const iEsCriticalityDiagnostics &);
    int iEsCriticalityDiagnostics_is_present() const;
    void omit_iEsCriticalityDiagnostics();

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    procedureCode procedureCode_field;
    triggeringMessage triggeringMessage_field;
    procedureCriticality procedureCriticality_field;
    iEsCriticalityDiagnostics iEsCriticalityDiagnostics_field;
    iE_Extensions iE_Extensions_field;
};

class OSS_PUBLIC rnpIu_ReleaseCompleteIEs_Value : public OssConstrainedOpenType
{
public:
    rnpIu_ReleaseCompleteIEs_Value();
    rnpIu_ReleaseCompleteIEs_Value(const rnpIu_ReleaseCompleteIEs_Value &);
    ~rnpIu_ReleaseCompleteIEs_Value();
    rnpIu_ReleaseCompleteIEs_Value & operator = (const rnpIu_ReleaseCompleteIEs_Value &);
    int operator == (const rnpIu_ReleaseCompleteIEs_Value &) const;
    int operator != (const rnpIu_ReleaseCompleteIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpRAB_DataVolumeReportList *get_rnpRAB_DataVolumeReportList();
    const rnpRAB_DataVolumeReportList *get_rnpRAB_DataVolumeReportList() const;
    void set_rnpRAB_DataVolumeReportList(const rnpRAB_DataVolumeReportList &);
    rnpRAB_DataVolumeReportList *release_rnpRAB_DataVolumeReportList();
    void set_rnpRAB_DataVolumeReportList(rnpRAB_DataVolumeReportList *);

    rnpRAB_ReleasedList_IuRelComp *get_rnpRAB_ReleasedList_IuRelComp();
    const rnpRAB_ReleasedList_IuRelComp *get_rnpRAB_ReleasedList_IuRelComp() const;
    void set_rnpRAB_ReleasedList_IuRelComp(const rnpRAB_ReleasedList_IuRelComp &);
    rnpRAB_ReleasedList_IuRelComp *release_rnpRAB_ReleasedList_IuRelComp();
    void set_rnpRAB_ReleasedList_IuRelComp(rnpRAB_ReleasedList_IuRelComp *);

    rnpCriticalityDiagnostics *get_rnpCriticalityDiagnostics();
    const rnpCriticalityDiagnostics *get_rnpCriticalityDiagnostics() const;
    void set_rnpCriticalityDiagnostics(const rnpCriticalityDiagnostics &);
    rnpCriticalityDiagnostics *release_rnpCriticalityDiagnostics();
    void set_rnpCriticalityDiagnostics(rnpCriticalityDiagnostics *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnpIu_ReleaseCompleteExtensions_Extension : public OssConstrainedOpenType
{
public:
    rnpIu_ReleaseCompleteExtensions_Extension();
    rnpIu_ReleaseCompleteExtensions_Extension(const rnpIu_ReleaseCompleteExtensions_Extension &);
    ~rnpIu_ReleaseCompleteExtensions_Extension();
    rnpIu_ReleaseCompleteExtensions_Extension & operator = (const rnpIu_ReleaseCompleteExtensions_Extension &);
    int operator == (const rnpIu_ReleaseCompleteExtensions_Extension &) const;
    int operator != (const rnpIu_ReleaseCompleteExtensions_Extension &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq3   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpIu_ReleaseCompleteIEs_Value value;

    rnp_seq3();
    rnp_seq3(const rnp_seq3 &);
    rnp_seq3(id, criticality, const value &);

    rnp_seq3 & operator = (const rnp_seq3 &);
    int operator == (const rnp_seq3 &) const;
    int operator != (const rnp_seq3 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

class OSS_PUBLIC rnp__shared5   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpIu_ReleaseCompleteExtensions_Extension extensionValue;

    rnp__shared5();
    rnp__shared5(const rnp__shared5 &);
    rnp__shared5(id, criticality, const extensionValue &);

    rnp__shared5 & operator = (const rnp__shared5 &);
    int operator == (const rnp__shared5 &) const;
    int operator != (const rnp__shared5 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    extensionValue & get_extensionValue();
    const extensionValue & get_extensionValue() const;
    void set_extensionValue(const extensionValue &);
private:
    id id_field;
    criticality criticality_field;
    extensionValue extensionValue_field;
};

typedef rnp__shared5 rnp_seq275;

typedef rnp__shared5 rnp_seq4;

class OSS_PUBLIC rnp__shared33;

class OSS_PUBLIC rnp__shared34 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp__shared33 component;

    rnp__shared34();
    rnp__shared34(const rnp__shared34 &);
    ~rnp__shared34();

    rnp__shared34 & operator = (const rnp__shared34 &);
    int operator == (const rnp__shared34 &) const;
    int operator != (const rnp__shared34 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp__shared34 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp__shared34 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp__shared34 *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared34 rnpRABDataVolumeReport;

typedef rnp__shared34 rnpDataVolumeList;

typedef rnp__shared6 rnp_seqof6;

class OSS_PUBLIC rnpRAB_DataVolumeReportItem   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssBitString rAB_ID;
    typedef rnp__shared34 dl_UnsuccessfullyTransmittedDataVolume;
    typedef rnp__shared6 iE_Extensions;

    rnpRAB_DataVolumeReportItem();
    rnpRAB_DataVolumeReportItem(const rnpRAB_DataVolumeReportItem &);
    rnpRAB_DataVolumeReportItem(const rAB_ID &, const dl_UnsuccessfullyTransmittedDataVolume &, 
	const iE_Extensions &);
    rnpRAB_DataVolumeReportItem(const rAB_ID &);

    rnpRAB_DataVolumeReportItem & operator = (const rnpRAB_DataVolumeReportItem &);
    int operator == (const rnpRAB_DataVolumeReportItem &) const;
    int operator != (const rnpRAB_DataVolumeReportItem &) const;

    rAB_ID & get_rAB_ID();
    const rAB_ID & get_rAB_ID() const;
    void set_rAB_ID(const rAB_ID &);

    dl_UnsuccessfullyTransmittedDataVolume *get_dl_UnsuccessfullyTransmittedDataVolume();
    const dl_UnsuccessfullyTransmittedDataVolume *get_dl_UnsuccessfullyTransmittedDataVolume() const;
    void set_dl_UnsuccessfullyTransmittedDataVolume(const dl_UnsuccessfullyTransmittedDataVolume &);
    int dl_UnsuccessfullyTransmittedDataVolume_is_present() const;
    void omit_dl_UnsuccessfullyTransmittedDataVolume();

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    rAB_ID rAB_ID_field;
    dl_UnsuccessfullyTransmittedDataVolume dl_UnsuccessfullyTransmittedDataVolume_field;
    iE_Extensions iE_Extensions_field;
};

class OSS_PUBLIC rnpRAB_DataVolumeReportItemIEs_Value : public OssConstrainedOpenType
{
public:
    rnpRAB_DataVolumeReportItemIEs_Value();
    rnpRAB_DataVolumeReportItemIEs_Value(const rnpRAB_DataVolumeReportItemIEs_Value &);
    ~rnpRAB_DataVolumeReportItemIEs_Value();
    rnpRAB_DataVolumeReportItemIEs_Value & operator = (const rnpRAB_DataVolumeReportItemIEs_Value &);
    int operator == (const rnpRAB_DataVolumeReportItemIEs_Value &) const;
    int operator != (const rnpRAB_DataVolumeReportItemIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpRAB_DataVolumeReportItem *get_rnpRAB_DataVolumeReportItem();
    const rnpRAB_DataVolumeReportItem *get_rnpRAB_DataVolumeReportItem() const;
    void set_rnpRAB_DataVolumeReportItem(const rnpRAB_DataVolumeReportItem &);
    rnpRAB_DataVolumeReportItem *release_rnpRAB_DataVolumeReportItem();
    void set_rnpRAB_DataVolumeReportItem(rnpRAB_DataVolumeReportItem *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq5;

class OSS_PUBLIC rnp_seqof5 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq5 component;

    rnp_seqof5();
    rnp_seqof5(const rnp_seqof5 &);
    ~rnp_seqof5();

    rnp_seqof5 & operator = (const rnp_seqof5 &);
    int operator == (const rnp_seqof5 &) const;
    int operator != (const rnp_seqof5 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof5 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof5 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof5 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnp_seq5   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpRAB_DataVolumeReportItemIEs_Value value;

    rnp_seq5();
    rnp_seq5(const rnp_seq5 &);
    rnp_seq5(id, criticality, const value &);

    rnp_seq5 & operator = (const rnp_seq5 &);
    int operator == (const rnp_seq5 &) const;
    int operator != (const rnp_seq5 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

typedef rnp__shared5 rnp_seq6;

typedef rnp__shared6 rnp_seqof8;

class OSS_PUBLIC rnpRAB_ReleasedItem_IuRelComp   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssBitString rAB_ID;
    typedef OSS_UINT32 dL_GTP_PDU_SequenceNumber;
    typedef OSS_UINT32 uL_GTP_PDU_SequenceNumber;
    typedef rnp__shared6 iE_Extensions;

    rnpRAB_ReleasedItem_IuRelComp();
    rnpRAB_ReleasedItem_IuRelComp(const rnpRAB_ReleasedItem_IuRelComp &);
    rnpRAB_ReleasedItem_IuRelComp(const rAB_ID &, dL_GTP_PDU_SequenceNumber, uL_GTP_PDU_SequenceNumber, 
	const iE_Extensions &);
    rnpRAB_ReleasedItem_IuRelComp(const rAB_ID &);

    rnpRAB_ReleasedItem_IuRelComp & operator = (const rnpRAB_ReleasedItem_IuRelComp &);
    int operator == (const rnpRAB_ReleasedItem_IuRelComp &) const;
    int operator != (const rnpRAB_ReleasedItem_IuRelComp &) const;

    rAB_ID & get_rAB_ID();
    const rAB_ID & get_rAB_ID() const;
    void set_rAB_ID(const rAB_ID &);

    dL_GTP_PDU_SequenceNumber *get_dL_GTP_PDU_SequenceNumber();
    const dL_GTP_PDU_SequenceNumber *get_dL_GTP_PDU_SequenceNumber() const;
    void set_dL_GTP_PDU_SequenceNumber(dL_GTP_PDU_SequenceNumber);
    int dL_GTP_PDU_SequenceNumber_is_present() const;
    void omit_dL_GTP_PDU_SequenceNumber();

    uL_GTP_PDU_SequenceNumber *get_uL_GTP_PDU_SequenceNumber();
    const uL_GTP_PDU_SequenceNumber *get_uL_GTP_PDU_SequenceNumber() const;
    void set_uL_GTP_PDU_SequenceNumber(uL_GTP_PDU_SequenceNumber);
    int uL_GTP_PDU_SequenceNumber_is_present() const;
    void omit_uL_GTP_PDU_SequenceNumber();

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    rAB_ID rAB_ID_field;
    dL_GTP_PDU_SequenceNumber dL_GTP_PDU_SequenceNumber_field;
    uL_GTP_PDU_SequenceNumber uL_GTP_PDU_SequenceNumber_field;
    iE_Extensions iE_Extensions_field;
};

class OSS_PUBLIC rnpRAB_ReleasedItem_IuRelComp_IEs_Value : public OssConstrainedOpenType
{
public:
    rnpRAB_ReleasedItem_IuRelComp_IEs_Value();
    rnpRAB_ReleasedItem_IuRelComp_IEs_Value(const rnpRAB_ReleasedItem_IuRelComp_IEs_Value &);
    ~rnpRAB_ReleasedItem_IuRelComp_IEs_Value();
    rnpRAB_ReleasedItem_IuRelComp_IEs_Value & operator = (const rnpRAB_ReleasedItem_IuRelComp_IEs_Value &);
    int operator == (const rnpRAB_ReleasedItem_IuRelComp_IEs_Value &) const;
    int operator != (const rnpRAB_ReleasedItem_IuRelComp_IEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpRAB_ReleasedItem_IuRelComp *get_rnpRAB_ReleasedItem_IuRelComp();
    const rnpRAB_ReleasedItem_IuRelComp *get_rnpRAB_ReleasedItem_IuRelComp() const;
    void set_rnpRAB_ReleasedItem_IuRelComp(const rnpRAB_ReleasedItem_IuRelComp &);
    rnpRAB_ReleasedItem_IuRelComp *release_rnpRAB_ReleasedItem_IuRelComp();
    void set_rnpRAB_ReleasedItem_IuRelComp(rnpRAB_ReleasedItem_IuRelComp *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq7;

class OSS_PUBLIC rnp_seqof7 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq7 component;

    rnp_seqof7();
    rnp_seqof7(const rnp_seqof7 &);
    ~rnp_seqof7();

    rnp_seqof7 & operator = (const rnp_seqof7 &);
    int operator == (const rnp_seqof7 &) const;
    int operator != (const rnp_seqof7 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof7 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof7 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof7 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnp_seq7   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpRAB_ReleasedItem_IuRelComp_IEs_Value value;

    rnp_seq7();
    rnp_seq7(const rnp_seq7 &);
    rnp_seq7(id, criticality, const value &);

    rnp_seq7 & operator = (const rnp_seq7 &);
    int operator == (const rnp_seq7 &) const;
    int operator != (const rnp_seq7 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

typedef OSS_UINT32 rnpDL_GTP_PDU_SequenceNumber;

typedef OSS_UINT32 rnpUL_GTP_PDU_SequenceNumber;

typedef rnp__shared5 rnp_seq8;

class OSS_PUBLIC rnp__shared3;

class OSS_PUBLIC rnp__shared4 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp__shared3 component;

    rnp__shared4();
    rnp__shared4(const rnp__shared4 &);
    ~rnp__shared4();

    rnp__shared4 & operator = (const rnp__shared4 &);
    int operator == (const rnp__shared4 &) const;
    int operator != (const rnp__shared4 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp__shared4 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp__shared4 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp__shared4 *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared4 rnp_seqof301;

class OSS_PUBLIC rnpSourceRNC_ID   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssString pLMNidentity;
    typedef OSS_UINT32 rNC_ID;
    typedef rnp__shared4 iE_Extensions;

    rnpSourceRNC_ID();
    rnpSourceRNC_ID(const rnpSourceRNC_ID &);
    rnpSourceRNC_ID(const pLMNidentity &, rNC_ID, const iE_Extensions &);
    rnpSourceRNC_ID(const pLMNidentity &, rNC_ID);

    rnpSourceRNC_ID & operator = (const rnpSourceRNC_ID &);
    int operator == (const rnpSourceRNC_ID &) const;
    int operator != (const rnpSourceRNC_ID &) const;

    pLMNidentity & get_pLMNidentity();
    const pLMNidentity & get_pLMNidentity() const;
    void set_pLMNidentity(const pLMNidentity &);

    rNC_ID & get_rNC_ID();
    rNC_ID get_rNC_ID() const;
    void set_rNC_ID(rNC_ID);

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    pLMNidentity pLMNidentity_field;
    rNC_ID rNC_ID_field;
    iE_Extensions iE_Extensions_field;
};

class OSS_PUBLIC rnpSAI   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssString pLMNidentity;
    typedef OssString lAC;
    typedef OssString sAC;
    typedef rnp__shared6 iE_Extensions;

    rnpSAI();
    rnpSAI(const rnpSAI &);
    rnpSAI(const pLMNidentity &, const lAC &, const sAC &, const iE_Extensions &);
    rnpSAI(const pLMNidentity &, const lAC &, const sAC &);

    rnpSAI & operator = (const rnpSAI &);
    int operator == (const rnpSAI &) const;
    int operator != (const rnpSAI &) const;

    pLMNidentity & get_pLMNidentity();
    const pLMNidentity & get_pLMNidentity() const;
    void set_pLMNidentity(const pLMNidentity &);

    lAC & get_lAC();
    const lAC & get_lAC() const;
    void set_lAC(const lAC &);

    sAC & get_sAC();
    const sAC & get_sAC() const;
    void set_sAC(const sAC &);

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    pLMNidentity pLMNidentity_field;
    lAC lAC_field;
    sAC sAC_field;
    iE_Extensions iE_Extensions_field;
};

class OSS_PUBLIC rnpSourceID  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	sourceRNC_ID_chosen = 1,
	sAI_chosen = 2
    };
    typedef rnpSourceRNC_ID sourceRNC_ID;
    typedef rnpSAI sAI;

    rnpSourceID();
    rnpSourceID(const rnpSourceID &);
    ~rnpSourceID();

    rnpSourceID & operator = (const rnpSourceID &);
    int operator == (const rnpSourceID &) const;
    int operator != (const rnpSourceID &) const;

    sourceRNC_ID *get_sourceRNC_ID();
    const sourceRNC_ID *get_sourceRNC_ID() const;
    void set_sourceRNC_ID(const sourceRNC_ID &);

    sAI *get_sAI();
    const sAI *get_sAI() const;
    void set_sAI(const sAI &);
private:
    union {
	sourceRNC_ID *sourceRNC_ID_field;
	sAI *sAI_field;
    };
    void cleanup();
};

typedef rnp__shared6 rnp_seqof259;

class OSS_PUBLIC rnpLAI   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssString pLMNidentity;
    typedef OssString lAC;
    typedef rnp__shared6 iE_Extensions;

    rnpLAI();
    rnpLAI(const rnpLAI &);
    rnpLAI(const pLMNidentity &, const lAC &, const iE_Extensions &);
    rnpLAI(const pLMNidentity &, const lAC &);

    rnpLAI & operator = (const rnpLAI &);
    int operator == (const rnpLAI &) const;
    int operator != (const rnpLAI &) const;

    pLMNidentity & get_pLMNidentity();
    const pLMNidentity & get_pLMNidentity() const;
    void set_pLMNidentity(const pLMNidentity &);

    lAC & get_lAC();
    const lAC & get_lAC() const;
    void set_lAC(const lAC &);

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    pLMNidentity pLMNidentity_field;
    lAC lAC_field;
    iE_Extensions iE_Extensions_field;
};

typedef rnp__shared4 rnp_seqof312;

class OSS_PUBLIC rnpTargetRNC_ID   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnpLAI lAI;
    typedef OssString rAC;
    typedef OSS_UINT32 rNC_ID;
    typedef rnp__shared4 iE_Extensions;

    rnpTargetRNC_ID();
    rnpTargetRNC_ID(const rnpTargetRNC_ID &);
    rnpTargetRNC_ID(const lAI &, const rAC &, rNC_ID, const iE_Extensions &);
    rnpTargetRNC_ID(const lAI &, rNC_ID);

    rnpTargetRNC_ID & operator = (const rnpTargetRNC_ID &);
    int operator == (const rnpTargetRNC_ID &) const;
    int operator != (const rnpTargetRNC_ID &) const;

    lAI & get_lAI();
    const lAI & get_lAI() const;
    void set_lAI(const lAI &);

    rAC *get_rAC();
    const rAC *get_rAC() const;
    void set_rAC(const rAC &);
    int rAC_is_present() const;
    void omit_rAC();

    rNC_ID & get_rNC_ID();
    rNC_ID get_rNC_ID() const;
    void set_rNC_ID(rNC_ID);

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    lAI lAI_field;
    rAC rAC_field;
    rNC_ID rNC_ID_field;
    iE_Extensions iE_Extensions_field;
};

class OSS_PUBLIC rnp_seq254;

class OSS_PUBLIC rnp_seqof248 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq254 component;

    rnp_seqof248();
    rnp_seqof248(const rnp_seqof248 &);
    ~rnp_seqof248();

    rnp_seqof248 & operator = (const rnp_seqof248 &);
    int operator == (const rnp_seqof248 &) const;
    int operator != (const rnp_seqof248 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof248 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof248 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof248 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpCGI   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssString pLMNidentity;
    typedef OssString lAC;
    typedef OssString cI;
    typedef rnp_seqof248 iE_Extensions;

    rnpCGI();
    rnpCGI(const rnpCGI &);
    rnpCGI(const pLMNidentity &, const lAC &, const cI &, const iE_Extensions &);
    rnpCGI(const pLMNidentity &, const lAC &, const cI &);

    rnpCGI & operator = (const rnpCGI &);
    int operator == (const rnpCGI &) const;
    int operator != (const rnpCGI &) const;

    pLMNidentity & get_pLMNidentity();
    const pLMNidentity & get_pLMNidentity() const;
    void set_pLMNidentity(const pLMNidentity &);

    lAC & get_lAC();
    const lAC & get_lAC() const;
    void set_lAC(const lAC &);

    cI & get_cI();
    const cI & get_cI() const;
    void set_cI(const cI &);

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    pLMNidentity pLMNidentity_field;
    lAC lAC_field;
    cI cI_field;
    iE_Extensions iE_Extensions_field;
};

class OSS_PUBLIC rnpENB_ID  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	macroENB_ID_chosen = 1,
	homeENB_ID_chosen = 2
    };
    typedef OssBitString macroENB_ID;
    typedef OssBitString homeENB_ID;

    rnpENB_ID();
    rnpENB_ID(const rnpENB_ID &);
    ~rnpENB_ID();

    rnpENB_ID & operator = (const rnpENB_ID &);
    int operator == (const rnpENB_ID &) const;
    int operator != (const rnpENB_ID &) const;

    macroENB_ID *get_macroENB_ID();
    const macroENB_ID *get_macroENB_ID() const;
    void set_macroENB_ID(const macroENB_ID &);

    homeENB_ID *get_homeENB_ID();
    const homeENB_ID *get_homeENB_ID() const;
    void set_homeENB_ID(const homeENB_ID &);
private:
    union {
	OSSC::COssBitString macroENB_ID_field;
	OSSC::COssBitString homeENB_ID_field;
    };
    void cleanup();
};

typedef rnp__shared6 rnp_seqof311;

typedef rnp__shared6 rnp_seqof310;

class OSS_PUBLIC rnpTAI   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssString pLMNidentity;
    typedef OssString tAC;
    typedef rnp__shared6 iE_Extensions;

    rnpTAI();
    rnpTAI(const rnpTAI &);
    rnpTAI(const pLMNidentity &, const tAC &, const iE_Extensions &);
    rnpTAI(const pLMNidentity &, const tAC &);

    rnpTAI & operator = (const rnpTAI &);
    int operator == (const rnpTAI &) const;
    int operator != (const rnpTAI &) const;

    pLMNidentity & get_pLMNidentity();
    const pLMNidentity & get_pLMNidentity() const;
    void set_pLMNidentity(const pLMNidentity &);

    tAC & get_tAC();
    const tAC & get_tAC() const;
    void set_tAC(const tAC &);

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    pLMNidentity pLMNidentity_field;
    tAC tAC_field;
    iE_Extensions iE_Extensions_field;
};

class OSS_PUBLIC rnpTargetENB_ID   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssString pLMNidentity;
    typedef rnpENB_ID eNB_ID;
    typedef rnp__shared6 iE_Extensions;
    typedef rnpTAI selectedTAI;

    rnpTargetENB_ID();
    rnpTargetENB_ID(const rnpTargetENB_ID &);
    rnpTargetENB_ID(const pLMNidentity &, const eNB_ID &, const iE_Extensions &, 
	const selectedTAI &);
    rnpTargetENB_ID(const pLMNidentity &, const eNB_ID &, const selectedTAI &);

    rnpTargetENB_ID & operator = (const rnpTargetENB_ID &);
    int operator == (const rnpTargetENB_ID &) const;
    int operator != (const rnpTargetENB_ID &) const;

    pLMNidentity & get_pLMNidentity();
    const pLMNidentity & get_pLMNidentity() const;
    void set_pLMNidentity(const pLMNidentity &);

    eNB_ID & get_eNB_ID();
    const eNB_ID & get_eNB_ID() const;
    void set_eNB_ID(const eNB_ID &);

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();

    selectedTAI & get_selectedTAI();
    const selectedTAI & get_selectedTAI() const;
    void set_selectedTAI(const selectedTAI &);
private:
    OSS_UINT32 bit_mask;
    pLMNidentity pLMNidentity_field;
    eNB_ID eNB_ID_field;
    iE_Extensions iE_Extensions_field;
    selectedTAI selectedTAI_field;
};

class OSS_PUBLIC rnpTargetID  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	targetRNC_ID_chosen = 1,
	cGI_chosen = 2,
	targeteNB_ID_chosen = 3
    };
    typedef rnpTargetRNC_ID targetRNC_ID;
    typedef rnpCGI cGI;
    typedef rnpTargetENB_ID targeteNB_ID;

    rnpTargetID();
    rnpTargetID(const rnpTargetID &);
    ~rnpTargetID();

    rnpTargetID & operator = (const rnpTargetID &);
    int operator == (const rnpTargetID &) const;
    int operator != (const rnpTargetID &) const;

    targetRNC_ID *get_targetRNC_ID();
    const targetRNC_ID *get_targetRNC_ID() const;
    void set_targetRNC_ID(const targetRNC_ID &);

    cGI *get_cGI();
    const cGI *get_cGI() const;
    void set_cGI(const cGI &);

    targeteNB_ID *get_targeteNB_ID();
    const targeteNB_ID *get_targeteNB_ID() const;
    void set_targeteNB_ID(const targeteNB_ID &);
private:
    union {
	targetRNC_ID *targetRNC_ID_field;
	cGI *cGI_field;
	targeteNB_ID *targeteNB_ID_field;
    };
    void cleanup();
};

class OSS_PUBLIC rnpRelocationRequiredIEs_Value : public OssConstrainedOpenType
{
public:
    rnpRelocationRequiredIEs_Value();
    rnpRelocationRequiredIEs_Value(const rnpRelocationRequiredIEs_Value &);
    ~rnpRelocationRequiredIEs_Value();
    rnpRelocationRequiredIEs_Value & operator = (const rnpRelocationRequiredIEs_Value &);
    int operator == (const rnpRelocationRequiredIEs_Value &) const;
    int operator != (const rnpRelocationRequiredIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpRelocationType *get_rnpRelocationType();
    const rnpRelocationType *get_rnpRelocationType() const;
    void set_rnpRelocationType(const rnpRelocationType &);
    rnpRelocationType *release_rnpRelocationType();
    void set_rnpRelocationType(rnpRelocationType *);

    rnpCause *get_rnpCause();
    const rnpCause *get_rnpCause() const;
    void set_rnpCause(const rnpCause &);
    rnpCause *release_rnpCause();
    void set_rnpCause(rnpCause *);

    rnpSourceID *get_rnpSourceID();
    const rnpSourceID *get_rnpSourceID() const;
    void set_rnpSourceID(const rnpSourceID &);
    rnpSourceID *release_rnpSourceID();
    void set_rnpSourceID(rnpSourceID *);

    rnpTargetID *get_rnpTargetID();
    const rnpTargetID *get_rnpTargetID() const;
    void set_rnpTargetID(const rnpTargetID &);
    rnpTargetID *release_rnpTargetID();
    void set_rnpTargetID(rnpTargetID *);

    rnpClassmarkInformation2 *get_rnpClassmarkInformation2();
    const rnpClassmarkInformation2 *get_rnpClassmarkInformation2() const;
    void set_rnpClassmarkInformation2(const rnpClassmarkInformation2 &);
    rnpClassmarkInformation2 *release_rnpClassmarkInformation2();
    void set_rnpClassmarkInformation2(rnpClassmarkInformation2 *);

    rnpClassmarkInformation3 *get_rnpClassmarkInformation3();
    const rnpClassmarkInformation3 *get_rnpClassmarkInformation3() const;
    void set_rnpClassmarkInformation3(const rnpClassmarkInformation3 &);
    rnpClassmarkInformation3 *release_rnpClassmarkInformation3();
    void set_rnpClassmarkInformation3(rnpClassmarkInformation3 *);

    rnpSource_ToTarget_TransparentContainer *get_rnpSource_ToTarget_TransparentContainer();
    const rnpSource_ToTarget_TransparentContainer *get_rnpSource_ToTarget_TransparentContainer() const;
    void set_rnpSource_ToTarget_TransparentContainer(const rnpSource_ToTarget_TransparentContainer &);
    rnpSource_ToTarget_TransparentContainer *release_rnpSource_ToTarget_TransparentContainer();
    void set_rnpSource_ToTarget_TransparentContainer(rnpSource_ToTarget_TransparentContainer *);

    rnpOldBSS_ToNewBSS_Information *get_rnpOldBSS_ToNewBSS_Information();
    const rnpOldBSS_ToNewBSS_Information *get_rnpOldBSS_ToNewBSS_Information() const;
    void set_rnpOldBSS_ToNewBSS_Information(const rnpOldBSS_ToNewBSS_Information &);
    rnpOldBSS_ToNewBSS_Information *release_rnpOldBSS_ToNewBSS_Information();
    void set_rnpOldBSS_ToNewBSS_Information(rnpOldBSS_ToNewBSS_Information *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnpRelocationRequiredExtensions_Extension : public OssConstrainedOpenType
{
public:
    rnpRelocationRequiredExtensions_Extension();
    rnpRelocationRequiredExtensions_Extension(const rnpRelocationRequiredExtensions_Extension &);
    ~rnpRelocationRequiredExtensions_Extension();
    rnpRelocationRequiredExtensions_Extension & operator = (const rnpRelocationRequiredExtensions_Extension &);
    int operator == (const rnpRelocationRequiredExtensions_Extension &) const;
    int operator != (const rnpRelocationRequiredExtensions_Extension &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpGERAN_Classmark *get_rnpGERAN_Classmark();
    const rnpGERAN_Classmark *get_rnpGERAN_Classmark() const;
    void set_rnpGERAN_Classmark(const rnpGERAN_Classmark &);
    rnpGERAN_Classmark *release_rnpGERAN_Classmark();
    void set_rnpGERAN_Classmark(rnpGERAN_Classmark *);

    rnpSourceBSS_ToTargetBSS_TransparentContainer *get_rnpSourceBSS_ToTargetBSS_TransparentContainer();
    const rnpSourceBSS_ToTargetBSS_TransparentContainer *get_rnpSourceBSS_ToTargetBSS_TransparentContainer() const;
    void set_rnpSourceBSS_ToTargetBSS_TransparentContainer(const rnpSourceBSS_ToTargetBSS_TransparentContainer &);
    rnpSourceBSS_ToTargetBSS_TransparentContainer *release_rnpSourceBSS_ToTargetBSS_TransparentContainer();
    void set_rnpSourceBSS_ToTargetBSS_TransparentContainer(rnpSourceBSS_ToTargetBSS_TransparentContainer *);

    rnpSRVCC_HO_Indication *get_rnpSRVCC_HO_Indication();
    const rnpSRVCC_HO_Indication *get_rnpSRVCC_HO_Indication() const;
    void set_rnpSRVCC_HO_Indication(const rnpSRVCC_HO_Indication &);
    rnpSRVCC_HO_Indication *release_rnpSRVCC_HO_Indication();
    void set_rnpSRVCC_HO_Indication(rnpSRVCC_HO_Indication *);

    rnpCSG_Id *get_rnpCSG_Id();
    const rnpCSG_Id *get_rnpCSG_Id() const;
    void set_rnpCSG_Id(const rnpCSG_Id &);
    rnpCSG_Id *release_rnpCSG_Id();
    void set_rnpCSG_Id(rnpCSG_Id *);

    rnpCell_Access_Mode *get_rnpCell_Access_Mode();
    const rnpCell_Access_Mode *get_rnpCell_Access_Mode() const;
    void set_rnpCell_Access_Mode(const rnpCell_Access_Mode &);
    rnpCell_Access_Mode *release_rnpCell_Access_Mode();
    void set_rnpCell_Access_Mode(rnpCell_Access_Mode *);

    rnpRSRVCC_HO_Indication *get_rnpRSRVCC_HO_Indication();
    const rnpRSRVCC_HO_Indication *get_rnpRSRVCC_HO_Indication() const;
    void set_rnpRSRVCC_HO_Indication(const rnpRSRVCC_HO_Indication &);
    rnpRSRVCC_HO_Indication *release_rnpRSRVCC_HO_Indication();
    void set_rnpRSRVCC_HO_Indication(rnpRSRVCC_HO_Indication *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq9   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpRelocationRequiredIEs_Value value;

    rnp_seq9();
    rnp_seq9(const rnp_seq9 &);
    rnp_seq9(id, criticality, const value &);

    rnp_seq9 & operator = (const rnp_seq9 &);
    int operator == (const rnp_seq9 &) const;
    int operator != (const rnp_seq9 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

class OSS_PUBLIC rnp_seq10   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpRelocationRequiredExtensions_Extension extensionValue;

    rnp_seq10();
    rnp_seq10(const rnp_seq10 &);
    rnp_seq10(id, criticality, const extensionValue &);

    rnp_seq10 & operator = (const rnp_seq10 &);
    int operator == (const rnp_seq10 &) const;
    int operator != (const rnp_seq10 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    extensionValue & get_extensionValue();
    const extensionValue & get_extensionValue() const;
    void set_extensionValue(const extensionValue &);
private:
    id id_field;
    criticality criticality_field;
    extensionValue extensionValue_field;
};

class OSS_PUBLIC rnp_seqof13;

class OSS_PUBLIC rnpRAB_RelocationReleaseList : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seqof13 component;

    rnpRAB_RelocationReleaseList();
    rnpRAB_RelocationReleaseList(const rnpRAB_RelocationReleaseList &);
    ~rnpRAB_RelocationReleaseList();

    rnpRAB_RelocationReleaseList & operator = (const rnpRAB_RelocationReleaseList &);
    int operator == (const rnpRAB_RelocationReleaseList &) const;
    int operator != (const rnpRAB_RelocationReleaseList &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnpRAB_RelocationReleaseList *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnpRAB_RelocationReleaseList *);

    int remove_front();
    int remove_after(OssIndex);

    rnpRAB_RelocationReleaseList *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnp_seqof15;

class OSS_PUBLIC rnpRAB_DataForwardingList : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seqof15 component;

    rnpRAB_DataForwardingList();
    rnpRAB_DataForwardingList(const rnpRAB_DataForwardingList &);
    ~rnpRAB_DataForwardingList();

    rnpRAB_DataForwardingList & operator = (const rnpRAB_DataForwardingList &);
    int operator == (const rnpRAB_DataForwardingList &) const;
    int operator != (const rnpRAB_DataForwardingList &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnpRAB_DataForwardingList *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnpRAB_DataForwardingList *);

    int remove_front();
    int remove_after(OssIndex);

    rnpRAB_DataForwardingList *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpRelocationCommandIEs_Value : public OssConstrainedOpenType
{
public:
    rnpRelocationCommandIEs_Value();
    rnpRelocationCommandIEs_Value(const rnpRelocationCommandIEs_Value &);
    ~rnpRelocationCommandIEs_Value();
    rnpRelocationCommandIEs_Value & operator = (const rnpRelocationCommandIEs_Value &);
    int operator == (const rnpRelocationCommandIEs_Value &) const;
    int operator != (const rnpRelocationCommandIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpTarget_ToSource_TransparentContainer *get_rnpTarget_ToSource_TransparentContainer();
    const rnpTarget_ToSource_TransparentContainer *get_rnpTarget_ToSource_TransparentContainer() const;
    void set_rnpTarget_ToSource_TransparentContainer(const rnpTarget_ToSource_TransparentContainer &);
    rnpTarget_ToSource_TransparentContainer *release_rnpTarget_ToSource_TransparentContainer();
    void set_rnpTarget_ToSource_TransparentContainer(rnpTarget_ToSource_TransparentContainer *);

    rnpL3_Information *get_rnpL3_Information();
    const rnpL3_Information *get_rnpL3_Information() const;
    void set_rnpL3_Information(const rnpL3_Information &);
    rnpL3_Information *release_rnpL3_Information();
    void set_rnpL3_Information(rnpL3_Information *);

    rnpRAB_RelocationReleaseList *get_rnpRAB_RelocationReleaseList();
    const rnpRAB_RelocationReleaseList *get_rnpRAB_RelocationReleaseList() const;
    void set_rnpRAB_RelocationReleaseList(const rnpRAB_RelocationReleaseList &);
    rnpRAB_RelocationReleaseList *release_rnpRAB_RelocationReleaseList();
    void set_rnpRAB_RelocationReleaseList(rnpRAB_RelocationReleaseList *);

    rnpRAB_DataForwardingList *get_rnpRAB_DataForwardingList();
    const rnpRAB_DataForwardingList *get_rnpRAB_DataForwardingList() const;
    void set_rnpRAB_DataForwardingList(const rnpRAB_DataForwardingList &);
    rnpRAB_DataForwardingList *release_rnpRAB_DataForwardingList();
    void set_rnpRAB_DataForwardingList(rnpRAB_DataForwardingList *);

    rnpCriticalityDiagnostics *get_rnpCriticalityDiagnostics();
    const rnpCriticalityDiagnostics *get_rnpCriticalityDiagnostics() const;
    void set_rnpCriticalityDiagnostics(const rnpCriticalityDiagnostics &);
    rnpCriticalityDiagnostics *release_rnpCriticalityDiagnostics();
    void set_rnpCriticalityDiagnostics(rnpCriticalityDiagnostics *);
private:
    void cleanup_decoded();
};

typedef rnp__shared6 rnp_seqof243;

class OSS_PUBLIC rnpCellLoadInformation   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_INT32 cell_Capacity_Class_Value;
    typedef OSS_UINT32 loadValue;
    typedef OSS_UINT32 rTLoadValue;
    typedef OSS_UINT32 nRTLoadInformationValue;
    typedef rnp__shared6 iE_Extensions;

    rnpCellLoadInformation();
    rnpCellLoadInformation(const rnpCellLoadInformation &);
    rnpCellLoadInformation(cell_Capacity_Class_Value, loadValue, rTLoadValue, nRTLoadInformationValue, 
	const iE_Extensions &);
    rnpCellLoadInformation(cell_Capacity_Class_Value, loadValue);

    rnpCellLoadInformation & operator = (const rnpCellLoadInformation &);
    int operator == (const rnpCellLoadInformation &) const;
    int operator != (const rnpCellLoadInformation &) const;

    cell_Capacity_Class_Value & get_cell_Capacity_Class_Value();
    cell_Capacity_Class_Value get_cell_Capacity_Class_Value() const;
    void set_cell_Capacity_Class_Value(cell_Capacity_Class_Value);

    loadValue & get_loadValue();
    loadValue get_loadValue() const;
    void set_loadValue(loadValue);

    rTLoadValue *get_rTLoadValue();
    const rTLoadValue *get_rTLoadValue() const;
    void set_rTLoadValue(rTLoadValue);
    int rTLoadValue_is_present() const;
    void omit_rTLoadValue();

    nRTLoadInformationValue *get_nRTLoadInformationValue();
    const nRTLoadInformationValue *get_nRTLoadInformationValue() const;
    void set_nRTLoadInformationValue(nRTLoadInformationValue);
    int nRTLoadInformationValue_is_present() const;
    void omit_nRTLoadInformationValue();

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    cell_Capacity_Class_Value cell_Capacity_Class_Value_field;
    loadValue loadValue_field;
    rTLoadValue rTLoadValue_field;
    nRTLoadInformationValue nRTLoadInformationValue_field;
    iE_Extensions iE_Extensions_field;
};

typedef rnp__shared6 rnp_seqof265;

class OSS_PUBLIC rnpInterSystemInformation_TransparentContainer   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnpCellLoadInformation downlinkCellLoadInformation;
    typedef rnpCellLoadInformation uplinkCellLoadInformation;
    typedef rnp__shared6 iE_Extensions;

    rnpInterSystemInformation_TransparentContainer();
    rnpInterSystemInformation_TransparentContainer(const rnpInterSystemInformation_TransparentContainer &);
    rnpInterSystemInformation_TransparentContainer(const downlinkCellLoadInformation &, 
	const uplinkCellLoadInformation &, const iE_Extensions &);

    rnpInterSystemInformation_TransparentContainer & operator = (const rnpInterSystemInformation_TransparentContainer &);
    int operator == (const rnpInterSystemInformation_TransparentContainer &) const;
    int operator != (const rnpInterSystemInformation_TransparentContainer &) const;

    downlinkCellLoadInformation *get_downlinkCellLoadInformation();
    const downlinkCellLoadInformation *get_downlinkCellLoadInformation() const;
    void set_downlinkCellLoadInformation(const downlinkCellLoadInformation &);
    int downlinkCellLoadInformation_is_present() const;
    void omit_downlinkCellLoadInformation();

    uplinkCellLoadInformation *get_uplinkCellLoadInformation();
    const uplinkCellLoadInformation *get_uplinkCellLoadInformation() const;
    void set_uplinkCellLoadInformation(const uplinkCellLoadInformation &);
    int uplinkCellLoadInformation_is_present() const;
    void omit_uplinkCellLoadInformation();

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    downlinkCellLoadInformation downlinkCellLoadInformation_field;
    uplinkCellLoadInformation uplinkCellLoadInformation_field;
    iE_Extensions iE_Extensions_field;
};

typedef rnp__shared6 rnp_seqof309;

class OSS_PUBLIC rnpSRVCC_Information   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssBitString nonce;
    typedef rnp__shared6 iE_Extensions;

    rnpSRVCC_Information();
    rnpSRVCC_Information(const rnpSRVCC_Information &);
    rnpSRVCC_Information(const nonce &, const iE_Extensions &);
    rnpSRVCC_Information(const nonce &);

    rnpSRVCC_Information & operator = (const rnpSRVCC_Information &);
    int operator == (const rnpSRVCC_Information &) const;
    int operator != (const rnpSRVCC_Information &) const;

    nonce & get_nonce();
    const nonce & get_nonce() const;
    void set_nonce(const nonce &);

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    nonce nonce_field;
    iE_Extensions iE_Extensions_field;
};

typedef rnp__shared6 rnp_seqof295;

class OSS_PUBLIC rnpRSRVCC_Information   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssBitString nonce;
    typedef OssString iMSInformation;
    typedef rnp__shared6 iE_Extensions;

    rnpRSRVCC_Information();
    rnpRSRVCC_Information(const rnpRSRVCC_Information &);
    rnpRSRVCC_Information(const nonce &, const iMSInformation &, const iE_Extensions &);
    rnpRSRVCC_Information(const nonce &, const iMSInformation &);

    rnpRSRVCC_Information & operator = (const rnpRSRVCC_Information &);
    int operator == (const rnpRSRVCC_Information &) const;
    int operator != (const rnpRSRVCC_Information &) const;

    nonce & get_nonce();
    const nonce & get_nonce() const;
    void set_nonce(const nonce &);

    iMSInformation & get_iMSInformation();
    const iMSInformation & get_iMSInformation() const;
    void set_iMSInformation(const iMSInformation &);

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    nonce nonce_field;
    iMSInformation iMSInformation_field;
    iE_Extensions iE_Extensions_field;
};

class OSS_PUBLIC rnpRelocationCommandExtensions_Extension : public OssConstrainedOpenType
{
public:
    rnpRelocationCommandExtensions_Extension();
    rnpRelocationCommandExtensions_Extension(const rnpRelocationCommandExtensions_Extension &);
    ~rnpRelocationCommandExtensions_Extension();
    rnpRelocationCommandExtensions_Extension & operator = (const rnpRelocationCommandExtensions_Extension &);
    int operator == (const rnpRelocationCommandExtensions_Extension &) const;
    int operator != (const rnpRelocationCommandExtensions_Extension &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpInterSystemInformation_TransparentContainer *get_rnpInterSystemInformation_TransparentContainer();
    const rnpInterSystemInformation_TransparentContainer *get_rnpInterSystemInformation_TransparentContainer() const;
    void set_rnpInterSystemInformation_TransparentContainer(const rnpInterSystemInformation_TransparentContainer &);
    rnpInterSystemInformation_TransparentContainer *release_rnpInterSystemInformation_TransparentContainer();
    void set_rnpInterSystemInformation_TransparentContainer(rnpInterSystemInformation_TransparentContainer *);

    rnpTargetBSS_ToSourceBSS_TransparentContainer *get_rnpTargetBSS_ToSourceBSS_TransparentContainer();
    const rnpTargetBSS_ToSourceBSS_TransparentContainer *get_rnpTargetBSS_ToSourceBSS_TransparentContainer() const;
    void set_rnpTargetBSS_ToSourceBSS_TransparentContainer(const rnpTargetBSS_ToSourceBSS_TransparentContainer &);
    rnpTargetBSS_ToSourceBSS_TransparentContainer *release_rnpTargetBSS_ToSourceBSS_TransparentContainer();
    void set_rnpTargetBSS_ToSourceBSS_TransparentContainer(rnpTargetBSS_ToSourceBSS_TransparentContainer *);

    rnpSRVCC_Information *get_rnpSRVCC_Information();
    const rnpSRVCC_Information *get_rnpSRVCC_Information() const;
    void set_rnpSRVCC_Information(const rnpSRVCC_Information &);
    rnpSRVCC_Information *release_rnpSRVCC_Information();
    void set_rnpSRVCC_Information(rnpSRVCC_Information *);

    rnpRSRVCC_Information *get_rnpRSRVCC_Information();
    const rnpRSRVCC_Information *get_rnpRSRVCC_Information() const;
    void set_rnpRSRVCC_Information(const rnpRSRVCC_Information &);
    rnpRSRVCC_Information *release_rnpRSRVCC_Information();
    void set_rnpRSRVCC_Information(rnpRSRVCC_Information *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq11   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpRelocationCommandIEs_Value value;

    rnp_seq11();
    rnp_seq11(const rnp_seq11 &);
    rnp_seq11(id, criticality, const value &);

    rnp_seq11 & operator = (const rnp_seq11 &);
    int operator == (const rnp_seq11 &) const;
    int operator != (const rnp_seq11 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

class OSS_PUBLIC rnp_seq12   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpRelocationCommandExtensions_Extension extensionValue;

    rnp_seq12();
    rnp_seq12(const rnp_seq12 &);
    rnp_seq12(id, criticality, const extensionValue &);

    rnp_seq12 & operator = (const rnp_seq12 &);
    int operator == (const rnp_seq12 &) const;
    int operator != (const rnp_seq12 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    extensionValue & get_extensionValue();
    const extensionValue & get_extensionValue() const;
    void set_extensionValue(const extensionValue &);
private:
    id id_field;
    criticality criticality_field;
    extensionValue extensionValue_field;
};

typedef rnp__shared6 rnp_seqof44;

class OSS_PUBLIC rnp__shared19   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssBitString rAB_ID;
    typedef rnp__shared6 iE_Extensions;

    rnp__shared19();
    rnp__shared19(const rnp__shared19 &);
    rnp__shared19(const rAB_ID &, const iE_Extensions &);
    rnp__shared19(const rAB_ID &);

    rnp__shared19 & operator = (const rnp__shared19 &);
    int operator == (const rnp__shared19 &) const;
    int operator != (const rnp__shared19 &) const;

    rAB_ID & get_rAB_ID();
    const rAB_ID & get_rAB_ID() const;
    void set_rAB_ID(const rAB_ID &);

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    rAB_ID rAB_ID_field;
    iE_Extensions iE_Extensions_field;
};

typedef rnp__shared19 rnpRAB_DataForwardingItem_SRNS_CtxReq;

typedef rnp__shared19 rnpRAB_RelocationReleaseItem;

class OSS_PUBLIC rnpRAB_RelocationReleaseItemIEs_Value : public OssConstrainedOpenType
{
public:
    rnpRAB_RelocationReleaseItemIEs_Value();
    rnpRAB_RelocationReleaseItemIEs_Value(const rnpRAB_RelocationReleaseItemIEs_Value &);
    ~rnpRAB_RelocationReleaseItemIEs_Value();
    rnpRAB_RelocationReleaseItemIEs_Value & operator = (const rnpRAB_RelocationReleaseItemIEs_Value &);
    int operator == (const rnpRAB_RelocationReleaseItemIEs_Value &) const;
    int operator != (const rnpRAB_RelocationReleaseItemIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnp__shared19 *get_rnpRAB_RelocationReleaseItem();
    const rnp__shared19 *get_rnpRAB_RelocationReleaseItem() const;
    void set_rnpRAB_RelocationReleaseItem(const rnp__shared19 &);
    rnp__shared19 *release_rnpRAB_RelocationReleaseItem();
    void set_rnpRAB_RelocationReleaseItem(rnp__shared19 *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq13;

class OSS_PUBLIC rnp_seqof13 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq13 component;

    rnp_seqof13();
    rnp_seqof13(const rnp_seqof13 &);
    ~rnp_seqof13();

    rnp_seqof13 & operator = (const rnp_seqof13 &);
    int operator == (const rnp_seqof13 &) const;
    int operator != (const rnp_seqof13 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof13 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof13 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof13 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnp_seq13   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpRAB_RelocationReleaseItemIEs_Value value;

    rnp_seq13();
    rnp_seq13(const rnp_seq13 &);
    rnp_seq13(id, criticality, const value &);

    rnp_seq13 & operator = (const rnp_seq13 &);
    int operator == (const rnp_seq13 &) const;
    int operator != (const rnp_seq13 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

typedef rnp__shared6 rnp_seqof14;

typedef rnp__shared5 rnp_seq14;

class OSS_PUBLIC rnpIuTransportAssociation  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	gTP_TEI_chosen = 1,
	bindingID_chosen = 2
    };
    typedef OssString gTP_TEI;
    typedef OssString bindingID;

    rnpIuTransportAssociation();
    rnpIuTransportAssociation(const rnpIuTransportAssociation &);
    ~rnpIuTransportAssociation();

    rnpIuTransportAssociation & operator = (const rnpIuTransportAssociation &);
    int operator == (const rnpIuTransportAssociation &) const;
    int operator != (const rnpIuTransportAssociation &) const;

    gTP_TEI *get_gTP_TEI();
    const gTP_TEI *get_gTP_TEI() const;
    void set_gTP_TEI(const gTP_TEI &);

    bindingID *get_bindingID();
    const bindingID *get_bindingID() const;
    void set_bindingID(const bindingID &);
private:
    union {
	OSSC::COssString gTP_TEI_field;
	OSSC::COssString bindingID_field;
    };
    void cleanup();
};

class OSS_PUBLIC rnp_seq16;

class OSS_PUBLIC rnp_seqof16 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq16 component;

    rnp_seqof16();
    rnp_seqof16(const rnp_seqof16 &);
    ~rnp_seqof16();

    rnp_seqof16 & operator = (const rnp_seqof16 &);
    int operator == (const rnp_seqof16 &) const;
    int operator != (const rnp_seqof16 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof16 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof16 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof16 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpRAB_DataForwardingItem   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssBitString rAB_ID;
    typedef OssBitString transportLayerAddress;
    typedef rnpIuTransportAssociation iuTransportAssociation;
    typedef rnp_seqof16 iE_Extensions;

    rnpRAB_DataForwardingItem();
    rnpRAB_DataForwardingItem(const rnpRAB_DataForwardingItem &);
    rnpRAB_DataForwardingItem(const rAB_ID &, const transportLayerAddress &, const iuTransportAssociation &, 
	const iE_Extensions &);
    rnpRAB_DataForwardingItem(const rAB_ID &, const transportLayerAddress &, const iuTransportAssociation &);

    rnpRAB_DataForwardingItem & operator = (const rnpRAB_DataForwardingItem &);
    int operator == (const rnpRAB_DataForwardingItem &) const;
    int operator != (const rnpRAB_DataForwardingItem &) const;

    rAB_ID & get_rAB_ID();
    const rAB_ID & get_rAB_ID() const;
    void set_rAB_ID(const rAB_ID &);

    transportLayerAddress & get_transportLayerAddress();
    const transportLayerAddress & get_transportLayerAddress() const;
    void set_transportLayerAddress(const transportLayerAddress &);

    iuTransportAssociation & get_iuTransportAssociation();
    const iuTransportAssociation & get_iuTransportAssociation() const;
    void set_iuTransportAssociation(const iuTransportAssociation &);

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    rAB_ID rAB_ID_field;
    transportLayerAddress transportLayerAddress_field;
    iuTransportAssociation iuTransportAssociation_field;
    iE_Extensions iE_Extensions_field;
};

class OSS_PUBLIC rnpRAB_DataForwardingItemIEs_Value : public OssConstrainedOpenType
{
public:
    rnpRAB_DataForwardingItemIEs_Value();
    rnpRAB_DataForwardingItemIEs_Value(const rnpRAB_DataForwardingItemIEs_Value &);
    ~rnpRAB_DataForwardingItemIEs_Value();
    rnpRAB_DataForwardingItemIEs_Value & operator = (const rnpRAB_DataForwardingItemIEs_Value &);
    int operator == (const rnpRAB_DataForwardingItemIEs_Value &) const;
    int operator != (const rnpRAB_DataForwardingItemIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpRAB_DataForwardingItem *get_rnpRAB_DataForwardingItem();
    const rnpRAB_DataForwardingItem *get_rnpRAB_DataForwardingItem() const;
    void set_rnpRAB_DataForwardingItem(const rnpRAB_DataForwardingItem &);
    rnpRAB_DataForwardingItem *release_rnpRAB_DataForwardingItem();
    void set_rnpRAB_DataForwardingItem(rnpRAB_DataForwardingItem *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq15;

class OSS_PUBLIC rnp_seqof15 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq15 component;

    rnp_seqof15();
    rnp_seqof15(const rnp_seqof15 &);
    ~rnp_seqof15();

    rnp_seqof15 & operator = (const rnp_seqof15 &);
    int operator == (const rnp_seqof15 &) const;
    int operator != (const rnp_seqof15 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof15 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof15 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof15 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnp_seq15   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpRAB_DataForwardingItemIEs_Value value;

    rnp_seq15();
    rnp_seq15(const rnp_seq15 &);
    rnp_seq15(id, criticality, const value &);

    rnp_seq15 & operator = (const rnp_seq15 &);
    int operator == (const rnp_seq15 &) const;
    int operator != (const rnp_seq15 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

typedef OssString rnpGTP_TEI;

typedef OssString rnpBindingID;

class OSS_PUBLIC rnpRAB_DataForwardingItem_ExtIEs_Extension : public OssConstrainedOpenType
{
public:
    rnpRAB_DataForwardingItem_ExtIEs_Extension();
    rnpRAB_DataForwardingItem_ExtIEs_Extension(const rnpRAB_DataForwardingItem_ExtIEs_Extension &);
    ~rnpRAB_DataForwardingItem_ExtIEs_Extension();
    rnpRAB_DataForwardingItem_ExtIEs_Extension & operator = (const rnpRAB_DataForwardingItem_ExtIEs_Extension &);
    int operator == (const rnpRAB_DataForwardingItem_ExtIEs_Extension &) const;
    int operator != (const rnpRAB_DataForwardingItem_ExtIEs_Extension &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpTransportLayerAddress *get_rnpTransportLayerAddress();
    const rnpTransportLayerAddress *get_rnpTransportLayerAddress() const;
    void set_rnpTransportLayerAddress(const rnpTransportLayerAddress &);
    rnpTransportLayerAddress *release_rnpTransportLayerAddress();
    void set_rnpTransportLayerAddress(rnpTransportLayerAddress *);

    rnpIuTransportAssociation *get_rnpIuTransportAssociation();
    const rnpIuTransportAssociation *get_rnpIuTransportAssociation() const;
    void set_rnpIuTransportAssociation(const rnpIuTransportAssociation &);
    rnpIuTransportAssociation *release_rnpIuTransportAssociation();
    void set_rnpIuTransportAssociation(rnpIuTransportAssociation *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq16   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpRAB_DataForwardingItem_ExtIEs_Extension extensionValue;

    rnp_seq16();
    rnp_seq16(const rnp_seq16 &);
    rnp_seq16(id, criticality, const extensionValue &);

    rnp_seq16 & operator = (const rnp_seq16 &);
    int operator == (const rnp_seq16 &) const;
    int operator != (const rnp_seq16 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    extensionValue & get_extensionValue();
    const extensionValue & get_extensionValue() const;
    void set_extensionValue(const extensionValue &);
private:
    id id_field;
    criticality criticality_field;
    extensionValue extensionValue_field;
};

class OSS_PUBLIC rnpRelocationPreparationFailureIEs_Value : public OssConstrainedOpenType
{
public:
    rnpRelocationPreparationFailureIEs_Value();
    rnpRelocationPreparationFailureIEs_Value(const rnpRelocationPreparationFailureIEs_Value &);
    ~rnpRelocationPreparationFailureIEs_Value();
    rnpRelocationPreparationFailureIEs_Value & operator = (const rnpRelocationPreparationFailureIEs_Value &);
    int operator == (const rnpRelocationPreparationFailureIEs_Value &) const;
    int operator != (const rnpRelocationPreparationFailureIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpCause *get_rnpCause();
    const rnpCause *get_rnpCause() const;
    void set_rnpCause(const rnpCause &);
    rnpCause *release_rnpCause();
    void set_rnpCause(rnpCause *);

    rnpCriticalityDiagnostics *get_rnpCriticalityDiagnostics();
    const rnpCriticalityDiagnostics *get_rnpCriticalityDiagnostics() const;
    void set_rnpCriticalityDiagnostics(const rnpCriticalityDiagnostics &);
    rnpCriticalityDiagnostics *release_rnpCriticalityDiagnostics();
    void set_rnpCriticalityDiagnostics(rnpCriticalityDiagnostics *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnpRelocationPreparationFailureExtensions_Extension : public OssConstrainedOpenType
{
public:
    rnpRelocationPreparationFailureExtensions_Extension();
    rnpRelocationPreparationFailureExtensions_Extension(const rnpRelocationPreparationFailureExtensions_Extension &);
    ~rnpRelocationPreparationFailureExtensions_Extension();
    rnpRelocationPreparationFailureExtensions_Extension & operator = (const rnpRelocationPreparationFailureExtensions_Extension &);
    int operator == (const rnpRelocationPreparationFailureExtensions_Extension &) const;
    int operator != (const rnpRelocationPreparationFailureExtensions_Extension &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpInterSystemInformation_TransparentContainer *get_rnpInterSystemInformation_TransparentContainer();
    const rnpInterSystemInformation_TransparentContainer *get_rnpInterSystemInformation_TransparentContainer() const;
    void set_rnpInterSystemInformation_TransparentContainer(const rnpInterSystemInformation_TransparentContainer &);
    rnpInterSystemInformation_TransparentContainer *release_rnpInterSystemInformation_TransparentContainer();
    void set_rnpInterSystemInformation_TransparentContainer(rnpInterSystemInformation_TransparentContainer *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp__shared37   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpRelocationPreparationFailureIEs_Value value;

    rnp__shared37();
    rnp__shared37(const rnp__shared37 &);
    rnp__shared37(id, criticality, const value &);

    rnp__shared37 & operator = (const rnp__shared37 &);
    int operator == (const rnp__shared37 &) const;
    int operator != (const rnp__shared37 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

typedef rnp__shared37 rnp_seq17;

class OSS_PUBLIC rnp_seq18   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpRelocationPreparationFailureExtensions_Extension extensionValue;

    rnp_seq18();
    rnp_seq18(const rnp_seq18 &);
    rnp_seq18(id, criticality, const extensionValue &);

    rnp_seq18 & operator = (const rnp_seq18 &);
    int operator == (const rnp_seq18 &) const;
    int operator != (const rnp_seq18 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    extensionValue & get_extensionValue();
    const extensionValue & get_extensionValue() const;
    void set_extensionValue(const extensionValue &);
private:
    id id_field;
    criticality criticality_field;
    extensionValue extensionValue_field;
};

class OSS_PUBLIC rnpPermanentNAS_UE_ID  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	iMSI_chosen = 1
    };
    typedef OssString iMSI;

    rnpPermanentNAS_UE_ID();
    rnpPermanentNAS_UE_ID(const rnpPermanentNAS_UE_ID &);
    ~rnpPermanentNAS_UE_ID();

    rnpPermanentNAS_UE_ID & operator = (const rnpPermanentNAS_UE_ID &);
    int operator == (const rnpPermanentNAS_UE_ID &) const;
    int operator != (const rnpPermanentNAS_UE_ID &) const;

    iMSI *get_iMSI();
    const iMSI *get_iMSI() const;
    void set_iMSI(const iMSI &);
private:
    union {
	OSSC::COssString iMSI_field;
    };
    void cleanup();
};

class OSS_PUBLIC rnpRAB_TrCH_MappingItem;

class OSS_PUBLIC rnpRAB_TrCH_Mapping : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnpRAB_TrCH_MappingItem component;

    rnpRAB_TrCH_Mapping();
    rnpRAB_TrCH_Mapping(const rnpRAB_TrCH_Mapping &);
    ~rnpRAB_TrCH_Mapping();

    rnpRAB_TrCH_Mapping & operator = (const rnpRAB_TrCH_Mapping &);
    int operator == (const rnpRAB_TrCH_Mapping &) const;
    int operator != (const rnpRAB_TrCH_Mapping &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnpRAB_TrCH_Mapping *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnpRAB_TrCH_Mapping *);

    int remove_front();
    int remove_after(OssIndex);

    rnpRAB_TrCH_Mapping *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnp_seq315;

class OSS_PUBLIC rnp_seqof302 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq315 component;

    rnp_seqof302();
    rnp_seqof302(const rnp_seqof302 &);
    ~rnp_seqof302();

    rnp_seqof302 & operator = (const rnp_seqof302 &);
    int operator == (const rnp_seqof302 &) const;
    int operator != (const rnp_seqof302 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof302 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof302 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof302 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpSourceRNC_ToTargetRNC_TransparentContainer   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssString rRC_Container;
    typedef OSS_UINT32 numberOfIuInstances;
    typedef enum rnpRelocationType relocationType;
    typedef OSS_UINT32 chosenIntegrityProtectionAlgorithm;
    typedef OssBitString integrityProtectionKey;
    typedef OSS_UINT32 chosenEncryptionAlgorithForSignalling;
    typedef OssBitString cipheringKey;
    typedef OSS_UINT32 chosenEncryptionAlgorithForCS;
    typedef OSS_UINT32 chosenEncryptionAlgorithForPS;
    typedef OSS_UINT32 d_RNTI;
    typedef OSS_UINT32 targetCellId;
    typedef rnpRAB_TrCH_Mapping rAB_TrCH_Mapping;
    typedef rnp_seqof302 iE_Extensions;

    rnpSourceRNC_ToTargetRNC_TransparentContainer();
    rnpSourceRNC_ToTargetRNC_TransparentContainer(const rnpSourceRNC_ToTargetRNC_TransparentContainer &);
    rnpSourceRNC_ToTargetRNC_TransparentContainer(const rRC_Container &, numberOfIuInstances, 
	relocationType, chosenIntegrityProtectionAlgorithm, const integrityProtectionKey &, 
	chosenEncryptionAlgorithForSignalling, const cipheringKey &, chosenEncryptionAlgorithForCS, 
	chosenEncryptionAlgorithForPS, d_RNTI, targetCellId, const rAB_TrCH_Mapping &, const iE_Extensions &);
    rnpSourceRNC_ToTargetRNC_TransparentContainer(const rRC_Container &, numberOfIuInstances, 
	relocationType);

    rnpSourceRNC_ToTargetRNC_TransparentContainer & operator = (const rnpSourceRNC_ToTargetRNC_TransparentContainer &);
    int operator == (const rnpSourceRNC_ToTargetRNC_TransparentContainer &) const;
    int operator != (const rnpSourceRNC_ToTargetRNC_TransparentContainer &) const;

    rRC_Container & get_rRC_Container();
    const rRC_Container & get_rRC_Container() const;
    void set_rRC_Container(const rRC_Container &);

    numberOfIuInstances & get_numberOfIuInstances();
    numberOfIuInstances get_numberOfIuInstances() const;
    void set_numberOfIuInstances(numberOfIuInstances);

    relocationType & get_relocationType();
    relocationType get_relocationType() const;
    void set_relocationType(relocationType);

    chosenIntegrityProtectionAlgorithm *get_chosenIntegrityProtectionAlgorithm();
    const chosenIntegrityProtectionAlgorithm *get_chosenIntegrityProtectionAlgorithm() const;
    void set_chosenIntegrityProtectionAlgorithm(chosenIntegrityProtectionAlgorithm);
    int chosenIntegrityProtectionAlgorithm_is_present() const;
    void omit_chosenIntegrityProtectionAlgorithm();

    integrityProtectionKey *get_integrityProtectionKey();
    const integrityProtectionKey *get_integrityProtectionKey() const;
    void set_integrityProtectionKey(const integrityProtectionKey &);
    int integrityProtectionKey_is_present() const;
    void omit_integrityProtectionKey();

    chosenEncryptionAlgorithForSignalling *get_chosenEncryptionAlgorithForSignalling();
    const chosenEncryptionAlgorithForSignalling *get_chosenEncryptionAlgorithForSignalling() const;
    void set_chosenEncryptionAlgorithForSignalling(chosenEncryptionAlgorithForSignalling);
    int chosenEncryptionAlgorithForSignalling_is_present() const;
    void omit_chosenEncryptionAlgorithForSignalling();

    cipheringKey *get_cipheringKey();
    const cipheringKey *get_cipheringKey() const;
    void set_cipheringKey(const cipheringKey &);
    int cipheringKey_is_present() const;
    void omit_cipheringKey();

    chosenEncryptionAlgorithForCS *get_chosenEncryptionAlgorithForCS();
    const chosenEncryptionAlgorithForCS *get_chosenEncryptionAlgorithForCS() const;
    void set_chosenEncryptionAlgorithForCS(chosenEncryptionAlgorithForCS);
    int chosenEncryptionAlgorithForCS_is_present() const;
    void omit_chosenEncryptionAlgorithForCS();

    chosenEncryptionAlgorithForPS *get_chosenEncryptionAlgorithForPS();
    const chosenEncryptionAlgorithForPS *get_chosenEncryptionAlgorithForPS() const;
    void set_chosenEncryptionAlgorithForPS(chosenEncryptionAlgorithForPS);
    int chosenEncryptionAlgorithForPS_is_present() const;
    void omit_chosenEncryptionAlgorithForPS();

    d_RNTI *get_d_RNTI();
    const d_RNTI *get_d_RNTI() const;
    void set_d_RNTI(d_RNTI);
    int d_RNTI_is_present() const;
    void omit_d_RNTI();

    targetCellId *get_targetCellId();
    const targetCellId *get_targetCellId() const;
    void set_targetCellId(targetCellId);
    int targetCellId_is_present() const;
    void omit_targetCellId();

    rAB_TrCH_Mapping *get_rAB_TrCH_Mapping();
    const rAB_TrCH_Mapping *get_rAB_TrCH_Mapping() const;
    void set_rAB_TrCH_Mapping(const rAB_TrCH_Mapping &);
    int rAB_TrCH_Mapping_is_present() const;
    void omit_rAB_TrCH_Mapping();

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    rRC_Container rRC_Container_field;
    numberOfIuInstances numberOfIuInstances_field;
    relocationType relocationType_field;
    chosenIntegrityProtectionAlgorithm chosenIntegrityProtectionAlgorithm_field;
    integrityProtectionKey integrityProtectionKey_field;
    chosenEncryptionAlgorithForSignalling chosenEncryptionAlgorithForSignalling_field;
    cipheringKey cipheringKey_field;
    chosenEncryptionAlgorithForCS chosenEncryptionAlgorithForCS_field;
    chosenEncryptionAlgorithForPS chosenEncryptionAlgorithForPS_field;
    d_RNTI d_RNTI_field;
    targetCellId targetCellId_field;
    rAB_TrCH_Mapping rAB_TrCH_Mapping_field;
    iE_Extensions iE_Extensions_field;
};

class OSS_PUBLIC rnp_seqof21;

class OSS_PUBLIC rnpRAB_SetupList_RelocReq : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seqof21 component;

    rnpRAB_SetupList_RelocReq();
    rnpRAB_SetupList_RelocReq(const rnpRAB_SetupList_RelocReq &);
    ~rnpRAB_SetupList_RelocReq();

    rnpRAB_SetupList_RelocReq & operator = (const rnpRAB_SetupList_RelocReq &);
    int operator == (const rnpRAB_SetupList_RelocReq &) const;
    int operator != (const rnpRAB_SetupList_RelocReq &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnpRAB_SetupList_RelocReq *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnpRAB_SetupList_RelocReq *);

    int remove_front();
    int remove_after(OssIndex);

    rnpRAB_SetupList_RelocReq *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnp__shared10 : public OssList  /* SEQUENCE OF */
{
public:
    typedef OSS_UINT32 component;

    rnp__shared10();
    rnp__shared10(const rnp__shared10 &);
    ~rnp__shared10();

    rnp__shared10 & operator = (const rnp__shared10 &);
    int operator == (const rnp__shared10 &) const;
    int operator != (const rnp__shared10 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(component );
    OssIndex prepend(rnp__shared10 *);
    OssIndex insert_after(OssIndex, component );
    OssIndex insert_after(OssIndex, rnp__shared10 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp__shared10 *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared10 rnpRAB_Parameter_MaxBitrateList;

typedef rnp__shared10 rnpPermittedIntegrityProtectionAlgorithms;

typedef rnp__shared6 rnp_seqof264;

class OSS_PUBLIC rnp__shared16   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp__shared10 permittedAlgorithms;
    typedef OssBitString key;
    typedef rnp__shared6 iE_Extensions;

    rnp__shared16();
    rnp__shared16(const rnp__shared16 &);
    rnp__shared16(const permittedAlgorithms &, const key &, const iE_Extensions &);
    rnp__shared16(const permittedAlgorithms &, const key &);

    rnp__shared16 & operator = (const rnp__shared16 &);
    int operator == (const rnp__shared16 &) const;
    int operator != (const rnp__shared16 &) const;

    permittedAlgorithms & get_permittedAlgorithms();
    const permittedAlgorithms & get_permittedAlgorithms() const;
    void set_permittedAlgorithms(const permittedAlgorithms &);

    key & get_key();
    const key & get_key() const;
    void set_key(const key &);

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    permittedAlgorithms permittedAlgorithms_field;
    key key_field;
    iE_Extensions iE_Extensions_field;
};

typedef rnp__shared16 rnpIntegrityProtectionInformation;

typedef rnp__shared16 rnpEncryptionInformation;

class OSS_PUBLIC rnpRelocationRequestIEs_Value : public OssConstrainedOpenType
{
public:
    rnpRelocationRequestIEs_Value();
    rnpRelocationRequestIEs_Value(const rnpRelocationRequestIEs_Value &);
    ~rnpRelocationRequestIEs_Value();
    rnpRelocationRequestIEs_Value & operator = (const rnpRelocationRequestIEs_Value &);
    int operator == (const rnpRelocationRequestIEs_Value &) const;
    int operator != (const rnpRelocationRequestIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpPermanentNAS_UE_ID *get_rnpPermanentNAS_UE_ID();
    const rnpPermanentNAS_UE_ID *get_rnpPermanentNAS_UE_ID() const;
    void set_rnpPermanentNAS_UE_ID(const rnpPermanentNAS_UE_ID &);
    rnpPermanentNAS_UE_ID *release_rnpPermanentNAS_UE_ID();
    void set_rnpPermanentNAS_UE_ID(rnpPermanentNAS_UE_ID *);

    rnpCause *get_rnpCause();
    const rnpCause *get_rnpCause() const;
    void set_rnpCause(const rnpCause &);
    rnpCause *release_rnpCause();
    void set_rnpCause(rnpCause *);

    rnpCN_DomainIndicator *get_rnpCN_DomainIndicator();
    const rnpCN_DomainIndicator *get_rnpCN_DomainIndicator() const;
    void set_rnpCN_DomainIndicator(const rnpCN_DomainIndicator &);
    rnpCN_DomainIndicator *release_rnpCN_DomainIndicator();
    void set_rnpCN_DomainIndicator(rnpCN_DomainIndicator *);

    rnpSourceRNC_ToTargetRNC_TransparentContainer *get_rnpSourceRNC_ToTargetRNC_TransparentContainer();
    const rnpSourceRNC_ToTargetRNC_TransparentContainer *get_rnpSourceRNC_ToTargetRNC_TransparentContainer() const;
    void set_rnpSourceRNC_ToTargetRNC_TransparentContainer(const rnpSourceRNC_ToTargetRNC_TransparentContainer &);
    rnpSourceRNC_ToTargetRNC_TransparentContainer *release_rnpSourceRNC_ToTargetRNC_TransparentContainer();
    void set_rnpSourceRNC_ToTargetRNC_TransparentContainer(rnpSourceRNC_ToTargetRNC_TransparentContainer *);

    rnpRAB_SetupList_RelocReq *get_rnpRAB_SetupList_RelocReq();
    const rnpRAB_SetupList_RelocReq *get_rnpRAB_SetupList_RelocReq() const;
    void set_rnpRAB_SetupList_RelocReq(const rnpRAB_SetupList_RelocReq &);
    rnpRAB_SetupList_RelocReq *release_rnpRAB_SetupList_RelocReq();
    void set_rnpRAB_SetupList_RelocReq(rnpRAB_SetupList_RelocReq *);

    rnp__shared16 *get_rnpIntegrityProtectionInformation();
    const rnp__shared16 *get_rnpIntegrityProtectionInformation() const;
    void set_rnpIntegrityProtectionInformation(const rnp__shared16 &);
    rnp__shared16 *release_rnpIntegrityProtectionInformation();
    void set_rnpIntegrityProtectionInformation(rnp__shared16 *);

    rnp__shared16 *get_rnpEncryptionInformation();
    const rnp__shared16 *get_rnpEncryptionInformation() const;
    void set_rnpEncryptionInformation(const rnp__shared16 &);
    rnp__shared16 *release_rnpEncryptionInformation();
    void set_rnpEncryptionInformation(rnp__shared16 *);

    rnpIuSignallingConnectionIdentifier *get_rnpIuSignallingConnectionIdentifier();
    const rnpIuSignallingConnectionIdentifier *get_rnpIuSignallingConnectionIdentifier() const;
    void set_rnpIuSignallingConnectionIdentifier(const rnpIuSignallingConnectionIdentifier &);
    rnpIuSignallingConnectionIdentifier *release_rnpIuSignallingConnectionIdentifier();
    void set_rnpIuSignallingConnectionIdentifier(rnpIuSignallingConnectionIdentifier *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnpGlobalCN_ID   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssString pLMNidentity;
    typedef OSS_UINT32 cN_ID;

    rnpGlobalCN_ID();
    rnpGlobalCN_ID(const rnpGlobalCN_ID &);
    rnpGlobalCN_ID(const pLMNidentity &, cN_ID);

    rnpGlobalCN_ID & operator = (const rnpGlobalCN_ID &);
    int operator == (const rnpGlobalCN_ID &) const;
    int operator != (const rnpGlobalCN_ID &) const;

    pLMNidentity & get_pLMNidentity();
    const pLMNidentity & get_pLMNidentity() const;
    void set_pLMNidentity(const pLMNidentity &);

    cN_ID & get_cN_ID();
    cN_ID get_cN_ID() const;
    void set_cN_ID(cN_ID);
private:
    pLMNidentity pLMNidentity_field;
    cN_ID cN_ID_field;
};

class OSS_PUBLIC rnp_seq245;

class OSS_PUBLIC rnpAuthorisedPLMNs : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq245 component;

    rnpAuthorisedPLMNs();
    rnpAuthorisedPLMNs(const rnpAuthorisedPLMNs &);
    ~rnpAuthorisedPLMNs();

    rnpAuthorisedPLMNs & operator = (const rnpAuthorisedPLMNs &);
    int operator == (const rnpAuthorisedPLMNs &) const;
    int operator != (const rnpAuthorisedPLMNs &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnpAuthorisedPLMNs *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnpAuthorisedPLMNs *);

    int remove_front();
    int remove_after(OssIndex);

    rnpAuthorisedPLMNs *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared6 rnp_seqof300;

class OSS_PUBLIC rnpSNA_Access_Information   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnpAuthorisedPLMNs authorisedPLMNs;
    typedef rnp__shared6 iE_Extensions;

    rnpSNA_Access_Information();
    rnpSNA_Access_Information(const rnpSNA_Access_Information &);
    rnpSNA_Access_Information(const authorisedPLMNs &, const iE_Extensions &);
    rnpSNA_Access_Information(const authorisedPLMNs &);

    rnpSNA_Access_Information & operator = (const rnpSNA_Access_Information &);
    int operator == (const rnpSNA_Access_Information &) const;
    int operator != (const rnpSNA_Access_Information &) const;

    authorisedPLMNs & get_authorisedPLMNs();
    const authorisedPLMNs & get_authorisedPLMNs() const;
    void set_authorisedPLMNs(const authorisedPLMNs &);

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    authorisedPLMNs authorisedPLMNs_field;
    iE_Extensions iE_Extensions_field;
};

typedef rnp__shared6 rnp_seqof316;

class OSS_PUBLIC rnpUESBI_Iu   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssBitString uESBI_IuA;
    typedef OssBitString uESBI_IuB;
    typedef rnp__shared6 iE_Extensions;

    rnpUESBI_Iu();
    rnpUESBI_Iu(const rnpUESBI_Iu &);
    rnpUESBI_Iu(const uESBI_IuA &, const uESBI_IuB &, const iE_Extensions &);

    rnpUESBI_Iu & operator = (const rnpUESBI_Iu &);
    int operator == (const rnpUESBI_Iu &) const;
    int operator != (const rnpUESBI_Iu &) const;

    uESBI_IuA *get_uESBI_IuA();
    const uESBI_IuA *get_uESBI_IuA() const;
    void set_uESBI_IuA(const uESBI_IuA &);
    int uESBI_IuA_is_present() const;
    void omit_uESBI_IuA();

    uESBI_IuB *get_uESBI_IuB();
    const uESBI_IuB *get_uESBI_IuB() const;
    void set_uESBI_IuB(const uESBI_IuB &);
    int uESBI_IuB_is_present() const;
    void omit_uESBI_IuB();

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    uESBI_IuA uESBI_IuA_field;
    uESBI_IuB uESBI_IuB_field;
    iE_Extensions iE_Extensions_field;
};

class OSS_PUBLIC rnp_seq29;

class OSS_PUBLIC rnp__shared17 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq29 component;

    rnp__shared17();
    rnp__shared17(const rnp__shared17 &);
    ~rnp__shared17();

    rnp__shared17 & operator = (const rnp__shared17 &);
    int operator == (const rnp__shared17 &) const;
    int operator != (const rnp__shared17 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp__shared17 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp__shared17 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp__shared17 *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared17 rnpJoinedMBMSBearerService_IEs;

typedef rnp__shared6 rnp_seqof26;

class OSS_PUBLIC rnpCNMBMSLinkingInformation   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp__shared17 joinedMBMSBearerService_IEs;
    typedef rnp__shared6 iE_Extensions;

    rnpCNMBMSLinkingInformation();
    rnpCNMBMSLinkingInformation(const rnpCNMBMSLinkingInformation &);
    rnpCNMBMSLinkingInformation(const joinedMBMSBearerService_IEs &, const iE_Extensions &);
    rnpCNMBMSLinkingInformation(const joinedMBMSBearerService_IEs &);

    rnpCNMBMSLinkingInformation & operator = (const rnpCNMBMSLinkingInformation &);
    int operator == (const rnpCNMBMSLinkingInformation &) const;
    int operator != (const rnpCNMBMSLinkingInformation &) const;

    joinedMBMSBearerService_IEs & get_joinedMBMSBearerService_IEs();
    const joinedMBMSBearerService_IEs & get_joinedMBMSBearerService_IEs() const;
    void set_joinedMBMSBearerService_IEs(const joinedMBMSBearerService_IEs &);

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    joinedMBMSBearerService_IEs joinedMBMSBearerService_IEs_field;
    iE_Extensions iE_Extensions_field;
};

class OSS_PUBLIC rnpUE_AggregateMaximumBitRate   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 uE_AggregateMaximumBitRateDownlink;
    typedef OSS_UINT32 uE_AggregateMaximumBitRateUplink;

    rnpUE_AggregateMaximumBitRate();
    rnpUE_AggregateMaximumBitRate(const rnpUE_AggregateMaximumBitRate &);
    rnpUE_AggregateMaximumBitRate(uE_AggregateMaximumBitRateDownlink, uE_AggregateMaximumBitRateUplink);

    rnpUE_AggregateMaximumBitRate & operator = (const rnpUE_AggregateMaximumBitRate &);
    int operator == (const rnpUE_AggregateMaximumBitRate &) const;
    int operator != (const rnpUE_AggregateMaximumBitRate &) const;

    uE_AggregateMaximumBitRateDownlink *get_uE_AggregateMaximumBitRateDownlink();
    const uE_AggregateMaximumBitRateDownlink *get_uE_AggregateMaximumBitRateDownlink() const;
    void set_uE_AggregateMaximumBitRateDownlink(uE_AggregateMaximumBitRateDownlink);
    int uE_AggregateMaximumBitRateDownlink_is_present() const;
    void omit_uE_AggregateMaximumBitRateDownlink();

    uE_AggregateMaximumBitRateUplink *get_uE_AggregateMaximumBitRateUplink();
    const uE_AggregateMaximumBitRateUplink *get_uE_AggregateMaximumBitRateUplink() const;
    void set_uE_AggregateMaximumBitRateUplink(uE_AggregateMaximumBitRateUplink);
    int uE_AggregateMaximumBitRateUplink_is_present() const;
    void omit_uE_AggregateMaximumBitRateUplink();
private:
    OSS_UINT32 bit_mask;
    uE_AggregateMaximumBitRateDownlink uE_AggregateMaximumBitRateDownlink_field;
    uE_AggregateMaximumBitRateUplink uE_AggregateMaximumBitRateUplink_field;
};

class OSS_PUBLIC rnpRelocationRequestExtensions_Extension : public OssConstrainedOpenType
{
public:
    rnpRelocationRequestExtensions_Extension();
    rnpRelocationRequestExtensions_Extension(const rnpRelocationRequestExtensions_Extension &);
    ~rnpRelocationRequestExtensions_Extension();
    rnpRelocationRequestExtensions_Extension & operator = (const rnpRelocationRequestExtensions_Extension &);
    int operator == (const rnpRelocationRequestExtensions_Extension &) const;
    int operator != (const rnpRelocationRequestExtensions_Extension &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpGlobalCN_ID *get_rnpGlobalCN_ID();
    const rnpGlobalCN_ID *get_rnpGlobalCN_ID() const;
    void set_rnpGlobalCN_ID(const rnpGlobalCN_ID &);
    rnpGlobalCN_ID *release_rnpGlobalCN_ID();
    void set_rnpGlobalCN_ID(rnpGlobalCN_ID *);

    rnpSNA_Access_Information *get_rnpSNA_Access_Information();
    const rnpSNA_Access_Information *get_rnpSNA_Access_Information() const;
    void set_rnpSNA_Access_Information(const rnpSNA_Access_Information &);
    rnpSNA_Access_Information *release_rnpSNA_Access_Information();
    void set_rnpSNA_Access_Information(rnpSNA_Access_Information *);

    rnpUESBI_Iu *get_rnpUESBI_Iu();
    const rnpUESBI_Iu *get_rnpUESBI_Iu() const;
    void set_rnpUESBI_Iu(const rnpUESBI_Iu &);
    rnpUESBI_Iu *release_rnpUESBI_Iu();
    void set_rnpUESBI_Iu(rnpUESBI_Iu *);

    rnpPLMNidentity *get_rnpPLMNidentity();
    const rnpPLMNidentity *get_rnpPLMNidentity() const;
    void set_rnpPLMNidentity(const rnpPLMNidentity &);
    rnpPLMNidentity *release_rnpPLMNidentity();
    void set_rnpPLMNidentity(rnpPLMNidentity *);

    rnpCNMBMSLinkingInformation *get_rnpCNMBMSLinkingInformation();
    const rnpCNMBMSLinkingInformation *get_rnpCNMBMSLinkingInformation() const;
    void set_rnpCNMBMSLinkingInformation(const rnpCNMBMSLinkingInformation &);
    rnpCNMBMSLinkingInformation *release_rnpCNMBMSLinkingInformation();
    void set_rnpCNMBMSLinkingInformation(rnpCNMBMSLinkingInformation *);

    rnpUE_AggregateMaximumBitRate *get_rnpUE_AggregateMaximumBitRate();
    const rnpUE_AggregateMaximumBitRate *get_rnpUE_AggregateMaximumBitRate() const;
    void set_rnpUE_AggregateMaximumBitRate(const rnpUE_AggregateMaximumBitRate &);
    rnpUE_AggregateMaximumBitRate *release_rnpUE_AggregateMaximumBitRate();
    void set_rnpUE_AggregateMaximumBitRate(rnpUE_AggregateMaximumBitRate *);

    rnpCSG_Id *get_rnpCSG_Id();
    const rnpCSG_Id *get_rnpCSG_Id() const;
    void set_rnpCSG_Id(const rnpCSG_Id &);
    rnpCSG_Id *release_rnpCSG_Id();
    void set_rnpCSG_Id(rnpCSG_Id *);

    rnpCSG_Membership_Status *get_rnpCSG_Membership_Status();
    const rnpCSG_Membership_Status *get_rnpCSG_Membership_Status() const;
    void set_rnpCSG_Membership_Status(const rnpCSG_Membership_Status &);
    rnpCSG_Membership_Status *release_rnpCSG_Membership_Status();
    void set_rnpCSG_Membership_Status(rnpCSG_Membership_Status *);

    rnpMSISDN *get_rnpMSISDN();
    const rnpMSISDN *get_rnpMSISDN() const;
    void set_rnpMSISDN(const rnpMSISDN &);
    rnpMSISDN *release_rnpMSISDN();
    void set_rnpMSISDN(rnpMSISDN *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq19   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpRelocationRequestIEs_Value value;

    rnp_seq19();
    rnp_seq19(const rnp_seq19 &);
    rnp_seq19(id, criticality, const value &);

    rnp_seq19 & operator = (const rnp_seq19 &);
    int operator == (const rnp_seq19 &) const;
    int operator != (const rnp_seq19 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

class OSS_PUBLIC rnp_seq20   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpRelocationRequestExtensions_Extension extensionValue;

    rnp_seq20();
    rnp_seq20(const rnp_seq20 &);
    rnp_seq20(id, criticality, const extensionValue &);

    rnp_seq20 & operator = (const rnp_seq20 &);
    int operator == (const rnp_seq20 &) const;
    int operator != (const rnp_seq20 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    extensionValue & get_extensionValue();
    const extensionValue & get_extensionValue() const;
    void set_extensionValue(const extensionValue &);
private:
    id id_field;
    criticality criticality_field;
    extensionValue extensionValue_field;
};

typedef rnp__shared10 rnpRAB_Parameter_GuaranteedBitrateList;

class OSS_PUBLIC rnp_seq312;

class OSS_PUBLIC rnp__shared12 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq312 component;

    rnp__shared12();
    rnp__shared12(const rnp__shared12 &);
    ~rnp__shared12();

    rnp__shared12 & operator = (const rnp__shared12 &);
    int operator == (const rnp__shared12 &) const;
    int operator != (const rnp__shared12 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp__shared12 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp__shared12 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp__shared12 *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared12 rnpSDU_Parameters;

typedef rnp__shared6 rnp_seqof22;

class OSS_PUBLIC rnpAllocationOrRetentionPriority   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 priorityLevel;
    typedef enum rnpPre_emptionCapability pre_emptionCapability;
    typedef enum rnpPre_emptionVulnerability pre_emptionVulnerability;
    typedef enum rnpQueuingAllowed queuingAllowed;
    typedef rnp__shared6 iE_Extensions;

    rnpAllocationOrRetentionPriority();
    rnpAllocationOrRetentionPriority(const rnpAllocationOrRetentionPriority &);
    rnpAllocationOrRetentionPriority(priorityLevel, pre_emptionCapability, pre_emptionVulnerability, 
	queuingAllowed, const iE_Extensions &);
    rnpAllocationOrRetentionPriority(priorityLevel, pre_emptionCapability, pre_emptionVulnerability, 
	queuingAllowed);

    rnpAllocationOrRetentionPriority & operator = (const rnpAllocationOrRetentionPriority &);
    int operator == (const rnpAllocationOrRetentionPriority &) const;
    int operator != (const rnpAllocationOrRetentionPriority &) const;

    priorityLevel & get_priorityLevel();
    priorityLevel get_priorityLevel() const;
    void set_priorityLevel(priorityLevel);

    pre_emptionCapability & get_pre_emptionCapability();
    pre_emptionCapability get_pre_emptionCapability() const;
    void set_pre_emptionCapability(pre_emptionCapability);

    pre_emptionVulnerability & get_pre_emptionVulnerability();
    pre_emptionVulnerability get_pre_emptionVulnerability() const;
    void set_pre_emptionVulnerability(pre_emptionVulnerability);

    queuingAllowed & get_queuingAllowed();
    queuingAllowed get_queuingAllowed() const;
    void set_queuingAllowed(queuingAllowed);

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    priorityLevel priorityLevel_field;
    pre_emptionCapability pre_emptionCapability_field;
    pre_emptionVulnerability pre_emptionVulnerability_field;
    queuingAllowed queuingAllowed_field;
    iE_Extensions iE_Extensions_field;
};

class OSS_PUBLIC rnp_seq23;

class OSS_PUBLIC rnp_seqof23 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq23 component;

    rnp_seqof23();
    rnp_seqof23(const rnp_seqof23 &);
    ~rnp_seqof23();

    rnp_seqof23 & operator = (const rnp_seqof23 &);
    int operator == (const rnp_seqof23 &) const;
    int operator != (const rnp_seqof23 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof23 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof23 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof23 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpRAB_Parameters   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef enum rnpTrafficClass trafficClass;
    typedef enum rnpRAB_AsymmetryIndicator rAB_AsymmetryIndicator;
    typedef rnp__shared10 maxBitrate;
    typedef rnp__shared10 guaranteedBitRate;
    typedef enum rnpDeliveryOrder deliveryOrder;
    typedef OSS_UINT32 maxSDU_Size;
    typedef rnp__shared12 sDU_Parameters;
    typedef OSS_UINT32 transferDelay;
    typedef OSS_UINT32 trafficHandlingPriority;
    typedef rnpAllocationOrRetentionPriority allocationOrRetentionPriority;
    typedef enum rnpSourceStatisticsDescriptor sourceStatisticsDescriptor;
    typedef enum rnpRelocationRequirement relocationRequirement;
    typedef rnp_seqof23 iE_Extensions;

    rnpRAB_Parameters();
    rnpRAB_Parameters(const rnpRAB_Parameters &);
    rnpRAB_Parameters(trafficClass, rAB_AsymmetryIndicator, const maxBitrate &, const guaranteedBitRate &, 
	deliveryOrder, maxSDU_Size, const sDU_Parameters &, transferDelay, trafficHandlingPriority, 
	const allocationOrRetentionPriority &, sourceStatisticsDescriptor, relocationRequirement, 
	const iE_Extensions &);
    rnpRAB_Parameters(trafficClass, rAB_AsymmetryIndicator, const maxBitrate &, deliveryOrder, 
	maxSDU_Size, const sDU_Parameters &);

    rnpRAB_Parameters & operator = (const rnpRAB_Parameters &);
    int operator == (const rnpRAB_Parameters &) const;
    int operator != (const rnpRAB_Parameters &) const;

    trafficClass & get_trafficClass();
    trafficClass get_trafficClass() const;
    void set_trafficClass(trafficClass);

    rAB_AsymmetryIndicator & get_rAB_AsymmetryIndicator();
    rAB_AsymmetryIndicator get_rAB_AsymmetryIndicator() const;
    void set_rAB_AsymmetryIndicator(rAB_AsymmetryIndicator);

    maxBitrate & get_maxBitrate();
    const maxBitrate & get_maxBitrate() const;
    void set_maxBitrate(const maxBitrate &);

    guaranteedBitRate *get_guaranteedBitRate();
    const guaranteedBitRate *get_guaranteedBitRate() const;
    void set_guaranteedBitRate(const guaranteedBitRate &);
    int guaranteedBitRate_is_present() const;
    void omit_guaranteedBitRate();

    deliveryOrder & get_deliveryOrder();
    deliveryOrder get_deliveryOrder() const;
    void set_deliveryOrder(deliveryOrder);

    maxSDU_Size & get_maxSDU_Size();
    maxSDU_Size get_maxSDU_Size() const;
    void set_maxSDU_Size(maxSDU_Size);

    sDU_Parameters & get_sDU_Parameters();
    const sDU_Parameters & get_sDU_Parameters() const;
    void set_sDU_Parameters(const sDU_Parameters &);

    transferDelay *get_transferDelay();
    const transferDelay *get_transferDelay() const;
    void set_transferDelay(transferDelay);
    int transferDelay_is_present() const;
    void omit_transferDelay();

    trafficHandlingPriority *get_trafficHandlingPriority();
    const trafficHandlingPriority *get_trafficHandlingPriority() const;
    void set_trafficHandlingPriority(trafficHandlingPriority);
    int trafficHandlingPriority_is_present() const;
    void omit_trafficHandlingPriority();

    allocationOrRetentionPriority *get_allocationOrRetentionPriority();
    const allocationOrRetentionPriority *get_allocationOrRetentionPriority() const;
    void set_allocationOrRetentionPriority(const allocationOrRetentionPriority &);
    int allocationOrRetentionPriority_is_present() const;
    void omit_allocationOrRetentionPriority();

    sourceStatisticsDescriptor *get_sourceStatisticsDescriptor();
    const sourceStatisticsDescriptor *get_sourceStatisticsDescriptor() const;
    void set_sourceStatisticsDescriptor(sourceStatisticsDescriptor);
    int sourceStatisticsDescriptor_is_present() const;
    void omit_sourceStatisticsDescriptor();

    relocationRequirement *get_relocationRequirement();
    const relocationRequirement *get_relocationRequirement() const;
    void set_relocationRequirement(relocationRequirement);
    int relocationRequirement_is_present() const;
    void omit_relocationRequirement();

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    trafficClass trafficClass_field;
    rAB_AsymmetryIndicator rAB_AsymmetryIndicator_field;
    maxBitrate maxBitrate_field;
    guaranteedBitRate guaranteedBitRate_field;
    deliveryOrder deliveryOrder_field;
    maxSDU_Size maxSDU_Size_field;
    sDU_Parameters sDU_Parameters_field;
    transferDelay transferDelay_field;
    trafficHandlingPriority trafficHandlingPriority_field;
    allocationOrRetentionPriority allocationOrRetentionPriority_field;
    sourceStatisticsDescriptor sourceStatisticsDescriptor_field;
    relocationRequirement relocationRequirement_field;
    iE_Extensions iE_Extensions_field;
};

class OSS_PUBLIC rnp__shared13 : public OssList  /* SEQUENCE OF */
{
public:
    typedef enum rnpPDP_Type component;

    rnp__shared13();
    rnp__shared13(const rnp__shared13 &);
    ~rnp__shared13();

    rnp__shared13 & operator = (const rnp__shared13 &);
    int operator == (const rnp__shared13 &) const;
    int operator != (const rnp__shared13 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(component );
    OssIndex prepend(rnp__shared13 *);
    OssIndex insert_after(OssIndex, component );
    OssIndex insert_after(OssIndex, rnp__shared13 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp__shared13 *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared13 rnpPDP_TypeInformation;

typedef rnp__shared6 rnp_seqof24;

class OSS_PUBLIC rnpUserPlaneInformation   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef enum rnpUserPlaneMode userPlaneMode;
    typedef OssBitString uP_ModeVersions;
    typedef rnp__shared6 iE_Extensions;

    rnpUserPlaneInformation();
    rnpUserPlaneInformation(const rnpUserPlaneInformation &);
    rnpUserPlaneInformation(userPlaneMode, const uP_ModeVersions &, const iE_Extensions &);
    rnpUserPlaneInformation(userPlaneMode, const uP_ModeVersions &);

    rnpUserPlaneInformation & operator = (const rnpUserPlaneInformation &);
    int operator == (const rnpUserPlaneInformation &) const;
    int operator != (const rnpUserPlaneInformation &) const;

    userPlaneMode & get_userPlaneMode();
    userPlaneMode get_userPlaneMode() const;
    void set_userPlaneMode(userPlaneMode);

    uP_ModeVersions & get_uP_ModeVersions();
    const uP_ModeVersions & get_uP_ModeVersions() const;
    void set_uP_ModeVersions(const uP_ModeVersions &);

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    userPlaneMode userPlaneMode_field;
    uP_ModeVersions uP_ModeVersions_field;
    iE_Extensions iE_Extensions_field;
};

class OSS_PUBLIC rnp_seq25;

class OSS_PUBLIC rnp_seqof25 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq25 component;

    rnp_seqof25();
    rnp_seqof25(const rnp_seqof25 &);
    ~rnp_seqof25();

    rnp_seqof25 & operator = (const rnp_seqof25 &);
    int operator == (const rnp_seqof25 &) const;
    int operator != (const rnp_seqof25 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof25 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof25 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof25 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpRAB_SetupItem_RelocReq   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssBitString rAB_ID;
    typedef OssBitString nAS_SynchronisationIndicator;
    typedef rnpRAB_Parameters rAB_Parameters;
    typedef enum rnpDataVolumeReportingIndication dataVolumeReportingIndication;
    typedef rnp__shared13 pDP_TypeInformation;
    typedef rnpUserPlaneInformation userPlaneInformation;
    typedef OssBitString transportLayerAddress;
    typedef rnpIuTransportAssociation iuTransportAssociation;
    typedef enum rnpService_Handover service_Handover;
    typedef rnp_seqof25 iE_Extensions;

    rnpRAB_SetupItem_RelocReq();
    rnpRAB_SetupItem_RelocReq(const rnpRAB_SetupItem_RelocReq &);
    rnpRAB_SetupItem_RelocReq(const rAB_ID &, const nAS_SynchronisationIndicator &, 
	const rAB_Parameters &, dataVolumeReportingIndication, const pDP_TypeInformation &, 
	const userPlaneInformation &, const transportLayerAddress &, const iuTransportAssociation &, 
	service_Handover, const iE_Extensions &);
    rnpRAB_SetupItem_RelocReq(const rAB_ID &, const rAB_Parameters &, const userPlaneInformation &, 
	const transportLayerAddress &, const iuTransportAssociation &);

    rnpRAB_SetupItem_RelocReq & operator = (const rnpRAB_SetupItem_RelocReq &);
    int operator == (const rnpRAB_SetupItem_RelocReq &) const;
    int operator != (const rnpRAB_SetupItem_RelocReq &) const;

    rAB_ID & get_rAB_ID();
    const rAB_ID & get_rAB_ID() const;
    void set_rAB_ID(const rAB_ID &);

    nAS_SynchronisationIndicator *get_nAS_SynchronisationIndicator();
    const nAS_SynchronisationIndicator *get_nAS_SynchronisationIndicator() const;
    void set_nAS_SynchronisationIndicator(const nAS_SynchronisationIndicator &);
    int nAS_SynchronisationIndicator_is_present() const;
    void omit_nAS_SynchronisationIndicator();

    rAB_Parameters & get_rAB_Parameters();
    const rAB_Parameters & get_rAB_Parameters() const;
    void set_rAB_Parameters(const rAB_Parameters &);

    dataVolumeReportingIndication *get_dataVolumeReportingIndication();
    const dataVolumeReportingIndication *get_dataVolumeReportingIndication() const;
    void set_dataVolumeReportingIndication(dataVolumeReportingIndication);
    int dataVolumeReportingIndication_is_present() const;
    void omit_dataVolumeReportingIndication();

    pDP_TypeInformation *get_pDP_TypeInformation();
    const pDP_TypeInformation *get_pDP_TypeInformation() const;
    void set_pDP_TypeInformation(const pDP_TypeInformation &);
    int pDP_TypeInformation_is_present() const;
    void omit_pDP_TypeInformation();

    userPlaneInformation & get_userPlaneInformation();
    const userPlaneInformation & get_userPlaneInformation() const;
    void set_userPlaneInformation(const userPlaneInformation &);

    transportLayerAddress & get_transportLayerAddress();
    const transportLayerAddress & get_transportLayerAddress() const;
    void set_transportLayerAddress(const transportLayerAddress &);

    iuTransportAssociation & get_iuTransportAssociation();
    const iuTransportAssociation & get_iuTransportAssociation() const;
    void set_iuTransportAssociation(const iuTransportAssociation &);

    service_Handover *get_service_Handover();
    const service_Handover *get_service_Handover() const;
    void set_service_Handover(service_Handover);
    int service_Handover_is_present() const;
    void omit_service_Handover();

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    rAB_ID rAB_ID_field;
    nAS_SynchronisationIndicator nAS_SynchronisationIndicator_field;
    rAB_Parameters rAB_Parameters_field;
    dataVolumeReportingIndication dataVolumeReportingIndication_field;
    pDP_TypeInformation pDP_TypeInformation_field;
    userPlaneInformation userPlaneInformation_field;
    transportLayerAddress transportLayerAddress_field;
    iuTransportAssociation iuTransportAssociation_field;
    service_Handover service_Handover_field;
    iE_Extensions iE_Extensions_field;
};

class OSS_PUBLIC rnpRAB_SetupItem_RelocReq_IEs_Value : public OssConstrainedOpenType
{
public:
    rnpRAB_SetupItem_RelocReq_IEs_Value();
    rnpRAB_SetupItem_RelocReq_IEs_Value(const rnpRAB_SetupItem_RelocReq_IEs_Value &);
    ~rnpRAB_SetupItem_RelocReq_IEs_Value();
    rnpRAB_SetupItem_RelocReq_IEs_Value & operator = (const rnpRAB_SetupItem_RelocReq_IEs_Value &);
    int operator == (const rnpRAB_SetupItem_RelocReq_IEs_Value &) const;
    int operator != (const rnpRAB_SetupItem_RelocReq_IEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpRAB_SetupItem_RelocReq *get_rnpRAB_SetupItem_RelocReq();
    const rnpRAB_SetupItem_RelocReq *get_rnpRAB_SetupItem_RelocReq() const;
    void set_rnpRAB_SetupItem_RelocReq(const rnpRAB_SetupItem_RelocReq &);
    rnpRAB_SetupItem_RelocReq *release_rnpRAB_SetupItem_RelocReq();
    void set_rnpRAB_SetupItem_RelocReq(rnpRAB_SetupItem_RelocReq *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq21;

class OSS_PUBLIC rnp_seqof21 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq21 component;

    rnp_seqof21();
    rnp_seqof21(const rnp_seqof21 &);
    ~rnp_seqof21();

    rnp_seqof21 & operator = (const rnp_seqof21 &);
    int operator == (const rnp_seqof21 &) const;
    int operator != (const rnp_seqof21 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof21 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof21 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof21 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnp_seq21   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpRAB_SetupItem_RelocReq_IEs_Value value;

    rnp_seq21();
    rnp_seq21(const rnp_seq21 &);
    rnp_seq21(id, criticality, const value &);

    rnp_seq21 & operator = (const rnp_seq21 &);
    int operator == (const rnp_seq21 &) const;
    int operator != (const rnp_seq21 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

typedef OssBitString rnpNAS_SynchronisationIndicator;

typedef OSS_UINT32 rnpMaxSDU_Size;

typedef OSS_UINT32 rnpTransferDelay;

typedef OSS_UINT32 rnpTrafficHandlingPriority;

typedef OSS_UINT32 rnpPriorityLevel;

typedef rnp__shared5 rnp_seq22;

typedef rnp__shared10 rnpRAB_Parameter_ExtendedGuaranteedBitrateList;

typedef rnp__shared10 rnpRAB_Parameter_ExtendedMaxBitrateList;

class OSS_PUBLIC rnpSupportedRAB_ParameterBitrateList : public OssList  /* SEQUENCE OF */
{
public:
    typedef OSS_INT32 component;

    rnpSupportedRAB_ParameterBitrateList();
    rnpSupportedRAB_ParameterBitrateList(const rnpSupportedRAB_ParameterBitrateList &);
    ~rnpSupportedRAB_ParameterBitrateList();

    rnpSupportedRAB_ParameterBitrateList & operator = (const rnpSupportedRAB_ParameterBitrateList &);
    int operator == (const rnpSupportedRAB_ParameterBitrateList &) const;
    int operator != (const rnpSupportedRAB_ParameterBitrateList &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(component );
    OssIndex prepend(rnpSupportedRAB_ParameterBitrateList *);
    OssIndex insert_after(OssIndex, component );
    OssIndex insert_after(OssIndex, rnpSupportedRAB_ParameterBitrateList *);

    int remove_front();
    int remove_after(OssIndex);

    rnpSupportedRAB_ParameterBitrateList *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpRAB_Parameters_ExtIEs_Extension : public OssConstrainedOpenType
{
public:
    rnpRAB_Parameters_ExtIEs_Extension();
    rnpRAB_Parameters_ExtIEs_Extension(const rnpRAB_Parameters_ExtIEs_Extension &);
    ~rnpRAB_Parameters_ExtIEs_Extension();
    rnpRAB_Parameters_ExtIEs_Extension & operator = (const rnpRAB_Parameters_ExtIEs_Extension &);
    int operator == (const rnpRAB_Parameters_ExtIEs_Extension &) const;
    int operator != (const rnpRAB_Parameters_ExtIEs_Extension &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpSignallingIndication *get_rnpSignallingIndication();
    const rnpSignallingIndication *get_rnpSignallingIndication() const;
    void set_rnpSignallingIndication(const rnpSignallingIndication &);
    rnpSignallingIndication *release_rnpSignallingIndication();
    void set_rnpSignallingIndication(rnpSignallingIndication *);

    rnp__shared10 *get_rnpRAB_Parameter_ExtendedGuaranteedBitrateList();
    const rnp__shared10 *get_rnpRAB_Parameter_ExtendedGuaranteedBitrateList() const;
    void set_rnpRAB_Parameter_ExtendedGuaranteedBitrateList(const rnp__shared10 &);
    rnp__shared10 *release_rnpRAB_Parameter_ExtendedGuaranteedBitrateList();
    void set_rnpRAB_Parameter_ExtendedGuaranteedBitrateList(rnp__shared10 *);

    rnp__shared10 *get_rnpRAB_Parameter_ExtendedMaxBitrateList();
    const rnp__shared10 *get_rnpRAB_Parameter_ExtendedMaxBitrateList() const;
    void set_rnpRAB_Parameter_ExtendedMaxBitrateList(const rnp__shared10 &);
    rnp__shared10 *release_rnpRAB_Parameter_ExtendedMaxBitrateList();
    void set_rnpRAB_Parameter_ExtendedMaxBitrateList(rnp__shared10 *);

    rnpSupportedRAB_ParameterBitrateList *get_rnpSupportedRAB_ParameterBitrateList();
    const rnpSupportedRAB_ParameterBitrateList *get_rnpSupportedRAB_ParameterBitrateList() const;
    void set_rnpSupportedRAB_ParameterBitrateList(const rnpSupportedRAB_ParameterBitrateList &);
    rnpSupportedRAB_ParameterBitrateList *release_rnpSupportedRAB_ParameterBitrateList();
    void set_rnpSupportedRAB_ParameterBitrateList(rnpSupportedRAB_ParameterBitrateList *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq23   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpRAB_Parameters_ExtIEs_Extension extensionValue;

    rnp_seq23();
    rnp_seq23(const rnp_seq23 &);
    rnp_seq23(id, criticality, const extensionValue &);

    rnp_seq23 & operator = (const rnp_seq23 &);
    int operator == (const rnp_seq23 &) const;
    int operator != (const rnp_seq23 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    extensionValue & get_extensionValue();
    const extensionValue & get_extensionValue() const;
    void set_extensionValue(const extensionValue &);
private:
    id id_field;
    criticality criticality_field;
    extensionValue extensionValue_field;
};

typedef OssBitString rnpUP_ModeVersions;

typedef rnp__shared5 rnp_seq24;

class OSS_PUBLIC rnp__shared14 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp__shared10 component;

    rnp__shared14();
    rnp__shared14(const rnp__shared14 &);
    ~rnp__shared14();

    rnp__shared14 & operator = (const rnp__shared14 &);
    int operator == (const rnp__shared14 &) const;
    int operator != (const rnp__shared14 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp__shared14 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp__shared14 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp__shared14 *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared14 rnpAlt_RAB_Parameter_MaxBitrates;

class OSS_PUBLIC rnpAlt_RAB_Parameter_MaxBitrateInf   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef enum rnpAlt_RAB_Parameter_MaxBitrateType altMaxBitrateType;
    typedef rnp__shared14 altMaxBitrates;

    rnpAlt_RAB_Parameter_MaxBitrateInf();
    rnpAlt_RAB_Parameter_MaxBitrateInf(const rnpAlt_RAB_Parameter_MaxBitrateInf &);
    rnpAlt_RAB_Parameter_MaxBitrateInf(altMaxBitrateType, const altMaxBitrates &);
    rnpAlt_RAB_Parameter_MaxBitrateInf(altMaxBitrateType);

    rnpAlt_RAB_Parameter_MaxBitrateInf & operator = (const rnpAlt_RAB_Parameter_MaxBitrateInf &);
    int operator == (const rnpAlt_RAB_Parameter_MaxBitrateInf &) const;
    int operator != (const rnpAlt_RAB_Parameter_MaxBitrateInf &) const;

    altMaxBitrateType & get_altMaxBitrateType();
    altMaxBitrateType get_altMaxBitrateType() const;
    void set_altMaxBitrateType(altMaxBitrateType);

    altMaxBitrates *get_altMaxBitrates();
    const altMaxBitrates *get_altMaxBitrates() const;
    void set_altMaxBitrates(const altMaxBitrates &);
    int altMaxBitrates_is_present() const;
    void omit_altMaxBitrates();
private:
    OSS_UINT32 bit_mask;
    altMaxBitrateType altMaxBitrateType_field;
    altMaxBitrates altMaxBitrates_field;
};

typedef rnp__shared14 rnpAlt_RAB_Parameter_GuaranteedBitrates;

class OSS_PUBLIC rnpAlt_RAB_Parameter_GuaranteedBitrateInf   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef enum rnpAlt_RAB_Parameter_GuaranteedBitrateType altGuaranteedBitrateType;
    typedef rnp__shared14 altGuaranteedBitrates;

    rnpAlt_RAB_Parameter_GuaranteedBitrateInf();
    rnpAlt_RAB_Parameter_GuaranteedBitrateInf(const rnpAlt_RAB_Parameter_GuaranteedBitrateInf &);
    rnpAlt_RAB_Parameter_GuaranteedBitrateInf(altGuaranteedBitrateType, const altGuaranteedBitrates &);
    rnpAlt_RAB_Parameter_GuaranteedBitrateInf(altGuaranteedBitrateType);

    rnpAlt_RAB_Parameter_GuaranteedBitrateInf & operator = (const rnpAlt_RAB_Parameter_GuaranteedBitrateInf &);
    int operator == (const rnpAlt_RAB_Parameter_GuaranteedBitrateInf &) const;
    int operator != (const rnpAlt_RAB_Parameter_GuaranteedBitrateInf &) const;

    altGuaranteedBitrateType & get_altGuaranteedBitrateType();
    altGuaranteedBitrateType get_altGuaranteedBitrateType() const;
    void set_altGuaranteedBitrateType(altGuaranteedBitrateType);

    altGuaranteedBitrates *get_altGuaranteedBitrates();
    const altGuaranteedBitrates *get_altGuaranteedBitrates() const;
    void set_altGuaranteedBitrates(const altGuaranteedBitrates &);
    int altGuaranteedBitrates_is_present() const;
    void omit_altGuaranteedBitrates();
private:
    OSS_UINT32 bit_mask;
    altGuaranteedBitrateType altGuaranteedBitrateType_field;
    altGuaranteedBitrates altGuaranteedBitrates_field;
};

class OSS_PUBLIC rnp_seq155;

class OSS_PUBLIC rnp_seqof154 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq155 component;

    rnp_seqof154();
    rnp_seqof154(const rnp_seqof154 &);
    ~rnp_seqof154();

    rnp_seqof154 & operator = (const rnp_seqof154 &);
    int operator == (const rnp_seqof154 &) const;
    int operator != (const rnp_seqof154 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof154 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof154 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof154 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpAlt_RAB_Parameters   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnpAlt_RAB_Parameter_MaxBitrateInf altMaxBitrateInf;
    typedef rnpAlt_RAB_Parameter_GuaranteedBitrateInf altGuaranteedBitRateInf;
    typedef rnp_seqof154 iE_Extensions;

    rnpAlt_RAB_Parameters();
    rnpAlt_RAB_Parameters(const rnpAlt_RAB_Parameters &);
    rnpAlt_RAB_Parameters(const altMaxBitrateInf &, const altGuaranteedBitRateInf &, 
	const iE_Extensions &);

    rnpAlt_RAB_Parameters & operator = (const rnpAlt_RAB_Parameters &);
    int operator == (const rnpAlt_RAB_Parameters &) const;
    int operator != (const rnpAlt_RAB_Parameters &) const;

    altMaxBitrateInf *get_altMaxBitrateInf();
    const altMaxBitrateInf *get_altMaxBitrateInf() const;
    void set_altMaxBitrateInf(const altMaxBitrateInf &);
    int altMaxBitrateInf_is_present() const;
    void omit_altMaxBitrateInf();

    altGuaranteedBitRateInf *get_altGuaranteedBitRateInf();
    const altGuaranteedBitRateInf *get_altGuaranteedBitRateInf() const;
    void set_altGuaranteedBitRateInf(const altGuaranteedBitRateInf &);
    int altGuaranteedBitRateInf_is_present() const;
    void omit_altGuaranteedBitRateInf();

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    altMaxBitrateInf altMaxBitrateInf_field;
    altGuaranteedBitRateInf altGuaranteedBitRateInf_field;
    iE_Extensions iE_Extensions_field;
};

class OSS_PUBLIC rnpPDP_TypeInformation_extension : public OssList  /* SEQUENCE OF */
{
public:
    typedef enum rnpPDP_Type_extension component;

    rnpPDP_TypeInformation_extension();
    rnpPDP_TypeInformation_extension(const rnpPDP_TypeInformation_extension &);
    ~rnpPDP_TypeInformation_extension();

    rnpPDP_TypeInformation_extension & operator = (const rnpPDP_TypeInformation_extension &);
    int operator == (const rnpPDP_TypeInformation_extension &) const;
    int operator != (const rnpPDP_TypeInformation_extension &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(component );
    OssIndex prepend(rnpPDP_TypeInformation_extension *);
    OssIndex insert_after(OssIndex, component );
    OssIndex insert_after(OssIndex, rnpPDP_TypeInformation_extension *);

    int remove_front();
    int remove_after(OssIndex);

    rnpPDP_TypeInformation_extension *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared6 rnp_seqof276;

class OSS_PUBLIC rnpOffload_RAB_Parameters   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssString accessPointName;
    typedef OssString chargingCharacteristics;
    typedef rnp__shared6 iE_Extensions;

    rnpOffload_RAB_Parameters();
    rnpOffload_RAB_Parameters(const rnpOffload_RAB_Parameters &);
    rnpOffload_RAB_Parameters(const accessPointName &, const chargingCharacteristics &, 
	const iE_Extensions &);
    rnpOffload_RAB_Parameters(const accessPointName &, const chargingCharacteristics &);

    rnpOffload_RAB_Parameters & operator = (const rnpOffload_RAB_Parameters &);
    int operator == (const rnpOffload_RAB_Parameters &) const;
    int operator != (const rnpOffload_RAB_Parameters &) const;

    accessPointName & get_accessPointName();
    const accessPointName & get_accessPointName() const;
    void set_accessPointName(const accessPointName &);

    chargingCharacteristics & get_chargingCharacteristics();
    const chargingCharacteristics & get_chargingCharacteristics() const;
    void set_chargingCharacteristics(const chargingCharacteristics &);

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    accessPointName accessPointName_field;
    chargingCharacteristics chargingCharacteristics_field;
    iE_Extensions iE_Extensions_field;
};

class OSS_PUBLIC rnpRAB_SetupItem_RelocReq_ExtIEs_Extension : public OssConstrainedOpenType
{
public:
    rnpRAB_SetupItem_RelocReq_ExtIEs_Extension();
    rnpRAB_SetupItem_RelocReq_ExtIEs_Extension(const rnpRAB_SetupItem_RelocReq_ExtIEs_Extension &);
    ~rnpRAB_SetupItem_RelocReq_ExtIEs_Extension();
    rnpRAB_SetupItem_RelocReq_ExtIEs_Extension & operator = (const rnpRAB_SetupItem_RelocReq_ExtIEs_Extension &);
    int operator == (const rnpRAB_SetupItem_RelocReq_ExtIEs_Extension &) const;
    int operator != (const rnpRAB_SetupItem_RelocReq_ExtIEs_Extension &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpAlt_RAB_Parameters *get_rnpAlt_RAB_Parameters();
    const rnpAlt_RAB_Parameters *get_rnpAlt_RAB_Parameters() const;
    void set_rnpAlt_RAB_Parameters(const rnpAlt_RAB_Parameters &);
    rnpAlt_RAB_Parameters *release_rnpAlt_RAB_Parameters();
    void set_rnpAlt_RAB_Parameters(rnpAlt_RAB_Parameters *);

    rnpGERAN_BSC_Container *get_rnpGERAN_BSC_Container();
    const rnpGERAN_BSC_Container *get_rnpGERAN_BSC_Container() const;
    void set_rnpGERAN_BSC_Container(const rnpGERAN_BSC_Container &);
    rnpGERAN_BSC_Container *release_rnpGERAN_BSC_Container();
    void set_rnpGERAN_BSC_Container(rnpGERAN_BSC_Container *);

    rnpE_UTRAN_Service_Handover *get_rnpE_UTRAN_Service_Handover();
    const rnpE_UTRAN_Service_Handover *get_rnpE_UTRAN_Service_Handover() const;
    void set_rnpE_UTRAN_Service_Handover(const rnpE_UTRAN_Service_Handover &);
    rnpE_UTRAN_Service_Handover *release_rnpE_UTRAN_Service_Handover();
    void set_rnpE_UTRAN_Service_Handover(rnpE_UTRAN_Service_Handover *);

    rnpPDP_TypeInformation_extension *get_rnpPDP_TypeInformation_extension();
    const rnpPDP_TypeInformation_extension *get_rnpPDP_TypeInformation_extension() const;
    void set_rnpPDP_TypeInformation_extension(const rnpPDP_TypeInformation_extension &);
    rnpPDP_TypeInformation_extension *release_rnpPDP_TypeInformation_extension();
    void set_rnpPDP_TypeInformation_extension(rnpPDP_TypeInformation_extension *);

    rnpOffload_RAB_Parameters *get_rnpOffload_RAB_Parameters();
    const rnpOffload_RAB_Parameters *get_rnpOffload_RAB_Parameters() const;
    void set_rnpOffload_RAB_Parameters(const rnpOffload_RAB_Parameters &);
    rnpOffload_RAB_Parameters *release_rnpOffload_RAB_Parameters();
    void set_rnpOffload_RAB_Parameters(rnpOffload_RAB_Parameters *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq25   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpRAB_SetupItem_RelocReq_ExtIEs_Extension extensionValue;

    rnp_seq25();
    rnp_seq25(const rnp_seq25 &);
    rnp_seq25(id, criticality, const extensionValue &);

    rnp_seq25 & operator = (const rnp_seq25 &);
    int operator == (const rnp_seq25 &) const;
    int operator != (const rnp_seq25 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    extensionValue & get_extensionValue();
    const extensionValue & get_extensionValue() const;
    void set_extensionValue(const extensionValue &);
private:
    id id_field;
    criticality criticality_field;
    extensionValue extensionValue_field;
};

typedef rnp__shared5 rnp_seq26;

typedef rnp__shared6 rnp_seqof27;

class OSS_PUBLIC rnpTMGI   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssString pLMNidentity;
    typedef OssString serviceID;
    typedef rnp__shared6 iE_Extensions;

    rnpTMGI();
    rnpTMGI(const rnpTMGI &);
    rnpTMGI(const pLMNidentity &, const serviceID &, const iE_Extensions &);
    rnpTMGI(const pLMNidentity &, const serviceID &);

    rnpTMGI & operator = (const rnpTMGI &);
    int operator == (const rnpTMGI &) const;
    int operator != (const rnpTMGI &) const;

    pLMNidentity & get_pLMNidentity();
    const pLMNidentity & get_pLMNidentity() const;
    void set_pLMNidentity(const pLMNidentity &);

    serviceID & get_serviceID();
    const serviceID & get_serviceID() const;
    void set_serviceID(const serviceID &);

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    pLMNidentity pLMNidentity_field;
    serviceID serviceID_field;
    iE_Extensions iE_Extensions_field;
};

typedef rnp__shared5 rnp_seq27;

typedef OssBitString rnpMBMS_PTP_RAB_ID;

typedef rnp__shared6 rnp_seqof28;

class OSS_PUBLIC rnp_seq29   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnpTMGI tMGI;
    typedef OssBitString mBMS_PTP_RAB_ID;
    typedef rnp__shared6 iE_Extensions;

    rnp_seq29();
    rnp_seq29(const rnp_seq29 &);
    rnp_seq29(const tMGI &, const mBMS_PTP_RAB_ID &, const iE_Extensions &);
    rnp_seq29(const tMGI &, const mBMS_PTP_RAB_ID &);

    rnp_seq29 & operator = (const rnp_seq29 &);
    int operator == (const rnp_seq29 &) const;
    int operator != (const rnp_seq29 &) const;

    tMGI & get_tMGI();
    const tMGI & get_tMGI() const;
    void set_tMGI(const tMGI &);

    mBMS_PTP_RAB_ID & get_mBMS_PTP_RAB_ID();
    const mBMS_PTP_RAB_ID & get_mBMS_PTP_RAB_ID() const;
    void set_mBMS_PTP_RAB_ID(const mBMS_PTP_RAB_ID &);

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    tMGI tMGI_field;
    mBMS_PTP_RAB_ID mBMS_PTP_RAB_ID_field;
    iE_Extensions iE_Extensions_field;
};

typedef rnp__shared5 rnp_seq28;

typedef rnp__shared6 rnp_seqof313;

class OSS_PUBLIC rnpTargetRNC_ToSourceRNC_TransparentContainer   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssString rRC_Container;
    typedef OSS_UINT32 d_RNTI;
    typedef rnp__shared6 iE_Extensions;

    rnpTargetRNC_ToSourceRNC_TransparentContainer();
    rnpTargetRNC_ToSourceRNC_TransparentContainer(const rnpTargetRNC_ToSourceRNC_TransparentContainer &);
    rnpTargetRNC_ToSourceRNC_TransparentContainer(const rRC_Container &, d_RNTI, 
	const iE_Extensions &);
    rnpTargetRNC_ToSourceRNC_TransparentContainer(const rRC_Container &);

    rnpTargetRNC_ToSourceRNC_TransparentContainer & operator = (const rnpTargetRNC_ToSourceRNC_TransparentContainer &);
    int operator == (const rnpTargetRNC_ToSourceRNC_TransparentContainer &) const;
    int operator != (const rnpTargetRNC_ToSourceRNC_TransparentContainer &) const;

    rRC_Container & get_rRC_Container();
    const rRC_Container & get_rRC_Container() const;
    void set_rRC_Container(const rRC_Container &);

    d_RNTI *get_d_RNTI();
    const d_RNTI *get_d_RNTI() const;
    void set_d_RNTI(d_RNTI);
    int d_RNTI_is_present() const;
    void omit_d_RNTI();

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    rRC_Container rRC_Container_field;
    d_RNTI d_RNTI_field;
    iE_Extensions iE_Extensions_field;
};

class OSS_PUBLIC rnp_seqof31;

class OSS_PUBLIC rnpRAB_SetupList_RelocReqAck : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seqof31 component;

    rnpRAB_SetupList_RelocReqAck();
    rnpRAB_SetupList_RelocReqAck(const rnpRAB_SetupList_RelocReqAck &);
    ~rnpRAB_SetupList_RelocReqAck();

    rnpRAB_SetupList_RelocReqAck & operator = (const rnpRAB_SetupList_RelocReqAck &);
    int operator == (const rnpRAB_SetupList_RelocReqAck &) const;
    int operator != (const rnpRAB_SetupList_RelocReqAck &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnpRAB_SetupList_RelocReqAck *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnpRAB_SetupList_RelocReqAck *);

    int remove_front();
    int remove_after(OssIndex);

    rnpRAB_SetupList_RelocReqAck *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnp_seqof33;

class OSS_PUBLIC rnp__shared36 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seqof33 component;

    rnp__shared36();
    rnp__shared36(const rnp__shared36 &);
    ~rnp__shared36();

    rnp__shared36 & operator = (const rnp__shared36 &);
    int operator == (const rnp__shared36 &) const;
    int operator != (const rnp__shared36 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp__shared36 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp__shared36 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp__shared36 *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared36 rnpRAB_FailedList;

class OSS_PUBLIC rnpRelocationRequestAcknowledgeIEs_Value : public OssConstrainedOpenType
{
public:
    rnpRelocationRequestAcknowledgeIEs_Value();
    rnpRelocationRequestAcknowledgeIEs_Value(const rnpRelocationRequestAcknowledgeIEs_Value &);
    ~rnpRelocationRequestAcknowledgeIEs_Value();
    rnpRelocationRequestAcknowledgeIEs_Value & operator = (const rnpRelocationRequestAcknowledgeIEs_Value &);
    int operator == (const rnpRelocationRequestAcknowledgeIEs_Value &) const;
    int operator != (const rnpRelocationRequestAcknowledgeIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpTargetRNC_ToSourceRNC_TransparentContainer *get_rnpTargetRNC_ToSourceRNC_TransparentContainer();
    const rnpTargetRNC_ToSourceRNC_TransparentContainer *get_rnpTargetRNC_ToSourceRNC_TransparentContainer() const;
    void set_rnpTargetRNC_ToSourceRNC_TransparentContainer(const rnpTargetRNC_ToSourceRNC_TransparentContainer &);
    rnpTargetRNC_ToSourceRNC_TransparentContainer *release_rnpTargetRNC_ToSourceRNC_TransparentContainer();
    void set_rnpTargetRNC_ToSourceRNC_TransparentContainer(rnpTargetRNC_ToSourceRNC_TransparentContainer *);

    rnpRAB_SetupList_RelocReqAck *get_rnpRAB_SetupList_RelocReqAck();
    const rnpRAB_SetupList_RelocReqAck *get_rnpRAB_SetupList_RelocReqAck() const;
    void set_rnpRAB_SetupList_RelocReqAck(const rnpRAB_SetupList_RelocReqAck &);
    rnpRAB_SetupList_RelocReqAck *release_rnpRAB_SetupList_RelocReqAck();
    void set_rnpRAB_SetupList_RelocReqAck(rnpRAB_SetupList_RelocReqAck *);

    rnp__shared36 *get_rnpRAB_FailedList();
    const rnp__shared36 *get_rnpRAB_FailedList() const;
    void set_rnpRAB_FailedList(const rnp__shared36 &);
    rnp__shared36 *release_rnpRAB_FailedList();
    void set_rnpRAB_FailedList(rnp__shared36 *);

    rnpChosenIntegrityProtectionAlgorithm *get_rnpChosenIntegrityProtectionAlgorithm();
    const rnpChosenIntegrityProtectionAlgorithm *get_rnpChosenIntegrityProtectionAlgorithm() const;
    void set_rnpChosenIntegrityProtectionAlgorithm(const rnpChosenIntegrityProtectionAlgorithm &);
    rnpChosenIntegrityProtectionAlgorithm *release_rnpChosenIntegrityProtectionAlgorithm();
    void set_rnpChosenIntegrityProtectionAlgorithm(rnpChosenIntegrityProtectionAlgorithm *);

    rnpChosenEncryptionAlgorithm *get_rnpChosenEncryptionAlgorithm();
    const rnpChosenEncryptionAlgorithm *get_rnpChosenEncryptionAlgorithm() const;
    void set_rnpChosenEncryptionAlgorithm(const rnpChosenEncryptionAlgorithm &);
    rnpChosenEncryptionAlgorithm *release_rnpChosenEncryptionAlgorithm();
    void set_rnpChosenEncryptionAlgorithm(rnpChosenEncryptionAlgorithm *);

    rnpCriticalityDiagnostics *get_rnpCriticalityDiagnostics();
    const rnpCriticalityDiagnostics *get_rnpCriticalityDiagnostics() const;
    void set_rnpCriticalityDiagnostics(const rnpCriticalityDiagnostics &);
    rnpCriticalityDiagnostics *release_rnpCriticalityDiagnostics();
    void set_rnpCriticalityDiagnostics(rnpCriticalityDiagnostics *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnpRelocationRequestAcknowledgeExtensions_Extension : public OssConstrainedOpenType
{
public:
    rnpRelocationRequestAcknowledgeExtensions_Extension();
    rnpRelocationRequestAcknowledgeExtensions_Extension(const rnpRelocationRequestAcknowledgeExtensions_Extension &);
    ~rnpRelocationRequestAcknowledgeExtensions_Extension();
    rnpRelocationRequestAcknowledgeExtensions_Extension & operator = (const rnpRelocationRequestAcknowledgeExtensions_Extension &);
    int operator == (const rnpRelocationRequestAcknowledgeExtensions_Extension &) const;
    int operator != (const rnpRelocationRequestAcknowledgeExtensions_Extension &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpNewBSS_To_OldBSS_Information *get_rnpNewBSS_To_OldBSS_Information();
    const rnpNewBSS_To_OldBSS_Information *get_rnpNewBSS_To_OldBSS_Information() const;
    void set_rnpNewBSS_To_OldBSS_Information(const rnpNewBSS_To_OldBSS_Information &);
    rnpNewBSS_To_OldBSS_Information *release_rnpNewBSS_To_OldBSS_Information();
    void set_rnpNewBSS_To_OldBSS_Information(rnpNewBSS_To_OldBSS_Information *);

    rnpCSG_Id *get_rnpCSG_Id();
    const rnpCSG_Id *get_rnpCSG_Id() const;
    void set_rnpCSG_Id(const rnpCSG_Id &);
    rnpCSG_Id *release_rnpCSG_Id();
    void set_rnpCSG_Id(rnpCSG_Id *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq30   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpRelocationRequestAcknowledgeIEs_Value value;

    rnp_seq30();
    rnp_seq30(const rnp_seq30 &);
    rnp_seq30(id, criticality, const value &);

    rnp_seq30 & operator = (const rnp_seq30 &);
    int operator == (const rnp_seq30 &) const;
    int operator != (const rnp_seq30 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

class OSS_PUBLIC rnp_seq31   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpRelocationRequestAcknowledgeExtensions_Extension extensionValue;

    rnp_seq31();
    rnp_seq31(const rnp_seq31 &);
    rnp_seq31(id, criticality, const extensionValue &);

    rnp_seq31 & operator = (const rnp_seq31 &);
    int operator == (const rnp_seq31 &) const;
    int operator != (const rnp_seq31 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    extensionValue & get_extensionValue();
    const extensionValue & get_extensionValue() const;
    void set_extensionValue(const extensionValue &);
private:
    id id_field;
    criticality criticality_field;
    extensionValue extensionValue_field;
};

class OSS_PUBLIC rnp_seq33;

class OSS_PUBLIC rnp_seqof32 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq33 component;

    rnp_seqof32();
    rnp_seqof32(const rnp_seqof32 &);
    ~rnp_seqof32();

    rnp_seqof32 & operator = (const rnp_seqof32 &);
    int operator == (const rnp_seqof32 &) const;
    int operator != (const rnp_seqof32 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof32 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof32 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof32 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpRAB_SetupItem_RelocReqAck   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssBitString rAB_ID;
    typedef OssBitString transportLayerAddress;
    typedef rnpIuTransportAssociation iuTransportAssociation;
    typedef rnp_seqof32 iE_Extensions;

    rnpRAB_SetupItem_RelocReqAck();
    rnpRAB_SetupItem_RelocReqAck(const rnpRAB_SetupItem_RelocReqAck &);
    rnpRAB_SetupItem_RelocReqAck(const rAB_ID &, const transportLayerAddress &, const iuTransportAssociation &, 
	const iE_Extensions &);
    rnpRAB_SetupItem_RelocReqAck(const rAB_ID &);

    rnpRAB_SetupItem_RelocReqAck & operator = (const rnpRAB_SetupItem_RelocReqAck &);
    int operator == (const rnpRAB_SetupItem_RelocReqAck &) const;
    int operator != (const rnpRAB_SetupItem_RelocReqAck &) const;

    rAB_ID & get_rAB_ID();
    const rAB_ID & get_rAB_ID() const;
    void set_rAB_ID(const rAB_ID &);

    transportLayerAddress *get_transportLayerAddress();
    const transportLayerAddress *get_transportLayerAddress() const;
    void set_transportLayerAddress(const transportLayerAddress &);
    int transportLayerAddress_is_present() const;
    void omit_transportLayerAddress();

    iuTransportAssociation *get_iuTransportAssociation();
    const iuTransportAssociation *get_iuTransportAssociation() const;
    void set_iuTransportAssociation(const iuTransportAssociation &);
    int iuTransportAssociation_is_present() const;
    void omit_iuTransportAssociation();

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    rAB_ID rAB_ID_field;
    transportLayerAddress transportLayerAddress_field;
    iuTransportAssociation iuTransportAssociation_field;
    iE_Extensions iE_Extensions_field;
};

class OSS_PUBLIC rnpRAB_SetupItem_RelocReqAck_IEs_Value : public OssConstrainedOpenType
{
public:
    rnpRAB_SetupItem_RelocReqAck_IEs_Value();
    rnpRAB_SetupItem_RelocReqAck_IEs_Value(const rnpRAB_SetupItem_RelocReqAck_IEs_Value &);
    ~rnpRAB_SetupItem_RelocReqAck_IEs_Value();
    rnpRAB_SetupItem_RelocReqAck_IEs_Value & operator = (const rnpRAB_SetupItem_RelocReqAck_IEs_Value &);
    int operator == (const rnpRAB_SetupItem_RelocReqAck_IEs_Value &) const;
    int operator != (const rnpRAB_SetupItem_RelocReqAck_IEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpRAB_SetupItem_RelocReqAck *get_rnpRAB_SetupItem_RelocReqAck();
    const rnpRAB_SetupItem_RelocReqAck *get_rnpRAB_SetupItem_RelocReqAck() const;
    void set_rnpRAB_SetupItem_RelocReqAck(const rnpRAB_SetupItem_RelocReqAck &);
    rnpRAB_SetupItem_RelocReqAck *release_rnpRAB_SetupItem_RelocReqAck();
    void set_rnpRAB_SetupItem_RelocReqAck(rnpRAB_SetupItem_RelocReqAck *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq32;

class OSS_PUBLIC rnp_seqof31 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq32 component;

    rnp_seqof31();
    rnp_seqof31(const rnp_seqof31 &);
    ~rnp_seqof31();

    rnp_seqof31 & operator = (const rnp_seqof31 &);
    int operator == (const rnp_seqof31 &) const;
    int operator != (const rnp_seqof31 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof31 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof31 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof31 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnp_seq32   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpRAB_SetupItem_RelocReqAck_IEs_Value value;

    rnp_seq32();
    rnp_seq32(const rnp_seq32 &);
    rnp_seq32(id, criticality, const value &);

    rnp_seq32 & operator = (const rnp_seq32 &);
    int operator == (const rnp_seq32 &) const;
    int operator != (const rnp_seq32 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

typedef rnp__shared10 rnpAss_RAB_Parameter_MaxBitrateList;

typedef rnp__shared10 rnpAss_RAB_Parameter_GuaranteedBitrateList;

class OSS_PUBLIC rnp_seq91;

class OSS_PUBLIC rnp_seqof90 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq91 component;

    rnp_seqof90();
    rnp_seqof90(const rnp_seqof90 &);
    ~rnp_seqof90();

    rnp_seqof90 & operator = (const rnp_seqof90 &);
    int operator == (const rnp_seqof90 &) const;
    int operator != (const rnp_seqof90 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof90 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof90 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof90 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpAss_RAB_Parameters   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp__shared10 assMaxBitrateInf;
    typedef rnp__shared10 assGuaranteedBitRateInf;
    typedef rnp_seqof90 iE_Extensions;

    rnpAss_RAB_Parameters();
    rnpAss_RAB_Parameters(const rnpAss_RAB_Parameters &);
    rnpAss_RAB_Parameters(const assMaxBitrateInf &, const assGuaranteedBitRateInf &, 
	const iE_Extensions &);

    rnpAss_RAB_Parameters & operator = (const rnpAss_RAB_Parameters &);
    int operator == (const rnpAss_RAB_Parameters &) const;
    int operator != (const rnpAss_RAB_Parameters &) const;

    assMaxBitrateInf *get_assMaxBitrateInf();
    const assMaxBitrateInf *get_assMaxBitrateInf() const;
    void set_assMaxBitrateInf(const assMaxBitrateInf &);
    int assMaxBitrateInf_is_present() const;
    void omit_assMaxBitrateInf();

    assGuaranteedBitRateInf *get_assGuaranteedBitRateInf();
    const assGuaranteedBitRateInf *get_assGuaranteedBitRateInf() const;
    void set_assGuaranteedBitRateInf(const assGuaranteedBitRateInf &);
    int assGuaranteedBitRateInf_is_present() const;
    void omit_assGuaranteedBitRateInf();

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    assMaxBitrateInf assMaxBitrateInf_field;
    assGuaranteedBitRateInf assGuaranteedBitRateInf_field;
    iE_Extensions iE_Extensions_field;
};

class OSS_PUBLIC rnpRAB_SetupItem_RelocReqAck_ExtIEs_Extension : public OssConstrainedOpenType
{
public:
    rnpRAB_SetupItem_RelocReqAck_ExtIEs_Extension();
    rnpRAB_SetupItem_RelocReqAck_ExtIEs_Extension(const rnpRAB_SetupItem_RelocReqAck_ExtIEs_Extension &);
    ~rnpRAB_SetupItem_RelocReqAck_ExtIEs_Extension();
    rnpRAB_SetupItem_RelocReqAck_ExtIEs_Extension & operator = (const rnpRAB_SetupItem_RelocReqAck_ExtIEs_Extension &);
    int operator == (const rnpRAB_SetupItem_RelocReqAck_ExtIEs_Extension &) const;
    int operator != (const rnpRAB_SetupItem_RelocReqAck_ExtIEs_Extension &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpAss_RAB_Parameters *get_rnpAss_RAB_Parameters();
    const rnpAss_RAB_Parameters *get_rnpAss_RAB_Parameters() const;
    void set_rnpAss_RAB_Parameters(const rnpAss_RAB_Parameters &);
    rnpAss_RAB_Parameters *release_rnpAss_RAB_Parameters();
    void set_rnpAss_RAB_Parameters(rnpAss_RAB_Parameters *);

    rnpTransportLayerAddress *get_rnpTransportLayerAddress();
    const rnpTransportLayerAddress *get_rnpTransportLayerAddress() const;
    void set_rnpTransportLayerAddress(const rnpTransportLayerAddress &);
    rnpTransportLayerAddress *release_rnpTransportLayerAddress();
    void set_rnpTransportLayerAddress(rnpTransportLayerAddress *);

    rnpIuTransportAssociation *get_rnpIuTransportAssociation();
    const rnpIuTransportAssociation *get_rnpIuTransportAssociation() const;
    void set_rnpIuTransportAssociation(const rnpIuTransportAssociation &);
    rnpIuTransportAssociation *release_rnpIuTransportAssociation();
    void set_rnpIuTransportAssociation(rnpIuTransportAssociation *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq33   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpRAB_SetupItem_RelocReqAck_ExtIEs_Extension extensionValue;

    rnp_seq33();
    rnp_seq33(const rnp_seq33 &);
    rnp_seq33(id, criticality, const extensionValue &);

    rnp_seq33 & operator = (const rnp_seq33 &);
    int operator == (const rnp_seq33 &) const;
    int operator != (const rnp_seq33 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    extensionValue & get_extensionValue();
    const extensionValue & get_extensionValue() const;
    void set_extensionValue(const extensionValue &);
private:
    id id_field;
    criticality criticality_field;
    extensionValue extensionValue_field;
};

typedef rnp__shared6 rnp_seqof80;

class OSS_PUBLIC rnp__shared23   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssBitString rAB_ID;
    typedef rnpCause cause;
    typedef rnp__shared6 iE_Extensions;

    rnp__shared23();
    rnp__shared23(const rnp__shared23 &);
    rnp__shared23(const rAB_ID &, const cause &, const iE_Extensions &);
    rnp__shared23(const rAB_ID &, const cause &);

    rnp__shared23 & operator = (const rnp__shared23 &);
    int operator == (const rnp__shared23 &) const;
    int operator != (const rnp__shared23 &) const;

    rAB_ID & get_rAB_ID();
    const rAB_ID & get_rAB_ID() const;
    void set_rAB_ID(const rAB_ID &);

    cause & get_cause();
    const cause & get_cause() const;
    void set_cause(const cause &);

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    rAB_ID rAB_ID_field;
    cause cause_field;
    iE_Extensions iE_Extensions_field;
};

typedef rnp__shared23 rnpRAB_ReleaseItem;

typedef rnp__shared23 rnpRAB_FailedItem;

class OSS_PUBLIC rnpRAB_FailedItemIEs_Value : public OssConstrainedOpenType
{
public:
    rnpRAB_FailedItemIEs_Value();
    rnpRAB_FailedItemIEs_Value(const rnpRAB_FailedItemIEs_Value &);
    ~rnpRAB_FailedItemIEs_Value();
    rnpRAB_FailedItemIEs_Value & operator = (const rnpRAB_FailedItemIEs_Value &);
    int operator == (const rnpRAB_FailedItemIEs_Value &) const;
    int operator != (const rnpRAB_FailedItemIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnp__shared23 *get_rnpRAB_FailedItem();
    const rnp__shared23 *get_rnpRAB_FailedItem() const;
    void set_rnpRAB_FailedItem(const rnp__shared23 &);
    rnp__shared23 *release_rnpRAB_FailedItem();
    void set_rnpRAB_FailedItem(rnp__shared23 *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq34;

class OSS_PUBLIC rnp_seqof33 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq34 component;

    rnp_seqof33();
    rnp_seqof33(const rnp_seqof33 &);
    ~rnp_seqof33();

    rnp_seqof33 & operator = (const rnp_seqof33 &);
    int operator == (const rnp_seqof33 &) const;
    int operator != (const rnp_seqof33 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof33 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof33 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof33 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnp_seq34   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpRAB_FailedItemIEs_Value value;

    rnp_seq34();
    rnp_seq34(const rnp_seq34 &);
    rnp_seq34(id, criticality, const value &);

    rnp_seq34 & operator = (const rnp_seq34 &);
    int operator == (const rnp_seq34 &) const;
    int operator != (const rnp_seq34 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

typedef OSS_UINT32 rnpCauseRadioNetwork;

typedef OSS_UINT32 rnpCauseTransmissionNetwork;

typedef OSS_UINT32 rnpCauseNAS;

typedef OSS_UINT32 rnpCauseProtocol;

typedef OSS_UINT32 rnpCauseMisc;

typedef OSS_UINT32 rnpCauseNon_Standard;

typedef OSS_UINT32 rnpCauseRadioNetworkExtension;

typedef rnp__shared6 rnp_seqof34;

typedef rnp__shared5 rnp_seq35;

class OSS_PUBLIC rnpRelocationFailureExtensions_Extension : public OssConstrainedOpenType
{
public:
    rnpRelocationFailureExtensions_Extension();
    rnpRelocationFailureExtensions_Extension(const rnpRelocationFailureExtensions_Extension &);
    ~rnpRelocationFailureExtensions_Extension();
    rnpRelocationFailureExtensions_Extension & operator = (const rnpRelocationFailureExtensions_Extension &);
    int operator == (const rnpRelocationFailureExtensions_Extension &) const;
    int operator != (const rnpRelocationFailureExtensions_Extension &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpNewBSS_To_OldBSS_Information *get_rnpNewBSS_To_OldBSS_Information();
    const rnpNewBSS_To_OldBSS_Information *get_rnpNewBSS_To_OldBSS_Information() const;
    void set_rnpNewBSS_To_OldBSS_Information(const rnpNewBSS_To_OldBSS_Information &);
    rnpNewBSS_To_OldBSS_Information *release_rnpNewBSS_To_OldBSS_Information();
    void set_rnpNewBSS_To_OldBSS_Information(rnpNewBSS_To_OldBSS_Information *);

    rnpGERAN_Classmark *get_rnpGERAN_Classmark();
    const rnpGERAN_Classmark *get_rnpGERAN_Classmark() const;
    void set_rnpGERAN_Classmark(const rnpGERAN_Classmark &);
    rnpGERAN_Classmark *release_rnpGERAN_Classmark();
    void set_rnpGERAN_Classmark(rnpGERAN_Classmark *);
private:
    void cleanup_decoded();
};

typedef rnp__shared37 rnp_seq36;

class OSS_PUBLIC rnp_seq37   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpRelocationFailureExtensions_Extension extensionValue;

    rnp_seq37();
    rnp_seq37(const rnp_seq37 &);
    rnp_seq37(id, criticality, const extensionValue &);

    rnp_seq37 & operator = (const rnp_seq37 &);
    int operator == (const rnp_seq37 &) const;
    int operator != (const rnp_seq37 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    extensionValue & get_extensionValue();
    const extensionValue & get_extensionValue() const;
    void set_extensionValue(const extensionValue &);
private:
    id id_field;
    criticality criticality_field;
    extensionValue extensionValue_field;
};

typedef rnp__shared1 rnp_seq38;

typedef rnp__shared5 rnp_seq39;

class OSS_PUBLIC rnpRelocationCancelAcknowledgeIEs_Value : public OssConstrainedOpenType
{
public:
    rnpRelocationCancelAcknowledgeIEs_Value();
    rnpRelocationCancelAcknowledgeIEs_Value(const rnpRelocationCancelAcknowledgeIEs_Value &);
    ~rnpRelocationCancelAcknowledgeIEs_Value();
    rnpRelocationCancelAcknowledgeIEs_Value & operator = (const rnpRelocationCancelAcknowledgeIEs_Value &);
    int operator == (const rnpRelocationCancelAcknowledgeIEs_Value &) const;
    int operator != (const rnpRelocationCancelAcknowledgeIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpCriticalityDiagnostics *get_rnpCriticalityDiagnostics();
    const rnpCriticalityDiagnostics *get_rnpCriticalityDiagnostics() const;
    void set_rnpCriticalityDiagnostics(const rnpCriticalityDiagnostics &);
    rnpCriticalityDiagnostics *release_rnpCriticalityDiagnostics();
    void set_rnpCriticalityDiagnostics(rnpCriticalityDiagnostics *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq40   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpRelocationCancelAcknowledgeIEs_Value value;

    rnp_seq40();
    rnp_seq40(const rnp_seq40 &);
    rnp_seq40(id, criticality, const value &);

    rnp_seq40 & operator = (const rnp_seq40 &);
    int operator == (const rnp_seq40 &) const;
    int operator != (const rnp_seq40 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

typedef rnp__shared5 rnp_seq41;

class OSS_PUBLIC rnp_seqof43;

class OSS_PUBLIC rnpRAB_DataForwardingList_SRNS_CtxReq : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seqof43 component;

    rnpRAB_DataForwardingList_SRNS_CtxReq();
    rnpRAB_DataForwardingList_SRNS_CtxReq(const rnpRAB_DataForwardingList_SRNS_CtxReq &);
    ~rnpRAB_DataForwardingList_SRNS_CtxReq();

    rnpRAB_DataForwardingList_SRNS_CtxReq & operator = (const rnpRAB_DataForwardingList_SRNS_CtxReq &);
    int operator == (const rnpRAB_DataForwardingList_SRNS_CtxReq &) const;
    int operator != (const rnpRAB_DataForwardingList_SRNS_CtxReq &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnpRAB_DataForwardingList_SRNS_CtxReq *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnpRAB_DataForwardingList_SRNS_CtxReq *);

    int remove_front();
    int remove_after(OssIndex);

    rnpRAB_DataForwardingList_SRNS_CtxReq *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpSRNS_ContextRequestIEs_Value : public OssConstrainedOpenType
{
public:
    rnpSRNS_ContextRequestIEs_Value();
    rnpSRNS_ContextRequestIEs_Value(const rnpSRNS_ContextRequestIEs_Value &);
    ~rnpSRNS_ContextRequestIEs_Value();
    rnpSRNS_ContextRequestIEs_Value & operator = (const rnpSRNS_ContextRequestIEs_Value &);
    int operator == (const rnpSRNS_ContextRequestIEs_Value &) const;
    int operator != (const rnpSRNS_ContextRequestIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpRAB_DataForwardingList_SRNS_CtxReq *get_rnpRAB_DataForwardingList_SRNS_CtxReq();
    const rnpRAB_DataForwardingList_SRNS_CtxReq *get_rnpRAB_DataForwardingList_SRNS_CtxReq() const;
    void set_rnpRAB_DataForwardingList_SRNS_CtxReq(const rnpRAB_DataForwardingList_SRNS_CtxReq &);
    rnpRAB_DataForwardingList_SRNS_CtxReq *release_rnpRAB_DataForwardingList_SRNS_CtxReq();
    void set_rnpRAB_DataForwardingList_SRNS_CtxReq(rnpRAB_DataForwardingList_SRNS_CtxReq *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnpSRNS_ContextRequestExtensions_Extension : public OssConstrainedOpenType
{
public:
    rnpSRNS_ContextRequestExtensions_Extension();
    rnpSRNS_ContextRequestExtensions_Extension(const rnpSRNS_ContextRequestExtensions_Extension &);
    ~rnpSRNS_ContextRequestExtensions_Extension();
    rnpSRNS_ContextRequestExtensions_Extension & operator = (const rnpSRNS_ContextRequestExtensions_Extension &);
    int operator == (const rnpSRNS_ContextRequestExtensions_Extension &) const;
    int operator != (const rnpSRNS_ContextRequestExtensions_Extension &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpRAT_Type *get_rnpRAT_Type();
    const rnpRAT_Type *get_rnpRAT_Type() const;
    void set_rnpRAT_Type(const rnpRAT_Type &);
    rnpRAT_Type *release_rnpRAT_Type();
    void set_rnpRAT_Type(rnpRAT_Type *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq42   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpSRNS_ContextRequestIEs_Value value;

    rnp_seq42();
    rnp_seq42(const rnp_seq42 &);
    rnp_seq42(id, criticality, const value &);

    rnp_seq42 & operator = (const rnp_seq42 &);
    int operator == (const rnp_seq42 &) const;
    int operator != (const rnp_seq42 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

class OSS_PUBLIC rnp_seq43   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpSRNS_ContextRequestExtensions_Extension extensionValue;

    rnp_seq43();
    rnp_seq43(const rnp_seq43 &);
    rnp_seq43(id, criticality, const extensionValue &);

    rnp_seq43 & operator = (const rnp_seq43 &);
    int operator == (const rnp_seq43 &) const;
    int operator != (const rnp_seq43 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    extensionValue & get_extensionValue();
    const extensionValue & get_extensionValue() const;
    void set_extensionValue(const extensionValue &);
private:
    id id_field;
    criticality criticality_field;
    extensionValue extensionValue_field;
};

class OSS_PUBLIC rnpRAB_DataForwardingItem_SRNS_CtxReq_IEs_Value : public OssConstrainedOpenType
{
public:
    rnpRAB_DataForwardingItem_SRNS_CtxReq_IEs_Value();
    rnpRAB_DataForwardingItem_SRNS_CtxReq_IEs_Value(const rnpRAB_DataForwardingItem_SRNS_CtxReq_IEs_Value &);
    ~rnpRAB_DataForwardingItem_SRNS_CtxReq_IEs_Value();
    rnpRAB_DataForwardingItem_SRNS_CtxReq_IEs_Value & operator = (const rnpRAB_DataForwardingItem_SRNS_CtxReq_IEs_Value &);
    int operator == (const rnpRAB_DataForwardingItem_SRNS_CtxReq_IEs_Value &) const;
    int operator != (const rnpRAB_DataForwardingItem_SRNS_CtxReq_IEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnp__shared19 *get_rnpRAB_DataForwardingItem_SRNS_CtxReq();
    const rnp__shared19 *get_rnpRAB_DataForwardingItem_SRNS_CtxReq() const;
    void set_rnpRAB_DataForwardingItem_SRNS_CtxReq(const rnp__shared19 &);
    rnp__shared19 *release_rnpRAB_DataForwardingItem_SRNS_CtxReq();
    void set_rnpRAB_DataForwardingItem_SRNS_CtxReq(rnp__shared19 *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq44;

class OSS_PUBLIC rnp_seqof43 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq44 component;

    rnp_seqof43();
    rnp_seqof43(const rnp_seqof43 &);
    ~rnp_seqof43();

    rnp_seqof43 & operator = (const rnp_seqof43 &);
    int operator == (const rnp_seqof43 &) const;
    int operator != (const rnp_seqof43 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof43 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof43 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof43 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnp_seq44   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpRAB_DataForwardingItem_SRNS_CtxReq_IEs_Value value;

    rnp_seq44();
    rnp_seq44(const rnp_seq44 &);
    rnp_seq44(id, criticality, const value &);

    rnp_seq44 & operator = (const rnp_seq44 &);
    int operator == (const rnp_seq44 &) const;
    int operator != (const rnp_seq44 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

typedef rnp__shared5 rnp_seq45;

class OSS_PUBLIC rnp_seqof47;

class OSS_PUBLIC rnpRAB_ContextList : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seqof47 component;

    rnpRAB_ContextList();
    rnpRAB_ContextList(const rnpRAB_ContextList &);
    ~rnpRAB_ContextList();

    rnpRAB_ContextList & operator = (const rnpRAB_ContextList &);
    int operator == (const rnpRAB_ContextList &) const;
    int operator != (const rnpRAB_ContextList &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnpRAB_ContextList *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnpRAB_ContextList *);

    int remove_front();
    int remove_after(OssIndex);

    rnpRAB_ContextList *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnp_seqof49;

class OSS_PUBLIC rnpRAB_ContextFailedtoTransferList : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seqof49 component;

    rnpRAB_ContextFailedtoTransferList();
    rnpRAB_ContextFailedtoTransferList(const rnpRAB_ContextFailedtoTransferList &);
    ~rnpRAB_ContextFailedtoTransferList();

    rnpRAB_ContextFailedtoTransferList & operator = (const rnpRAB_ContextFailedtoTransferList &);
    int operator == (const rnpRAB_ContextFailedtoTransferList &) const;
    int operator != (const rnpRAB_ContextFailedtoTransferList &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnpRAB_ContextFailedtoTransferList *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnpRAB_ContextFailedtoTransferList *);

    int remove_front();
    int remove_after(OssIndex);

    rnpRAB_ContextFailedtoTransferList *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpSRNS_ContextResponseIEs_Value : public OssConstrainedOpenType
{
public:
    rnpSRNS_ContextResponseIEs_Value();
    rnpSRNS_ContextResponseIEs_Value(const rnpSRNS_ContextResponseIEs_Value &);
    ~rnpSRNS_ContextResponseIEs_Value();
    rnpSRNS_ContextResponseIEs_Value & operator = (const rnpSRNS_ContextResponseIEs_Value &);
    int operator == (const rnpSRNS_ContextResponseIEs_Value &) const;
    int operator != (const rnpSRNS_ContextResponseIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpRAB_ContextList *get_rnpRAB_ContextList();
    const rnpRAB_ContextList *get_rnpRAB_ContextList() const;
    void set_rnpRAB_ContextList(const rnpRAB_ContextList &);
    rnpRAB_ContextList *release_rnpRAB_ContextList();
    void set_rnpRAB_ContextList(rnpRAB_ContextList *);

    rnpRAB_ContextFailedtoTransferList *get_rnpRAB_ContextFailedtoTransferList();
    const rnpRAB_ContextFailedtoTransferList *get_rnpRAB_ContextFailedtoTransferList() const;
    void set_rnpRAB_ContextFailedtoTransferList(const rnpRAB_ContextFailedtoTransferList &);
    rnpRAB_ContextFailedtoTransferList *release_rnpRAB_ContextFailedtoTransferList();
    void set_rnpRAB_ContextFailedtoTransferList(rnpRAB_ContextFailedtoTransferList *);

    rnpCriticalityDiagnostics *get_rnpCriticalityDiagnostics();
    const rnpCriticalityDiagnostics *get_rnpCriticalityDiagnostics() const;
    void set_rnpCriticalityDiagnostics(const rnpCriticalityDiagnostics &);
    rnpCriticalityDiagnostics *release_rnpCriticalityDiagnostics();
    void set_rnpCriticalityDiagnostics(rnpCriticalityDiagnostics *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq46   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpSRNS_ContextResponseIEs_Value value;

    rnp_seq46();
    rnp_seq46(const rnp_seq46 &);
    rnp_seq46(id, criticality, const value &);

    rnp_seq46 & operator = (const rnp_seq46 &);
    int operator == (const rnp_seq46 &) const;
    int operator != (const rnp_seq46 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

typedef rnp__shared5 rnp_seq47;

typedef rnp__shared6 rnp_seqof48;

class OSS_PUBLIC rnp__shared32   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssBitString rAB_ID;
    typedef OSS_UINT32 dl_GTP_PDU_SequenceNumber;
    typedef OSS_UINT32 ul_GTP_PDU_SequenceNumber;
    typedef OSS_UINT32 dl_N_PDU_SequenceNumber;
    typedef OSS_UINT32 ul_N_PDU_SequenceNumber;
    typedef rnp__shared6 iE_Extensions;

    rnp__shared32();
    rnp__shared32(const rnp__shared32 &);
    rnp__shared32(const rAB_ID &, dl_GTP_PDU_SequenceNumber, ul_GTP_PDU_SequenceNumber, 
	dl_N_PDU_SequenceNumber, ul_N_PDU_SequenceNumber, const iE_Extensions &);
    rnp__shared32(const rAB_ID &);

    rnp__shared32 & operator = (const rnp__shared32 &);
    int operator == (const rnp__shared32 &) const;
    int operator != (const rnp__shared32 &) const;

    rAB_ID & get_rAB_ID();
    const rAB_ID & get_rAB_ID() const;
    void set_rAB_ID(const rAB_ID &);

    dl_GTP_PDU_SequenceNumber *get_dl_GTP_PDU_SequenceNumber();
    const dl_GTP_PDU_SequenceNumber *get_dl_GTP_PDU_SequenceNumber() const;
    void set_dl_GTP_PDU_SequenceNumber(dl_GTP_PDU_SequenceNumber);
    int dl_GTP_PDU_SequenceNumber_is_present() const;
    void omit_dl_GTP_PDU_SequenceNumber();

    ul_GTP_PDU_SequenceNumber *get_ul_GTP_PDU_SequenceNumber();
    const ul_GTP_PDU_SequenceNumber *get_ul_GTP_PDU_SequenceNumber() const;
    void set_ul_GTP_PDU_SequenceNumber(ul_GTP_PDU_SequenceNumber);
    int ul_GTP_PDU_SequenceNumber_is_present() const;
    void omit_ul_GTP_PDU_SequenceNumber();

    dl_N_PDU_SequenceNumber *get_dl_N_PDU_SequenceNumber();
    const dl_N_PDU_SequenceNumber *get_dl_N_PDU_SequenceNumber() const;
    void set_dl_N_PDU_SequenceNumber(dl_N_PDU_SequenceNumber);
    int dl_N_PDU_SequenceNumber_is_present() const;
    void omit_dl_N_PDU_SequenceNumber();

    ul_N_PDU_SequenceNumber *get_ul_N_PDU_SequenceNumber();
    const ul_N_PDU_SequenceNumber *get_ul_N_PDU_SequenceNumber() const;
    void set_ul_N_PDU_SequenceNumber(ul_N_PDU_SequenceNumber);
    int ul_N_PDU_SequenceNumber_is_present() const;
    void omit_ul_N_PDU_SequenceNumber();

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    rAB_ID rAB_ID_field;
    dl_GTP_PDU_SequenceNumber dl_GTP_PDU_SequenceNumber_field;
    ul_GTP_PDU_SequenceNumber ul_GTP_PDU_SequenceNumber_field;
    dl_N_PDU_SequenceNumber dl_N_PDU_SequenceNumber_field;
    ul_N_PDU_SequenceNumber ul_N_PDU_SequenceNumber_field;
    iE_Extensions iE_Extensions_field;
};

typedef rnp__shared32 rnpRAB_ContextItem;

class OSS_PUBLIC rnpRAB_ContextItemIEs_Value : public OssConstrainedOpenType
{
public:
    rnpRAB_ContextItemIEs_Value();
    rnpRAB_ContextItemIEs_Value(const rnpRAB_ContextItemIEs_Value &);
    ~rnpRAB_ContextItemIEs_Value();
    rnpRAB_ContextItemIEs_Value & operator = (const rnpRAB_ContextItemIEs_Value &);
    int operator == (const rnpRAB_ContextItemIEs_Value &) const;
    int operator != (const rnpRAB_ContextItemIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnp__shared32 *get_rnpRAB_ContextItem();
    const rnp__shared32 *get_rnpRAB_ContextItem() const;
    void set_rnpRAB_ContextItem(const rnp__shared32 &);
    rnp__shared32 *release_rnpRAB_ContextItem();
    void set_rnpRAB_ContextItem(rnp__shared32 *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq48;

class OSS_PUBLIC rnp_seqof47 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq48 component;

    rnp_seqof47();
    rnp_seqof47(const rnp_seqof47 &);
    ~rnp_seqof47();

    rnp_seqof47 & operator = (const rnp_seqof47 &);
    int operator == (const rnp_seqof47 &) const;
    int operator != (const rnp_seqof47 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof47 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof47 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof47 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnp_seq48   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpRAB_ContextItemIEs_Value value;

    rnp_seq48();
    rnp_seq48(const rnp_seq48 &);
    rnp_seq48(id, criticality, const value &);

    rnp_seq48 & operator = (const rnp_seq48 &);
    int operator == (const rnp_seq48 &) const;
    int operator != (const rnp_seq48 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

typedef OSS_UINT32 rnpDL_N_PDU_SequenceNumber;

typedef OSS_UINT32 rnpUL_N_PDU_SequenceNumber;

typedef rnp__shared5 rnp_seq49;

typedef rnp__shared23 rnpRABs_ContextFailedtoTransferItem;

class OSS_PUBLIC rnpRABs_ContextFailedtoTransferItemIEs_Value : public OssConstrainedOpenType
{
public:
    rnpRABs_ContextFailedtoTransferItemIEs_Value();
    rnpRABs_ContextFailedtoTransferItemIEs_Value(const rnpRABs_ContextFailedtoTransferItemIEs_Value &);
    ~rnpRABs_ContextFailedtoTransferItemIEs_Value();
    rnpRABs_ContextFailedtoTransferItemIEs_Value & operator = (const rnpRABs_ContextFailedtoTransferItemIEs_Value &);
    int operator == (const rnpRABs_ContextFailedtoTransferItemIEs_Value &) const;
    int operator != (const rnpRABs_ContextFailedtoTransferItemIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnp__shared23 *get_rnpRABs_ContextFailedtoTransferItem();
    const rnp__shared23 *get_rnpRABs_ContextFailedtoTransferItem() const;
    void set_rnpRABs_ContextFailedtoTransferItem(const rnp__shared23 &);
    rnp__shared23 *release_rnpRABs_ContextFailedtoTransferItem();
    void set_rnpRABs_ContextFailedtoTransferItem(rnp__shared23 *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq50;

class OSS_PUBLIC rnp_seqof49 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq50 component;

    rnp_seqof49();
    rnp_seqof49(const rnp_seqof49 &);
    ~rnp_seqof49();

    rnp_seqof49 & operator = (const rnp_seqof49 &);
    int operator == (const rnp_seqof49 &) const;
    int operator != (const rnp_seqof49 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof49 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof49 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof49 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnp_seq50   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpRABs_ContextFailedtoTransferItemIEs_Value value;

    rnp_seq50();
    rnp_seq50(const rnp_seq50 &);
    rnp_seq50(id, criticality, const value &);

    rnp_seq50 & operator = (const rnp_seq50 &);
    int operator == (const rnp_seq50 &) const;
    int operator != (const rnp_seq50 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

typedef rnp__shared6 rnp_seqof50;

typedef rnp__shared5 rnp_seq51;

class OSS_PUBLIC rnpSecurityModeCommandIEs_Value : public OssConstrainedOpenType
{
public:
    rnpSecurityModeCommandIEs_Value();
    rnpSecurityModeCommandIEs_Value(const rnpSecurityModeCommandIEs_Value &);
    ~rnpSecurityModeCommandIEs_Value();
    rnpSecurityModeCommandIEs_Value & operator = (const rnpSecurityModeCommandIEs_Value &);
    int operator == (const rnpSecurityModeCommandIEs_Value &) const;
    int operator != (const rnpSecurityModeCommandIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnp__shared16 *get_rnpIntegrityProtectionInformation();
    const rnp__shared16 *get_rnpIntegrityProtectionInformation() const;
    void set_rnpIntegrityProtectionInformation(const rnp__shared16 &);
    rnp__shared16 *release_rnpIntegrityProtectionInformation();
    void set_rnpIntegrityProtectionInformation(rnp__shared16 *);

    rnp__shared16 *get_rnpEncryptionInformation();
    const rnp__shared16 *get_rnpEncryptionInformation() const;
    void set_rnpEncryptionInformation(const rnp__shared16 &);
    rnp__shared16 *release_rnpEncryptionInformation();
    void set_rnpEncryptionInformation(rnp__shared16 *);

    rnpKeyStatus *get_rnpKeyStatus();
    const rnpKeyStatus *get_rnpKeyStatus() const;
    void set_rnpKeyStatus(const rnpKeyStatus &);
    rnpKeyStatus *release_rnpKeyStatus();
    void set_rnpKeyStatus(rnpKeyStatus *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq52   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpSecurityModeCommandIEs_Value value;

    rnp_seq52();
    rnp_seq52(const rnp_seq52 &);
    rnp_seq52(id, criticality, const value &);

    rnp_seq52 & operator = (const rnp_seq52 &);
    int operator == (const rnp_seq52 &) const;
    int operator != (const rnp_seq52 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

typedef rnp__shared5 rnp_seq53;

class OSS_PUBLIC rnpSecurityModeCompleteIEs_Value : public OssConstrainedOpenType
{
public:
    rnpSecurityModeCompleteIEs_Value();
    rnpSecurityModeCompleteIEs_Value(const rnpSecurityModeCompleteIEs_Value &);
    ~rnpSecurityModeCompleteIEs_Value();
    rnpSecurityModeCompleteIEs_Value & operator = (const rnpSecurityModeCompleteIEs_Value &);
    int operator == (const rnpSecurityModeCompleteIEs_Value &) const;
    int operator != (const rnpSecurityModeCompleteIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpChosenIntegrityProtectionAlgorithm *get_rnpChosenIntegrityProtectionAlgorithm();
    const rnpChosenIntegrityProtectionAlgorithm *get_rnpChosenIntegrityProtectionAlgorithm() const;
    void set_rnpChosenIntegrityProtectionAlgorithm(const rnpChosenIntegrityProtectionAlgorithm &);
    rnpChosenIntegrityProtectionAlgorithm *release_rnpChosenIntegrityProtectionAlgorithm();
    void set_rnpChosenIntegrityProtectionAlgorithm(rnpChosenIntegrityProtectionAlgorithm *);

    rnpChosenEncryptionAlgorithm *get_rnpChosenEncryptionAlgorithm();
    const rnpChosenEncryptionAlgorithm *get_rnpChosenEncryptionAlgorithm() const;
    void set_rnpChosenEncryptionAlgorithm(const rnpChosenEncryptionAlgorithm &);
    rnpChosenEncryptionAlgorithm *release_rnpChosenEncryptionAlgorithm();
    void set_rnpChosenEncryptionAlgorithm(rnpChosenEncryptionAlgorithm *);

    rnpCriticalityDiagnostics *get_rnpCriticalityDiagnostics();
    const rnpCriticalityDiagnostics *get_rnpCriticalityDiagnostics() const;
    void set_rnpCriticalityDiagnostics(const rnpCriticalityDiagnostics &);
    rnpCriticalityDiagnostics *release_rnpCriticalityDiagnostics();
    void set_rnpCriticalityDiagnostics(rnpCriticalityDiagnostics *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq54   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpSecurityModeCompleteIEs_Value value;

    rnp_seq54();
    rnp_seq54(const rnp_seq54 &);
    rnp_seq54(id, criticality, const value &);

    rnp_seq54 & operator = (const rnp_seq54 &);
    int operator == (const rnp_seq54 &) const;
    int operator != (const rnp_seq54 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

typedef rnp__shared5 rnp_seq55;

typedef rnp__shared37 rnp_seq56;

typedef rnp__shared5 rnp_seq57;

class OSS_PUBLIC rnp_seqof59;

class OSS_PUBLIC rnpRAB_DataVolumeReportRequestList : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seqof59 component;

    rnpRAB_DataVolumeReportRequestList();
    rnpRAB_DataVolumeReportRequestList(const rnpRAB_DataVolumeReportRequestList &);
    ~rnpRAB_DataVolumeReportRequestList();

    rnpRAB_DataVolumeReportRequestList & operator = (const rnpRAB_DataVolumeReportRequestList &);
    int operator == (const rnpRAB_DataVolumeReportRequestList &) const;
    int operator != (const rnpRAB_DataVolumeReportRequestList &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnpRAB_DataVolumeReportRequestList *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnpRAB_DataVolumeReportRequestList *);

    int remove_front();
    int remove_after(OssIndex);

    rnpRAB_DataVolumeReportRequestList *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpDataVolumeReportRequestIEs_Value : public OssConstrainedOpenType
{
public:
    rnpDataVolumeReportRequestIEs_Value();
    rnpDataVolumeReportRequestIEs_Value(const rnpDataVolumeReportRequestIEs_Value &);
    ~rnpDataVolumeReportRequestIEs_Value();
    rnpDataVolumeReportRequestIEs_Value & operator = (const rnpDataVolumeReportRequestIEs_Value &);
    int operator == (const rnpDataVolumeReportRequestIEs_Value &) const;
    int operator != (const rnpDataVolumeReportRequestIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpRAB_DataVolumeReportRequestList *get_rnpRAB_DataVolumeReportRequestList();
    const rnpRAB_DataVolumeReportRequestList *get_rnpRAB_DataVolumeReportRequestList() const;
    void set_rnpRAB_DataVolumeReportRequestList(const rnpRAB_DataVolumeReportRequestList &);
    rnpRAB_DataVolumeReportRequestList *release_rnpRAB_DataVolumeReportRequestList();
    void set_rnpRAB_DataVolumeReportRequestList(rnpRAB_DataVolumeReportRequestList *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq58   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpDataVolumeReportRequestIEs_Value value;

    rnp_seq58();
    rnp_seq58(const rnp_seq58 &);
    rnp_seq58(id, criticality, const value &);

    rnp_seq58 & operator = (const rnp_seq58 &);
    int operator == (const rnp_seq58 &) const;
    int operator != (const rnp_seq58 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

typedef rnp__shared5 rnp_seq59;

typedef rnp__shared19 rnpRAB_DataVolumeReportRequestItem;

class OSS_PUBLIC rnpRAB_DataVolumeReportRequestItemIEs_Value : public OssConstrainedOpenType
{
public:
    rnpRAB_DataVolumeReportRequestItemIEs_Value();
    rnpRAB_DataVolumeReportRequestItemIEs_Value(const rnpRAB_DataVolumeReportRequestItemIEs_Value &);
    ~rnpRAB_DataVolumeReportRequestItemIEs_Value();
    rnpRAB_DataVolumeReportRequestItemIEs_Value & operator = (const rnpRAB_DataVolumeReportRequestItemIEs_Value &);
    int operator == (const rnpRAB_DataVolumeReportRequestItemIEs_Value &) const;
    int operator != (const rnpRAB_DataVolumeReportRequestItemIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnp__shared19 *get_rnpRAB_DataVolumeReportRequestItem();
    const rnp__shared19 *get_rnpRAB_DataVolumeReportRequestItem() const;
    void set_rnpRAB_DataVolumeReportRequestItem(const rnp__shared19 &);
    rnp__shared19 *release_rnpRAB_DataVolumeReportRequestItem();
    void set_rnpRAB_DataVolumeReportRequestItem(rnp__shared19 *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq60;

class OSS_PUBLIC rnp_seqof59 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq60 component;

    rnp_seqof59();
    rnp_seqof59(const rnp_seqof59 &);
    ~rnp_seqof59();

    rnp_seqof59 & operator = (const rnp_seqof59 &);
    int operator == (const rnp_seqof59 &) const;
    int operator != (const rnp_seqof59 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof59 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof59 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof59 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnp_seq60   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpRAB_DataVolumeReportRequestItemIEs_Value value;

    rnp_seq60();
    rnp_seq60(const rnp_seq60 &);
    rnp_seq60(id, criticality, const value &);

    rnp_seq60 & operator = (const rnp_seq60 &);
    int operator == (const rnp_seq60 &) const;
    int operator != (const rnp_seq60 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

typedef rnp__shared6 rnp_seqof60;

typedef rnp__shared5 rnp_seq61;

class OSS_PUBLIC rnp_seqof63;

class OSS_PUBLIC rnpRAB_FailedtoReportList : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seqof63 component;

    rnpRAB_FailedtoReportList();
    rnpRAB_FailedtoReportList(const rnpRAB_FailedtoReportList &);
    ~rnpRAB_FailedtoReportList();

    rnpRAB_FailedtoReportList & operator = (const rnpRAB_FailedtoReportList &);
    int operator == (const rnpRAB_FailedtoReportList &) const;
    int operator != (const rnpRAB_FailedtoReportList &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnpRAB_FailedtoReportList *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnpRAB_FailedtoReportList *);

    int remove_front();
    int remove_after(OssIndex);

    rnpRAB_FailedtoReportList *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpDataVolumeReportIEs_Value : public OssConstrainedOpenType
{
public:
    rnpDataVolumeReportIEs_Value();
    rnpDataVolumeReportIEs_Value(const rnpDataVolumeReportIEs_Value &);
    ~rnpDataVolumeReportIEs_Value();
    rnpDataVolumeReportIEs_Value & operator = (const rnpDataVolumeReportIEs_Value &);
    int operator == (const rnpDataVolumeReportIEs_Value &) const;
    int operator != (const rnpDataVolumeReportIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpRAB_DataVolumeReportList *get_rnpRAB_DataVolumeReportList();
    const rnpRAB_DataVolumeReportList *get_rnpRAB_DataVolumeReportList() const;
    void set_rnpRAB_DataVolumeReportList(const rnpRAB_DataVolumeReportList &);
    rnpRAB_DataVolumeReportList *release_rnpRAB_DataVolumeReportList();
    void set_rnpRAB_DataVolumeReportList(rnpRAB_DataVolumeReportList *);

    rnpRAB_FailedtoReportList *get_rnpRAB_FailedtoReportList();
    const rnpRAB_FailedtoReportList *get_rnpRAB_FailedtoReportList() const;
    void set_rnpRAB_FailedtoReportList(const rnpRAB_FailedtoReportList &);
    rnpRAB_FailedtoReportList *release_rnpRAB_FailedtoReportList();
    void set_rnpRAB_FailedtoReportList(rnpRAB_FailedtoReportList *);

    rnpCriticalityDiagnostics *get_rnpCriticalityDiagnostics();
    const rnpCriticalityDiagnostics *get_rnpCriticalityDiagnostics() const;
    void set_rnpCriticalityDiagnostics(const rnpCriticalityDiagnostics &);
    rnpCriticalityDiagnostics *release_rnpCriticalityDiagnostics();
    void set_rnpCriticalityDiagnostics(rnpCriticalityDiagnostics *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq62   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpDataVolumeReportIEs_Value value;

    rnp_seq62();
    rnp_seq62(const rnp_seq62 &);
    rnp_seq62(id, criticality, const value &);

    rnp_seq62 & operator = (const rnp_seq62 &);
    int operator == (const rnp_seq62 &) const;
    int operator != (const rnp_seq62 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

typedef rnp__shared5 rnp_seq63;

typedef rnp__shared23 rnpRABs_failed_to_reportItem;

class OSS_PUBLIC rnpRABs_failed_to_reportItemIEs_Value : public OssConstrainedOpenType
{
public:
    rnpRABs_failed_to_reportItemIEs_Value();
    rnpRABs_failed_to_reportItemIEs_Value(const rnpRABs_failed_to_reportItemIEs_Value &);
    ~rnpRABs_failed_to_reportItemIEs_Value();
    rnpRABs_failed_to_reportItemIEs_Value & operator = (const rnpRABs_failed_to_reportItemIEs_Value &);
    int operator == (const rnpRABs_failed_to_reportItemIEs_Value &) const;
    int operator != (const rnpRABs_failed_to_reportItemIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnp__shared23 *get_rnpRABs_failed_to_reportItem();
    const rnp__shared23 *get_rnpRABs_failed_to_reportItem() const;
    void set_rnpRABs_failed_to_reportItem(const rnp__shared23 &);
    rnp__shared23 *release_rnpRABs_failed_to_reportItem();
    void set_rnpRABs_failed_to_reportItem(rnp__shared23 *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq64;

class OSS_PUBLIC rnp_seqof63 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq64 component;

    rnp_seqof63();
    rnp_seqof63(const rnp_seqof63 &);
    ~rnp_seqof63();

    rnp_seqof63 & operator = (const rnp_seqof63 &);
    int operator == (const rnp_seqof63 &) const;
    int operator != (const rnp_seqof63 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof63 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof63 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof63 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnp_seq64   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpRABs_failed_to_reportItemIEs_Value value;

    rnp_seq64();
    rnp_seq64(const rnp_seq64 &);
    rnp_seq64(id, criticality, const value &);

    rnp_seq64 & operator = (const rnp_seq64 &);
    int operator == (const rnp_seq64 &) const;
    int operator != (const rnp_seq64 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

typedef rnp__shared6 rnp_seqof64;

typedef rnp__shared5 rnp_seq65;

class OSS_PUBLIC rnpGlobalRNC_ID   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssString pLMNidentity;
    typedef OSS_UINT32 rNC_ID;

    rnpGlobalRNC_ID();
    rnpGlobalRNC_ID(const rnpGlobalRNC_ID &);
    rnpGlobalRNC_ID(const pLMNidentity &, rNC_ID);

    rnpGlobalRNC_ID & operator = (const rnpGlobalRNC_ID &);
    int operator == (const rnpGlobalRNC_ID &) const;
    int operator != (const rnpGlobalRNC_ID &) const;

    pLMNidentity & get_pLMNidentity();
    const pLMNidentity & get_pLMNidentity() const;
    void set_pLMNidentity(const pLMNidentity &);

    rNC_ID & get_rNC_ID();
    rNC_ID get_rNC_ID() const;
    void set_rNC_ID(rNC_ID);
private:
    pLMNidentity pLMNidentity_field;
    rNC_ID rNC_ID_field;
};

class OSS_PUBLIC rnpResetIEs_Value : public OssConstrainedOpenType
{
public:
    rnpResetIEs_Value();
    rnpResetIEs_Value(const rnpResetIEs_Value &);
    ~rnpResetIEs_Value();
    rnpResetIEs_Value & operator = (const rnpResetIEs_Value &);
    int operator == (const rnpResetIEs_Value &) const;
    int operator != (const rnpResetIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpCause *get_rnpCause();
    const rnpCause *get_rnpCause() const;
    void set_rnpCause(const rnpCause &);
    rnpCause *release_rnpCause();
    void set_rnpCause(rnpCause *);

    rnpCN_DomainIndicator *get_rnpCN_DomainIndicator();
    const rnpCN_DomainIndicator *get_rnpCN_DomainIndicator() const;
    void set_rnpCN_DomainIndicator(const rnpCN_DomainIndicator &);
    rnpCN_DomainIndicator *release_rnpCN_DomainIndicator();
    void set_rnpCN_DomainIndicator(rnpCN_DomainIndicator *);

    rnpGlobalRNC_ID *get_rnpGlobalRNC_ID();
    const rnpGlobalRNC_ID *get_rnpGlobalRNC_ID() const;
    void set_rnpGlobalRNC_ID(const rnpGlobalRNC_ID &);
    rnpGlobalRNC_ID *release_rnpGlobalRNC_ID();
    void set_rnpGlobalRNC_ID(rnpGlobalRNC_ID *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnpResetExtensions_Extension : public OssConstrainedOpenType
{
public:
    rnpResetExtensions_Extension();
    rnpResetExtensions_Extension(const rnpResetExtensions_Extension &);
    ~rnpResetExtensions_Extension();
    rnpResetExtensions_Extension & operator = (const rnpResetExtensions_Extension &);
    int operator == (const rnpResetExtensions_Extension &) const;
    int operator != (const rnpResetExtensions_Extension &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpGlobalCN_ID *get_rnpGlobalCN_ID();
    const rnpGlobalCN_ID *get_rnpGlobalCN_ID() const;
    void set_rnpGlobalCN_ID(const rnpGlobalCN_ID &);
    rnpGlobalCN_ID *release_rnpGlobalCN_ID();
    void set_rnpGlobalCN_ID(rnpGlobalCN_ID *);

    rnpExtendedRNC_ID *get_rnpExtendedRNC_ID();
    const rnpExtendedRNC_ID *get_rnpExtendedRNC_ID() const;
    void set_rnpExtendedRNC_ID(const rnpExtendedRNC_ID &);
    rnpExtendedRNC_ID *release_rnpExtendedRNC_ID();
    void set_rnpExtendedRNC_ID(rnpExtendedRNC_ID *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq66   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpResetIEs_Value value;

    rnp_seq66();
    rnp_seq66(const rnp_seq66 &);
    rnp_seq66(id, criticality, const value &);

    rnp_seq66 & operator = (const rnp_seq66 &);
    int operator == (const rnp_seq66 &) const;
    int operator != (const rnp_seq66 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

class OSS_PUBLIC rnp__shared20   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpResetExtensions_Extension extensionValue;

    rnp__shared20();
    rnp__shared20(const rnp__shared20 &);
    rnp__shared20(id, criticality, const extensionValue &);

    rnp__shared20 & operator = (const rnp__shared20 &);
    int operator == (const rnp__shared20 &) const;
    int operator != (const rnp__shared20 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    extensionValue & get_extensionValue();
    const extensionValue & get_extensionValue() const;
    void set_extensionValue(const extensionValue &);
private:
    id id_field;
    criticality criticality_field;
    extensionValue extensionValue_field;
};

typedef rnp__shared20 rnp_seq67;

class OSS_PUBLIC rnpResetAcknowledgeIEs_Value : public OssConstrainedOpenType
{
public:
    rnpResetAcknowledgeIEs_Value();
    rnpResetAcknowledgeIEs_Value(const rnpResetAcknowledgeIEs_Value &);
    ~rnpResetAcknowledgeIEs_Value();
    rnpResetAcknowledgeIEs_Value & operator = (const rnpResetAcknowledgeIEs_Value &);
    int operator == (const rnpResetAcknowledgeIEs_Value &) const;
    int operator != (const rnpResetAcknowledgeIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpCN_DomainIndicator *get_rnpCN_DomainIndicator();
    const rnpCN_DomainIndicator *get_rnpCN_DomainIndicator() const;
    void set_rnpCN_DomainIndicator(const rnpCN_DomainIndicator &);
    rnpCN_DomainIndicator *release_rnpCN_DomainIndicator();
    void set_rnpCN_DomainIndicator(rnpCN_DomainIndicator *);

    rnpCriticalityDiagnostics *get_rnpCriticalityDiagnostics();
    const rnpCriticalityDiagnostics *get_rnpCriticalityDiagnostics() const;
    void set_rnpCriticalityDiagnostics(const rnpCriticalityDiagnostics &);
    rnpCriticalityDiagnostics *release_rnpCriticalityDiagnostics();
    void set_rnpCriticalityDiagnostics(rnpCriticalityDiagnostics *);

    rnpGlobalRNC_ID *get_rnpGlobalRNC_ID();
    const rnpGlobalRNC_ID *get_rnpGlobalRNC_ID() const;
    void set_rnpGlobalRNC_ID(const rnpGlobalRNC_ID &);
    rnpGlobalRNC_ID *release_rnpGlobalRNC_ID();
    void set_rnpGlobalRNC_ID(rnpGlobalRNC_ID *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq68   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpResetAcknowledgeIEs_Value value;

    rnp_seq68();
    rnp_seq68(const rnp_seq68 &);
    rnp_seq68(id, criticality, const value &);

    rnp_seq68 & operator = (const rnp_seq68 &);
    int operator == (const rnp_seq68 &) const;
    int operator != (const rnp_seq68 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

typedef rnp__shared20 rnp_seq69;

class OSS_PUBLIC rnp_seqof71;

class OSS_PUBLIC rnpResetResourceList : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seqof71 component;

    rnpResetResourceList();
    rnpResetResourceList(const rnpResetResourceList &);
    ~rnpResetResourceList();

    rnpResetResourceList & operator = (const rnpResetResourceList &);
    int operator == (const rnpResetResourceList &) const;
    int operator != (const rnpResetResourceList &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnpResetResourceList *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnpResetResourceList *);

    int remove_front();
    int remove_after(OssIndex);

    rnpResetResourceList *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpResetResourceIEs_Value : public OssConstrainedOpenType
{
public:
    rnpResetResourceIEs_Value();
    rnpResetResourceIEs_Value(const rnpResetResourceIEs_Value &);
    ~rnpResetResourceIEs_Value();
    rnpResetResourceIEs_Value & operator = (const rnpResetResourceIEs_Value &);
    int operator == (const rnpResetResourceIEs_Value &) const;
    int operator != (const rnpResetResourceIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpCN_DomainIndicator *get_rnpCN_DomainIndicator();
    const rnpCN_DomainIndicator *get_rnpCN_DomainIndicator() const;
    void set_rnpCN_DomainIndicator(const rnpCN_DomainIndicator &);
    rnpCN_DomainIndicator *release_rnpCN_DomainIndicator();
    void set_rnpCN_DomainIndicator(rnpCN_DomainIndicator *);

    rnpCause *get_rnpCause();
    const rnpCause *get_rnpCause() const;
    void set_rnpCause(const rnpCause &);
    rnpCause *release_rnpCause();
    void set_rnpCause(rnpCause *);

    rnpResetResourceList *get_rnpResetResourceList();
    const rnpResetResourceList *get_rnpResetResourceList() const;
    void set_rnpResetResourceList(const rnpResetResourceList &);
    rnpResetResourceList *release_rnpResetResourceList();
    void set_rnpResetResourceList(rnpResetResourceList *);

    rnpGlobalRNC_ID *get_rnpGlobalRNC_ID();
    const rnpGlobalRNC_ID *get_rnpGlobalRNC_ID() const;
    void set_rnpGlobalRNC_ID(const rnpGlobalRNC_ID &);
    rnpGlobalRNC_ID *release_rnpGlobalRNC_ID();
    void set_rnpGlobalRNC_ID(rnpGlobalRNC_ID *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq70   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpResetResourceIEs_Value value;

    rnp_seq70();
    rnp_seq70(const rnp_seq70 &);
    rnp_seq70(id, criticality, const value &);

    rnp_seq70 & operator = (const rnp_seq70 &);
    int operator == (const rnp_seq70 &) const;
    int operator != (const rnp_seq70 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

typedef rnp__shared20 rnp_seq71;

typedef rnp__shared6 rnp_seqof72;

class OSS_PUBLIC rnp__shared22   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssBitString iuSigConId;
    typedef rnp__shared6 iE_Extensions;

    rnp__shared22();
    rnp__shared22(const rnp__shared22 &);
    rnp__shared22(const iuSigConId &, const iE_Extensions &);
    rnp__shared22(const iuSigConId &);

    rnp__shared22 & operator = (const rnp__shared22 &);
    int operator == (const rnp__shared22 &) const;
    int operator != (const rnp__shared22 &) const;

    iuSigConId & get_iuSigConId();
    const iuSigConId & get_iuSigConId() const;
    void set_iuSigConId(const iuSigConId &);

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    iuSigConId iuSigConId_field;
    iE_Extensions iE_Extensions_field;
};

typedef rnp__shared22 rnpResetResourceItem;

class OSS_PUBLIC rnpResetResourceItemIEs_Value : public OssConstrainedOpenType
{
public:
    rnpResetResourceItemIEs_Value();
    rnpResetResourceItemIEs_Value(const rnpResetResourceItemIEs_Value &);
    ~rnpResetResourceItemIEs_Value();
    rnpResetResourceItemIEs_Value & operator = (const rnpResetResourceItemIEs_Value &);
    int operator == (const rnpResetResourceItemIEs_Value &) const;
    int operator != (const rnpResetResourceItemIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnp__shared22 *get_rnpResetResourceItem();
    const rnp__shared22 *get_rnpResetResourceItem() const;
    void set_rnpResetResourceItem(const rnp__shared22 &);
    rnp__shared22 *release_rnpResetResourceItem();
    void set_rnpResetResourceItem(rnp__shared22 *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq72;

class OSS_PUBLIC rnp_seqof71 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq72 component;

    rnp_seqof71();
    rnp_seqof71(const rnp_seqof71 &);
    ~rnp_seqof71();

    rnp_seqof71 & operator = (const rnp_seqof71 &);
    int operator == (const rnp_seqof71 &) const;
    int operator != (const rnp_seqof71 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof71 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof71 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof71 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnp_seq72   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpResetResourceItemIEs_Value value;

    rnp_seq72();
    rnp_seq72(const rnp_seq72 &);
    rnp_seq72(id, criticality, const value &);

    rnp_seq72 & operator = (const rnp_seq72 &);
    int operator == (const rnp_seq72 &) const;
    int operator != (const rnp_seq72 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

typedef rnp__shared5 rnp_seq73;

class OSS_PUBLIC rnp_seqof75;

class OSS_PUBLIC rnpResetResourceAckList : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seqof75 component;

    rnpResetResourceAckList();
    rnpResetResourceAckList(const rnpResetResourceAckList &);
    ~rnpResetResourceAckList();

    rnpResetResourceAckList & operator = (const rnpResetResourceAckList &);
    int operator == (const rnpResetResourceAckList &) const;
    int operator != (const rnpResetResourceAckList &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnpResetResourceAckList *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnpResetResourceAckList *);

    int remove_front();
    int remove_after(OssIndex);

    rnpResetResourceAckList *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpResetResourceAcknowledgeIEs_Value : public OssConstrainedOpenType
{
public:
    rnpResetResourceAcknowledgeIEs_Value();
    rnpResetResourceAcknowledgeIEs_Value(const rnpResetResourceAcknowledgeIEs_Value &);
    ~rnpResetResourceAcknowledgeIEs_Value();
    rnpResetResourceAcknowledgeIEs_Value & operator = (const rnpResetResourceAcknowledgeIEs_Value &);
    int operator == (const rnpResetResourceAcknowledgeIEs_Value &) const;
    int operator != (const rnpResetResourceAcknowledgeIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpCN_DomainIndicator *get_rnpCN_DomainIndicator();
    const rnpCN_DomainIndicator *get_rnpCN_DomainIndicator() const;
    void set_rnpCN_DomainIndicator(const rnpCN_DomainIndicator &);
    rnpCN_DomainIndicator *release_rnpCN_DomainIndicator();
    void set_rnpCN_DomainIndicator(rnpCN_DomainIndicator *);

    rnpResetResourceAckList *get_rnpResetResourceAckList();
    const rnpResetResourceAckList *get_rnpResetResourceAckList() const;
    void set_rnpResetResourceAckList(const rnpResetResourceAckList &);
    rnpResetResourceAckList *release_rnpResetResourceAckList();
    void set_rnpResetResourceAckList(rnpResetResourceAckList *);

    rnpGlobalRNC_ID *get_rnpGlobalRNC_ID();
    const rnpGlobalRNC_ID *get_rnpGlobalRNC_ID() const;
    void set_rnpGlobalRNC_ID(const rnpGlobalRNC_ID &);
    rnpGlobalRNC_ID *release_rnpGlobalRNC_ID();
    void set_rnpGlobalRNC_ID(rnpGlobalRNC_ID *);

    rnpCriticalityDiagnostics *get_rnpCriticalityDiagnostics();
    const rnpCriticalityDiagnostics *get_rnpCriticalityDiagnostics() const;
    void set_rnpCriticalityDiagnostics(const rnpCriticalityDiagnostics &);
    rnpCriticalityDiagnostics *release_rnpCriticalityDiagnostics();
    void set_rnpCriticalityDiagnostics(rnpCriticalityDiagnostics *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq74   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpResetResourceAcknowledgeIEs_Value value;

    rnp_seq74();
    rnp_seq74(const rnp_seq74 &);
    rnp_seq74(id, criticality, const value &);

    rnp_seq74 & operator = (const rnp_seq74 &);
    int operator == (const rnp_seq74 &) const;
    int operator != (const rnp_seq74 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

typedef rnp__shared20 rnp_seq75;

typedef rnp__shared22 rnpResetResourceAckItem;

class OSS_PUBLIC rnpResetResourceAckItemIEs_Value : public OssConstrainedOpenType
{
public:
    rnpResetResourceAckItemIEs_Value();
    rnpResetResourceAckItemIEs_Value(const rnpResetResourceAckItemIEs_Value &);
    ~rnpResetResourceAckItemIEs_Value();
    rnpResetResourceAckItemIEs_Value & operator = (const rnpResetResourceAckItemIEs_Value &);
    int operator == (const rnpResetResourceAckItemIEs_Value &) const;
    int operator != (const rnpResetResourceAckItemIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnp__shared22 *get_rnpResetResourceAckItem();
    const rnp__shared22 *get_rnpResetResourceAckItem() const;
    void set_rnpResetResourceAckItem(const rnp__shared22 &);
    rnp__shared22 *release_rnpResetResourceAckItem();
    void set_rnpResetResourceAckItem(rnp__shared22 *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq76;

class OSS_PUBLIC rnp_seqof75 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq76 component;

    rnp_seqof75();
    rnp_seqof75(const rnp_seqof75 &);
    ~rnp_seqof75();

    rnp_seqof75 & operator = (const rnp_seqof75 &);
    int operator == (const rnp_seqof75 &) const;
    int operator != (const rnp_seqof75 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof75 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof75 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof75 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnp_seq76   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpResetResourceAckItemIEs_Value value;

    rnp_seq76();
    rnp_seq76(const rnp_seq76 &);
    rnp_seq76(id, criticality, const value &);

    rnp_seq76 & operator = (const rnp_seq76 &);
    int operator == (const rnp_seq76 &) const;
    int operator != (const rnp_seq76 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

typedef rnp__shared6 rnp_seqof76;

typedef rnp__shared5 rnp_seq77;

class OSS_PUBLIC rnp_seqof79;

class OSS_PUBLIC rnpRAB_ReleaseList : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seqof79 component;

    rnpRAB_ReleaseList();
    rnpRAB_ReleaseList(const rnpRAB_ReleaseList &);
    ~rnpRAB_ReleaseList();

    rnpRAB_ReleaseList & operator = (const rnpRAB_ReleaseList &);
    int operator == (const rnpRAB_ReleaseList &) const;
    int operator != (const rnpRAB_ReleaseList &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnpRAB_ReleaseList *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnpRAB_ReleaseList *);

    int remove_front();
    int remove_after(OssIndex);

    rnpRAB_ReleaseList *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpRAB_ReleaseRequestIEs_Value : public OssConstrainedOpenType
{
public:
    rnpRAB_ReleaseRequestIEs_Value();
    rnpRAB_ReleaseRequestIEs_Value(const rnpRAB_ReleaseRequestIEs_Value &);
    ~rnpRAB_ReleaseRequestIEs_Value();
    rnpRAB_ReleaseRequestIEs_Value & operator = (const rnpRAB_ReleaseRequestIEs_Value &);
    int operator == (const rnpRAB_ReleaseRequestIEs_Value &) const;
    int operator != (const rnpRAB_ReleaseRequestIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpRAB_ReleaseList *get_rnpRAB_ReleaseList();
    const rnpRAB_ReleaseList *get_rnpRAB_ReleaseList() const;
    void set_rnpRAB_ReleaseList(const rnpRAB_ReleaseList &);
    rnpRAB_ReleaseList *release_rnpRAB_ReleaseList();
    void set_rnpRAB_ReleaseList(rnpRAB_ReleaseList *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq78   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpRAB_ReleaseRequestIEs_Value value;

    rnp_seq78();
    rnp_seq78(const rnp_seq78 &);
    rnp_seq78(id, criticality, const value &);

    rnp_seq78 & operator = (const rnp_seq78 &);
    int operator == (const rnp_seq78 &) const;
    int operator != (const rnp_seq78 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

typedef rnp__shared5 rnp_seq79;

class OSS_PUBLIC rnpRAB_ReleaseItemIEs_Value : public OssConstrainedOpenType
{
public:
    rnpRAB_ReleaseItemIEs_Value();
    rnpRAB_ReleaseItemIEs_Value(const rnpRAB_ReleaseItemIEs_Value &);
    ~rnpRAB_ReleaseItemIEs_Value();
    rnpRAB_ReleaseItemIEs_Value & operator = (const rnpRAB_ReleaseItemIEs_Value &);
    int operator == (const rnpRAB_ReleaseItemIEs_Value &) const;
    int operator != (const rnpRAB_ReleaseItemIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnp__shared23 *get_rnpRAB_ReleaseItem();
    const rnp__shared23 *get_rnpRAB_ReleaseItem() const;
    void set_rnpRAB_ReleaseItem(const rnp__shared23 &);
    rnp__shared23 *release_rnpRAB_ReleaseItem();
    void set_rnpRAB_ReleaseItem(rnp__shared23 *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq80;

class OSS_PUBLIC rnp_seqof79 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq80 component;

    rnp_seqof79();
    rnp_seqof79(const rnp_seqof79 &);
    ~rnp_seqof79();

    rnp_seqof79 & operator = (const rnp_seqof79 &);
    int operator == (const rnp_seqof79 &) const;
    int operator != (const rnp_seqof79 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof79 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof79 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof79 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnp_seq80   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpRAB_ReleaseItemIEs_Value value;

    rnp_seq80();
    rnp_seq80(const rnp_seq80 &);
    rnp_seq80(id, criticality, const value &);

    rnp_seq80 & operator = (const rnp_seq80 &);
    int operator == (const rnp_seq80 &) const;
    int operator != (const rnp_seq80 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

typedef rnp__shared5 rnp_seq81;

typedef rnp__shared2 rnp_seqof81;

typedef rnp__shared1 rnp_seq82;

typedef rnp__shared6 rnp_seqof82;

typedef rnp__shared5 rnp_seq83;

class OSS_PUBLIC rnp__shared24   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpIu_ReleaseCompleteExtensions_Extension value;

    rnp__shared24();
    rnp__shared24(const rnp__shared24 &);
    rnp__shared24(id, criticality, const value &);

    rnp__shared24 & operator = (const rnp__shared24 &);
    int operator == (const rnp__shared24 &) const;
    int operator != (const rnp__shared24 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

typedef rnp__shared24 rnp_seq84;

typedef rnp__shared5 rnp_seq85;

typedef rnp__shared6 rnp_seqof315;

class OSS_PUBLIC rnpTunnelInformation   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssBitString transportLayerAddress;
    typedef OssString uDP_Port_Number;
    typedef rnp__shared6 iE_Extensions;

    rnpTunnelInformation();
    rnpTunnelInformation(const rnpTunnelInformation &);
    rnpTunnelInformation(const transportLayerAddress &, const uDP_Port_Number &, 
	const iE_Extensions &);
    rnpTunnelInformation(const transportLayerAddress &);

    rnpTunnelInformation & operator = (const rnpTunnelInformation &);
    int operator == (const rnpTunnelInformation &) const;
    int operator != (const rnpTunnelInformation &) const;

    transportLayerAddress & get_transportLayerAddress();
    const transportLayerAddress & get_transportLayerAddress() const;
    void set_transportLayerAddress(const transportLayerAddress &);

    uDP_Port_Number *get_uDP_Port_Number();
    const uDP_Port_Number *get_uDP_Port_Number() const;
    void set_uDP_Port_Number(const uDP_Port_Number &);
    int uDP_Port_Number_is_present() const;
    void omit_uDP_Port_Number();

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    transportLayerAddress transportLayerAddress_field;
    uDP_Port_Number uDP_Port_Number_field;
    iE_Extensions iE_Extensions_field;
};

class OSS_PUBLIC rnpRelocationCompleteExtensions_Extension : public OssConstrainedOpenType
{
public:
    rnpRelocationCompleteExtensions_Extension();
    rnpRelocationCompleteExtensions_Extension(const rnpRelocationCompleteExtensions_Extension &);
    ~rnpRelocationCompleteExtensions_Extension();
    rnpRelocationCompleteExtensions_Extension & operator = (const rnpRelocationCompleteExtensions_Extension &);
    int operator == (const rnpRelocationCompleteExtensions_Extension &) const;
    int operator != (const rnpRelocationCompleteExtensions_Extension &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpHigherBitratesThan16MbpsFlag *get_rnpHigherBitratesThan16MbpsFlag();
    const rnpHigherBitratesThan16MbpsFlag *get_rnpHigherBitratesThan16MbpsFlag() const;
    void set_rnpHigherBitratesThan16MbpsFlag(const rnpHigherBitratesThan16MbpsFlag &);
    rnpHigherBitratesThan16MbpsFlag *release_rnpHigherBitratesThan16MbpsFlag();
    void set_rnpHigherBitratesThan16MbpsFlag(rnpHigherBitratesThan16MbpsFlag *);

    rnpTunnelInformation *get_rnpTunnelInformation();
    const rnpTunnelInformation *get_rnpTunnelInformation() const;
    void set_rnpTunnelInformation(const rnpTunnelInformation &);
    rnpTunnelInformation *release_rnpTunnelInformation();
    void set_rnpTunnelInformation(rnpTunnelInformation *);

    rnpLHN_ID *get_rnpLHN_ID();
    const rnpLHN_ID *get_rnpLHN_ID() const;
    void set_rnpLHN_ID(const rnpLHN_ID &);
    rnpLHN_ID *release_rnpLHN_ID();
    void set_rnpLHN_ID(rnpLHN_ID *);
private:
    void cleanup_decoded();
};

typedef rnp__shared24 rnp_seq86;

class OSS_PUBLIC rnp_seq87   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpRelocationCompleteExtensions_Extension extensionValue;

    rnp_seq87();
    rnp_seq87(const rnp_seq87 &);
    rnp_seq87(id, criticality, const extensionValue &);

    rnp_seq87 & operator = (const rnp_seq87 &);
    int operator == (const rnp_seq87 &) const;
    int operator != (const rnp_seq87 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    extensionValue & get_extensionValue();
    const extensionValue & get_extensionValue() const;
    void set_extensionValue(const extensionValue &);
private:
    id id_field;
    criticality criticality_field;
    extensionValue extensionValue_field;
};

class OSS_PUBLIC rnp_seqof89;

class OSS_PUBLIC rnpRAB_SetupList_EnhancedRelocCompleteReq : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seqof89 component;

    rnpRAB_SetupList_EnhancedRelocCompleteReq();
    rnpRAB_SetupList_EnhancedRelocCompleteReq(const rnpRAB_SetupList_EnhancedRelocCompleteReq &);
    ~rnpRAB_SetupList_EnhancedRelocCompleteReq();

    rnpRAB_SetupList_EnhancedRelocCompleteReq & operator = (const rnpRAB_SetupList_EnhancedRelocCompleteReq &);
    int operator == (const rnpRAB_SetupList_EnhancedRelocCompleteReq &) const;
    int operator != (const rnpRAB_SetupList_EnhancedRelocCompleteReq &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnpRAB_SetupList_EnhancedRelocCompleteReq *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnpRAB_SetupList_EnhancedRelocCompleteReq *);

    int remove_front();
    int remove_after(OssIndex);

    rnpRAB_SetupList_EnhancedRelocCompleteReq *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpEnhancedRelocationCompleteRequestIEs_Value : public OssConstrainedOpenType
{
public:
    rnpEnhancedRelocationCompleteRequestIEs_Value();
    rnpEnhancedRelocationCompleteRequestIEs_Value(const rnpEnhancedRelocationCompleteRequestIEs_Value &);
    ~rnpEnhancedRelocationCompleteRequestIEs_Value();
    rnpEnhancedRelocationCompleteRequestIEs_Value & operator = (const rnpEnhancedRelocationCompleteRequestIEs_Value &);
    int operator == (const rnpEnhancedRelocationCompleteRequestIEs_Value &) const;
    int operator != (const rnpEnhancedRelocationCompleteRequestIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpIuSignallingConnectionIdentifier *get_rnpIuSignallingConnectionIdentifier();
    const rnpIuSignallingConnectionIdentifier *get_rnpIuSignallingConnectionIdentifier() const;
    void set_rnpIuSignallingConnectionIdentifier(const rnpIuSignallingConnectionIdentifier &);
    rnpIuSignallingConnectionIdentifier *release_rnpIuSignallingConnectionIdentifier();
    void set_rnpIuSignallingConnectionIdentifier(rnpIuSignallingConnectionIdentifier *);

    rnpGlobalRNC_ID *get_rnpGlobalRNC_ID();
    const rnpGlobalRNC_ID *get_rnpGlobalRNC_ID() const;
    void set_rnpGlobalRNC_ID(const rnpGlobalRNC_ID &);
    rnpGlobalRNC_ID *release_rnpGlobalRNC_ID();
    void set_rnpGlobalRNC_ID(rnpGlobalRNC_ID *);

    rnpExtendedRNC_ID *get_rnpExtendedRNC_ID();
    const rnpExtendedRNC_ID *get_rnpExtendedRNC_ID() const;
    void set_rnpExtendedRNC_ID(const rnpExtendedRNC_ID &);
    rnpExtendedRNC_ID *release_rnpExtendedRNC_ID();
    void set_rnpExtendedRNC_ID(rnpExtendedRNC_ID *);

    rnpRAB_SetupList_EnhancedRelocCompleteReq *get_rnpRAB_SetupList_EnhancedRelocCompleteReq();
    const rnpRAB_SetupList_EnhancedRelocCompleteReq *get_rnpRAB_SetupList_EnhancedRelocCompleteReq() const;
    void set_rnpRAB_SetupList_EnhancedRelocCompleteReq(const rnpRAB_SetupList_EnhancedRelocCompleteReq &);
    rnpRAB_SetupList_EnhancedRelocCompleteReq *release_rnpRAB_SetupList_EnhancedRelocCompleteReq();
    void set_rnpRAB_SetupList_EnhancedRelocCompleteReq(rnpRAB_SetupList_EnhancedRelocCompleteReq *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnpEnhancedRelocationCompleteRequestExtensions_Extension : public OssConstrainedOpenType
{
public:
    rnpEnhancedRelocationCompleteRequestExtensions_Extension();
    rnpEnhancedRelocationCompleteRequestExtensions_Extension(const rnpEnhancedRelocationCompleteRequestExtensions_Extension &);
    ~rnpEnhancedRelocationCompleteRequestExtensions_Extension();
    rnpEnhancedRelocationCompleteRequestExtensions_Extension & operator = (const rnpEnhancedRelocationCompleteRequestExtensions_Extension &);
    int operator == (const rnpEnhancedRelocationCompleteRequestExtensions_Extension &) const;
    int operator != (const rnpEnhancedRelocationCompleteRequestExtensions_Extension &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpChosenIntegrityProtectionAlgorithm *get_rnpChosenIntegrityProtectionAlgorithm();
    const rnpChosenIntegrityProtectionAlgorithm *get_rnpChosenIntegrityProtectionAlgorithm() const;
    void set_rnpChosenIntegrityProtectionAlgorithm(const rnpChosenIntegrityProtectionAlgorithm &);
    rnpChosenIntegrityProtectionAlgorithm *release_rnpChosenIntegrityProtectionAlgorithm();
    void set_rnpChosenIntegrityProtectionAlgorithm(rnpChosenIntegrityProtectionAlgorithm *);

    rnpChosenEncryptionAlgorithm *get_rnpChosenEncryptionAlgorithm();
    const rnpChosenEncryptionAlgorithm *get_rnpChosenEncryptionAlgorithm() const;
    void set_rnpChosenEncryptionAlgorithm(const rnpChosenEncryptionAlgorithm &);
    rnpChosenEncryptionAlgorithm *release_rnpChosenEncryptionAlgorithm();
    void set_rnpChosenEncryptionAlgorithm(rnpChosenEncryptionAlgorithm *);

    rnpHigherBitratesThan16MbpsFlag *get_rnpHigherBitratesThan16MbpsFlag();
    const rnpHigherBitratesThan16MbpsFlag *get_rnpHigherBitratesThan16MbpsFlag() const;
    void set_rnpHigherBitratesThan16MbpsFlag(const rnpHigherBitratesThan16MbpsFlag &);
    rnpHigherBitratesThan16MbpsFlag *release_rnpHigherBitratesThan16MbpsFlag();
    void set_rnpHigherBitratesThan16MbpsFlag(rnpHigherBitratesThan16MbpsFlag *);

    rnpCSG_Id *get_rnpCSG_Id();
    const rnpCSG_Id *get_rnpCSG_Id() const;
    void set_rnpCSG_Id(const rnpCSG_Id &);
    rnpCSG_Id *release_rnpCSG_Id();
    void set_rnpCSG_Id(rnpCSG_Id *);

    rnpCell_Access_Mode *get_rnpCell_Access_Mode();
    const rnpCell_Access_Mode *get_rnpCell_Access_Mode() const;
    void set_rnpCell_Access_Mode(const rnpCell_Access_Mode &);
    rnpCell_Access_Mode *release_rnpCell_Access_Mode();
    void set_rnpCell_Access_Mode(rnpCell_Access_Mode *);

    rnpTunnelInformation *get_rnpTunnelInformation();
    const rnpTunnelInformation *get_rnpTunnelInformation() const;
    void set_rnpTunnelInformation(const rnpTunnelInformation &);
    rnpTunnelInformation *release_rnpTunnelInformation();
    void set_rnpTunnelInformation(rnpTunnelInformation *);

    rnpLHN_ID *get_rnpLHN_ID();
    const rnpLHN_ID *get_rnpLHN_ID() const;
    void set_rnpLHN_ID(const rnpLHN_ID &);
    rnpLHN_ID *release_rnpLHN_ID();
    void set_rnpLHN_ID(rnpLHN_ID *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq88;

class OSS_PUBLIC rnp_seqof87 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq88 component;

    rnp_seqof87();
    rnp_seqof87(const rnp_seqof87 &);
    ~rnp_seqof87();

    rnp_seqof87 & operator = (const rnp_seqof87 &);
    int operator == (const rnp_seqof87 &) const;
    int operator != (const rnp_seqof87 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof87 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof87 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof87 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnp_seq89;

class OSS_PUBLIC rnp_seqof88 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq89 component;

    rnp_seqof88();
    rnp_seqof88(const rnp_seqof88 &);
    ~rnp_seqof88();

    rnp_seqof88 & operator = (const rnp_seqof88 &);
    int operator == (const rnp_seqof88 &) const;
    int operator != (const rnp_seqof88 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof88 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof88 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof88 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpEnhancedRelocationCompleteRequest   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp_seqof87 protocolIEs;
    typedef rnp_seqof88 protocolExtensions;

    rnpEnhancedRelocationCompleteRequest();
    rnpEnhancedRelocationCompleteRequest(const rnpEnhancedRelocationCompleteRequest &);
    rnpEnhancedRelocationCompleteRequest(const protocolIEs &, const protocolExtensions &);
    rnpEnhancedRelocationCompleteRequest(const protocolIEs &);

    rnpEnhancedRelocationCompleteRequest & operator = (const rnpEnhancedRelocationCompleteRequest &);
    int operator == (const rnpEnhancedRelocationCompleteRequest &) const;
    int operator != (const rnpEnhancedRelocationCompleteRequest &) const;

    protocolIEs & get_protocolIEs();
    const protocolIEs & get_protocolIEs() const;
    void set_protocolIEs(const protocolIEs &);

    protocolExtensions *get_protocolExtensions();
    const protocolExtensions *get_protocolExtensions() const;
    void set_protocolExtensions(const protocolExtensions &);
    int protocolExtensions_is_present() const;
    void omit_protocolExtensions();
private:
    OSS_UINT32 bit_mask;
    protocolIEs protocolIEs_field;
    protocolExtensions protocolExtensions_field;
};

class OSS_PUBLIC rnp_seq88   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpEnhancedRelocationCompleteRequestIEs_Value value;

    rnp_seq88();
    rnp_seq88(const rnp_seq88 &);
    rnp_seq88(id, criticality, const value &);

    rnp_seq88 & operator = (const rnp_seq88 &);
    int operator == (const rnp_seq88 &) const;
    int operator != (const rnp_seq88 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

class OSS_PUBLIC rnp_seq89   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpEnhancedRelocationCompleteRequestExtensions_Extension extensionValue;

    rnp_seq89();
    rnp_seq89(const rnp_seq89 &);
    rnp_seq89(id, criticality, const extensionValue &);

    rnp_seq89 & operator = (const rnp_seq89 &);
    int operator == (const rnp_seq89 &) const;
    int operator != (const rnp_seq89 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    extensionValue & get_extensionValue();
    const extensionValue & get_extensionValue() const;
    void set_extensionValue(const extensionValue &);
private:
    id id_field;
    criticality criticality_field;
    extensionValue extensionValue_field;
};

typedef rnp__shared6 rnp_seqof91;

class OSS_PUBLIC rnpRAB_SetupItem_EnhancedRelocCompleteReq   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssBitString rAB_ID;
    typedef OssBitString transportLayerAddressReq1;
    typedef rnpIuTransportAssociation iuTransportAssociationReq1;
    typedef rnpAss_RAB_Parameters ass_RAB_Parameters;
    typedef rnp__shared6 iE_Extensions;

    rnpRAB_SetupItem_EnhancedRelocCompleteReq();
    rnpRAB_SetupItem_EnhancedRelocCompleteReq(const rnpRAB_SetupItem_EnhancedRelocCompleteReq &);
    rnpRAB_SetupItem_EnhancedRelocCompleteReq(const rAB_ID &, const transportLayerAddressReq1 &, 
	const iuTransportAssociationReq1 &, const ass_RAB_Parameters &, const iE_Extensions &);
    rnpRAB_SetupItem_EnhancedRelocCompleteReq(const rAB_ID &);

    rnpRAB_SetupItem_EnhancedRelocCompleteReq & operator = (const rnpRAB_SetupItem_EnhancedRelocCompleteReq &);
    int operator == (const rnpRAB_SetupItem_EnhancedRelocCompleteReq &) const;
    int operator != (const rnpRAB_SetupItem_EnhancedRelocCompleteReq &) const;

    rAB_ID & get_rAB_ID();
    const rAB_ID & get_rAB_ID() const;
    void set_rAB_ID(const rAB_ID &);

    transportLayerAddressReq1 *get_transportLayerAddressReq1();
    const transportLayerAddressReq1 *get_transportLayerAddressReq1() const;
    void set_transportLayerAddressReq1(const transportLayerAddressReq1 &);
    int transportLayerAddressReq1_is_present() const;
    void omit_transportLayerAddressReq1();

    iuTransportAssociationReq1 *get_iuTransportAssociationReq1();
    const iuTransportAssociationReq1 *get_iuTransportAssociationReq1() const;
    void set_iuTransportAssociationReq1(const iuTransportAssociationReq1 &);
    int iuTransportAssociationReq1_is_present() const;
    void omit_iuTransportAssociationReq1();

    ass_RAB_Parameters *get_ass_RAB_Parameters();
    const ass_RAB_Parameters *get_ass_RAB_Parameters() const;
    void set_ass_RAB_Parameters(const ass_RAB_Parameters &);
    int ass_RAB_Parameters_is_present() const;
    void omit_ass_RAB_Parameters();

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    rAB_ID rAB_ID_field;
    transportLayerAddressReq1 transportLayerAddressReq1_field;
    iuTransportAssociationReq1 iuTransportAssociationReq1_field;
    ass_RAB_Parameters ass_RAB_Parameters_field;
    iE_Extensions iE_Extensions_field;
};

class OSS_PUBLIC rnpRAB_SetupItem_EnhancedRelocCompleteReq_IEs_Value : public OssConstrainedOpenType
{
public:
    rnpRAB_SetupItem_EnhancedRelocCompleteReq_IEs_Value();
    rnpRAB_SetupItem_EnhancedRelocCompleteReq_IEs_Value(const rnpRAB_SetupItem_EnhancedRelocCompleteReq_IEs_Value &);
    ~rnpRAB_SetupItem_EnhancedRelocCompleteReq_IEs_Value();
    rnpRAB_SetupItem_EnhancedRelocCompleteReq_IEs_Value & operator = (const rnpRAB_SetupItem_EnhancedRelocCompleteReq_IEs_Value &);
    int operator == (const rnpRAB_SetupItem_EnhancedRelocCompleteReq_IEs_Value &) const;
    int operator != (const rnpRAB_SetupItem_EnhancedRelocCompleteReq_IEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpRAB_SetupItem_EnhancedRelocCompleteReq *get_rnpRAB_SetupItem_EnhancedRelocCompleteReq();
    const rnpRAB_SetupItem_EnhancedRelocCompleteReq *get_rnpRAB_SetupItem_EnhancedRelocCompleteReq() const;
    void set_rnpRAB_SetupItem_EnhancedRelocCompleteReq(const rnpRAB_SetupItem_EnhancedRelocCompleteReq &);
    rnpRAB_SetupItem_EnhancedRelocCompleteReq *release_rnpRAB_SetupItem_EnhancedRelocCompleteReq();
    void set_rnpRAB_SetupItem_EnhancedRelocCompleteReq(rnpRAB_SetupItem_EnhancedRelocCompleteReq *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq90;

class OSS_PUBLIC rnp_seqof89 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq90 component;

    rnp_seqof89();
    rnp_seqof89(const rnp_seqof89 &);
    ~rnp_seqof89();

    rnp_seqof89 & operator = (const rnp_seqof89 &);
    int operator == (const rnp_seqof89 &) const;
    int operator != (const rnp_seqof89 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof89 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof89 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof89 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnp_seq90   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpRAB_SetupItem_EnhancedRelocCompleteReq_IEs_Value value;

    rnp_seq90();
    rnp_seq90(const rnp_seq90 &);
    rnp_seq90(id, criticality, const value &);

    rnp_seq90 & operator = (const rnp_seq90 &);
    int operator == (const rnp_seq90 &) const;
    int operator != (const rnp_seq90 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

typedef rnp__shared10 rnpAss_RAB_Parameter_ExtendedGuaranteedBitrateList;

typedef rnp__shared10 rnpAss_RAB_Parameter_ExtendedMaxBitrateList;

class OSS_PUBLIC rnpAss_RAB_Parameters_ExtIEs_Extension : public OssConstrainedOpenType
{
public:
    rnpAss_RAB_Parameters_ExtIEs_Extension();
    rnpAss_RAB_Parameters_ExtIEs_Extension(const rnpAss_RAB_Parameters_ExtIEs_Extension &);
    ~rnpAss_RAB_Parameters_ExtIEs_Extension();
    rnpAss_RAB_Parameters_ExtIEs_Extension & operator = (const rnpAss_RAB_Parameters_ExtIEs_Extension &);
    int operator == (const rnpAss_RAB_Parameters_ExtIEs_Extension &) const;
    int operator != (const rnpAss_RAB_Parameters_ExtIEs_Extension &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnp__shared10 *get_rnpAss_RAB_Parameter_ExtendedGuaranteedBitrateList();
    const rnp__shared10 *get_rnpAss_RAB_Parameter_ExtendedGuaranteedBitrateList() const;
    void set_rnpAss_RAB_Parameter_ExtendedGuaranteedBitrateList(const rnp__shared10 &);
    rnp__shared10 *release_rnpAss_RAB_Parameter_ExtendedGuaranteedBitrateList();
    void set_rnpAss_RAB_Parameter_ExtendedGuaranteedBitrateList(rnp__shared10 *);

    rnp__shared10 *get_rnpAss_RAB_Parameter_ExtendedMaxBitrateList();
    const rnp__shared10 *get_rnpAss_RAB_Parameter_ExtendedMaxBitrateList() const;
    void set_rnpAss_RAB_Parameter_ExtendedMaxBitrateList(const rnp__shared10 &);
    rnp__shared10 *release_rnpAss_RAB_Parameter_ExtendedMaxBitrateList();
    void set_rnpAss_RAB_Parameter_ExtendedMaxBitrateList(rnp__shared10 *);

    rnpSupportedRAB_ParameterBitrateList *get_rnpSupportedRAB_ParameterBitrateList();
    const rnpSupportedRAB_ParameterBitrateList *get_rnpSupportedRAB_ParameterBitrateList() const;
    void set_rnpSupportedRAB_ParameterBitrateList(const rnpSupportedRAB_ParameterBitrateList &);
    rnpSupportedRAB_ParameterBitrateList *release_rnpSupportedRAB_ParameterBitrateList();
    void set_rnpSupportedRAB_ParameterBitrateList(rnpSupportedRAB_ParameterBitrateList *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq91   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpAss_RAB_Parameters_ExtIEs_Extension extensionValue;

    rnp_seq91();
    rnp_seq91(const rnp_seq91 &);
    rnp_seq91(id, criticality, const extensionValue &);

    rnp_seq91 & operator = (const rnp_seq91 &);
    int operator == (const rnp_seq91 &) const;
    int operator != (const rnp_seq91 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    extensionValue & get_extensionValue();
    const extensionValue & get_extensionValue() const;
    void set_extensionValue(const extensionValue &);
private:
    id id_field;
    criticality criticality_field;
    extensionValue extensionValue_field;
};

typedef rnp__shared5 rnp_seq92;

class OSS_PUBLIC rnp_seqof94;

class OSS_PUBLIC rnpRAB_SetupList_EnhancedRelocCompleteRes : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seqof94 component;

    rnpRAB_SetupList_EnhancedRelocCompleteRes();
    rnpRAB_SetupList_EnhancedRelocCompleteRes(const rnpRAB_SetupList_EnhancedRelocCompleteRes &);
    ~rnpRAB_SetupList_EnhancedRelocCompleteRes();

    rnpRAB_SetupList_EnhancedRelocCompleteRes & operator = (const rnpRAB_SetupList_EnhancedRelocCompleteRes &);
    int operator == (const rnpRAB_SetupList_EnhancedRelocCompleteRes &) const;
    int operator != (const rnpRAB_SetupList_EnhancedRelocCompleteRes &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnpRAB_SetupList_EnhancedRelocCompleteRes *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnpRAB_SetupList_EnhancedRelocCompleteRes *);

    int remove_front();
    int remove_after(OssIndex);

    rnpRAB_SetupList_EnhancedRelocCompleteRes *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnp_seqof95;

class OSS_PUBLIC rnpRAB_ToBeReleasedList_EnhancedRelocCompleteRes : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seqof95 component;

    rnpRAB_ToBeReleasedList_EnhancedRelocCompleteRes();
    rnpRAB_ToBeReleasedList_EnhancedRelocCompleteRes(const rnpRAB_ToBeReleasedList_EnhancedRelocCompleteRes &);
    ~rnpRAB_ToBeReleasedList_EnhancedRelocCompleteRes();

    rnpRAB_ToBeReleasedList_EnhancedRelocCompleteRes & operator = (const rnpRAB_ToBeReleasedList_EnhancedRelocCompleteRes &);
    int operator == (const rnpRAB_ToBeReleasedList_EnhancedRelocCompleteRes &) const;
    int operator != (const rnpRAB_ToBeReleasedList_EnhancedRelocCompleteRes &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnpRAB_ToBeReleasedList_EnhancedRelocCompleteRes *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnpRAB_ToBeReleasedList_EnhancedRelocCompleteRes *);

    int remove_front();
    int remove_after(OssIndex);

    rnpRAB_ToBeReleasedList_EnhancedRelocCompleteRes *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpEnhancedRelocationCompleteResponseIEs_Value : public OssConstrainedOpenType
{
public:
    rnpEnhancedRelocationCompleteResponseIEs_Value();
    rnpEnhancedRelocationCompleteResponseIEs_Value(const rnpEnhancedRelocationCompleteResponseIEs_Value &);
    ~rnpEnhancedRelocationCompleteResponseIEs_Value();
    rnpEnhancedRelocationCompleteResponseIEs_Value & operator = (const rnpEnhancedRelocationCompleteResponseIEs_Value &);
    int operator == (const rnpEnhancedRelocationCompleteResponseIEs_Value &) const;
    int operator != (const rnpEnhancedRelocationCompleteResponseIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpRAB_SetupList_EnhancedRelocCompleteRes *get_rnpRAB_SetupList_EnhancedRelocCompleteRes();
    const rnpRAB_SetupList_EnhancedRelocCompleteRes *get_rnpRAB_SetupList_EnhancedRelocCompleteRes() const;
    void set_rnpRAB_SetupList_EnhancedRelocCompleteRes(const rnpRAB_SetupList_EnhancedRelocCompleteRes &);
    rnpRAB_SetupList_EnhancedRelocCompleteRes *release_rnpRAB_SetupList_EnhancedRelocCompleteRes();
    void set_rnpRAB_SetupList_EnhancedRelocCompleteRes(rnpRAB_SetupList_EnhancedRelocCompleteRes *);

    rnpRAB_ToBeReleasedList_EnhancedRelocCompleteRes *get_rnpRAB_ToBeReleasedList_EnhancedRelocCompleteRes();
    const rnpRAB_ToBeReleasedList_EnhancedRelocCompleteRes *get_rnpRAB_ToBeReleasedList_EnhancedRelocCompleteRes() const;
    void set_rnpRAB_ToBeReleasedList_EnhancedRelocCompleteRes(const rnpRAB_ToBeReleasedList_EnhancedRelocCompleteRes &);
    rnpRAB_ToBeReleasedList_EnhancedRelocCompleteRes *release_rnpRAB_ToBeReleasedList_EnhancedRelocCompleteRes();
    void set_rnpRAB_ToBeReleasedList_EnhancedRelocCompleteRes(rnpRAB_ToBeReleasedList_EnhancedRelocCompleteRes *);

    rnpCriticalityDiagnostics *get_rnpCriticalityDiagnostics();
    const rnpCriticalityDiagnostics *get_rnpCriticalityDiagnostics() const;
    void set_rnpCriticalityDiagnostics(const rnpCriticalityDiagnostics &);
    rnpCriticalityDiagnostics *release_rnpCriticalityDiagnostics();
    void set_rnpCriticalityDiagnostics(rnpCriticalityDiagnostics *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnpEnhancedRelocationCompleteResponseExtensions_Extension : public OssConstrainedOpenType
{
public:
    rnpEnhancedRelocationCompleteResponseExtensions_Extension();
    rnpEnhancedRelocationCompleteResponseExtensions_Extension(const rnpEnhancedRelocationCompleteResponseExtensions_Extension &);
    ~rnpEnhancedRelocationCompleteResponseExtensions_Extension();
    rnpEnhancedRelocationCompleteResponseExtensions_Extension & operator = (const rnpEnhancedRelocationCompleteResponseExtensions_Extension &);
    int operator == (const rnpEnhancedRelocationCompleteResponseExtensions_Extension &) const;
    int operator != (const rnpEnhancedRelocationCompleteResponseExtensions_Extension &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpUE_AggregateMaximumBitRate *get_rnpUE_AggregateMaximumBitRate();
    const rnpUE_AggregateMaximumBitRate *get_rnpUE_AggregateMaximumBitRate() const;
    void set_rnpUE_AggregateMaximumBitRate(const rnpUE_AggregateMaximumBitRate &);
    rnpUE_AggregateMaximumBitRate *release_rnpUE_AggregateMaximumBitRate();
    void set_rnpUE_AggregateMaximumBitRate(rnpUE_AggregateMaximumBitRate *);

    rnpMSISDN *get_rnpMSISDN();
    const rnpMSISDN *get_rnpMSISDN() const;
    void set_rnpMSISDN(const rnpMSISDN &);
    rnpMSISDN *release_rnpMSISDN();
    void set_rnpMSISDN(rnpMSISDN *);

    rnpCSG_Membership_Status *get_rnpCSG_Membership_Status();
    const rnpCSG_Membership_Status *get_rnpCSG_Membership_Status() const;
    void set_rnpCSG_Membership_Status(const rnpCSG_Membership_Status &);
    rnpCSG_Membership_Status *release_rnpCSG_Membership_Status();
    void set_rnpCSG_Membership_Status(rnpCSG_Membership_Status *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq93;

class OSS_PUBLIC rnp_seqof92 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq93 component;

    rnp_seqof92();
    rnp_seqof92(const rnp_seqof92 &);
    ~rnp_seqof92();

    rnp_seqof92 & operator = (const rnp_seqof92 &);
    int operator == (const rnp_seqof92 &) const;
    int operator != (const rnp_seqof92 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof92 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof92 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof92 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnp_seq94;

class OSS_PUBLIC rnp_seqof93 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq94 component;

    rnp_seqof93();
    rnp_seqof93(const rnp_seqof93 &);
    ~rnp_seqof93();

    rnp_seqof93 & operator = (const rnp_seqof93 &);
    int operator == (const rnp_seqof93 &) const;
    int operator != (const rnp_seqof93 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof93 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof93 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof93 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpEnhancedRelocationCompleteResponse   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp_seqof92 protocolIEs;
    typedef rnp_seqof93 protocolExtensions;

    rnpEnhancedRelocationCompleteResponse();
    rnpEnhancedRelocationCompleteResponse(const rnpEnhancedRelocationCompleteResponse &);
    rnpEnhancedRelocationCompleteResponse(const protocolIEs &, const protocolExtensions &);
    rnpEnhancedRelocationCompleteResponse(const protocolIEs &);

    rnpEnhancedRelocationCompleteResponse & operator = (const rnpEnhancedRelocationCompleteResponse &);
    int operator == (const rnpEnhancedRelocationCompleteResponse &) const;
    int operator != (const rnpEnhancedRelocationCompleteResponse &) const;

    protocolIEs & get_protocolIEs();
    const protocolIEs & get_protocolIEs() const;
    void set_protocolIEs(const protocolIEs &);

    protocolExtensions *get_protocolExtensions();
    const protocolExtensions *get_protocolExtensions() const;
    void set_protocolExtensions(const protocolExtensions &);
    int protocolExtensions_is_present() const;
    void omit_protocolExtensions();
private:
    OSS_UINT32 bit_mask;
    protocolIEs protocolIEs_field;
    protocolExtensions protocolExtensions_field;
};

class OSS_PUBLIC rnp_seq93   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpEnhancedRelocationCompleteResponseIEs_Value value;

    rnp_seq93();
    rnp_seq93(const rnp_seq93 &);
    rnp_seq93(id, criticality, const value &);

    rnp_seq93 & operator = (const rnp_seq93 &);
    int operator == (const rnp_seq93 &) const;
    int operator != (const rnp_seq93 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

class OSS_PUBLIC rnp_seq94   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpEnhancedRelocationCompleteResponseExtensions_Extension extensionValue;

    rnp_seq94();
    rnp_seq94(const rnp_seq94 &);
    rnp_seq94(id, criticality, const extensionValue &);

    rnp_seq94 & operator = (const rnp_seq94 &);
    int operator == (const rnp_seq94 &) const;
    int operator != (const rnp_seq94 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    extensionValue & get_extensionValue();
    const extensionValue & get_extensionValue() const;
    void set_extensionValue(const extensionValue &);
private:
    id id_field;
    criticality criticality_field;
    extensionValue extensionValue_field;
};

class OSS_PUBLIC rnp_seq97;

class OSS_PUBLIC rnp_seqof96 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq97 component;

    rnp_seqof96();
    rnp_seqof96(const rnp_seqof96 &);
    ~rnp_seqof96();

    rnp_seqof96 & operator = (const rnp_seqof96 &);
    int operator == (const rnp_seqof96 &) const;
    int operator != (const rnp_seqof96 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof96 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof96 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof96 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpRAB_SetupItem_EnhancedRelocCompleteRes   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssBitString rAB_ID;
    typedef rnpRAB_Parameters rAB_Parameters;
    typedef rnpUserPlaneInformation userPlaneInformation;
    typedef OssBitString transportLayerAddressRes1;
    typedef rnpIuTransportAssociation iuTransportAssociationRes1;
    typedef rnpRAB_ToBeReleasedList_EnhancedRelocCompleteRes rab2beReleasedList;
    typedef rnp_seqof96 iE_Extensions;

    rnpRAB_SetupItem_EnhancedRelocCompleteRes();
    rnpRAB_SetupItem_EnhancedRelocCompleteRes(const rnpRAB_SetupItem_EnhancedRelocCompleteRes &);
    rnpRAB_SetupItem_EnhancedRelocCompleteRes(const rAB_ID &, const rAB_Parameters &, 
	const userPlaneInformation &, const transportLayerAddressRes1 &, const iuTransportAssociationRes1 &, 
	const rab2beReleasedList &, const iE_Extensions &);
    rnpRAB_SetupItem_EnhancedRelocCompleteRes(const rAB_ID &, const userPlaneInformation &);

    rnpRAB_SetupItem_EnhancedRelocCompleteRes & operator = (const rnpRAB_SetupItem_EnhancedRelocCompleteRes &);
    int operator == (const rnpRAB_SetupItem_EnhancedRelocCompleteRes &) const;
    int operator != (const rnpRAB_SetupItem_EnhancedRelocCompleteRes &) const;

    rAB_ID & get_rAB_ID();
    const rAB_ID & get_rAB_ID() const;
    void set_rAB_ID(const rAB_ID &);

    rAB_Parameters *get_rAB_Parameters();
    const rAB_Parameters *get_rAB_Parameters() const;
    void set_rAB_Parameters(const rAB_Parameters &);
    int rAB_Parameters_is_present() const;
    void omit_rAB_Parameters();

    userPlaneInformation & get_userPlaneInformation();
    const userPlaneInformation & get_userPlaneInformation() const;
    void set_userPlaneInformation(const userPlaneInformation &);

    transportLayerAddressRes1 *get_transportLayerAddressRes1();
    const transportLayerAddressRes1 *get_transportLayerAddressRes1() const;
    void set_transportLayerAddressRes1(const transportLayerAddressRes1 &);
    int transportLayerAddressRes1_is_present() const;
    void omit_transportLayerAddressRes1();

    iuTransportAssociationRes1 *get_iuTransportAssociationRes1();
    const iuTransportAssociationRes1 *get_iuTransportAssociationRes1() const;
    void set_iuTransportAssociationRes1(const iuTransportAssociationRes1 &);
    int iuTransportAssociationRes1_is_present() const;
    void omit_iuTransportAssociationRes1();

    rab2beReleasedList *get_rab2beReleasedList();
    const rab2beReleasedList *get_rab2beReleasedList() const;
    void set_rab2beReleasedList(const rab2beReleasedList &);
    int rab2beReleasedList_is_present() const;
    void omit_rab2beReleasedList();

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    rAB_ID rAB_ID_field;
    rAB_Parameters rAB_Parameters_field;
    userPlaneInformation userPlaneInformation_field;
    transportLayerAddressRes1 transportLayerAddressRes1_field;
    iuTransportAssociationRes1 iuTransportAssociationRes1_field;
    rab2beReleasedList rab2beReleasedList_field;
    iE_Extensions iE_Extensions_field;
};

class OSS_PUBLIC rnpRAB_SetupItem_EnhancedRelocCompleteRes_IEs_Value : public OssConstrainedOpenType
{
public:
    rnpRAB_SetupItem_EnhancedRelocCompleteRes_IEs_Value();
    rnpRAB_SetupItem_EnhancedRelocCompleteRes_IEs_Value(const rnpRAB_SetupItem_EnhancedRelocCompleteRes_IEs_Value &);
    ~rnpRAB_SetupItem_EnhancedRelocCompleteRes_IEs_Value();
    rnpRAB_SetupItem_EnhancedRelocCompleteRes_IEs_Value & operator = (const rnpRAB_SetupItem_EnhancedRelocCompleteRes_IEs_Value &);
    int operator == (const rnpRAB_SetupItem_EnhancedRelocCompleteRes_IEs_Value &) const;
    int operator != (const rnpRAB_SetupItem_EnhancedRelocCompleteRes_IEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpRAB_SetupItem_EnhancedRelocCompleteRes *get_rnpRAB_SetupItem_EnhancedRelocCompleteRes();
    const rnpRAB_SetupItem_EnhancedRelocCompleteRes *get_rnpRAB_SetupItem_EnhancedRelocCompleteRes() const;
    void set_rnpRAB_SetupItem_EnhancedRelocCompleteRes(const rnpRAB_SetupItem_EnhancedRelocCompleteRes &);
    rnpRAB_SetupItem_EnhancedRelocCompleteRes *release_rnpRAB_SetupItem_EnhancedRelocCompleteRes();
    void set_rnpRAB_SetupItem_EnhancedRelocCompleteRes(rnpRAB_SetupItem_EnhancedRelocCompleteRes *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq95;

class OSS_PUBLIC rnp_seqof94 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq95 component;

    rnp_seqof94();
    rnp_seqof94(const rnp_seqof94 &);
    ~rnp_seqof94();

    rnp_seqof94 & operator = (const rnp_seqof94 &);
    int operator == (const rnp_seqof94 &) const;
    int operator != (const rnp_seqof94 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof94 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof94 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof94 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnp_seq95   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpRAB_SetupItem_EnhancedRelocCompleteRes_IEs_Value value;

    rnp_seq95();
    rnp_seq95(const rnp_seq95 &);
    rnp_seq95(id, criticality, const value &);

    rnp_seq95 & operator = (const rnp_seq95 &);
    int operator == (const rnp_seq95 &) const;
    int operator != (const rnp_seq95 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

typedef rnp__shared23 rnpRAB_ToBeReleasedItem_EnhancedRelocCompleteRes;

class OSS_PUBLIC rnpRAB_ToBeReleasedItem_EnhancedRelocCompleteRes_IEs_Value : public OssConstrainedOpenType
{
public:
    rnpRAB_ToBeReleasedItem_EnhancedRelocCompleteRes_IEs_Value();
    rnpRAB_ToBeReleasedItem_EnhancedRelocCompleteRes_IEs_Value(const rnpRAB_ToBeReleasedItem_EnhancedRelocCompleteRes_IEs_Value &);
    ~rnpRAB_ToBeReleasedItem_EnhancedRelocCompleteRes_IEs_Value();
    rnpRAB_ToBeReleasedItem_EnhancedRelocCompleteRes_IEs_Value & operator = (const rnpRAB_ToBeReleasedItem_EnhancedRelocCompleteRes_IEs_Value &);
    int operator == (const rnpRAB_ToBeReleasedItem_EnhancedRelocCompleteRes_IEs_Value &) const;
    int operator != (const rnpRAB_ToBeReleasedItem_EnhancedRelocCompleteRes_IEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnp__shared23 *get_rnpRAB_ToBeReleasedItem_EnhancedRelocCompleteRes();
    const rnp__shared23 *get_rnpRAB_ToBeReleasedItem_EnhancedRelocCompleteRes() const;
    void set_rnpRAB_ToBeReleasedItem_EnhancedRelocCompleteRes(const rnp__shared23 &);
    rnp__shared23 *release_rnpRAB_ToBeReleasedItem_EnhancedRelocCompleteRes();
    void set_rnpRAB_ToBeReleasedItem_EnhancedRelocCompleteRes(rnp__shared23 *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq96;

class OSS_PUBLIC rnp_seqof95 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq96 component;

    rnp_seqof95();
    rnp_seqof95(const rnp_seqof95 &);
    ~rnp_seqof95();

    rnp_seqof95 & operator = (const rnp_seqof95 &);
    int operator == (const rnp_seqof95 &) const;
    int operator != (const rnp_seqof95 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof95 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof95 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof95 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnp_seq96   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpRAB_ToBeReleasedItem_EnhancedRelocCompleteRes_IEs_Value value;

    rnp_seq96();
    rnp_seq96(const rnp_seq96 &);
    rnp_seq96(id, criticality, const value &);

    rnp_seq96 & operator = (const rnp_seq96 &);
    int operator == (const rnp_seq96 &) const;
    int operator != (const rnp_seq96 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

class OSS_PUBLIC rnpRAB_SetupItem_EnhancedRelocCompleteRes_ExtIEs_Extension : public OssConstrainedOpenType
{
public:
    rnpRAB_SetupItem_EnhancedRelocCompleteRes_ExtIEs_Extension();
    rnpRAB_SetupItem_EnhancedRelocCompleteRes_ExtIEs_Extension(const rnpRAB_SetupItem_EnhancedRelocCompleteRes_ExtIEs_Extension &);
    ~rnpRAB_SetupItem_EnhancedRelocCompleteRes_ExtIEs_Extension();
    rnpRAB_SetupItem_EnhancedRelocCompleteRes_ExtIEs_Extension & operator = (const rnpRAB_SetupItem_EnhancedRelocCompleteRes_ExtIEs_Extension &);
    int operator == (const rnpRAB_SetupItem_EnhancedRelocCompleteRes_ExtIEs_Extension &) const;
    int operator != (const rnpRAB_SetupItem_EnhancedRelocCompleteRes_ExtIEs_Extension &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpOffload_RAB_Parameters *get_rnpOffload_RAB_Parameters();
    const rnpOffload_RAB_Parameters *get_rnpOffload_RAB_Parameters() const;
    void set_rnpOffload_RAB_Parameters(const rnpOffload_RAB_Parameters &);
    rnpOffload_RAB_Parameters *release_rnpOffload_RAB_Parameters();
    void set_rnpOffload_RAB_Parameters(rnpOffload_RAB_Parameters *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq97   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpRAB_SetupItem_EnhancedRelocCompleteRes_ExtIEs_Extension extensionValue;

    rnp_seq97();
    rnp_seq97(const rnp_seq97 &);
    rnp_seq97(id, criticality, const extensionValue &);

    rnp_seq97 & operator = (const rnp_seq97 &);
    int operator == (const rnp_seq97 &) const;
    int operator != (const rnp_seq97 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    extensionValue & get_extensionValue();
    const extensionValue & get_extensionValue() const;
    void set_extensionValue(const extensionValue &);
private:
    id id_field;
    criticality criticality_field;
    extensionValue extensionValue_field;
};

typedef rnp__shared6 rnp_seqof97;

typedef rnp__shared5 rnp_seq98;

typedef rnp__shared39 rnpEnhancedRelocationCompleteFailure;

typedef rnp__shared38 rnp_seqof98;

typedef rnp__shared37 rnp_seq99;

typedef rnp__shared6 rnp_seqof99;

typedef rnp__shared5 rnp_seq100;

class OSS_PUBLIC rnpEnhancedRelocationCompleteConfirmIEs_Value : public OssConstrainedOpenType
{
public:
    rnpEnhancedRelocationCompleteConfirmIEs_Value();
    rnpEnhancedRelocationCompleteConfirmIEs_Value(const rnpEnhancedRelocationCompleteConfirmIEs_Value &);
    ~rnpEnhancedRelocationCompleteConfirmIEs_Value();
    rnpEnhancedRelocationCompleteConfirmIEs_Value & operator = (const rnpEnhancedRelocationCompleteConfirmIEs_Value &);
    int operator == (const rnpEnhancedRelocationCompleteConfirmIEs_Value &) const;
    int operator != (const rnpEnhancedRelocationCompleteConfirmIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnp__shared36 *get_rnpRAB_FailedList();
    const rnp__shared36 *get_rnpRAB_FailedList() const;
    void set_rnpRAB_FailedList(const rnp__shared36 &);
    rnp__shared36 *release_rnpRAB_FailedList();
    void set_rnpRAB_FailedList(rnp__shared36 *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq101;

class OSS_PUBLIC rnp_seqof100 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq101 component;

    rnp_seqof100();
    rnp_seqof100(const rnp_seqof100 &);
    ~rnp_seqof100();

    rnp_seqof100 & operator = (const rnp_seqof100 &);
    int operator == (const rnp_seqof100 &) const;
    int operator != (const rnp_seqof100 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof100 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof100 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof100 *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared6 rnp_seqof101;

class OSS_PUBLIC rnpEnhancedRelocationCompleteConfirm   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp_seqof100 protocolIEs;
    typedef rnp__shared6 protocolExtensions;

    rnpEnhancedRelocationCompleteConfirm();
    rnpEnhancedRelocationCompleteConfirm(const rnpEnhancedRelocationCompleteConfirm &);
    rnpEnhancedRelocationCompleteConfirm(const protocolIEs &, const protocolExtensions &);
    rnpEnhancedRelocationCompleteConfirm(const protocolIEs &);

    rnpEnhancedRelocationCompleteConfirm & operator = (const rnpEnhancedRelocationCompleteConfirm &);
    int operator == (const rnpEnhancedRelocationCompleteConfirm &) const;
    int operator != (const rnpEnhancedRelocationCompleteConfirm &) const;

    protocolIEs & get_protocolIEs();
    const protocolIEs & get_protocolIEs() const;
    void set_protocolIEs(const protocolIEs &);

    protocolExtensions *get_protocolExtensions();
    const protocolExtensions *get_protocolExtensions() const;
    void set_protocolExtensions(const protocolExtensions &);
    int protocolExtensions_is_present() const;
    void omit_protocolExtensions();
private:
    OSS_UINT32 bit_mask;
    protocolIEs protocolIEs_field;
    protocolExtensions protocolExtensions_field;
};

class OSS_PUBLIC rnp_seq101   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpEnhancedRelocationCompleteConfirmIEs_Value value;

    rnp_seq101();
    rnp_seq101(const rnp_seq101 &);
    rnp_seq101(id, criticality, const value &);

    rnp_seq101 & operator = (const rnp_seq101 &);
    int operator == (const rnp_seq101 &) const;
    int operator != (const rnp_seq101 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

typedef rnp__shared5 rnp_seq102;

class OSS_PUBLIC rnpTemporaryUE_ID  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	tMSI_chosen = 1,
	p_TMSI_chosen = 2
    };
    typedef OssString tMSI;
    typedef OssString p_TMSI;

    rnpTemporaryUE_ID();
    rnpTemporaryUE_ID(const rnpTemporaryUE_ID &);
    ~rnpTemporaryUE_ID();

    rnpTemporaryUE_ID & operator = (const rnpTemporaryUE_ID &);
    int operator == (const rnpTemporaryUE_ID &) const;
    int operator != (const rnpTemporaryUE_ID &) const;

    tMSI *get_tMSI();
    const tMSI *get_tMSI() const;
    void set_tMSI(const tMSI &);

    p_TMSI *get_p_TMSI();
    const p_TMSI *get_p_TMSI() const;
    void set_p_TMSI(const p_TMSI &);
private:
    union {
	OSSC::COssString tMSI_field;
	OSSC::COssString p_TMSI_field;
    };
    void cleanup();
};

typedef rnp__shared6 rnp_seqof282;

class OSS_PUBLIC rnpRAI   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnpLAI lAI;
    typedef OssString rAC;
    typedef rnp__shared6 iE_Extensions;

    rnpRAI();
    rnpRAI(const rnpRAI &);
    rnpRAI(const lAI &, const rAC &, const iE_Extensions &);
    rnpRAI(const lAI &, const rAC &);

    rnpRAI & operator = (const rnpRAI &);
    int operator == (const rnpRAI &) const;
    int operator != (const rnpRAI &) const;

    lAI & get_lAI();
    const lAI & get_lAI() const;
    void set_lAI(const lAI &);

    rAC & get_rAC();
    const rAC & get_rAC() const;
    void set_rAC(const rAC &);

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    lAI lAI_field;
    rAC rAC_field;
    iE_Extensions iE_Extensions_field;
};

class OSS_PUBLIC rnpPagingAreaID  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	lAI_chosen = 1,
	rAI_chosen = 2
    };
    typedef rnpLAI lAI;
    typedef rnpRAI rAI;

    rnpPagingAreaID();
    rnpPagingAreaID(const rnpPagingAreaID &);
    ~rnpPagingAreaID();

    rnpPagingAreaID & operator = (const rnpPagingAreaID &);
    int operator == (const rnpPagingAreaID &) const;
    int operator != (const rnpPagingAreaID &) const;

    lAI *get_lAI();
    const lAI *get_lAI() const;
    void set_lAI(const lAI &);

    rAI *get_rAI();
    const rAI *get_rAI() const;
    void set_rAI(const rAI &);
private:
    union {
	lAI *lAI_field;
	rAI *rAI_field;
    };
    void cleanup();
};

class OSS_PUBLIC rnpPagingIEs_Value : public OssConstrainedOpenType
{
public:
    rnpPagingIEs_Value();
    rnpPagingIEs_Value(const rnpPagingIEs_Value &);
    ~rnpPagingIEs_Value();
    rnpPagingIEs_Value & operator = (const rnpPagingIEs_Value &);
    int operator == (const rnpPagingIEs_Value &) const;
    int operator != (const rnpPagingIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpCN_DomainIndicator *get_rnpCN_DomainIndicator();
    const rnpCN_DomainIndicator *get_rnpCN_DomainIndicator() const;
    void set_rnpCN_DomainIndicator(const rnpCN_DomainIndicator &);
    rnpCN_DomainIndicator *release_rnpCN_DomainIndicator();
    void set_rnpCN_DomainIndicator(rnpCN_DomainIndicator *);

    rnpPermanentNAS_UE_ID *get_rnpPermanentNAS_UE_ID();
    const rnpPermanentNAS_UE_ID *get_rnpPermanentNAS_UE_ID() const;
    void set_rnpPermanentNAS_UE_ID(const rnpPermanentNAS_UE_ID &);
    rnpPermanentNAS_UE_ID *release_rnpPermanentNAS_UE_ID();
    void set_rnpPermanentNAS_UE_ID(rnpPermanentNAS_UE_ID *);

    rnpTemporaryUE_ID *get_rnpTemporaryUE_ID();
    const rnpTemporaryUE_ID *get_rnpTemporaryUE_ID() const;
    void set_rnpTemporaryUE_ID(const rnpTemporaryUE_ID &);
    rnpTemporaryUE_ID *release_rnpTemporaryUE_ID();
    void set_rnpTemporaryUE_ID(rnpTemporaryUE_ID *);

    rnpPagingAreaID *get_rnpPagingAreaID();
    const rnpPagingAreaID *get_rnpPagingAreaID() const;
    void set_rnpPagingAreaID(const rnpPagingAreaID &);
    rnpPagingAreaID *release_rnpPagingAreaID();
    void set_rnpPagingAreaID(rnpPagingAreaID *);

    rnpPagingCause *get_rnpPagingCause();
    const rnpPagingCause *get_rnpPagingCause() const;
    void set_rnpPagingCause(const rnpPagingCause &);
    rnpPagingCause *release_rnpPagingCause();
    void set_rnpPagingCause(rnpPagingCause *);

    rnpNonSearchingIndication *get_rnpNonSearchingIndication();
    const rnpNonSearchingIndication *get_rnpNonSearchingIndication() const;
    void set_rnpNonSearchingIndication(const rnpNonSearchingIndication &);
    rnpNonSearchingIndication *release_rnpNonSearchingIndication();
    void set_rnpNonSearchingIndication(rnpNonSearchingIndication *);

    rnpDRX_CycleLengthCoefficient *get_rnpDRX_CycleLengthCoefficient();
    const rnpDRX_CycleLengthCoefficient *get_rnpDRX_CycleLengthCoefficient() const;
    void set_rnpDRX_CycleLengthCoefficient(const rnpDRX_CycleLengthCoefficient &);
    rnpDRX_CycleLengthCoefficient *release_rnpDRX_CycleLengthCoefficient();
    void set_rnpDRX_CycleLengthCoefficient(rnpDRX_CycleLengthCoefficient *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnpCSG_Id_List : public OssList  /* SEQUENCE OF */
{
public:
    typedef OssBitString component;

    rnpCSG_Id_List();
    rnpCSG_Id_List(const rnpCSG_Id_List &);
    ~rnpCSG_Id_List();

    rnpCSG_Id_List & operator = (const rnpCSG_Id_List &);
    int operator == (const rnpCSG_Id_List &) const;
    int operator != (const rnpCSG_Id_List &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnpCSG_Id_List *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnpCSG_Id_List *);

    int remove_front();
    int remove_after(OssIndex);

    rnpCSG_Id_List *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpPagingExtensions_Extension : public OssConstrainedOpenType
{
public:
    rnpPagingExtensions_Extension();
    rnpPagingExtensions_Extension(const rnpPagingExtensions_Extension &);
    ~rnpPagingExtensions_Extension();
    rnpPagingExtensions_Extension & operator = (const rnpPagingExtensions_Extension &);
    int operator == (const rnpPagingExtensions_Extension &) const;
    int operator != (const rnpPagingExtensions_Extension &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpGlobalCN_ID *get_rnpGlobalCN_ID();
    const rnpGlobalCN_ID *get_rnpGlobalCN_ID() const;
    void set_rnpGlobalCN_ID(const rnpGlobalCN_ID &);
    rnpGlobalCN_ID *release_rnpGlobalCN_ID();
    void set_rnpGlobalCN_ID(rnpGlobalCN_ID *);

    rnpCSG_Id_List *get_rnpCSG_Id_List();
    const rnpCSG_Id_List *get_rnpCSG_Id_List() const;
    void set_rnpCSG_Id_List(const rnpCSG_Id_List &);
    rnpCSG_Id_List *release_rnpCSG_Id_List();
    void set_rnpCSG_Id_List(rnpCSG_Id_List *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq103   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpPagingIEs_Value value;

    rnp_seq103();
    rnp_seq103(const rnp_seq103 &);
    rnp_seq103(id, criticality, const value &);

    rnp_seq103 & operator = (const rnp_seq103 &);
    int operator == (const rnp_seq103 &) const;
    int operator != (const rnp_seq103 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

class OSS_PUBLIC rnp_seq104   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpPagingExtensions_Extension extensionValue;

    rnp_seq104();
    rnp_seq104(const rnp_seq104 &);
    rnp_seq104(id, criticality, const extensionValue &);

    rnp_seq104 & operator = (const rnp_seq104 &);
    int operator == (const rnp_seq104 &) const;
    int operator != (const rnp_seq104 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    extensionValue & get_extensionValue();
    const extensionValue & get_extensionValue() const;
    void set_extensionValue(const extensionValue &);
private:
    id id_field;
    criticality criticality_field;
    extensionValue extensionValue_field;
};

class OSS_PUBLIC rnpCommonID_IEs_Value : public OssConstrainedOpenType
{
public:
    rnpCommonID_IEs_Value();
    rnpCommonID_IEs_Value(const rnpCommonID_IEs_Value &);
    ~rnpCommonID_IEs_Value();
    rnpCommonID_IEs_Value & operator = (const rnpCommonID_IEs_Value &);
    int operator == (const rnpCommonID_IEs_Value &) const;
    int operator != (const rnpCommonID_IEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpPermanentNAS_UE_ID *get_rnpPermanentNAS_UE_ID();
    const rnpPermanentNAS_UE_ID *get_rnpPermanentNAS_UE_ID() const;
    void set_rnpPermanentNAS_UE_ID(const rnpPermanentNAS_UE_ID &);
    rnpPermanentNAS_UE_ID *release_rnpPermanentNAS_UE_ID();
    void set_rnpPermanentNAS_UE_ID(rnpPermanentNAS_UE_ID *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp__shared9 : public OssList  /* SEQUENCE OF */
{
public:
    typedef OssString component;

    rnp__shared9();
    rnp__shared9(const rnp__shared9 &);
    ~rnp__shared9();

    rnp__shared9 & operator = (const rnp__shared9 &);
    int operator == (const rnp__shared9 &) const;
    int operator != (const rnp__shared9 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp__shared9 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp__shared9 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp__shared9 *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared9 rnpMDT_PLMN_List;

class OSS_PUBLIC rnpCommonIDExtensions_Extension : public OssConstrainedOpenType
{
public:
    rnpCommonIDExtensions_Extension();
    rnpCommonIDExtensions_Extension(const rnpCommonIDExtensions_Extension &);
    ~rnpCommonIDExtensions_Extension();
    rnpCommonIDExtensions_Extension & operator = (const rnpCommonIDExtensions_Extension &);
    int operator == (const rnpCommonIDExtensions_Extension &) const;
    int operator != (const rnpCommonIDExtensions_Extension &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpSNA_Access_Information *get_rnpSNA_Access_Information();
    const rnpSNA_Access_Information *get_rnpSNA_Access_Information() const;
    void set_rnpSNA_Access_Information(const rnpSNA_Access_Information &);
    rnpSNA_Access_Information *release_rnpSNA_Access_Information();
    void set_rnpSNA_Access_Information(rnpSNA_Access_Information *);

    rnpUESBI_Iu *get_rnpUESBI_Iu();
    const rnpUESBI_Iu *get_rnpUESBI_Iu() const;
    void set_rnpUESBI_Iu(const rnpUESBI_Iu &);
    rnpUESBI_Iu *release_rnpUESBI_Iu();
    void set_rnpUESBI_Iu(rnpUESBI_Iu *);

    rnpPLMNidentity *get_rnpPLMNidentity();
    const rnpPLMNidentity *get_rnpPLMNidentity() const;
    void set_rnpPLMNidentity(const rnpPLMNidentity &);
    rnpPLMNidentity *release_rnpPLMNidentity();
    void set_rnpPLMNidentity(rnpPLMNidentity *);

    rnpSubscriberProfileIDforRFP *get_rnpSubscriberProfileIDforRFP();
    const rnpSubscriberProfileIDforRFP *get_rnpSubscriberProfileIDforRFP() const;
    void set_rnpSubscriberProfileIDforRFP(const rnpSubscriberProfileIDforRFP &);
    rnpSubscriberProfileIDforRFP *release_rnpSubscriberProfileIDforRFP();
    void set_rnpSubscriberProfileIDforRFP(rnpSubscriberProfileIDforRFP *);

    rnpSRVCC_Operation_Possible *get_rnpSRVCC_Operation_Possible();
    const rnpSRVCC_Operation_Possible *get_rnpSRVCC_Operation_Possible() const;
    void set_rnpSRVCC_Operation_Possible(const rnpSRVCC_Operation_Possible &);
    rnpSRVCC_Operation_Possible *release_rnpSRVCC_Operation_Possible();
    void set_rnpSRVCC_Operation_Possible(rnpSRVCC_Operation_Possible *);

    rnpCSG_Membership_Status *get_rnpCSG_Membership_Status();
    const rnpCSG_Membership_Status *get_rnpCSG_Membership_Status() const;
    void set_rnpCSG_Membership_Status(const rnpCSG_Membership_Status &);
    rnpCSG_Membership_Status *release_rnpCSG_Membership_Status();
    void set_rnpCSG_Membership_Status(rnpCSG_Membership_Status *);

    rnpManagement_Based_MDT_Allowed *get_rnpManagement_Based_MDT_Allowed();
    const rnpManagement_Based_MDT_Allowed *get_rnpManagement_Based_MDT_Allowed() const;
    void set_rnpManagement_Based_MDT_Allowed(const rnpManagement_Based_MDT_Allowed &);
    rnpManagement_Based_MDT_Allowed *release_rnpManagement_Based_MDT_Allowed();
    void set_rnpManagement_Based_MDT_Allowed(rnpManagement_Based_MDT_Allowed *);

    rnp__shared9 *get_rnpMDT_PLMN_List();
    const rnp__shared9 *get_rnpMDT_PLMN_List() const;
    void set_rnpMDT_PLMN_List(const rnp__shared9 &);
    rnp__shared9 *release_rnpMDT_PLMN_List();
    void set_rnpMDT_PLMN_List(rnp__shared9 *);

    rnpRSRVCC_Operation_Possible *get_rnpRSRVCC_Operation_Possible();
    const rnpRSRVCC_Operation_Possible *get_rnpRSRVCC_Operation_Possible() const;
    void set_rnpRSRVCC_Operation_Possible(const rnpRSRVCC_Operation_Possible &);
    rnpRSRVCC_Operation_Possible *release_rnpRSRVCC_Operation_Possible();
    void set_rnpRSRVCC_Operation_Possible(rnpRSRVCC_Operation_Possible *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq105   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpCommonID_IEs_Value value;

    rnp_seq105();
    rnp_seq105(const rnp_seq105 &);
    rnp_seq105(id, criticality, const value &);

    rnp_seq105 & operator = (const rnp_seq105 &);
    int operator == (const rnp_seq105 &) const;
    int operator != (const rnp_seq105 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

class OSS_PUBLIC rnp_seq106   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpCommonIDExtensions_Extension extensionValue;

    rnp_seq106();
    rnp_seq106(const rnp_seq106 &);
    rnp_seq106(id, criticality, const extensionValue &);

    rnp_seq106 & operator = (const rnp_seq106 &);
    int operator == (const rnp_seq106 &) const;
    int operator != (const rnp_seq106 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    extensionValue & get_extensionValue();
    const extensionValue & get_extensionValue() const;
    void set_extensionValue(const extensionValue &);
private:
    id id_field;
    criticality criticality_field;
    extensionValue extensionValue_field;
};

class OSS_PUBLIC rnpUE_ID  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	imsi_chosen = 1,
	imei_chosen = 2,
	imeisv_chosen = 3
    };
    typedef OssString imsi;
    typedef OssString imei;
    typedef OssString imeisv;

    rnpUE_ID();
    rnpUE_ID(const rnpUE_ID &);
    ~rnpUE_ID();

    rnpUE_ID & operator = (const rnpUE_ID &);
    int operator == (const rnpUE_ID &) const;
    int operator != (const rnpUE_ID &) const;

    imsi *get_imsi();
    const imsi *get_imsi() const;
    void set_imsi(const imsi &);

    imei *get_imei();
    const imei *get_imei() const;
    void set_imei(const imei &);

    imeisv *get_imeisv();
    const imeisv *get_imeisv() const;
    void set_imeisv(const imeisv &);
private:
    union {
	OSSC::COssString imsi_field;
	OSSC::COssString imei_field;
	OSSC::COssString imeisv_field;
    };
    void cleanup();
};

class OSS_PUBLIC rnpCN_InvokeTraceIEs_Value : public OssConstrainedOpenType
{
public:
    rnpCN_InvokeTraceIEs_Value();
    rnpCN_InvokeTraceIEs_Value(const rnpCN_InvokeTraceIEs_Value &);
    ~rnpCN_InvokeTraceIEs_Value();
    rnpCN_InvokeTraceIEs_Value & operator = (const rnpCN_InvokeTraceIEs_Value &);
    int operator == (const rnpCN_InvokeTraceIEs_Value &) const;
    int operator != (const rnpCN_InvokeTraceIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpTraceType *get_rnpTraceType();
    const rnpTraceType *get_rnpTraceType() const;
    void set_rnpTraceType(const rnpTraceType &);
    rnpTraceType *release_rnpTraceType();
    void set_rnpTraceType(rnpTraceType *);

    rnpTraceReference *get_rnpTraceReference();
    const rnpTraceReference *get_rnpTraceReference() const;
    void set_rnpTraceReference(const rnpTraceReference &);
    rnpTraceReference *release_rnpTraceReference();
    void set_rnpTraceReference(rnpTraceReference *);

    rnpTriggerID *get_rnpTriggerID();
    const rnpTriggerID *get_rnpTriggerID() const;
    void set_rnpTriggerID(const rnpTriggerID &);
    rnpTriggerID *release_rnpTriggerID();
    void set_rnpTriggerID(rnpTriggerID *);

    rnpUE_ID *get_rnpUE_ID();
    const rnpUE_ID *get_rnpUE_ID() const;
    void set_rnpUE_ID(const rnpUE_ID &);
    rnpUE_ID *release_rnpUE_ID();
    void set_rnpUE_ID(rnpUE_ID *);

    rnpOMC_ID *get_rnpOMC_ID();
    const rnpOMC_ID *get_rnpOMC_ID() const;
    void set_rnpOMC_ID(const rnpOMC_ID &);
    rnpOMC_ID *release_rnpOMC_ID();
    void set_rnpOMC_ID(rnpOMC_ID *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnpInterfacesToTraceItem;

class OSS_PUBLIC rnpListOfInterfacesToTrace : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnpInterfacesToTraceItem component;

    rnpListOfInterfacesToTrace();
    rnpListOfInterfacesToTrace(const rnpListOfInterfacesToTrace &);
    ~rnpListOfInterfacesToTrace();

    rnpListOfInterfacesToTrace & operator = (const rnpListOfInterfacesToTrace &);
    int operator == (const rnpListOfInterfacesToTrace &) const;
    int operator != (const rnpListOfInterfacesToTrace &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnpListOfInterfacesToTrace *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnpListOfInterfacesToTrace *);

    int remove_front();
    int remove_after(OssIndex);

    rnpListOfInterfacesToTrace *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared6 rnp_seqof292;

class OSS_PUBLIC rnpTracePropagationParameters   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 traceRecordingSessionReference;
    typedef enum rnpTraceDepth traceDepth;
    typedef rnpListOfInterfacesToTrace listOfInterfacesToTrace;
    typedef rnp__shared6 iE_Extensions;

    rnpTracePropagationParameters();
    rnpTracePropagationParameters(const rnpTracePropagationParameters &);
    rnpTracePropagationParameters(traceRecordingSessionReference, traceDepth, const listOfInterfacesToTrace &, 
	const iE_Extensions &);
    rnpTracePropagationParameters(traceRecordingSessionReference, traceDepth);

    rnpTracePropagationParameters & operator = (const rnpTracePropagationParameters &);
    int operator == (const rnpTracePropagationParameters &) const;
    int operator != (const rnpTracePropagationParameters &) const;

    traceRecordingSessionReference & get_traceRecordingSessionReference();
    traceRecordingSessionReference get_traceRecordingSessionReference() const;
    void set_traceRecordingSessionReference(traceRecordingSessionReference);

    traceDepth & get_traceDepth();
    traceDepth get_traceDepth() const;
    void set_traceDepth(traceDepth);

    listOfInterfacesToTrace *get_listOfInterfacesToTrace();
    const listOfInterfacesToTrace *get_listOfInterfacesToTrace() const;
    void set_listOfInterfacesToTrace(const listOfInterfacesToTrace &);
    int listOfInterfacesToTrace_is_present() const;
    void omit_listOfInterfacesToTrace();

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    traceRecordingSessionReference traceRecordingSessionReference_field;
    traceDepth traceDepth_field;
    listOfInterfacesToTrace listOfInterfacesToTrace_field;
    iE_Extensions iE_Extensions_field;
};

typedef rnp__shared10 rnpCellIdList;

typedef rnp__shared6 rnp_seqof242;

class OSS_PUBLIC rnpCellBased   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp__shared10 cellIdList;
    typedef rnp__shared6 iE_Extensions;

    rnpCellBased();
    rnpCellBased(const rnpCellBased &);
    rnpCellBased(const cellIdList &, const iE_Extensions &);
    rnpCellBased(const cellIdList &);

    rnpCellBased & operator = (const rnpCellBased &);
    int operator == (const rnpCellBased &) const;
    int operator != (const rnpCellBased &) const;

    cellIdList & get_cellIdList();
    const cellIdList & get_cellIdList() const;
    void set_cellIdList(const cellIdList &);

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    cellIdList cellIdList_field;
    iE_Extensions iE_Extensions_field;
};

class OSS_PUBLIC rnp__shared27 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnpLAI component;

    rnp__shared27();
    rnp__shared27(const rnp__shared27 &);
    ~rnp__shared27();

    rnp__shared27 & operator = (const rnp__shared27 &);
    int operator == (const rnp__shared27 &) const;
    int operator != (const rnp__shared27 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp__shared27 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp__shared27 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp__shared27 *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared27 rnpLAI_List;

typedef rnp__shared6 rnp_seqof277;

class OSS_PUBLIC rnpLABased   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp__shared27 laiList;
    typedef rnp__shared6 iE_Extensions;

    rnpLABased();
    rnpLABased(const rnpLABased &);
    rnpLABased(const laiList &, const iE_Extensions &);
    rnpLABased(const laiList &);

    rnpLABased & operator = (const rnpLABased &);
    int operator == (const rnpLABased &) const;
    int operator != (const rnpLABased &) const;

    laiList & get_laiList();
    const laiList & get_laiList() const;
    void set_laiList(const laiList &);

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    laiList laiList_field;
    iE_Extensions iE_Extensions_field;
};

class OSS_PUBLIC rnp__shared28 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnpRAI component;

    rnp__shared28();
    rnp__shared28(const rnp__shared28 &);
    ~rnp__shared28();

    rnp__shared28 & operator = (const rnp__shared28 &);
    int operator == (const rnp__shared28 &) const;
    int operator != (const rnp__shared28 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp__shared28 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp__shared28 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp__shared28 *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared28 rnpRAI_List;

typedef rnp__shared6 rnp_seqof281;

class OSS_PUBLIC rnpRABased   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp__shared28 raiList;
    typedef rnp__shared6 iE_Extensions;

    rnpRABased();
    rnpRABased(const rnpRABased &);
    rnpRABased(const raiList &, const iE_Extensions &);
    rnpRABased(const raiList &);

    rnpRABased & operator = (const rnpRABased &);
    int operator == (const rnpRABased &) const;
    int operator != (const rnpRABased &) const;

    raiList & get_raiList();
    const raiList & get_raiList() const;
    void set_raiList(const raiList &);

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    raiList raiList_field;
    iE_Extensions iE_Extensions_field;
};

class OSS_PUBLIC rnpMDTAreaScope  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	cellbased_chosen = 1,
	labased_chosen = 2,
	rabased_chosen = 3,
	plmn_area_based_chosen = 4
    };
    typedef rnpCellBased cellbased;
    typedef rnpLABased labased;
    typedef rnpRABased rabased;
    typedef Nulltype plmn_area_based;

    rnpMDTAreaScope();
    rnpMDTAreaScope(const rnpMDTAreaScope &);
    ~rnpMDTAreaScope();

    rnpMDTAreaScope & operator = (const rnpMDTAreaScope &);
    int operator == (const rnpMDTAreaScope &) const;
    int operator != (const rnpMDTAreaScope &) const;

    cellbased *get_cellbased();
    const cellbased *get_cellbased() const;
    void set_cellbased(const cellbased &);

    labased *get_labased();
    const labased *get_labased() const;
    void set_labased(const labased &);

    rabased *get_rabased();
    const rabased *get_rabased() const;
    void set_rabased(const rabased &);

    plmn_area_based *get_plmn_area_based();
    const plmn_area_based *get_plmn_area_based() const;
    void set_plmn_area_based(plmn_area_based);
private:
    union {
	cellbased *cellbased_field;
	labased *labased_field;
	rabased *rabased_field;
	plmn_area_based plmn_area_based_field;
    };
    void cleanup();
};

class OSS_PUBLIC rnpMDT_Report_Parameters   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef enum rnpReportInterval reportInterval;
    typedef enum rnpReportAmount reportAmount;

    rnpMDT_Report_Parameters();
    rnpMDT_Report_Parameters(const rnpMDT_Report_Parameters &);
    rnpMDT_Report_Parameters(reportInterval, reportAmount);

    rnpMDT_Report_Parameters & operator = (const rnpMDT_Report_Parameters &);
    int operator == (const rnpMDT_Report_Parameters &) const;
    int operator != (const rnpMDT_Report_Parameters &) const;

    reportInterval & get_reportInterval();
    reportInterval get_reportInterval() const;
    void set_reportInterval(reportInterval);

    reportAmount & get_reportAmount();
    reportAmount get_reportAmount() const;
    void set_reportAmount(reportAmount);
private:
    reportInterval reportInterval_field;
    reportAmount reportAmount_field;
};

class OSS_PUBLIC rnpEvent1F_Parameters   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef enum rnpMeasurementQuantity measurementQuantity;
    typedef OSS_INT32 threshold;

    rnpEvent1F_Parameters();
    rnpEvent1F_Parameters(const rnpEvent1F_Parameters &);
    rnpEvent1F_Parameters(measurementQuantity, threshold);

    rnpEvent1F_Parameters & operator = (const rnpEvent1F_Parameters &);
    int operator == (const rnpEvent1F_Parameters &) const;
    int operator != (const rnpEvent1F_Parameters &) const;

    measurementQuantity & get_measurementQuantity();
    measurementQuantity get_measurementQuantity() const;
    void set_measurementQuantity(measurementQuantity);

    threshold & get_threshold();
    threshold get_threshold() const;
    void set_threshold(threshold);
private:
    measurementQuantity measurementQuantity_field;
    threshold threshold_field;
};

class OSS_PUBLIC rnpM1Report  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	periodic_chosen = 1,
	event1F_chosen = 2
    };
    typedef rnpMDT_Report_Parameters periodic;
    typedef rnpEvent1F_Parameters event1F;

    rnpM1Report();
    rnpM1Report(const rnpM1Report &);
    ~rnpM1Report();

    rnpM1Report & operator = (const rnpM1Report &);
    int operator == (const rnpM1Report &) const;
    int operator != (const rnpM1Report &) const;

    periodic *get_periodic();
    const periodic *get_periodic() const;
    void set_periodic(const periodic &);

    event1F *get_event1F();
    const event1F *get_event1F() const;
    void set_event1F(const event1F &);
private:
    union {
	periodic *periodic_field;
	event1F *event1F_field;
    };
    void cleanup();
};

class OSS_PUBLIC rnpEvent1I_Parameters   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_INT32 threshold;

    rnpEvent1I_Parameters();
    rnpEvent1I_Parameters(const rnpEvent1I_Parameters &);
    rnpEvent1I_Parameters(threshold);

    rnpEvent1I_Parameters & operator = (const rnpEvent1I_Parameters &);
    int operator == (const rnpEvent1I_Parameters &) const;
    int operator != (const rnpEvent1I_Parameters &) const;

    threshold & get_threshold();
    threshold get_threshold() const;
    void set_threshold(threshold);
private:
    threshold threshold_field;
};

class OSS_PUBLIC rnpM2Report  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	periodic_chosen = 1,
	event1I_chosen = 2
    };
    typedef rnpMDT_Report_Parameters periodic;
    typedef rnpEvent1I_Parameters event1I;

    rnpM2Report();
    rnpM2Report(const rnpM2Report &);
    ~rnpM2Report();

    rnpM2Report & operator = (const rnpM2Report &);
    int operator == (const rnpM2Report &) const;
    int operator != (const rnpM2Report &) const;

    periodic *get_periodic();
    const periodic *get_periodic() const;
    void set_periodic(const periodic &);

    event1I *get_event1I();
    const event1I *get_event1I() const;
    void set_event1I(const event1I &);
private:
    union {
	periodic *periodic_field;
	event1I *event1I_field;
    };
    void cleanup();
};

class OSS_PUBLIC rnp_seq270;

class OSS_PUBLIC rnp_seqof263 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq270 component;

    rnp_seqof263();
    rnp_seqof263(const rnp_seqof263 &);
    ~rnp_seqof263();

    rnp_seqof263 & operator = (const rnp_seqof263 &);
    int operator == (const rnp_seqof263 &) const;
    int operator != (const rnp_seqof263 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof263 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof263 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof263 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpImmediateMDT   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssBitString measurementsToActivate;
    typedef rnpM1Report m1report;
    typedef rnpM2Report m2report;
    typedef rnp_seqof263 iE_Extensions;

    rnpImmediateMDT();
    rnpImmediateMDT(const rnpImmediateMDT &);
    rnpImmediateMDT(const measurementsToActivate &, const m1report &, const m2report &, 
	const iE_Extensions &);
    rnpImmediateMDT(const measurementsToActivate &);

    rnpImmediateMDT & operator = (const rnpImmediateMDT &);
    int operator == (const rnpImmediateMDT &) const;
    int operator != (const rnpImmediateMDT &) const;

    measurementsToActivate & get_measurementsToActivate();
    const measurementsToActivate & get_measurementsToActivate() const;
    void set_measurementsToActivate(const measurementsToActivate &);

    m1report *get_m1report();
    const m1report *get_m1report() const;
    void set_m1report(const m1report &);
    int m1report_is_present() const;
    void omit_m1report();

    m2report *get_m2report();
    const m2report *get_m2report() const;
    void set_m2report(const m2report &);
    int m2report_is_present() const;
    void omit_m2report();

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    measurementsToActivate measurementsToActivate_field;
    m1report m1report_field;
    m2report m2report_field;
    iE_Extensions iE_Extensions_field;
};

typedef rnp__shared6 rnp_seqof278;

class OSS_PUBLIC rnpLoggedMDT   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef enum rnpLoggingInterval loggingInterval;
    typedef enum rnpLoggingDuration loggingDuration;
    typedef rnp__shared6 iE_Extensions;

    rnpLoggedMDT();
    rnpLoggedMDT(const rnpLoggedMDT &);
    rnpLoggedMDT(loggingInterval, loggingDuration, const iE_Extensions &);
    rnpLoggedMDT(loggingInterval, loggingDuration);

    rnpLoggedMDT & operator = (const rnpLoggedMDT &);
    int operator == (const rnpLoggedMDT &) const;
    int operator != (const rnpLoggedMDT &) const;

    loggingInterval & get_loggingInterval();
    loggingInterval get_loggingInterval() const;
    void set_loggingInterval(loggingInterval);

    loggingDuration & get_loggingDuration();
    loggingDuration get_loggingDuration() const;
    void set_loggingDuration(loggingDuration);

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    loggingInterval loggingInterval_field;
    loggingDuration loggingDuration_field;
    iE_Extensions iE_Extensions_field;
};

class OSS_PUBLIC rnpMDTMode  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	immediateMDT_chosen = 1,
	loggedMDT_chosen = 2
    };
    typedef rnpImmediateMDT immediateMDT;
    typedef rnpLoggedMDT loggedMDT;

    rnpMDTMode();
    rnpMDTMode(const rnpMDTMode &);
    ~rnpMDTMode();

    rnpMDTMode & operator = (const rnpMDTMode &);
    int operator == (const rnpMDTMode &) const;
    int operator != (const rnpMDTMode &) const;

    immediateMDT *get_immediateMDT();
    const immediateMDT *get_immediateMDT() const;
    void set_immediateMDT(const immediateMDT &);

    loggedMDT *get_loggedMDT();
    const loggedMDT *get_loggedMDT() const;
    void set_loggedMDT(const loggedMDT &);
private:
    union {
	immediateMDT *immediateMDT_field;
	loggedMDT *loggedMDT_field;
    };
    void cleanup();
};

class OSS_PUBLIC rnp_seq283;

class OSS_PUBLIC rnp_seqof275 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq283 component;

    rnp_seqof275();
    rnp_seqof275(const rnp_seqof275 &);
    ~rnp_seqof275();

    rnp_seqof275 & operator = (const rnp_seqof275 &);
    int operator == (const rnp_seqof275 &) const;
    int operator != (const rnp_seqof275 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof275 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof275 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof275 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpMDT_Configuration   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef enum rnpMDT_Activation mdtActivation;
    typedef rnpMDTAreaScope mdtAreaScope;
    typedef rnpMDTMode mdtMode;
    typedef rnp_seqof275 iE_Extensions;

    rnpMDT_Configuration();
    rnpMDT_Configuration(const rnpMDT_Configuration &);
    rnpMDT_Configuration(mdtActivation, const mdtAreaScope &, const mdtMode &, const iE_Extensions &);
    rnpMDT_Configuration(mdtActivation, const mdtAreaScope &, const mdtMode &);

    rnpMDT_Configuration & operator = (const rnpMDT_Configuration &);
    int operator == (const rnpMDT_Configuration &) const;
    int operator != (const rnpMDT_Configuration &) const;

    mdtActivation & get_mdtActivation();
    mdtActivation get_mdtActivation() const;
    void set_mdtActivation(mdtActivation);

    mdtAreaScope & get_mdtAreaScope();
    const mdtAreaScope & get_mdtAreaScope() const;
    void set_mdtAreaScope(const mdtAreaScope &);

    mdtMode & get_mdtMode();
    const mdtMode & get_mdtMode() const;
    void set_mdtMode(const mdtMode &);

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    mdtActivation mdtActivation_field;
    mdtAreaScope mdtAreaScope_field;
    mdtMode mdtMode_field;
    iE_Extensions iE_Extensions_field;
};

class OSS_PUBLIC rnpCN_InvokeTraceExtensions_Extension : public OssConstrainedOpenType
{
public:
    rnpCN_InvokeTraceExtensions_Extension();
    rnpCN_InvokeTraceExtensions_Extension(const rnpCN_InvokeTraceExtensions_Extension &);
    ~rnpCN_InvokeTraceExtensions_Extension();
    rnpCN_InvokeTraceExtensions_Extension & operator = (const rnpCN_InvokeTraceExtensions_Extension &);
    int operator == (const rnpCN_InvokeTraceExtensions_Extension &) const;
    int operator != (const rnpCN_InvokeTraceExtensions_Extension &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpTracePropagationParameters *get_rnpTracePropagationParameters();
    const rnpTracePropagationParameters *get_rnpTracePropagationParameters() const;
    void set_rnpTracePropagationParameters(const rnpTracePropagationParameters &);
    rnpTracePropagationParameters *release_rnpTracePropagationParameters();
    void set_rnpTracePropagationParameters(rnpTracePropagationParameters *);

    rnpMDT_Configuration *get_rnpMDT_Configuration();
    const rnpMDT_Configuration *get_rnpMDT_Configuration() const;
    void set_rnpMDT_Configuration(const rnpMDT_Configuration &);
    rnpMDT_Configuration *release_rnpMDT_Configuration();
    void set_rnpMDT_Configuration(rnpMDT_Configuration *);

    rnpTransportLayerAddress *get_rnpTransportLayerAddress();
    const rnpTransportLayerAddress *get_rnpTransportLayerAddress() const;
    void set_rnpTransportLayerAddress(const rnpTransportLayerAddress &);
    rnpTransportLayerAddress *release_rnpTransportLayerAddress();
    void set_rnpTransportLayerAddress(rnpTransportLayerAddress *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq107   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpCN_InvokeTraceIEs_Value value;

    rnp_seq107();
    rnp_seq107(const rnp_seq107 &);
    rnp_seq107(id, criticality, const value &);

    rnp_seq107 & operator = (const rnp_seq107 &);
    int operator == (const rnp_seq107 &) const;
    int operator != (const rnp_seq107 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

class OSS_PUBLIC rnp_seq108   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpCN_InvokeTraceExtensions_Extension extensionValue;

    rnp_seq108();
    rnp_seq108(const rnp_seq108 &);
    rnp_seq108(id, criticality, const extensionValue &);

    rnp_seq108 & operator = (const rnp_seq108 &);
    int operator == (const rnp_seq108 &) const;
    int operator != (const rnp_seq108 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    extensionValue & get_extensionValue();
    const extensionValue & get_extensionValue() const;
    void set_extensionValue(const extensionValue &);
private:
    id id_field;
    criticality criticality_field;
    extensionValue extensionValue_field;
};

class OSS_PUBLIC rnpCN_DeactivateTraceIEs_Value : public OssConstrainedOpenType
{
public:
    rnpCN_DeactivateTraceIEs_Value();
    rnpCN_DeactivateTraceIEs_Value(const rnpCN_DeactivateTraceIEs_Value &);
    ~rnpCN_DeactivateTraceIEs_Value();
    rnpCN_DeactivateTraceIEs_Value & operator = (const rnpCN_DeactivateTraceIEs_Value &);
    int operator == (const rnpCN_DeactivateTraceIEs_Value &) const;
    int operator != (const rnpCN_DeactivateTraceIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpTraceReference *get_rnpTraceReference();
    const rnpTraceReference *get_rnpTraceReference() const;
    void set_rnpTraceReference(const rnpTraceReference &);
    rnpTraceReference *release_rnpTraceReference();
    void set_rnpTraceReference(rnpTraceReference *);

    rnpTriggerID *get_rnpTriggerID();
    const rnpTriggerID *get_rnpTriggerID() const;
    void set_rnpTriggerID(const rnpTriggerID &);
    rnpTriggerID *release_rnpTriggerID();
    void set_rnpTriggerID(rnpTriggerID *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq109   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpCN_DeactivateTraceIEs_Value value;

    rnp_seq109();
    rnp_seq109(const rnp_seq109 &);
    rnp_seq109(id, criticality, const value &);

    rnp_seq109 & operator = (const rnp_seq109 &);
    int operator == (const rnp_seq109 &) const;
    int operator != (const rnp_seq109 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

typedef rnp__shared5 rnp_seq110;

class OSS_PUBLIC rnpRequestType   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef enum rnpEvent event;
    typedef enum rnpReportArea reportArea;
    typedef OSS_UINT32 accuracyCode;

    rnpRequestType();
    rnpRequestType(const rnpRequestType &);
    rnpRequestType(event, reportArea, accuracyCode);
    rnpRequestType(event, reportArea);

    rnpRequestType & operator = (const rnpRequestType &);
    int operator == (const rnpRequestType &) const;
    int operator != (const rnpRequestType &) const;

    event & get_event();
    event get_event() const;
    void set_event(event);

    reportArea & get_reportArea();
    reportArea get_reportArea() const;
    void set_reportArea(reportArea);

    accuracyCode *get_accuracyCode();
    const accuracyCode *get_accuracyCode() const;
    void set_accuracyCode(accuracyCode);
    int accuracyCode_is_present() const;
    void omit_accuracyCode();
private:
    OSS_UINT32 bit_mask;
    event event_field;
    reportArea reportArea_field;
    accuracyCode accuracyCode_field;
};

class OSS_PUBLIC rnpLocationReportingControlIEs_Value : public OssConstrainedOpenType
{
public:
    rnpLocationReportingControlIEs_Value();
    rnpLocationReportingControlIEs_Value(const rnpLocationReportingControlIEs_Value &);
    ~rnpLocationReportingControlIEs_Value();
    rnpLocationReportingControlIEs_Value & operator = (const rnpLocationReportingControlIEs_Value &);
    int operator == (const rnpLocationReportingControlIEs_Value &) const;
    int operator != (const rnpLocationReportingControlIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpRequestType *get_rnpRequestType();
    const rnpRequestType *get_rnpRequestType() const;
    void set_rnpRequestType(const rnpRequestType &);
    rnpRequestType *release_rnpRequestType();
    void set_rnpRequestType(rnpRequestType *);
private:
    void cleanup_decoded();
};

typedef rnp__shared6 rnp_seqof270;

class OSS_PUBLIC rnpPeriodicLocationInfo   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_INT32 reportingAmount;
    typedef OSS_INT32 reportingInterval;
    typedef rnp__shared6 iE_Extensions;

    rnpPeriodicLocationInfo();
    rnpPeriodicLocationInfo(const rnpPeriodicLocationInfo &);
    rnpPeriodicLocationInfo(reportingAmount, reportingInterval, const iE_Extensions &);
    rnpPeriodicLocationInfo(reportingAmount, reportingInterval);

    rnpPeriodicLocationInfo & operator = (const rnpPeriodicLocationInfo &);
    int operator == (const rnpPeriodicLocationInfo &) const;
    int operator != (const rnpPeriodicLocationInfo &) const;

    reportingAmount & get_reportingAmount();
    reportingAmount get_reportingAmount() const;
    void set_reportingAmount(reportingAmount);

    reportingInterval & get_reportingInterval();
    reportingInterval get_reportingInterval() const;
    void set_reportingInterval(reportingInterval);

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    reportingAmount reportingAmount_field;
    reportingInterval reportingInterval_field;
    iE_Extensions iE_Extensions_field;
};

class OSS_PUBLIC rnpLocationReportingControlExtensions_Extension : public OssConstrainedOpenType
{
public:
    rnpLocationReportingControlExtensions_Extension();
    rnpLocationReportingControlExtensions_Extension(const rnpLocationReportingControlExtensions_Extension &);
    ~rnpLocationReportingControlExtensions_Extension();
    rnpLocationReportingControlExtensions_Extension & operator = (const rnpLocationReportingControlExtensions_Extension &);
    int operator == (const rnpLocationReportingControlExtensions_Extension &) const;
    int operator != (const rnpLocationReportingControlExtensions_Extension &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpVerticalAccuracyCode *get_rnpVerticalAccuracyCode();
    const rnpVerticalAccuracyCode *get_rnpVerticalAccuracyCode() const;
    void set_rnpVerticalAccuracyCode(const rnpVerticalAccuracyCode &);
    rnpVerticalAccuracyCode *release_rnpVerticalAccuracyCode();
    void set_rnpVerticalAccuracyCode(rnpVerticalAccuracyCode *);

    rnpResponseTime *get_rnpResponseTime();
    const rnpResponseTime *get_rnpResponseTime() const;
    void set_rnpResponseTime(const rnpResponseTime &);
    rnpResponseTime *release_rnpResponseTime();
    void set_rnpResponseTime(rnpResponseTime *);

    rnpPositioningPriority *get_rnpPositioningPriority();
    const rnpPositioningPriority *get_rnpPositioningPriority() const;
    void set_rnpPositioningPriority(const rnpPositioningPriority &);
    rnpPositioningPriority *release_rnpPositioningPriority();
    void set_rnpPositioningPriority(rnpPositioningPriority *);

    rnpClientType *get_rnpClientType();
    const rnpClientType *get_rnpClientType() const;
    void set_rnpClientType(const rnpClientType &);
    rnpClientType *release_rnpClientType();
    void set_rnpClientType(rnpClientType *);

    rnpIncludeVelocity *get_rnpIncludeVelocity();
    const rnpIncludeVelocity *get_rnpIncludeVelocity() const;
    void set_rnpIncludeVelocity(const rnpIncludeVelocity &);
    rnpIncludeVelocity *release_rnpIncludeVelocity();
    void set_rnpIncludeVelocity(rnpIncludeVelocity *);

    rnpPeriodicLocationInfo *get_rnpPeriodicLocationInfo();
    const rnpPeriodicLocationInfo *get_rnpPeriodicLocationInfo() const;
    void set_rnpPeriodicLocationInfo(const rnpPeriodicLocationInfo &);
    rnpPeriodicLocationInfo *release_rnpPeriodicLocationInfo();
    void set_rnpPeriodicLocationInfo(rnpPeriodicLocationInfo *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq111   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpLocationReportingControlIEs_Value value;

    rnp_seq111();
    rnp_seq111(const rnp_seq111 &);
    rnp_seq111(id, criticality, const value &);

    rnp_seq111 & operator = (const rnp_seq111 &);
    int operator == (const rnp_seq111 &) const;
    int operator != (const rnp_seq111 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

class OSS_PUBLIC rnp_seq112   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpLocationReportingControlExtensions_Extension extensionValue;

    rnp_seq112();
    rnp_seq112(const rnp_seq112 &);
    rnp_seq112(id, criticality, const extensionValue &);

    rnp_seq112 & operator = (const rnp_seq112 &);
    int operator == (const rnp_seq112 &) const;
    int operator != (const rnp_seq112 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    extensionValue & get_extensionValue();
    const extensionValue & get_extensionValue() const;
    void set_extensionValue(const extensionValue &);
private:
    id id_field;
    criticality criticality_field;
    extensionValue extensionValue_field;
};

typedef rnp__shared6 rnp_seqof251;

class OSS_PUBLIC rnpGeographicalCoordinates   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef enum rnp_enum1 latitudeSign;
    typedef OSS_UINT32 latitude;
    typedef OSS_INT32 longitude;
    typedef rnp__shared6 iE_Extensions;

    rnpGeographicalCoordinates();
    rnpGeographicalCoordinates(const rnpGeographicalCoordinates &);
    rnpGeographicalCoordinates(latitudeSign, latitude, longitude, const iE_Extensions &);
    rnpGeographicalCoordinates(latitudeSign, latitude, longitude);

    rnpGeographicalCoordinates & operator = (const rnpGeographicalCoordinates &);
    int operator == (const rnpGeographicalCoordinates &) const;
    int operator != (const rnpGeographicalCoordinates &) const;

    latitudeSign & get_latitudeSign();
    latitudeSign get_latitudeSign() const;
    void set_latitudeSign(latitudeSign);

    latitude & get_latitude();
    latitude get_latitude() const;
    void set_latitude(latitude);

    longitude & get_longitude();
    longitude get_longitude() const;
    void set_longitude(longitude);

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    latitudeSign latitudeSign_field;
    latitude latitude_field;
    longitude longitude_field;
    iE_Extensions iE_Extensions_field;
};

typedef rnp__shared6 rnp_seqof253;

class OSS_PUBLIC rnp__shared29   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnpGeographicalCoordinates geographicalCoordinates;
    typedef rnp__shared6 iE_Extensions;

    rnp__shared29();
    rnp__shared29(const rnp__shared29 &);
    rnp__shared29(const geographicalCoordinates &, const iE_Extensions &);
    rnp__shared29(const geographicalCoordinates &);

    rnp__shared29 & operator = (const rnp__shared29 &);
    int operator == (const rnp__shared29 &) const;
    int operator != (const rnp__shared29 &) const;

    geographicalCoordinates & get_geographicalCoordinates();
    const geographicalCoordinates & get_geographicalCoordinates() const;
    void set_geographicalCoordinates(const geographicalCoordinates &);

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    geographicalCoordinates geographicalCoordinates_field;
    iE_Extensions iE_Extensions_field;
};

typedef rnp__shared29 rnpGA_Point;

typedef rnp__shared6 rnp_seqof256;

class OSS_PUBLIC rnpGA_PointWithUnCertainty   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnpGeographicalCoordinates geographicalCoordinates;
    typedef rnp__shared6 iE_Extensions;
    typedef OSS_UINT32 uncertaintyCode;

    rnpGA_PointWithUnCertainty();
    rnpGA_PointWithUnCertainty(const rnpGA_PointWithUnCertainty &);
    rnpGA_PointWithUnCertainty(const geographicalCoordinates &, const iE_Extensions &, 
	uncertaintyCode);
    rnpGA_PointWithUnCertainty(const geographicalCoordinates &, uncertaintyCode);

    rnpGA_PointWithUnCertainty & operator = (const rnpGA_PointWithUnCertainty &);
    int operator == (const rnpGA_PointWithUnCertainty &) const;
    int operator != (const rnpGA_PointWithUnCertainty &) const;

    geographicalCoordinates & get_geographicalCoordinates();
    const geographicalCoordinates & get_geographicalCoordinates() const;
    void set_geographicalCoordinates(const geographicalCoordinates &);

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();

    uncertaintyCode & get_uncertaintyCode();
    uncertaintyCode get_uncertaintyCode() const;
    void set_uncertaintyCode(uncertaintyCode);
private:
    OSS_UINT32 bit_mask;
    geographicalCoordinates geographicalCoordinates_field;
    iE_Extensions iE_Extensions_field;
    uncertaintyCode uncertaintyCode_field;
};

class OSS_PUBLIC rnp__shared30 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp__shared29 component;

    rnp__shared30();
    rnp__shared30(const rnp__shared30 &);
    ~rnp__shared30();

    rnp__shared30 & operator = (const rnp__shared30 &);
    int operator == (const rnp__shared30 &) const;
    int operator != (const rnp__shared30 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp__shared30 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp__shared30 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp__shared30 *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared30 rnpGA_Polygon;

class OSS_PUBLIC rnpGA_UncertaintyEllipse   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 uncertaintySemi_major;
    typedef OSS_UINT32 uncertaintySemi_minor;
    typedef OSS_UINT32 orientationOfMajorAxis;

    rnpGA_UncertaintyEllipse();
    rnpGA_UncertaintyEllipse(const rnpGA_UncertaintyEllipse &);
    rnpGA_UncertaintyEllipse(uncertaintySemi_major, uncertaintySemi_minor, orientationOfMajorAxis);

    rnpGA_UncertaintyEllipse & operator = (const rnpGA_UncertaintyEllipse &);
    int operator == (const rnpGA_UncertaintyEllipse &) const;
    int operator != (const rnpGA_UncertaintyEllipse &) const;

    uncertaintySemi_major & get_uncertaintySemi_major();
    uncertaintySemi_major get_uncertaintySemi_major() const;
    void set_uncertaintySemi_major(uncertaintySemi_major);

    uncertaintySemi_minor & get_uncertaintySemi_minor();
    uncertaintySemi_minor get_uncertaintySemi_minor() const;
    void set_uncertaintySemi_minor(uncertaintySemi_minor);

    orientationOfMajorAxis & get_orientationOfMajorAxis();
    orientationOfMajorAxis get_orientationOfMajorAxis() const;
    void set_orientationOfMajorAxis(orientationOfMajorAxis);
private:
    uncertaintySemi_major uncertaintySemi_major_field;
    uncertaintySemi_minor uncertaintySemi_minor_field;
    orientationOfMajorAxis orientationOfMajorAxis_field;
};

typedef rnp__shared6 rnp_seqof257;

class OSS_PUBLIC rnpGA_PointWithUnCertaintyEllipse   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnpGeographicalCoordinates geographicalCoordinates;
    typedef rnpGA_UncertaintyEllipse uncertaintyEllipse;
    typedef OSS_UINT32 confidence;
    typedef rnp__shared6 iE_Extensions;

    rnpGA_PointWithUnCertaintyEllipse();
    rnpGA_PointWithUnCertaintyEllipse(const rnpGA_PointWithUnCertaintyEllipse &);
    rnpGA_PointWithUnCertaintyEllipse(const geographicalCoordinates &, const uncertaintyEllipse &, 
	confidence, const iE_Extensions &);
    rnpGA_PointWithUnCertaintyEllipse(const geographicalCoordinates &, const uncertaintyEllipse &, 
	confidence);

    rnpGA_PointWithUnCertaintyEllipse & operator = (const rnpGA_PointWithUnCertaintyEllipse &);
    int operator == (const rnpGA_PointWithUnCertaintyEllipse &) const;
    int operator != (const rnpGA_PointWithUnCertaintyEllipse &) const;

    geographicalCoordinates & get_geographicalCoordinates();
    const geographicalCoordinates & get_geographicalCoordinates() const;
    void set_geographicalCoordinates(const geographicalCoordinates &);

    uncertaintyEllipse & get_uncertaintyEllipse();
    const uncertaintyEllipse & get_uncertaintyEllipse() const;
    void set_uncertaintyEllipse(const uncertaintyEllipse &);

    confidence & get_confidence();
    confidence get_confidence() const;
    void set_confidence(confidence);

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    geographicalCoordinates geographicalCoordinates_field;
    uncertaintyEllipse uncertaintyEllipse_field;
    confidence confidence_field;
    iE_Extensions iE_Extensions_field;
};

class OSS_PUBLIC rnpGA_AltitudeAndDirection   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef enum rnp_enum2 directionOfAltitude;
    typedef OSS_UINT32 altitude;

    rnpGA_AltitudeAndDirection();
    rnpGA_AltitudeAndDirection(const rnpGA_AltitudeAndDirection &);
    rnpGA_AltitudeAndDirection(directionOfAltitude, altitude);

    rnpGA_AltitudeAndDirection & operator = (const rnpGA_AltitudeAndDirection &);
    int operator == (const rnpGA_AltitudeAndDirection &) const;
    int operator != (const rnpGA_AltitudeAndDirection &) const;

    directionOfAltitude & get_directionOfAltitude();
    directionOfAltitude get_directionOfAltitude() const;
    void set_directionOfAltitude(directionOfAltitude);

    altitude & get_altitude();
    altitude get_altitude() const;
    void set_altitude(altitude);
private:
    directionOfAltitude directionOfAltitude_field;
    altitude altitude_field;
};

typedef rnp__shared6 rnp_seqof254;

class OSS_PUBLIC rnpGA_PointWithAltitude   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnpGeographicalCoordinates geographicalCoordinates;
    typedef rnpGA_AltitudeAndDirection altitudeAndDirection;
    typedef rnp__shared6 iE_Extensions;

    rnpGA_PointWithAltitude();
    rnpGA_PointWithAltitude(const rnpGA_PointWithAltitude &);
    rnpGA_PointWithAltitude(const geographicalCoordinates &, const altitudeAndDirection &, 
	const iE_Extensions &);
    rnpGA_PointWithAltitude(const geographicalCoordinates &, const altitudeAndDirection &);

    rnpGA_PointWithAltitude & operator = (const rnpGA_PointWithAltitude &);
    int operator == (const rnpGA_PointWithAltitude &) const;
    int operator != (const rnpGA_PointWithAltitude &) const;

    geographicalCoordinates & get_geographicalCoordinates();
    const geographicalCoordinates & get_geographicalCoordinates() const;
    void set_geographicalCoordinates(const geographicalCoordinates &);

    altitudeAndDirection & get_altitudeAndDirection();
    const altitudeAndDirection & get_altitudeAndDirection() const;
    void set_altitudeAndDirection(const altitudeAndDirection &);

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    geographicalCoordinates geographicalCoordinates_field;
    altitudeAndDirection altitudeAndDirection_field;
    iE_Extensions iE_Extensions_field;
};

typedef rnp__shared6 rnp_seqof255;

class OSS_PUBLIC rnpGA_PointWithAltitudeAndUncertaintyEllipsoid   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnpGeographicalCoordinates geographicalCoordinates;
    typedef rnpGA_AltitudeAndDirection altitudeAndDirection;
    typedef rnpGA_UncertaintyEllipse uncertaintyEllipse;
    typedef OSS_UINT32 uncertaintyAltitude;
    typedef OSS_UINT32 confidence;
    typedef rnp__shared6 iE_Extensions;

    rnpGA_PointWithAltitudeAndUncertaintyEllipsoid();
    rnpGA_PointWithAltitudeAndUncertaintyEllipsoid(const rnpGA_PointWithAltitudeAndUncertaintyEllipsoid &);
    rnpGA_PointWithAltitudeAndUncertaintyEllipsoid(const geographicalCoordinates &, 
	const altitudeAndDirection &, const uncertaintyEllipse &, uncertaintyAltitude, confidence, 
	const iE_Extensions &);
    rnpGA_PointWithAltitudeAndUncertaintyEllipsoid(const geographicalCoordinates &, 
	const altitudeAndDirection &, const uncertaintyEllipse &, uncertaintyAltitude, confidence);

    rnpGA_PointWithAltitudeAndUncertaintyEllipsoid & operator = (const rnpGA_PointWithAltitudeAndUncertaintyEllipsoid &);
    int operator == (const rnpGA_PointWithAltitudeAndUncertaintyEllipsoid &) const;
    int operator != (const rnpGA_PointWithAltitudeAndUncertaintyEllipsoid &) const;

    geographicalCoordinates & get_geographicalCoordinates();
    const geographicalCoordinates & get_geographicalCoordinates() const;
    void set_geographicalCoordinates(const geographicalCoordinates &);

    altitudeAndDirection & get_altitudeAndDirection();
    const altitudeAndDirection & get_altitudeAndDirection() const;
    void set_altitudeAndDirection(const altitudeAndDirection &);

    uncertaintyEllipse & get_uncertaintyEllipse();
    const uncertaintyEllipse & get_uncertaintyEllipse() const;
    void set_uncertaintyEllipse(const uncertaintyEllipse &);

    uncertaintyAltitude & get_uncertaintyAltitude();
    uncertaintyAltitude get_uncertaintyAltitude() const;
    void set_uncertaintyAltitude(uncertaintyAltitude);

    confidence & get_confidence();
    confidence get_confidence() const;
    void set_confidence(confidence);

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    geographicalCoordinates geographicalCoordinates_field;
    altitudeAndDirection altitudeAndDirection_field;
    uncertaintyEllipse uncertaintyEllipse_field;
    uncertaintyAltitude uncertaintyAltitude_field;
    confidence confidence_field;
    iE_Extensions iE_Extensions_field;
};

typedef rnp__shared6 rnp_seqof252;

class OSS_PUBLIC rnpGA_EllipsoidArc   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnpGeographicalCoordinates geographicalCoordinates;
    typedef OSS_UINT32 innerRadius;
    typedef OSS_UINT32 uncertaintyRadius;
    typedef OSS_UINT32 offsetAngle;
    typedef OSS_UINT32 includedAngle;
    typedef OSS_UINT32 confidence;
    typedef rnp__shared6 iE_Extensions;

    rnpGA_EllipsoidArc();
    rnpGA_EllipsoidArc(const rnpGA_EllipsoidArc &);
    rnpGA_EllipsoidArc(const geographicalCoordinates &, innerRadius, uncertaintyRadius, 
	offsetAngle, includedAngle, confidence, const iE_Extensions &);
    rnpGA_EllipsoidArc(const geographicalCoordinates &, innerRadius, uncertaintyRadius, 
	offsetAngle, includedAngle, confidence);

    rnpGA_EllipsoidArc & operator = (const rnpGA_EllipsoidArc &);
    int operator == (const rnpGA_EllipsoidArc &) const;
    int operator != (const rnpGA_EllipsoidArc &) const;

    geographicalCoordinates & get_geographicalCoordinates();
    const geographicalCoordinates & get_geographicalCoordinates() const;
    void set_geographicalCoordinates(const geographicalCoordinates &);

    innerRadius & get_innerRadius();
    innerRadius get_innerRadius() const;
    void set_innerRadius(innerRadius);

    uncertaintyRadius & get_uncertaintyRadius();
    uncertaintyRadius get_uncertaintyRadius() const;
    void set_uncertaintyRadius(uncertaintyRadius);

    offsetAngle & get_offsetAngle();
    offsetAngle get_offsetAngle() const;
    void set_offsetAngle(offsetAngle);

    includedAngle & get_includedAngle();
    includedAngle get_includedAngle() const;
    void set_includedAngle(includedAngle);

    confidence & get_confidence();
    confidence get_confidence() const;
    void set_confidence(confidence);

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    geographicalCoordinates geographicalCoordinates_field;
    innerRadius innerRadius_field;
    uncertaintyRadius uncertaintyRadius_field;
    offsetAngle offsetAngle_field;
    includedAngle includedAngle_field;
    confidence confidence_field;
    iE_Extensions iE_Extensions_field;
};

class OSS_PUBLIC rnpGeographicalArea  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	point_chosen = 1,
	pointWithUnCertainty_chosen = 2,
	polygon_chosen = 3,
	pointWithUncertaintyEllipse_chosen = 4,
	pointWithAltitude_chosen = 5,
	pointWithAltitudeAndUncertaintyEllipsoid_chosen = 6,
	ellipsoidArc_chosen = 7
    };
    typedef rnp__shared29 point;
    typedef rnpGA_PointWithUnCertainty pointWithUnCertainty;
    typedef rnp__shared30 polygon;
    typedef rnpGA_PointWithUnCertaintyEllipse pointWithUncertaintyEllipse;
    typedef rnpGA_PointWithAltitude pointWithAltitude;
    typedef rnpGA_PointWithAltitudeAndUncertaintyEllipsoid pointWithAltitudeAndUncertaintyEllipsoid;
    typedef rnpGA_EllipsoidArc ellipsoidArc;

    rnpGeographicalArea();
    rnpGeographicalArea(const rnpGeographicalArea &);
    ~rnpGeographicalArea();

    rnpGeographicalArea & operator = (const rnpGeographicalArea &);
    int operator == (const rnpGeographicalArea &) const;
    int operator != (const rnpGeographicalArea &) const;

    point *get_point();
    const point *get_point() const;
    void set_point(const point &);

    pointWithUnCertainty *get_pointWithUnCertainty();
    const pointWithUnCertainty *get_pointWithUnCertainty() const;
    void set_pointWithUnCertainty(const pointWithUnCertainty &);

    polygon *get_polygon();
    const polygon *get_polygon() const;
    void set_polygon(const polygon &);

    pointWithUncertaintyEllipse *get_pointWithUncertaintyEllipse();
    const pointWithUncertaintyEllipse *get_pointWithUncertaintyEllipse() const;
    void set_pointWithUncertaintyEllipse(const pointWithUncertaintyEllipse &);

    pointWithAltitude *get_pointWithAltitude();
    const pointWithAltitude *get_pointWithAltitude() const;
    void set_pointWithAltitude(const pointWithAltitude &);

    pointWithAltitudeAndUncertaintyEllipsoid *get_pointWithAltitudeAndUncertaintyEllipsoid();
    const pointWithAltitudeAndUncertaintyEllipsoid *get_pointWithAltitudeAndUncertaintyEllipsoid() const;
    void set_pointWithAltitudeAndUncertaintyEllipsoid(const pointWithAltitudeAndUncertaintyEllipsoid &);

    ellipsoidArc *get_ellipsoidArc();
    const ellipsoidArc *get_ellipsoidArc() const;
    void set_ellipsoidArc(const ellipsoidArc &);
private:
    union {
	point *point_field;
	pointWithUnCertainty *pointWithUnCertainty_field;
	void *polygon_field;
	pointWithUncertaintyEllipse *pointWithUncertaintyEllipse_field;
	pointWithAltitude *pointWithAltitude_field;
	pointWithAltitudeAndUncertaintyEllipsoid *pointWithAltitudeAndUncertaintyEllipsoid_field;
	ellipsoidArc *ellipsoidArc_field;
    };
    void cleanup();
};

class OSS_PUBLIC rnpAreaIdentity  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	sAI_chosen = 1,
	geographicalArea_chosen = 2
    };
    typedef rnpSAI sAI;
    typedef rnpGeographicalArea geographicalArea;

    rnpAreaIdentity();
    rnpAreaIdentity(const rnpAreaIdentity &);
    ~rnpAreaIdentity();

    rnpAreaIdentity & operator = (const rnpAreaIdentity &);
    int operator == (const rnpAreaIdentity &) const;
    int operator != (const rnpAreaIdentity &) const;

    sAI *get_sAI();
    const sAI *get_sAI() const;
    void set_sAI(const sAI &);

    geographicalArea *get_geographicalArea();
    const geographicalArea *get_geographicalArea() const;
    void set_geographicalArea(const geographicalArea &);
private:
    union {
	sAI *sAI_field;
	geographicalArea *geographicalArea_field;
    };
    void cleanup();
};

class OSS_PUBLIC rnpLocationReportIEs_Value : public OssConstrainedOpenType
{
public:
    rnpLocationReportIEs_Value();
    rnpLocationReportIEs_Value(const rnpLocationReportIEs_Value &);
    ~rnpLocationReportIEs_Value();
    rnpLocationReportIEs_Value & operator = (const rnpLocationReportIEs_Value &);
    int operator == (const rnpLocationReportIEs_Value &) const;
    int operator != (const rnpLocationReportIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpAreaIdentity *get_rnpAreaIdentity();
    const rnpAreaIdentity *get_rnpAreaIdentity() const;
    void set_rnpAreaIdentity(const rnpAreaIdentity &);
    rnpAreaIdentity *release_rnpAreaIdentity();
    void set_rnpAreaIdentity(rnpAreaIdentity *);

    rnpCause *get_rnpCause();
    const rnpCause *get_rnpCause() const;
    void set_rnpCause(const rnpCause &);
    rnpCause *release_rnpCause();
    void set_rnpCause(rnpCause *);

    rnpRequestType *get_rnpRequestType();
    const rnpRequestType *get_rnpRequestType() const;
    void set_rnpRequestType(const rnpRequestType &);
    rnpRequestType *release_rnpRequestType();
    void set_rnpRequestType(rnpRequestType *);
private:
    void cleanup_decoded();
};

typedef rnp__shared6 rnp_seqof268;

class OSS_PUBLIC rnpLastKnownServiceArea   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnpSAI sAI;
    typedef OSS_UINT32 ageOfSAI;
    typedef rnp__shared6 iE_Extensions;

    rnpLastKnownServiceArea();
    rnpLastKnownServiceArea(const rnpLastKnownServiceArea &);
    rnpLastKnownServiceArea(const sAI &, ageOfSAI, const iE_Extensions &);
    rnpLastKnownServiceArea(const sAI &, ageOfSAI);

    rnpLastKnownServiceArea & operator = (const rnpLastKnownServiceArea &);
    int operator == (const rnpLastKnownServiceArea &) const;
    int operator != (const rnpLastKnownServiceArea &) const;

    sAI & get_sAI();
    const sAI & get_sAI() const;
    void set_sAI(const sAI &);

    ageOfSAI & get_ageOfSAI();
    ageOfSAI get_ageOfSAI() const;
    void set_ageOfSAI(ageOfSAI);

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    sAI sAI_field;
    ageOfSAI ageOfSAI_field;
    iE_Extensions iE_Extensions_field;
};

typedef rnp__shared9 rnpPositioningDataSet;

class OSS_PUBLIC rnp_seq289;

class OSS_PUBLIC rnp_seqof280 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq289 component;

    rnp_seqof280();
    rnp_seqof280(const rnp_seqof280 &);
    ~rnp_seqof280();

    rnp_seqof280 & operator = (const rnp_seqof280 &);
    int operator == (const rnp_seqof280 &) const;
    int operator != (const rnp_seqof280 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof280 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof280 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof280 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpPositionData   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssBitString positioningDataDiscriminator;
    typedef rnp__shared9 positioningDataSet;
    typedef rnp_seqof280 iE_Extensions;

    rnpPositionData();
    rnpPositionData(const rnpPositionData &);
    rnpPositionData(const positioningDataDiscriminator &, const positioningDataSet &, 
	const iE_Extensions &);
    rnpPositionData(const positioningDataDiscriminator &);

    rnpPositionData & operator = (const rnpPositionData &);
    int operator == (const rnpPositionData &) const;
    int operator != (const rnpPositionData &) const;

    positioningDataDiscriminator & get_positioningDataDiscriminator();
    const positioningDataDiscriminator & get_positioningDataDiscriminator() const;
    void set_positioningDataDiscriminator(const positioningDataDiscriminator &);

    positioningDataSet *get_positioningDataSet();
    const positioningDataSet *get_positioningDataSet() const;
    void set_positioningDataSet(const positioningDataSet &);
    int positioningDataSet_is_present() const;
    void omit_positioningDataSet();

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    positioningDataDiscriminator positioningDataDiscriminator_field;
    positioningDataSet positioningDataSet_field;
    iE_Extensions iE_Extensions_field;
};

class OSS_PUBLIC rnpHorizontalSpeedAndBearing   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 bearing;
    typedef OSS_UINT32 horizontalSpeed;

    rnpHorizontalSpeedAndBearing();
    rnpHorizontalSpeedAndBearing(const rnpHorizontalSpeedAndBearing &);
    rnpHorizontalSpeedAndBearing(bearing, horizontalSpeed);

    rnpHorizontalSpeedAndBearing & operator = (const rnpHorizontalSpeedAndBearing &);
    int operator == (const rnpHorizontalSpeedAndBearing &) const;
    int operator != (const rnpHorizontalSpeedAndBearing &) const;

    bearing & get_bearing();
    bearing get_bearing() const;
    void set_bearing(bearing);

    horizontalSpeed & get_horizontalSpeed();
    horizontalSpeed get_horizontalSpeed() const;
    void set_horizontalSpeed(horizontalSpeed);
private:
    bearing bearing_field;
    horizontalSpeed horizontalSpeed_field;
};

typedef rnp__shared6 rnp_seqof318;

class OSS_PUBLIC rnpHorizontalVelocity   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnpHorizontalSpeedAndBearing horizontalSpeedAndBearing;
    typedef rnp__shared6 iE_Extensions;

    rnpHorizontalVelocity();
    rnpHorizontalVelocity(const rnpHorizontalVelocity &);
    rnpHorizontalVelocity(const horizontalSpeedAndBearing &, const iE_Extensions &);
    rnpHorizontalVelocity(const horizontalSpeedAndBearing &);

    rnpHorizontalVelocity & operator = (const rnpHorizontalVelocity &);
    int operator == (const rnpHorizontalVelocity &) const;
    int operator != (const rnpHorizontalVelocity &) const;

    horizontalSpeedAndBearing & get_horizontalSpeedAndBearing();
    const horizontalSpeedAndBearing & get_horizontalSpeedAndBearing() const;
    void set_horizontalSpeedAndBearing(const horizontalSpeedAndBearing &);

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    horizontalSpeedAndBearing horizontalSpeedAndBearing_field;
    iE_Extensions iE_Extensions_field;
};

class OSS_PUBLIC rnpVerticalVelocity   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 veritcalSpeed;
    typedef enum rnpVerticalSpeedDirection veritcalSpeedDirection;

    rnpVerticalVelocity();
    rnpVerticalVelocity(const rnpVerticalVelocity &);
    rnpVerticalVelocity(veritcalSpeed, veritcalSpeedDirection);

    rnpVerticalVelocity & operator = (const rnpVerticalVelocity &);
    int operator == (const rnpVerticalVelocity &) const;
    int operator != (const rnpVerticalVelocity &) const;

    veritcalSpeed & get_veritcalSpeed();
    veritcalSpeed get_veritcalSpeed() const;
    void set_veritcalSpeed(veritcalSpeed);

    veritcalSpeedDirection & get_veritcalSpeedDirection();
    veritcalSpeedDirection get_veritcalSpeedDirection() const;
    void set_veritcalSpeedDirection(veritcalSpeedDirection);
private:
    veritcalSpeed veritcalSpeed_field;
    veritcalSpeedDirection veritcalSpeedDirection_field;
};

typedef rnp__shared6 rnp_seqof319;

class OSS_PUBLIC rnpHorizontalWithVerticalVelocity   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnpHorizontalSpeedAndBearing horizontalSpeedAndBearing;
    typedef rnpVerticalVelocity veritcalVelocity;
    typedef rnp__shared6 iE_Extensions;

    rnpHorizontalWithVerticalVelocity();
    rnpHorizontalWithVerticalVelocity(const rnpHorizontalWithVerticalVelocity &);
    rnpHorizontalWithVerticalVelocity(const horizontalSpeedAndBearing &, const veritcalVelocity &, 
	const iE_Extensions &);
    rnpHorizontalWithVerticalVelocity(const horizontalSpeedAndBearing &, const veritcalVelocity &);

    rnpHorizontalWithVerticalVelocity & operator = (const rnpHorizontalWithVerticalVelocity &);
    int operator == (const rnpHorizontalWithVerticalVelocity &) const;
    int operator != (const rnpHorizontalWithVerticalVelocity &) const;

    horizontalSpeedAndBearing & get_horizontalSpeedAndBearing();
    const horizontalSpeedAndBearing & get_horizontalSpeedAndBearing() const;
    void set_horizontalSpeedAndBearing(const horizontalSpeedAndBearing &);

    veritcalVelocity & get_veritcalVelocity();
    const veritcalVelocity & get_veritcalVelocity() const;
    void set_veritcalVelocity(const veritcalVelocity &);

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    horizontalSpeedAndBearing horizontalSpeedAndBearing_field;
    veritcalVelocity veritcalVelocity_field;
    iE_Extensions iE_Extensions_field;
};

typedef rnp__shared6 rnp_seqof320;

class OSS_PUBLIC rnpHorizontalVelocityWithUncertainty   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnpHorizontalSpeedAndBearing horizontalSpeedAndBearing;
    typedef OSS_UINT32 uncertaintySpeed;
    typedef rnp__shared6 iE_Extensions;

    rnpHorizontalVelocityWithUncertainty();
    rnpHorizontalVelocityWithUncertainty(const rnpHorizontalVelocityWithUncertainty &);
    rnpHorizontalVelocityWithUncertainty(const horizontalSpeedAndBearing &, uncertaintySpeed, 
	const iE_Extensions &);
    rnpHorizontalVelocityWithUncertainty(const horizontalSpeedAndBearing &, uncertaintySpeed);

    rnpHorizontalVelocityWithUncertainty & operator = (const rnpHorizontalVelocityWithUncertainty &);
    int operator == (const rnpHorizontalVelocityWithUncertainty &) const;
    int operator != (const rnpHorizontalVelocityWithUncertainty &) const;

    horizontalSpeedAndBearing & get_horizontalSpeedAndBearing();
    const horizontalSpeedAndBearing & get_horizontalSpeedAndBearing() const;
    void set_horizontalSpeedAndBearing(const horizontalSpeedAndBearing &);

    uncertaintySpeed & get_uncertaintySpeed();
    uncertaintySpeed get_uncertaintySpeed() const;
    void set_uncertaintySpeed(uncertaintySpeed);

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    horizontalSpeedAndBearing horizontalSpeedAndBearing_field;
    uncertaintySpeed uncertaintySpeed_field;
    iE_Extensions iE_Extensions_field;
};

typedef rnp__shared6 rnp_seqof321;

class OSS_PUBLIC rnpHorizontalWithVerticalVelocityAndUncertainty   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnpHorizontalSpeedAndBearing horizontalSpeedAndBearing;
    typedef rnpVerticalVelocity veritcalVelocity;
    typedef OSS_UINT32 horizontalUncertaintySpeed;
    typedef OSS_UINT32 verticalUncertaintySpeed;
    typedef rnp__shared6 iE_Extensions;

    rnpHorizontalWithVerticalVelocityAndUncertainty();
    rnpHorizontalWithVerticalVelocityAndUncertainty(const rnpHorizontalWithVerticalVelocityAndUncertainty &);
    rnpHorizontalWithVerticalVelocityAndUncertainty(const horizontalSpeedAndBearing &, 
	const veritcalVelocity &, horizontalUncertaintySpeed, verticalUncertaintySpeed, const iE_Extensions &);
    rnpHorizontalWithVerticalVelocityAndUncertainty(const horizontalSpeedAndBearing &, 
	const veritcalVelocity &, horizontalUncertaintySpeed, verticalUncertaintySpeed);

    rnpHorizontalWithVerticalVelocityAndUncertainty & operator = (const rnpHorizontalWithVerticalVelocityAndUncertainty &);
    int operator == (const rnpHorizontalWithVerticalVelocityAndUncertainty &) const;
    int operator != (const rnpHorizontalWithVerticalVelocityAndUncertainty &) const;

    horizontalSpeedAndBearing & get_horizontalSpeedAndBearing();
    const horizontalSpeedAndBearing & get_horizontalSpeedAndBearing() const;
    void set_horizontalSpeedAndBearing(const horizontalSpeedAndBearing &);

    veritcalVelocity & get_veritcalVelocity();
    const veritcalVelocity & get_veritcalVelocity() const;
    void set_veritcalVelocity(const veritcalVelocity &);

    horizontalUncertaintySpeed & get_horizontalUncertaintySpeed();
    horizontalUncertaintySpeed get_horizontalUncertaintySpeed() const;
    void set_horizontalUncertaintySpeed(horizontalUncertaintySpeed);

    verticalUncertaintySpeed & get_verticalUncertaintySpeed();
    verticalUncertaintySpeed get_verticalUncertaintySpeed() const;
    void set_verticalUncertaintySpeed(verticalUncertaintySpeed);

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    horizontalSpeedAndBearing horizontalSpeedAndBearing_field;
    veritcalVelocity veritcalVelocity_field;
    horizontalUncertaintySpeed horizontalUncertaintySpeed_field;
    verticalUncertaintySpeed verticalUncertaintySpeed_field;
    iE_Extensions iE_Extensions_field;
};

class OSS_PUBLIC rnpVelocityEstimate  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	horizontalVelocity_chosen = 1,
	horizontalWithVerticalVelocity_chosen = 2,
	horizontalVelocityWithUncertainty_chosen = 3,
	horizontalWithVeritcalVelocityAndUncertainty_chosen = 4
    };
    typedef rnpHorizontalVelocity horizontalVelocity;
    typedef rnpHorizontalWithVerticalVelocity horizontalWithVerticalVelocity;
    typedef rnpHorizontalVelocityWithUncertainty horizontalVelocityWithUncertainty;
    typedef rnpHorizontalWithVerticalVelocityAndUncertainty horizontalWithVeritcalVelocityAndUncertainty;

    rnpVelocityEstimate();
    rnpVelocityEstimate(const rnpVelocityEstimate &);
    ~rnpVelocityEstimate();

    rnpVelocityEstimate & operator = (const rnpVelocityEstimate &);
    int operator == (const rnpVelocityEstimate &) const;
    int operator != (const rnpVelocityEstimate &) const;

    horizontalVelocity *get_horizontalVelocity();
    const horizontalVelocity *get_horizontalVelocity() const;
    void set_horizontalVelocity(const horizontalVelocity &);

    horizontalWithVerticalVelocity *get_horizontalWithVerticalVelocity();
    const horizontalWithVerticalVelocity *get_horizontalWithVerticalVelocity() const;
    void set_horizontalWithVerticalVelocity(const horizontalWithVerticalVelocity &);

    horizontalVelocityWithUncertainty *get_horizontalVelocityWithUncertainty();
    const horizontalVelocityWithUncertainty *get_horizontalVelocityWithUncertainty() const;
    void set_horizontalVelocityWithUncertainty(const horizontalVelocityWithUncertainty &);

    horizontalWithVeritcalVelocityAndUncertainty *get_horizontalWithVeritcalVelocityAndUncertainty();
    const horizontalWithVeritcalVelocityAndUncertainty *get_horizontalWithVeritcalVelocityAndUncertainty() const;
    void set_horizontalWithVeritcalVelocityAndUncertainty(const horizontalWithVeritcalVelocityAndUncertainty &);
private:
    union {
	horizontalVelocity *horizontalVelocity_field;
	horizontalWithVerticalVelocity *horizontalWithVerticalVelocity_field;
	horizontalVelocityWithUncertainty *horizontalVelocityWithUncertainty_field;
	horizontalWithVeritcalVelocityAndUncertainty *horizontalWithVeritcalVelocityAndUncertainty_field;
    };
    void cleanup();
};

class OSS_PUBLIC rnpLocationReportExtensions_Extension : public OssConstrainedOpenType
{
public:
    rnpLocationReportExtensions_Extension();
    rnpLocationReportExtensions_Extension(const rnpLocationReportExtensions_Extension &);
    ~rnpLocationReportExtensions_Extension();
    rnpLocationReportExtensions_Extension & operator = (const rnpLocationReportExtensions_Extension &);
    int operator == (const rnpLocationReportExtensions_Extension &) const;
    int operator != (const rnpLocationReportExtensions_Extension &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpLastKnownServiceArea *get_rnpLastKnownServiceArea();
    const rnpLastKnownServiceArea *get_rnpLastKnownServiceArea() const;
    void set_rnpLastKnownServiceArea(const rnpLastKnownServiceArea &);
    rnpLastKnownServiceArea *release_rnpLastKnownServiceArea();
    void set_rnpLastKnownServiceArea(rnpLastKnownServiceArea *);

    rnpPositionData *get_rnpPositionData();
    const rnpPositionData *get_rnpPositionData() const;
    void set_rnpPositionData(const rnpPositionData &);
    rnpPositionData *release_rnpPositionData();
    void set_rnpPositionData(rnpPositionData *);

    rnpPositionDataSpecificToGERANIuMode *get_rnpPositionDataSpecificToGERANIuMode();
    const rnpPositionDataSpecificToGERANIuMode *get_rnpPositionDataSpecificToGERANIuMode() const;
    void set_rnpPositionDataSpecificToGERANIuMode(const rnpPositionDataSpecificToGERANIuMode &);
    rnpPositionDataSpecificToGERANIuMode *release_rnpPositionDataSpecificToGERANIuMode();
    void set_rnpPositionDataSpecificToGERANIuMode(rnpPositionDataSpecificToGERANIuMode *);

    rnpAccuracyFulfilmentIndicator *get_rnpAccuracyFulfilmentIndicator();
    const rnpAccuracyFulfilmentIndicator *get_rnpAccuracyFulfilmentIndicator() const;
    void set_rnpAccuracyFulfilmentIndicator(const rnpAccuracyFulfilmentIndicator &);
    rnpAccuracyFulfilmentIndicator *release_rnpAccuracyFulfilmentIndicator();
    void set_rnpAccuracyFulfilmentIndicator(rnpAccuracyFulfilmentIndicator *);

    rnpVelocityEstimate *get_rnpVelocityEstimate();
    const rnpVelocityEstimate *get_rnpVelocityEstimate() const;
    void set_rnpVelocityEstimate(const rnpVelocityEstimate &);
    rnpVelocityEstimate *release_rnpVelocityEstimate();
    void set_rnpVelocityEstimate(rnpVelocityEstimate *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq113   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpLocationReportIEs_Value value;

    rnp_seq113();
    rnp_seq113(const rnp_seq113 &);
    rnp_seq113(id, criticality, const value &);

    rnp_seq113 & operator = (const rnp_seq113 &);
    int operator == (const rnp_seq113 &) const;
    int operator != (const rnp_seq113 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

class OSS_PUBLIC rnp_seq114   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpLocationReportExtensions_Extension extensionValue;

    rnp_seq114();
    rnp_seq114(const rnp_seq114 &);
    rnp_seq114(id, criticality, const extensionValue &);

    rnp_seq114 & operator = (const rnp_seq114 &);
    int operator == (const rnp_seq114 &) const;
    int operator != (const rnp_seq114 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    extensionValue & get_extensionValue();
    const extensionValue & get_extensionValue() const;
    void set_extensionValue(const extensionValue &);
private:
    id id_field;
    criticality criticality_field;
    extensionValue extensionValue_field;
};

class OSS_PUBLIC rnpInitialUE_MessageIEs_Value : public OssConstrainedOpenType
{
public:
    rnpInitialUE_MessageIEs_Value();
    rnpInitialUE_MessageIEs_Value(const rnpInitialUE_MessageIEs_Value &);
    ~rnpInitialUE_MessageIEs_Value();
    rnpInitialUE_MessageIEs_Value & operator = (const rnpInitialUE_MessageIEs_Value &);
    int operator == (const rnpInitialUE_MessageIEs_Value &) const;
    int operator != (const rnpInitialUE_MessageIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpCN_DomainIndicator *get_rnpCN_DomainIndicator();
    const rnpCN_DomainIndicator *get_rnpCN_DomainIndicator() const;
    void set_rnpCN_DomainIndicator(const rnpCN_DomainIndicator &);
    rnpCN_DomainIndicator *release_rnpCN_DomainIndicator();
    void set_rnpCN_DomainIndicator(rnpCN_DomainIndicator *);

    rnpLAI *get_rnpLAI();
    const rnpLAI *get_rnpLAI() const;
    void set_rnpLAI(const rnpLAI &);
    rnpLAI *release_rnpLAI();
    void set_rnpLAI(rnpLAI *);

    rnpRAC *get_rnpRAC();
    const rnpRAC *get_rnpRAC() const;
    void set_rnpRAC(const rnpRAC &);
    rnpRAC *release_rnpRAC();
    void set_rnpRAC(rnpRAC *);

    rnpSAI *get_rnpSAI();
    const rnpSAI *get_rnpSAI() const;
    void set_rnpSAI(const rnpSAI &);
    rnpSAI *release_rnpSAI();
    void set_rnpSAI(rnpSAI *);

    rnpNAS_PDU *get_rnpNAS_PDU();
    const rnpNAS_PDU *get_rnpNAS_PDU() const;
    void set_rnpNAS_PDU(const rnpNAS_PDU &);
    rnpNAS_PDU *release_rnpNAS_PDU();
    void set_rnpNAS_PDU(rnpNAS_PDU *);

    rnpIuSignallingConnectionIdentifier *get_rnpIuSignallingConnectionIdentifier();
    const rnpIuSignallingConnectionIdentifier *get_rnpIuSignallingConnectionIdentifier() const;
    void set_rnpIuSignallingConnectionIdentifier(const rnpIuSignallingConnectionIdentifier &);
    rnpIuSignallingConnectionIdentifier *release_rnpIuSignallingConnectionIdentifier();
    void set_rnpIuSignallingConnectionIdentifier(rnpIuSignallingConnectionIdentifier *);

    rnpGlobalRNC_ID *get_rnpGlobalRNC_ID();
    const rnpGlobalRNC_ID *get_rnpGlobalRNC_ID() const;
    void set_rnpGlobalRNC_ID(const rnpGlobalRNC_ID &);
    rnpGlobalRNC_ID *release_rnpGlobalRNC_ID();
    void set_rnpGlobalRNC_ID(rnpGlobalRNC_ID *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnpInitialUE_MessageExtensions_Extension : public OssConstrainedOpenType
{
public:
    rnpInitialUE_MessageExtensions_Extension();
    rnpInitialUE_MessageExtensions_Extension(const rnpInitialUE_MessageExtensions_Extension &);
    ~rnpInitialUE_MessageExtensions_Extension();
    rnpInitialUE_MessageExtensions_Extension & operator = (const rnpInitialUE_MessageExtensions_Extension &);
    int operator == (const rnpInitialUE_MessageExtensions_Extension &) const;
    int operator != (const rnpInitialUE_MessageExtensions_Extension &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpGERAN_Classmark *get_rnpGERAN_Classmark();
    const rnpGERAN_Classmark *get_rnpGERAN_Classmark() const;
    void set_rnpGERAN_Classmark(const rnpGERAN_Classmark &);
    rnpGERAN_Classmark *release_rnpGERAN_Classmark();
    void set_rnpGERAN_Classmark(rnpGERAN_Classmark *);

    rnpPLMNidentity *get_rnpPLMNidentity();
    const rnpPLMNidentity *get_rnpPLMNidentity() const;
    void set_rnpPLMNidentity(const rnpPLMNidentity &);
    rnpPLMNidentity *release_rnpPLMNidentity();
    void set_rnpPLMNidentity(rnpPLMNidentity *);

    rnpPermanentNAS_UE_ID *get_rnpPermanentNAS_UE_ID();
    const rnpPermanentNAS_UE_ID *get_rnpPermanentNAS_UE_ID() const;
    void set_rnpPermanentNAS_UE_ID(const rnpPermanentNAS_UE_ID &);
    rnpPermanentNAS_UE_ID *release_rnpPermanentNAS_UE_ID();
    void set_rnpPermanentNAS_UE_ID(rnpPermanentNAS_UE_ID *);

    rnpNAS_SequenceNumber *get_rnpNAS_SequenceNumber();
    const rnpNAS_SequenceNumber *get_rnpNAS_SequenceNumber() const;
    void set_rnpNAS_SequenceNumber(const rnpNAS_SequenceNumber &);
    rnpNAS_SequenceNumber *release_rnpNAS_SequenceNumber();
    void set_rnpNAS_SequenceNumber(rnpNAS_SequenceNumber *);

    rnpRedirectAttemptFlag *get_rnpRedirectAttemptFlag();
    const rnpRedirectAttemptFlag *get_rnpRedirectAttemptFlag() const;
    void set_rnpRedirectAttemptFlag(const rnpRedirectAttemptFlag &);
    rnpRedirectAttemptFlag *release_rnpRedirectAttemptFlag();
    void set_rnpRedirectAttemptFlag(rnpRedirectAttemptFlag *);

    rnpExtendedRNC_ID *get_rnpExtendedRNC_ID();
    const rnpExtendedRNC_ID *get_rnpExtendedRNC_ID() const;
    void set_rnpExtendedRNC_ID(const rnpExtendedRNC_ID &);
    rnpExtendedRNC_ID *release_rnpExtendedRNC_ID();
    void set_rnpExtendedRNC_ID(rnpExtendedRNC_ID *);

    rnpCSG_Id *get_rnpCSG_Id();
    const rnpCSG_Id *get_rnpCSG_Id() const;
    void set_rnpCSG_Id(const rnpCSG_Id &);
    rnpCSG_Id *release_rnpCSG_Id();
    void set_rnpCSG_Id(rnpCSG_Id *);

    rnpCell_Access_Mode *get_rnpCell_Access_Mode();
    const rnpCell_Access_Mode *get_rnpCell_Access_Mode() const;
    void set_rnpCell_Access_Mode(const rnpCell_Access_Mode &);
    rnpCell_Access_Mode *release_rnpCell_Access_Mode();
    void set_rnpCell_Access_Mode(rnpCell_Access_Mode *);

    rnpTransportLayerAddress *get_rnpTransportLayerAddress();
    const rnpTransportLayerAddress *get_rnpTransportLayerAddress() const;
    void set_rnpTransportLayerAddress(const rnpTransportLayerAddress &);
    rnpTransportLayerAddress *release_rnpTransportLayerAddress();
    void set_rnpTransportLayerAddress(rnpTransportLayerAddress *);

    rnpHigherBitratesThan16MbpsFlag *get_rnpHigherBitratesThan16MbpsFlag();
    const rnpHigherBitratesThan16MbpsFlag *get_rnpHigherBitratesThan16MbpsFlag() const;
    void set_rnpHigherBitratesThan16MbpsFlag(const rnpHigherBitratesThan16MbpsFlag &);
    rnpHigherBitratesThan16MbpsFlag *release_rnpHigherBitratesThan16MbpsFlag();
    void set_rnpHigherBitratesThan16MbpsFlag(rnpHigherBitratesThan16MbpsFlag *);

    rnpTunnelInformation *get_rnpTunnelInformation();
    const rnpTunnelInformation *get_rnpTunnelInformation() const;
    void set_rnpTunnelInformation(const rnpTunnelInformation &);
    rnpTunnelInformation *release_rnpTunnelInformation();
    void set_rnpTunnelInformation(rnpTunnelInformation *);

    rnpLHN_ID *get_rnpLHN_ID();
    const rnpLHN_ID *get_rnpLHN_ID() const;
    void set_rnpLHN_ID(const rnpLHN_ID &);
    rnpLHN_ID *release_rnpLHN_ID();
    void set_rnpLHN_ID(rnpLHN_ID *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq115   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpInitialUE_MessageIEs_Value value;

    rnp_seq115();
    rnp_seq115(const rnp_seq115 &);
    rnp_seq115(id, criticality, const value &);

    rnp_seq115 & operator = (const rnp_seq115 &);
    int operator == (const rnp_seq115 &) const;
    int operator != (const rnp_seq115 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

class OSS_PUBLIC rnp_seq116   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpInitialUE_MessageExtensions_Extension extensionValue;

    rnp_seq116();
    rnp_seq116(const rnp_seq116 &);
    rnp_seq116(id, criticality, const extensionValue &);

    rnp_seq116 & operator = (const rnp_seq116 &);
    int operator == (const rnp_seq116 &) const;
    int operator != (const rnp_seq116 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    extensionValue & get_extensionValue();
    const extensionValue & get_extensionValue() const;
    void set_extensionValue(const extensionValue &);
private:
    id id_field;
    criticality criticality_field;
    extensionValue extensionValue_field;
};

class OSS_PUBLIC rnpDirectTransferIEs_Value : public OssConstrainedOpenType
{
public:
    rnpDirectTransferIEs_Value();
    rnpDirectTransferIEs_Value(const rnpDirectTransferIEs_Value &);
    ~rnpDirectTransferIEs_Value();
    rnpDirectTransferIEs_Value & operator = (const rnpDirectTransferIEs_Value &);
    int operator == (const rnpDirectTransferIEs_Value &) const;
    int operator != (const rnpDirectTransferIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpNAS_PDU *get_rnpNAS_PDU();
    const rnpNAS_PDU *get_rnpNAS_PDU() const;
    void set_rnpNAS_PDU(const rnpNAS_PDU &);
    rnpNAS_PDU *release_rnpNAS_PDU();
    void set_rnpNAS_PDU(rnpNAS_PDU *);

    rnpLAI *get_rnpLAI();
    const rnpLAI *get_rnpLAI() const;
    void set_rnpLAI(const rnpLAI &);
    rnpLAI *release_rnpLAI();
    void set_rnpLAI(rnpLAI *);

    rnpRAC *get_rnpRAC();
    const rnpRAC *get_rnpRAC() const;
    void set_rnpRAC(const rnpRAC &);
    rnpRAC *release_rnpRAC();
    void set_rnpRAC(rnpRAC *);

    rnpSAI *get_rnpSAI();
    const rnpSAI *get_rnpSAI() const;
    void set_rnpSAI(const rnpSAI &);
    rnpSAI *release_rnpSAI();
    void set_rnpSAI(rnpSAI *);

    rnpSAPI *get_rnpSAPI();
    const rnpSAPI *get_rnpSAPI() const;
    void set_rnpSAPI(const rnpSAPI &);
    rnpSAPI *release_rnpSAPI();
    void set_rnpSAPI(rnpSAPI *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq119;

class OSS_PUBLIC rnpRedirectionIndication : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq119 component;

    rnpRedirectionIndication();
    rnpRedirectionIndication(const rnpRedirectionIndication &);
    ~rnpRedirectionIndication();

    rnpRedirectionIndication & operator = (const rnpRedirectionIndication &);
    int operator == (const rnpRedirectionIndication &) const;
    int operator != (const rnpRedirectionIndication &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnpRedirectionIndication *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnpRedirectionIndication *);

    int remove_front();
    int remove_after(OssIndex);

    rnpRedirectionIndication *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpDirectTransferExtensions_Extension : public OssConstrainedOpenType
{
public:
    rnpDirectTransferExtensions_Extension();
    rnpDirectTransferExtensions_Extension(const rnpDirectTransferExtensions_Extension &);
    ~rnpDirectTransferExtensions_Extension();
    rnpDirectTransferExtensions_Extension & operator = (const rnpDirectTransferExtensions_Extension &);
    int operator == (const rnpDirectTransferExtensions_Extension &) const;
    int operator != (const rnpDirectTransferExtensions_Extension &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpRedirectionIndication *get_rnpRedirectionIndication();
    const rnpRedirectionIndication *get_rnpRedirectionIndication() const;
    void set_rnpRedirectionIndication(const rnpRedirectionIndication &);
    rnpRedirectionIndication *release_rnpRedirectionIndication();
    void set_rnpRedirectionIndication(rnpRedirectionIndication *);

    rnpRedirectionCompleted *get_rnpRedirectionCompleted();
    const rnpRedirectionCompleted *get_rnpRedirectionCompleted() const;
    void set_rnpRedirectionCompleted(const rnpRedirectionCompleted &);
    rnpRedirectionCompleted *release_rnpRedirectionCompleted();
    void set_rnpRedirectionCompleted(rnpRedirectionCompleted *);

    rnpSubscriberProfileIDforRFP *get_rnpSubscriberProfileIDforRFP();
    const rnpSubscriberProfileIDforRFP *get_rnpSubscriberProfileIDforRFP() const;
    void set_rnpSubscriberProfileIDforRFP(const rnpSubscriberProfileIDforRFP &);
    rnpSubscriberProfileIDforRFP *release_rnpSubscriberProfileIDforRFP();
    void set_rnpSubscriberProfileIDforRFP(rnpSubscriberProfileIDforRFP *);

    rnpTransportLayerAddress *get_rnpTransportLayerAddress();
    const rnpTransportLayerAddress *get_rnpTransportLayerAddress() const;
    void set_rnpTransportLayerAddress(const rnpTransportLayerAddress &);
    rnpTransportLayerAddress *release_rnpTransportLayerAddress();
    void set_rnpTransportLayerAddress(rnpTransportLayerAddress *);

    rnpLHN_ID *get_rnpLHN_ID();
    const rnpLHN_ID *get_rnpLHN_ID() const;
    void set_rnpLHN_ID(const rnpLHN_ID &);
    rnpLHN_ID *release_rnpLHN_ID();
    void set_rnpLHN_ID(rnpLHN_ID *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq117   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpDirectTransferIEs_Value value;

    rnp_seq117();
    rnp_seq117(const rnp_seq117 &);
    rnp_seq117(id, criticality, const value &);

    rnp_seq117 & operator = (const rnp_seq117 &);
    int operator == (const rnp_seq117 &) const;
    int operator != (const rnp_seq117 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

class OSS_PUBLIC rnp_seq118   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpDirectTransferExtensions_Extension extensionValue;

    rnp_seq118();
    rnp_seq118(const rnp_seq118 &);
    rnp_seq118(id, criticality, const extensionValue &);

    rnp_seq118 & operator = (const rnp_seq118 &);
    int operator == (const rnp_seq118 &) const;
    int operator != (const rnp_seq118 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    extensionValue & get_extensionValue();
    const extensionValue & get_extensionValue() const;
    void set_extensionValue(const extensionValue &);
private:
    id id_field;
    criticality criticality_field;
    extensionValue extensionValue_field;
};

class OSS_PUBLIC rnpRedirectionIndication_IEs_Value : public OssConstrainedOpenType
{
public:
    rnpRedirectionIndication_IEs_Value();
    rnpRedirectionIndication_IEs_Value(const rnpRedirectionIndication_IEs_Value &);
    ~rnpRedirectionIndication_IEs_Value();
    rnpRedirectionIndication_IEs_Value & operator = (const rnpRedirectionIndication_IEs_Value &);
    int operator == (const rnpRedirectionIndication_IEs_Value &) const;
    int operator != (const rnpRedirectionIndication_IEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpNAS_PDU *get_rnpNAS_PDU();
    const rnpNAS_PDU *get_rnpNAS_PDU() const;
    void set_rnpNAS_PDU(const rnpNAS_PDU &);
    rnpNAS_PDU *release_rnpNAS_PDU();
    void set_rnpNAS_PDU(rnpNAS_PDU *);

    rnpRejectCauseValue *get_rnpRejectCauseValue();
    const rnpRejectCauseValue *get_rnpRejectCauseValue() const;
    void set_rnpRejectCauseValue(const rnpRejectCauseValue &);
    rnpRejectCauseValue *release_rnpRejectCauseValue();
    void set_rnpRejectCauseValue(rnpRejectCauseValue *);

    rnpNAS_SequenceNumber *get_rnpNAS_SequenceNumber();
    const rnpNAS_SequenceNumber *get_rnpNAS_SequenceNumber() const;
    void set_rnpNAS_SequenceNumber(const rnpNAS_SequenceNumber &);
    rnpNAS_SequenceNumber *release_rnpNAS_SequenceNumber();
    void set_rnpNAS_SequenceNumber(rnpNAS_SequenceNumber *);

    rnpPermanentNAS_UE_ID *get_rnpPermanentNAS_UE_ID();
    const rnpPermanentNAS_UE_ID *get_rnpPermanentNAS_UE_ID() const;
    void set_rnpPermanentNAS_UE_ID(const rnpPermanentNAS_UE_ID &);
    rnpPermanentNAS_UE_ID *release_rnpPermanentNAS_UE_ID();
    void set_rnpPermanentNAS_UE_ID(rnpPermanentNAS_UE_ID *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq119   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpRedirectionIndication_IEs_Value value;

    rnp_seq119();
    rnp_seq119(const rnp_seq119 &);
    rnp_seq119(id, criticality, const value &);

    rnp_seq119 & operator = (const rnp_seq119 &);
    int operator == (const rnp_seq119 &) const;
    int operator != (const rnp_seq119 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

class OSS_PUBLIC rnpOverloadIEs_Value : public OssConstrainedOpenType
{
public:
    rnpOverloadIEs_Value();
    rnpOverloadIEs_Value(const rnpOverloadIEs_Value &);
    ~rnpOverloadIEs_Value();
    rnpOverloadIEs_Value & operator = (const rnpOverloadIEs_Value &);
    int operator == (const rnpOverloadIEs_Value &) const;
    int operator != (const rnpOverloadIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpNumberOfSteps *get_rnpNumberOfSteps();
    const rnpNumberOfSteps *get_rnpNumberOfSteps() const;
    void set_rnpNumberOfSteps(const rnpNumberOfSteps &);
    rnpNumberOfSteps *release_rnpNumberOfSteps();
    void set_rnpNumberOfSteps(rnpNumberOfSteps *);

    rnpGlobalRNC_ID *get_rnpGlobalRNC_ID();
    const rnpGlobalRNC_ID *get_rnpGlobalRNC_ID() const;
    void set_rnpGlobalRNC_ID(const rnpGlobalRNC_ID &);
    rnpGlobalRNC_ID *release_rnpGlobalRNC_ID();
    void set_rnpGlobalRNC_ID(rnpGlobalRNC_ID *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnpOverloadExtensions_Extension : public OssConstrainedOpenType
{
public:
    rnpOverloadExtensions_Extension();
    rnpOverloadExtensions_Extension(const rnpOverloadExtensions_Extension &);
    ~rnpOverloadExtensions_Extension();
    rnpOverloadExtensions_Extension & operator = (const rnpOverloadExtensions_Extension &);
    int operator == (const rnpOverloadExtensions_Extension &) const;
    int operator != (const rnpOverloadExtensions_Extension &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpCN_DomainIndicator *get_rnpCN_DomainIndicator();
    const rnpCN_DomainIndicator *get_rnpCN_DomainIndicator() const;
    void set_rnpCN_DomainIndicator(const rnpCN_DomainIndicator &);
    rnpCN_DomainIndicator *release_rnpCN_DomainIndicator();
    void set_rnpCN_DomainIndicator(rnpCN_DomainIndicator *);

    rnpGlobalCN_ID *get_rnpGlobalCN_ID();
    const rnpGlobalCN_ID *get_rnpGlobalCN_ID() const;
    void set_rnpGlobalCN_ID(const rnpGlobalCN_ID &);
    rnpGlobalCN_ID *release_rnpGlobalCN_ID();
    void set_rnpGlobalCN_ID(rnpGlobalCN_ID *);

    rnpExtendedRNC_ID *get_rnpExtendedRNC_ID();
    const rnpExtendedRNC_ID *get_rnpExtendedRNC_ID() const;
    void set_rnpExtendedRNC_ID(const rnpExtendedRNC_ID &);
    rnpExtendedRNC_ID *release_rnpExtendedRNC_ID();
    void set_rnpExtendedRNC_ID(rnpExtendedRNC_ID *);

    rnpPriority_Class_Indicator *get_rnpPriority_Class_Indicator();
    const rnpPriority_Class_Indicator *get_rnpPriority_Class_Indicator() const;
    void set_rnpPriority_Class_Indicator(const rnpPriority_Class_Indicator &);
    rnpPriority_Class_Indicator *release_rnpPriority_Class_Indicator();
    void set_rnpPriority_Class_Indicator(rnpPriority_Class_Indicator *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq120   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpOverloadIEs_Value value;

    rnp_seq120();
    rnp_seq120(const rnp_seq120 &);
    rnp_seq120(id, criticality, const value &);

    rnp_seq120 & operator = (const rnp_seq120 &);
    int operator == (const rnp_seq120 &) const;
    int operator != (const rnp_seq120 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

class OSS_PUBLIC rnp_seq121   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpOverloadExtensions_Extension extensionValue;

    rnp_seq121();
    rnp_seq121(const rnp_seq121 &);
    rnp_seq121(id, criticality, const extensionValue &);

    rnp_seq121 & operator = (const rnp_seq121 &);
    int operator == (const rnp_seq121 &) const;
    int operator != (const rnp_seq121 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    extensionValue & get_extensionValue();
    const extensionValue & get_extensionValue() const;
    void set_extensionValue(const extensionValue &);
private:
    id id_field;
    criticality criticality_field;
    extensionValue extensionValue_field;
};

class OSS_PUBLIC rnpErrorIndicationIEs_Value : public OssConstrainedOpenType
{
public:
    rnpErrorIndicationIEs_Value();
    rnpErrorIndicationIEs_Value(const rnpErrorIndicationIEs_Value &);
    ~rnpErrorIndicationIEs_Value();
    rnpErrorIndicationIEs_Value & operator = (const rnpErrorIndicationIEs_Value &);
    int operator == (const rnpErrorIndicationIEs_Value &) const;
    int operator != (const rnpErrorIndicationIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpCause *get_rnpCause();
    const rnpCause *get_rnpCause() const;
    void set_rnpCause(const rnpCause &);
    rnpCause *release_rnpCause();
    void set_rnpCause(rnpCause *);

    rnpCriticalityDiagnostics *get_rnpCriticalityDiagnostics();
    const rnpCriticalityDiagnostics *get_rnpCriticalityDiagnostics() const;
    void set_rnpCriticalityDiagnostics(const rnpCriticalityDiagnostics &);
    rnpCriticalityDiagnostics *release_rnpCriticalityDiagnostics();
    void set_rnpCriticalityDiagnostics(rnpCriticalityDiagnostics *);

    rnpCN_DomainIndicator *get_rnpCN_DomainIndicator();
    const rnpCN_DomainIndicator *get_rnpCN_DomainIndicator() const;
    void set_rnpCN_DomainIndicator(const rnpCN_DomainIndicator &);
    rnpCN_DomainIndicator *release_rnpCN_DomainIndicator();
    void set_rnpCN_DomainIndicator(rnpCN_DomainIndicator *);

    rnpGlobalRNC_ID *get_rnpGlobalRNC_ID();
    const rnpGlobalRNC_ID *get_rnpGlobalRNC_ID() const;
    void set_rnpGlobalRNC_ID(const rnpGlobalRNC_ID &);
    rnpGlobalRNC_ID *release_rnpGlobalRNC_ID();
    void set_rnpGlobalRNC_ID(rnpGlobalRNC_ID *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq122   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpErrorIndicationIEs_Value value;

    rnp_seq122();
    rnp_seq122(const rnp_seq122 &);
    rnp_seq122(id, criticality, const value &);

    rnp_seq122 & operator = (const rnp_seq122 &);
    int operator == (const rnp_seq122 &) const;
    int operator != (const rnp_seq122 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

typedef rnp__shared20 rnp_seq123;

class OSS_PUBLIC rnpSRNS_DataForwardCommandIEs_Value : public OssConstrainedOpenType
{
public:
    rnpSRNS_DataForwardCommandIEs_Value();
    rnpSRNS_DataForwardCommandIEs_Value(const rnpSRNS_DataForwardCommandIEs_Value &);
    ~rnpSRNS_DataForwardCommandIEs_Value();
    rnpSRNS_DataForwardCommandIEs_Value & operator = (const rnpSRNS_DataForwardCommandIEs_Value &);
    int operator == (const rnpSRNS_DataForwardCommandIEs_Value &) const;
    int operator != (const rnpSRNS_DataForwardCommandIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpRAB_DataForwardingList *get_rnpRAB_DataForwardingList();
    const rnpRAB_DataForwardingList *get_rnpRAB_DataForwardingList() const;
    void set_rnpRAB_DataForwardingList(const rnpRAB_DataForwardingList &);
    rnpRAB_DataForwardingList *release_rnpRAB_DataForwardingList();
    void set_rnpRAB_DataForwardingList(rnpRAB_DataForwardingList *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq124   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpSRNS_DataForwardCommandIEs_Value value;

    rnp_seq124();
    rnp_seq124(const rnp_seq124 &);
    rnp_seq124(id, criticality, const value &);

    rnp_seq124 & operator = (const rnp_seq124 &);
    int operator == (const rnp_seq124 &) const;
    int operator != (const rnp_seq124 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

typedef rnp__shared5 rnp_seq125;

class OSS_PUBLIC rnpForwardSRNS_ContextIEs_Value : public OssConstrainedOpenType
{
public:
    rnpForwardSRNS_ContextIEs_Value();
    rnpForwardSRNS_ContextIEs_Value(const rnpForwardSRNS_ContextIEs_Value &);
    ~rnpForwardSRNS_ContextIEs_Value();
    rnpForwardSRNS_ContextIEs_Value & operator = (const rnpForwardSRNS_ContextIEs_Value &);
    int operator == (const rnpForwardSRNS_ContextIEs_Value &) const;
    int operator != (const rnpForwardSRNS_ContextIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpRAB_ContextList *get_rnpRAB_ContextList();
    const rnpRAB_ContextList *get_rnpRAB_ContextList() const;
    void set_rnpRAB_ContextList(const rnpRAB_ContextList &);
    rnpRAB_ContextList *release_rnpRAB_ContextList();
    void set_rnpRAB_ContextList(rnpRAB_ContextList *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnpForwardSRNS_ContextExtensions_Extension : public OssConstrainedOpenType
{
public:
    rnpForwardSRNS_ContextExtensions_Extension();
    rnpForwardSRNS_ContextExtensions_Extension(const rnpForwardSRNS_ContextExtensions_Extension &);
    ~rnpForwardSRNS_ContextExtensions_Extension();
    rnpForwardSRNS_ContextExtensions_Extension & operator = (const rnpForwardSRNS_ContextExtensions_Extension &);
    int operator == (const rnpForwardSRNS_ContextExtensions_Extension &) const;
    int operator != (const rnpForwardSRNS_ContextExtensions_Extension &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpRRC_Container *get_rnpRRC_Container();
    const rnpRRC_Container *get_rnpRRC_Container() const;
    void set_rnpRRC_Container(const rnpRRC_Container &);
    rnpRRC_Container *release_rnpRRC_Container();
    void set_rnpRRC_Container(rnpRRC_Container *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq126   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpForwardSRNS_ContextIEs_Value value;

    rnp_seq126();
    rnp_seq126(const rnp_seq126 &);
    rnp_seq126(id, criticality, const value &);

    rnp_seq126 & operator = (const rnp_seq126 &);
    int operator == (const rnp_seq126 &) const;
    int operator != (const rnp_seq126 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

class OSS_PUBLIC rnp_seq127   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpForwardSRNS_ContextExtensions_Extension extensionValue;

    rnp_seq127();
    rnp_seq127(const rnp_seq127 &);
    rnp_seq127(id, criticality, const extensionValue &);

    rnp_seq127 & operator = (const rnp_seq127 &);
    int operator == (const rnp_seq127 &) const;
    int operator != (const rnp_seq127 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    extensionValue & get_extensionValue();
    const extensionValue & get_extensionValue() const;
    void set_extensionValue(const extensionValue &);
private:
    id id_field;
    criticality criticality_field;
    extensionValue extensionValue_field;
};

class OSS_PUBLIC rnp_seqof128;

class OSS_PUBLIC rnpRAB_SetupOrModifyList : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seqof128 component;

    rnpRAB_SetupOrModifyList();
    rnpRAB_SetupOrModifyList(const rnpRAB_SetupOrModifyList &);
    ~rnpRAB_SetupOrModifyList();

    rnpRAB_SetupOrModifyList & operator = (const rnpRAB_SetupOrModifyList &);
    int operator == (const rnpRAB_SetupOrModifyList &) const;
    int operator != (const rnpRAB_SetupOrModifyList &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnpRAB_SetupOrModifyList *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnpRAB_SetupOrModifyList *);

    int remove_front();
    int remove_after(OssIndex);

    rnpRAB_SetupOrModifyList *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpRAB_AssignmentRequestIEs_Value : public OssConstrainedOpenType
{
public:
    rnpRAB_AssignmentRequestIEs_Value();
    rnpRAB_AssignmentRequestIEs_Value(const rnpRAB_AssignmentRequestIEs_Value &);
    ~rnpRAB_AssignmentRequestIEs_Value();
    rnpRAB_AssignmentRequestIEs_Value & operator = (const rnpRAB_AssignmentRequestIEs_Value &);
    int operator == (const rnpRAB_AssignmentRequestIEs_Value &) const;
    int operator != (const rnpRAB_AssignmentRequestIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpRAB_SetupOrModifyList *get_rnpRAB_SetupOrModifyList();
    const rnpRAB_SetupOrModifyList *get_rnpRAB_SetupOrModifyList() const;
    void set_rnpRAB_SetupOrModifyList(const rnpRAB_SetupOrModifyList &);
    rnpRAB_SetupOrModifyList *release_rnpRAB_SetupOrModifyList();
    void set_rnpRAB_SetupOrModifyList(rnpRAB_SetupOrModifyList *);

    rnpRAB_ReleaseList *get_rnpRAB_ReleaseList();
    const rnpRAB_ReleaseList *get_rnpRAB_ReleaseList() const;
    void set_rnpRAB_ReleaseList(const rnpRAB_ReleaseList &);
    rnpRAB_ReleaseList *release_rnpRAB_ReleaseList();
    void set_rnpRAB_ReleaseList(rnpRAB_ReleaseList *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnpRAB_AssignmentRequestExtensions_Extension : public OssConstrainedOpenType
{
public:
    rnpRAB_AssignmentRequestExtensions_Extension();
    rnpRAB_AssignmentRequestExtensions_Extension(const rnpRAB_AssignmentRequestExtensions_Extension &);
    ~rnpRAB_AssignmentRequestExtensions_Extension();
    rnpRAB_AssignmentRequestExtensions_Extension & operator = (const rnpRAB_AssignmentRequestExtensions_Extension &);
    int operator == (const rnpRAB_AssignmentRequestExtensions_Extension &) const;
    int operator != (const rnpRAB_AssignmentRequestExtensions_Extension &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpUE_AggregateMaximumBitRate *get_rnpUE_AggregateMaximumBitRate();
    const rnpUE_AggregateMaximumBitRate *get_rnpUE_AggregateMaximumBitRate() const;
    void set_rnpUE_AggregateMaximumBitRate(const rnpUE_AggregateMaximumBitRate &);
    rnpUE_AggregateMaximumBitRate *release_rnpUE_AggregateMaximumBitRate();
    void set_rnpUE_AggregateMaximumBitRate(rnpUE_AggregateMaximumBitRate *);

    rnpMSISDN *get_rnpMSISDN();
    const rnpMSISDN *get_rnpMSISDN() const;
    void set_rnpMSISDN(const rnpMSISDN &);
    rnpMSISDN *release_rnpMSISDN();
    void set_rnpMSISDN(rnpMSISDN *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq128   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpRAB_AssignmentRequestIEs_Value value;

    rnp_seq128();
    rnp_seq128(const rnp_seq128 &);
    rnp_seq128(id, criticality, const value &);

    rnp_seq128 & operator = (const rnp_seq128 &);
    int operator == (const rnp_seq128 &) const;
    int operator != (const rnp_seq128 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

class OSS_PUBLIC rnp_seq129   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpRAB_AssignmentRequestExtensions_Extension extensionValue;

    rnp_seq129();
    rnp_seq129(const rnp_seq129 &);
    rnp_seq129(id, criticality, const extensionValue &);

    rnp_seq129 & operator = (const rnp_seq129 &);
    int operator == (const rnp_seq129 &) const;
    int operator != (const rnp_seq129 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    extensionValue & get_extensionValue();
    const extensionValue & get_extensionValue() const;
    void set_extensionValue(const extensionValue &);
private:
    id id_field;
    criticality criticality_field;
    extensionValue extensionValue_field;
};

typedef rnp__shared6 rnp_seqof129;

class OSS_PUBLIC rnp__shared35   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssBitString transportLayerAddress;
    typedef rnpIuTransportAssociation iuTransportAssociation;
    typedef rnp__shared6 iE_Extensions;

    rnp__shared35();
    rnp__shared35(const rnp__shared35 &);
    rnp__shared35(const transportLayerAddress &, const iuTransportAssociation &, 
	const iE_Extensions &);
    rnp__shared35(const transportLayerAddress &, const iuTransportAssociation &);

    rnp__shared35 & operator = (const rnp__shared35 &);
    int operator == (const rnp__shared35 &) const;
    int operator != (const rnp__shared35 &) const;

    transportLayerAddress & get_transportLayerAddress();
    const transportLayerAddress & get_transportLayerAddress() const;
    void set_transportLayerAddress(const transportLayerAddress &);

    iuTransportAssociation & get_iuTransportAssociation();
    const iuTransportAssociation & get_iuTransportAssociation() const;
    void set_iuTransportAssociation(const iuTransportAssociation &);

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    transportLayerAddress transportLayerAddress_field;
    iuTransportAssociation iuTransportAssociation_field;
    iE_Extensions iE_Extensions_field;
};

typedef rnp__shared35 rnpTransportLayerInformation;

class OSS_PUBLIC rnp_seq131;

class OSS_PUBLIC rnp_seqof130 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq131 component;

    rnp_seqof130();
    rnp_seqof130(const rnp_seqof130 &);
    ~rnp_seqof130();

    rnp_seqof130 & operator = (const rnp_seqof130 &);
    int operator == (const rnp_seqof130 &) const;
    int operator != (const rnp_seqof130 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof130 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof130 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof130 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpRAB_SetupOrModifyItemFirst   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssBitString rAB_ID;
    typedef OssBitString nAS_SynchronisationIndicator;
    typedef rnpRAB_Parameters rAB_Parameters;
    typedef rnpUserPlaneInformation userPlaneInformation;
    typedef rnp__shared35 transportLayerInformation;
    typedef enum rnpService_Handover service_Handover;
    typedef rnp_seqof130 iE_Extensions;

    rnpRAB_SetupOrModifyItemFirst();
    rnpRAB_SetupOrModifyItemFirst(const rnpRAB_SetupOrModifyItemFirst &);
    rnpRAB_SetupOrModifyItemFirst(const rAB_ID &, const nAS_SynchronisationIndicator &, 
	const rAB_Parameters &, const userPlaneInformation &, const transportLayerInformation &, 
	service_Handover, const iE_Extensions &);
    rnpRAB_SetupOrModifyItemFirst(const rAB_ID &);

    rnpRAB_SetupOrModifyItemFirst & operator = (const rnpRAB_SetupOrModifyItemFirst &);
    int operator == (const rnpRAB_SetupOrModifyItemFirst &) const;
    int operator != (const rnpRAB_SetupOrModifyItemFirst &) const;

    rAB_ID & get_rAB_ID();
    const rAB_ID & get_rAB_ID() const;
    void set_rAB_ID(const rAB_ID &);

    nAS_SynchronisationIndicator *get_nAS_SynchronisationIndicator();
    const nAS_SynchronisationIndicator *get_nAS_SynchronisationIndicator() const;
    void set_nAS_SynchronisationIndicator(const nAS_SynchronisationIndicator &);
    int nAS_SynchronisationIndicator_is_present() const;
    void omit_nAS_SynchronisationIndicator();

    rAB_Parameters *get_rAB_Parameters();
    const rAB_Parameters *get_rAB_Parameters() const;
    void set_rAB_Parameters(const rAB_Parameters &);
    int rAB_Parameters_is_present() const;
    void omit_rAB_Parameters();

    userPlaneInformation *get_userPlaneInformation();
    const userPlaneInformation *get_userPlaneInformation() const;
    void set_userPlaneInformation(const userPlaneInformation &);
    int userPlaneInformation_is_present() const;
    void omit_userPlaneInformation();

    transportLayerInformation *get_transportLayerInformation();
    const transportLayerInformation *get_transportLayerInformation() const;
    void set_transportLayerInformation(const transportLayerInformation &);
    int transportLayerInformation_is_present() const;
    void omit_transportLayerInformation();

    service_Handover *get_service_Handover();
    const service_Handover *get_service_Handover() const;
    void set_service_Handover(service_Handover);
    int service_Handover_is_present() const;
    void omit_service_Handover();

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    rAB_ID rAB_ID_field;
    nAS_SynchronisationIndicator nAS_SynchronisationIndicator_field;
    rAB_Parameters rAB_Parameters_field;
    userPlaneInformation userPlaneInformation_field;
    transportLayerInformation transportLayerInformation_field;
    service_Handover service_Handover_field;
    iE_Extensions iE_Extensions_field;
};

class OSS_PUBLIC rnpRAB_SetupOrModifyItem_IEs_FirstValue : public OssConstrainedOpenType
{
public:
    rnpRAB_SetupOrModifyItem_IEs_FirstValue();
    rnpRAB_SetupOrModifyItem_IEs_FirstValue(const rnpRAB_SetupOrModifyItem_IEs_FirstValue &);
    ~rnpRAB_SetupOrModifyItem_IEs_FirstValue();
    rnpRAB_SetupOrModifyItem_IEs_FirstValue & operator = (const rnpRAB_SetupOrModifyItem_IEs_FirstValue &);
    int operator == (const rnpRAB_SetupOrModifyItem_IEs_FirstValue &) const;
    int operator != (const rnpRAB_SetupOrModifyItem_IEs_FirstValue &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpRAB_SetupOrModifyItemFirst *get_rnpRAB_SetupOrModifyItemFirst();
    const rnpRAB_SetupOrModifyItemFirst *get_rnpRAB_SetupOrModifyItemFirst() const;
    void set_rnpRAB_SetupOrModifyItemFirst(const rnpRAB_SetupOrModifyItemFirst &);
    rnpRAB_SetupOrModifyItemFirst *release_rnpRAB_SetupOrModifyItemFirst();
    void set_rnpRAB_SetupOrModifyItemFirst(rnpRAB_SetupOrModifyItemFirst *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq132;

class OSS_PUBLIC rnp_seqof131 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq132 component;

    rnp_seqof131();
    rnp_seqof131(const rnp_seqof131 &);
    ~rnp_seqof131();

    rnp_seqof131 & operator = (const rnp_seqof131 &);
    int operator == (const rnp_seqof131 &) const;
    int operator != (const rnp_seqof131 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof131 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof131 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof131 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpRAB_SetupOrModifyItemSecond   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp__shared13 pDP_TypeInformation;
    typedef enum rnpDataVolumeReportingIndication dataVolumeReportingIndication;
    typedef OSS_UINT32 dl_GTP_PDU_SequenceNumber;
    typedef OSS_UINT32 ul_GTP_PDU_SequenceNumber;
    typedef OSS_UINT32 dl_N_PDU_SequenceNumber;
    typedef OSS_UINT32 ul_N_PDU_SequenceNumber;
    typedef rnp_seqof131 iE_Extensions;

    rnpRAB_SetupOrModifyItemSecond();
    rnpRAB_SetupOrModifyItemSecond(const rnpRAB_SetupOrModifyItemSecond &);
    rnpRAB_SetupOrModifyItemSecond(const pDP_TypeInformation &, dataVolumeReportingIndication, 
	dl_GTP_PDU_SequenceNumber, ul_GTP_PDU_SequenceNumber, dl_N_PDU_SequenceNumber, ul_N_PDU_SequenceNumber, 
	const iE_Extensions &);

    rnpRAB_SetupOrModifyItemSecond & operator = (const rnpRAB_SetupOrModifyItemSecond &);
    int operator == (const rnpRAB_SetupOrModifyItemSecond &) const;
    int operator != (const rnpRAB_SetupOrModifyItemSecond &) const;

    pDP_TypeInformation *get_pDP_TypeInformation();
    const pDP_TypeInformation *get_pDP_TypeInformation() const;
    void set_pDP_TypeInformation(const pDP_TypeInformation &);
    int pDP_TypeInformation_is_present() const;
    void omit_pDP_TypeInformation();

    dataVolumeReportingIndication *get_dataVolumeReportingIndication();
    const dataVolumeReportingIndication *get_dataVolumeReportingIndication() const;
    void set_dataVolumeReportingIndication(dataVolumeReportingIndication);
    int dataVolumeReportingIndication_is_present() const;
    void omit_dataVolumeReportingIndication();

    dl_GTP_PDU_SequenceNumber *get_dl_GTP_PDU_SequenceNumber();
    const dl_GTP_PDU_SequenceNumber *get_dl_GTP_PDU_SequenceNumber() const;
    void set_dl_GTP_PDU_SequenceNumber(dl_GTP_PDU_SequenceNumber);
    int dl_GTP_PDU_SequenceNumber_is_present() const;
    void omit_dl_GTP_PDU_SequenceNumber();

    ul_GTP_PDU_SequenceNumber *get_ul_GTP_PDU_SequenceNumber();
    const ul_GTP_PDU_SequenceNumber *get_ul_GTP_PDU_SequenceNumber() const;
    void set_ul_GTP_PDU_SequenceNumber(ul_GTP_PDU_SequenceNumber);
    int ul_GTP_PDU_SequenceNumber_is_present() const;
    void omit_ul_GTP_PDU_SequenceNumber();

    dl_N_PDU_SequenceNumber *get_dl_N_PDU_SequenceNumber();
    const dl_N_PDU_SequenceNumber *get_dl_N_PDU_SequenceNumber() const;
    void set_dl_N_PDU_SequenceNumber(dl_N_PDU_SequenceNumber);
    int dl_N_PDU_SequenceNumber_is_present() const;
    void omit_dl_N_PDU_SequenceNumber();

    ul_N_PDU_SequenceNumber *get_ul_N_PDU_SequenceNumber();
    const ul_N_PDU_SequenceNumber *get_ul_N_PDU_SequenceNumber() const;
    void set_ul_N_PDU_SequenceNumber(ul_N_PDU_SequenceNumber);
    int ul_N_PDU_SequenceNumber_is_present() const;
    void omit_ul_N_PDU_SequenceNumber();

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    pDP_TypeInformation pDP_TypeInformation_field;
    dataVolumeReportingIndication dataVolumeReportingIndication_field;
    dl_GTP_PDU_SequenceNumber dl_GTP_PDU_SequenceNumber_field;
    ul_GTP_PDU_SequenceNumber ul_GTP_PDU_SequenceNumber_field;
    dl_N_PDU_SequenceNumber dl_N_PDU_SequenceNumber_field;
    ul_N_PDU_SequenceNumber ul_N_PDU_SequenceNumber_field;
    iE_Extensions iE_Extensions_field;
};

class OSS_PUBLIC rnpRAB_SetupOrModifyItem_IEs_SecondValue : public OssConstrainedOpenType
{
public:
    rnpRAB_SetupOrModifyItem_IEs_SecondValue();
    rnpRAB_SetupOrModifyItem_IEs_SecondValue(const rnpRAB_SetupOrModifyItem_IEs_SecondValue &);
    ~rnpRAB_SetupOrModifyItem_IEs_SecondValue();
    rnpRAB_SetupOrModifyItem_IEs_SecondValue & operator = (const rnpRAB_SetupOrModifyItem_IEs_SecondValue &);
    int operator == (const rnpRAB_SetupOrModifyItem_IEs_SecondValue &) const;
    int operator != (const rnpRAB_SetupOrModifyItem_IEs_SecondValue &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpRAB_SetupOrModifyItemSecond *get_rnpRAB_SetupOrModifyItemSecond();
    const rnpRAB_SetupOrModifyItemSecond *get_rnpRAB_SetupOrModifyItemSecond() const;
    void set_rnpRAB_SetupOrModifyItemSecond(const rnpRAB_SetupOrModifyItemSecond &);
    rnpRAB_SetupOrModifyItemSecond *release_rnpRAB_SetupOrModifyItemSecond();
    void set_rnpRAB_SetupOrModifyItemSecond(rnpRAB_SetupOrModifyItemSecond *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnpProtocolIE_FieldPair   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality firstCriticality;
    typedef rnpRAB_SetupOrModifyItem_IEs_FirstValue firstValue;
    typedef enum rnpCriticality secondCriticality;
    typedef rnpRAB_SetupOrModifyItem_IEs_SecondValue secondValue;

    rnpProtocolIE_FieldPair();
    rnpProtocolIE_FieldPair(const rnpProtocolIE_FieldPair &);
    rnpProtocolIE_FieldPair(id, firstCriticality, const firstValue &, secondCriticality, 
	const secondValue &);

    rnpProtocolIE_FieldPair & operator = (const rnpProtocolIE_FieldPair &);
    int operator == (const rnpProtocolIE_FieldPair &) const;
    int operator != (const rnpProtocolIE_FieldPair &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    firstCriticality & get_firstCriticality();
    firstCriticality get_firstCriticality() const;
    void set_firstCriticality(firstCriticality);

    firstValue & get_firstValue();
    const firstValue & get_firstValue() const;
    void set_firstValue(const firstValue &);

    secondCriticality & get_secondCriticality();
    secondCriticality get_secondCriticality() const;
    void set_secondCriticality(secondCriticality);

    secondValue & get_secondValue();
    const secondValue & get_secondValue() const;
    void set_secondValue(const secondValue &);
private:
    id id_field;
    firstCriticality firstCriticality_field;
    firstValue firstValue_field;
    secondCriticality secondCriticality_field;
    secondValue secondValue_field;
};

class OSS_PUBLIC rnp_seqof128 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnpProtocolIE_FieldPair component;

    rnp_seqof128();
    rnp_seqof128(const rnp_seqof128 &);
    ~rnp_seqof128();

    rnp_seqof128 & operator = (const rnp_seqof128 &);
    int operator == (const rnp_seqof128 &) const;
    int operator != (const rnp_seqof128 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof128 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof128 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof128 *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared5 rnp_seq130;

class OSS_PUBLIC rnpRAB_SetupOrModifyItemFirst_ExtIEs_Extension : public OssConstrainedOpenType
{
public:
    rnpRAB_SetupOrModifyItemFirst_ExtIEs_Extension();
    rnpRAB_SetupOrModifyItemFirst_ExtIEs_Extension(const rnpRAB_SetupOrModifyItemFirst_ExtIEs_Extension &);
    ~rnpRAB_SetupOrModifyItemFirst_ExtIEs_Extension();
    rnpRAB_SetupOrModifyItemFirst_ExtIEs_Extension & operator = (const rnpRAB_SetupOrModifyItemFirst_ExtIEs_Extension &);
    int operator == (const rnpRAB_SetupOrModifyItemFirst_ExtIEs_Extension &) const;
    int operator != (const rnpRAB_SetupOrModifyItemFirst_ExtIEs_Extension &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpE_UTRAN_Service_Handover *get_rnpE_UTRAN_Service_Handover();
    const rnpE_UTRAN_Service_Handover *get_rnpE_UTRAN_Service_Handover() const;
    void set_rnpE_UTRAN_Service_Handover(const rnpE_UTRAN_Service_Handover &);
    rnpE_UTRAN_Service_Handover *release_rnpE_UTRAN_Service_Handover();
    void set_rnpE_UTRAN_Service_Handover(rnpE_UTRAN_Service_Handover *);

    rnpCorrelation_ID *get_rnpCorrelation_ID();
    const rnpCorrelation_ID *get_rnpCorrelation_ID() const;
    void set_rnpCorrelation_ID(const rnpCorrelation_ID &);
    rnpCorrelation_ID *release_rnpCorrelation_ID();
    void set_rnpCorrelation_ID(rnpCorrelation_ID *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq131   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpRAB_SetupOrModifyItemFirst_ExtIEs_Extension extensionValue;

    rnp_seq131();
    rnp_seq131(const rnp_seq131 &);
    rnp_seq131(id, criticality, const extensionValue &);

    rnp_seq131 & operator = (const rnp_seq131 &);
    int operator == (const rnp_seq131 &) const;
    int operator != (const rnp_seq131 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    extensionValue & get_extensionValue();
    const extensionValue & get_extensionValue() const;
    void set_extensionValue(const extensionValue &);
private:
    id id_field;
    criticality criticality_field;
    extensionValue extensionValue_field;
};

class OSS_PUBLIC rnpRAB_SetupOrModifyItemSecond_ExtIEs_Extension : public OssConstrainedOpenType
{
public:
    rnpRAB_SetupOrModifyItemSecond_ExtIEs_Extension();
    rnpRAB_SetupOrModifyItemSecond_ExtIEs_Extension(const rnpRAB_SetupOrModifyItemSecond_ExtIEs_Extension &);
    ~rnpRAB_SetupOrModifyItemSecond_ExtIEs_Extension();
    rnpRAB_SetupOrModifyItemSecond_ExtIEs_Extension & operator = (const rnpRAB_SetupOrModifyItemSecond_ExtIEs_Extension &);
    int operator == (const rnpRAB_SetupOrModifyItemSecond_ExtIEs_Extension &) const;
    int operator != (const rnpRAB_SetupOrModifyItemSecond_ExtIEs_Extension &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpAlt_RAB_Parameters *get_rnpAlt_RAB_Parameters();
    const rnpAlt_RAB_Parameters *get_rnpAlt_RAB_Parameters() const;
    void set_rnpAlt_RAB_Parameters(const rnpAlt_RAB_Parameters &);
    rnpAlt_RAB_Parameters *release_rnpAlt_RAB_Parameters();
    void set_rnpAlt_RAB_Parameters(rnpAlt_RAB_Parameters *);

    rnpGERAN_BSC_Container *get_rnpGERAN_BSC_Container();
    const rnpGERAN_BSC_Container *get_rnpGERAN_BSC_Container() const;
    void set_rnpGERAN_BSC_Container(const rnpGERAN_BSC_Container &);
    rnpGERAN_BSC_Container *release_rnpGERAN_BSC_Container();
    void set_rnpGERAN_BSC_Container(rnpGERAN_BSC_Container *);

    rnpPDP_TypeInformation_extension *get_rnpPDP_TypeInformation_extension();
    const rnpPDP_TypeInformation_extension *get_rnpPDP_TypeInformation_extension() const;
    void set_rnpPDP_TypeInformation_extension(const rnpPDP_TypeInformation_extension &);
    rnpPDP_TypeInformation_extension *release_rnpPDP_TypeInformation_extension();
    void set_rnpPDP_TypeInformation_extension(rnpPDP_TypeInformation_extension *);

    rnpOffload_RAB_Parameters *get_rnpOffload_RAB_Parameters();
    const rnpOffload_RAB_Parameters *get_rnpOffload_RAB_Parameters() const;
    void set_rnpOffload_RAB_Parameters(const rnpOffload_RAB_Parameters &);
    rnpOffload_RAB_Parameters *release_rnpOffload_RAB_Parameters();
    void set_rnpOffload_RAB_Parameters(rnpOffload_RAB_Parameters *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq132   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpRAB_SetupOrModifyItemSecond_ExtIEs_Extension extensionValue;

    rnp_seq132();
    rnp_seq132(const rnp_seq132 &);
    rnp_seq132(id, criticality, const extensionValue &);

    rnp_seq132 & operator = (const rnp_seq132 &);
    int operator == (const rnp_seq132 &) const;
    int operator != (const rnp_seq132 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    extensionValue & get_extensionValue();
    const extensionValue & get_extensionValue() const;
    void set_extensionValue(const extensionValue &);
private:
    id id_field;
    criticality criticality_field;
    extensionValue extensionValue_field;
};

class OSS_PUBLIC rnp_seqof134;

class OSS_PUBLIC rnpRAB_SetupOrModifiedList : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seqof134 component;

    rnpRAB_SetupOrModifiedList();
    rnpRAB_SetupOrModifiedList(const rnpRAB_SetupOrModifiedList &);
    ~rnpRAB_SetupOrModifiedList();

    rnpRAB_SetupOrModifiedList & operator = (const rnpRAB_SetupOrModifiedList &);
    int operator == (const rnpRAB_SetupOrModifiedList &) const;
    int operator != (const rnpRAB_SetupOrModifiedList &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnpRAB_SetupOrModifiedList *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnpRAB_SetupOrModifiedList *);

    int remove_front();
    int remove_after(OssIndex);

    rnpRAB_SetupOrModifiedList *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnp_seqof136;

class OSS_PUBLIC rnpRAB_ReleasedList : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seqof136 component;

    rnpRAB_ReleasedList();
    rnpRAB_ReleasedList(const rnpRAB_ReleasedList &);
    ~rnpRAB_ReleasedList();

    rnpRAB_ReleasedList & operator = (const rnpRAB_ReleasedList &);
    int operator == (const rnpRAB_ReleasedList &) const;
    int operator != (const rnpRAB_ReleasedList &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnpRAB_ReleasedList *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnpRAB_ReleasedList *);

    int remove_front();
    int remove_after(OssIndex);

    rnpRAB_ReleasedList *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnp_seqof139;

class OSS_PUBLIC rnpRAB_QueuedList : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seqof139 component;

    rnpRAB_QueuedList();
    rnpRAB_QueuedList(const rnpRAB_QueuedList &);
    ~rnpRAB_QueuedList();

    rnpRAB_QueuedList & operator = (const rnpRAB_QueuedList &);
    int operator == (const rnpRAB_QueuedList &) const;
    int operator != (const rnpRAB_QueuedList &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnpRAB_QueuedList *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnpRAB_QueuedList *);

    int remove_front();
    int remove_after(OssIndex);

    rnpRAB_QueuedList *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared36 rnpRAB_ReleaseFailedList;

class OSS_PUBLIC rnpRAB_AssignmentResponseIEs_Value : public OssConstrainedOpenType
{
public:
    rnpRAB_AssignmentResponseIEs_Value();
    rnpRAB_AssignmentResponseIEs_Value(const rnpRAB_AssignmentResponseIEs_Value &);
    ~rnpRAB_AssignmentResponseIEs_Value();
    rnpRAB_AssignmentResponseIEs_Value & operator = (const rnpRAB_AssignmentResponseIEs_Value &);
    int operator == (const rnpRAB_AssignmentResponseIEs_Value &) const;
    int operator != (const rnpRAB_AssignmentResponseIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpRAB_SetupOrModifiedList *get_rnpRAB_SetupOrModifiedList();
    const rnpRAB_SetupOrModifiedList *get_rnpRAB_SetupOrModifiedList() const;
    void set_rnpRAB_SetupOrModifiedList(const rnpRAB_SetupOrModifiedList &);
    rnpRAB_SetupOrModifiedList *release_rnpRAB_SetupOrModifiedList();
    void set_rnpRAB_SetupOrModifiedList(rnpRAB_SetupOrModifiedList *);

    rnpRAB_ReleasedList *get_rnpRAB_ReleasedList();
    const rnpRAB_ReleasedList *get_rnpRAB_ReleasedList() const;
    void set_rnpRAB_ReleasedList(const rnpRAB_ReleasedList &);
    rnpRAB_ReleasedList *release_rnpRAB_ReleasedList();
    void set_rnpRAB_ReleasedList(rnpRAB_ReleasedList *);

    rnpRAB_QueuedList *get_rnpRAB_QueuedList();
    const rnpRAB_QueuedList *get_rnpRAB_QueuedList() const;
    void set_rnpRAB_QueuedList(const rnpRAB_QueuedList &);
    rnpRAB_QueuedList *release_rnpRAB_QueuedList();
    void set_rnpRAB_QueuedList(rnpRAB_QueuedList *);

    rnp__shared36 *get_rnpRAB_FailedList();
    const rnp__shared36 *get_rnpRAB_FailedList() const;
    void set_rnpRAB_FailedList(const rnp__shared36 &);
    rnp__shared36 *release_rnpRAB_FailedList();
    void set_rnpRAB_FailedList(rnp__shared36 *);

    rnp__shared36 *get_rnpRAB_ReleaseFailedList();
    const rnp__shared36 *get_rnpRAB_ReleaseFailedList() const;
    void set_rnpRAB_ReleaseFailedList(const rnp__shared36 &);
    rnp__shared36 *release_rnpRAB_ReleaseFailedList();
    void set_rnpRAB_ReleaseFailedList(rnp__shared36 *);

    rnpCriticalityDiagnostics *get_rnpCriticalityDiagnostics();
    const rnpCriticalityDiagnostics *get_rnpCriticalityDiagnostics() const;
    void set_rnpCriticalityDiagnostics(const rnpCriticalityDiagnostics &);
    rnpCriticalityDiagnostics *release_rnpCriticalityDiagnostics();
    void set_rnpCriticalityDiagnostics(rnpCriticalityDiagnostics *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seqof141;

class OSS_PUBLIC rnpGERAN_Iumode_RAB_FailedList_RABAssgntResponse : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seqof141 component;

    rnpGERAN_Iumode_RAB_FailedList_RABAssgntResponse();
    rnpGERAN_Iumode_RAB_FailedList_RABAssgntResponse(const rnpGERAN_Iumode_RAB_FailedList_RABAssgntResponse &);
    ~rnpGERAN_Iumode_RAB_FailedList_RABAssgntResponse();

    rnpGERAN_Iumode_RAB_FailedList_RABAssgntResponse & operator = (const rnpGERAN_Iumode_RAB_FailedList_RABAssgntResponse &);
    int operator == (const rnpGERAN_Iumode_RAB_FailedList_RABAssgntResponse &) const;
    int operator != (const rnpGERAN_Iumode_RAB_FailedList_RABAssgntResponse &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnpGERAN_Iumode_RAB_FailedList_RABAssgntResponse *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnpGERAN_Iumode_RAB_FailedList_RABAssgntResponse *);

    int remove_front();
    int remove_after(OssIndex);

    rnpGERAN_Iumode_RAB_FailedList_RABAssgntResponse *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpRAB_AssignmentResponseExtensions_Extension : public OssConstrainedOpenType
{
public:
    rnpRAB_AssignmentResponseExtensions_Extension();
    rnpRAB_AssignmentResponseExtensions_Extension(const rnpRAB_AssignmentResponseExtensions_Extension &);
    ~rnpRAB_AssignmentResponseExtensions_Extension();
    rnpRAB_AssignmentResponseExtensions_Extension & operator = (const rnpRAB_AssignmentResponseExtensions_Extension &);
    int operator == (const rnpRAB_AssignmentResponseExtensions_Extension &) const;
    int operator != (const rnpRAB_AssignmentResponseExtensions_Extension &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpGERAN_Iumode_RAB_FailedList_RABAssgntResponse *get_rnpGERAN_Iumode_RAB_FailedList_RABAssgntResponse();
    const rnpGERAN_Iumode_RAB_FailedList_RABAssgntResponse *get_rnpGERAN_Iumode_RAB_FailedList_RABAssgntResponse() const;
    void set_rnpGERAN_Iumode_RAB_FailedList_RABAssgntResponse(const rnpGERAN_Iumode_RAB_FailedList_RABAssgntResponse &);
    rnpGERAN_Iumode_RAB_FailedList_RABAssgntResponse *release_rnpGERAN_Iumode_RAB_FailedList_RABAssgntResponse();
    void set_rnpGERAN_Iumode_RAB_FailedList_RABAssgntResponse(rnpGERAN_Iumode_RAB_FailedList_RABAssgntResponse *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq133   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpRAB_AssignmentResponseIEs_Value value;

    rnp_seq133();
    rnp_seq133(const rnp_seq133 &);
    rnp_seq133(id, criticality, const value &);

    rnp_seq133 & operator = (const rnp_seq133 &);
    int operator == (const rnp_seq133 &) const;
    int operator != (const rnp_seq133 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

class OSS_PUBLIC rnp_seq134   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpRAB_AssignmentResponseExtensions_Extension extensionValue;

    rnp_seq134();
    rnp_seq134(const rnp_seq134 &);
    rnp_seq134(id, criticality, const extensionValue &);

    rnp_seq134 & operator = (const rnp_seq134 &);
    int operator == (const rnp_seq134 &) const;
    int operator != (const rnp_seq134 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    extensionValue & get_extensionValue();
    const extensionValue & get_extensionValue() const;
    void set_extensionValue(const extensionValue &);
private:
    id id_field;
    criticality criticality_field;
    extensionValue extensionValue_field;
};

class OSS_PUBLIC rnp_seq136;

class OSS_PUBLIC rnp_seqof135 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq136 component;

    rnp_seqof135();
    rnp_seqof135(const rnp_seqof135 &);
    ~rnp_seqof135();

    rnp_seqof135 & operator = (const rnp_seqof135 &);
    int operator == (const rnp_seqof135 &) const;
    int operator != (const rnp_seqof135 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof135 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof135 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof135 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpRAB_SetupOrModifiedItem   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssBitString rAB_ID;
    typedef OssBitString transportLayerAddress;
    typedef rnpIuTransportAssociation iuTransportAssociation;
    typedef rnp__shared34 dl_dataVolumes;
    typedef rnp_seqof135 iE_Extensions;

    rnpRAB_SetupOrModifiedItem();
    rnpRAB_SetupOrModifiedItem(const rnpRAB_SetupOrModifiedItem &);
    rnpRAB_SetupOrModifiedItem(const rAB_ID &, const transportLayerAddress &, const iuTransportAssociation &, 
	const dl_dataVolumes &, const iE_Extensions &);
    rnpRAB_SetupOrModifiedItem(const rAB_ID &);

    rnpRAB_SetupOrModifiedItem & operator = (const rnpRAB_SetupOrModifiedItem &);
    int operator == (const rnpRAB_SetupOrModifiedItem &) const;
    int operator != (const rnpRAB_SetupOrModifiedItem &) const;

    rAB_ID & get_rAB_ID();
    const rAB_ID & get_rAB_ID() const;
    void set_rAB_ID(const rAB_ID &);

    transportLayerAddress *get_transportLayerAddress();
    const transportLayerAddress *get_transportLayerAddress() const;
    void set_transportLayerAddress(const transportLayerAddress &);
    int transportLayerAddress_is_present() const;
    void omit_transportLayerAddress();

    iuTransportAssociation *get_iuTransportAssociation();
    const iuTransportAssociation *get_iuTransportAssociation() const;
    void set_iuTransportAssociation(const iuTransportAssociation &);
    int iuTransportAssociation_is_present() const;
    void omit_iuTransportAssociation();

    dl_dataVolumes *get_dl_dataVolumes();
    const dl_dataVolumes *get_dl_dataVolumes() const;
    void set_dl_dataVolumes(const dl_dataVolumes &);
    int dl_dataVolumes_is_present() const;
    void omit_dl_dataVolumes();

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    rAB_ID rAB_ID_field;
    transportLayerAddress transportLayerAddress_field;
    iuTransportAssociation iuTransportAssociation_field;
    dl_dataVolumes dl_dataVolumes_field;
    iE_Extensions iE_Extensions_field;
};

class OSS_PUBLIC rnpRAB_SetupOrModifiedItemIEs_Value : public OssConstrainedOpenType
{
public:
    rnpRAB_SetupOrModifiedItemIEs_Value();
    rnpRAB_SetupOrModifiedItemIEs_Value(const rnpRAB_SetupOrModifiedItemIEs_Value &);
    ~rnpRAB_SetupOrModifiedItemIEs_Value();
    rnpRAB_SetupOrModifiedItemIEs_Value & operator = (const rnpRAB_SetupOrModifiedItemIEs_Value &);
    int operator == (const rnpRAB_SetupOrModifiedItemIEs_Value &) const;
    int operator != (const rnpRAB_SetupOrModifiedItemIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpRAB_SetupOrModifiedItem *get_rnpRAB_SetupOrModifiedItem();
    const rnpRAB_SetupOrModifiedItem *get_rnpRAB_SetupOrModifiedItem() const;
    void set_rnpRAB_SetupOrModifiedItem(const rnpRAB_SetupOrModifiedItem &);
    rnpRAB_SetupOrModifiedItem *release_rnpRAB_SetupOrModifiedItem();
    void set_rnpRAB_SetupOrModifiedItem(rnpRAB_SetupOrModifiedItem *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq135;

class OSS_PUBLIC rnp_seqof134 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq135 component;

    rnp_seqof134();
    rnp_seqof134(const rnp_seqof134 &);
    ~rnp_seqof134();

    rnp_seqof134 & operator = (const rnp_seqof134 &);
    int operator == (const rnp_seqof134 &) const;
    int operator != (const rnp_seqof134 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof134 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof134 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof134 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnp_seq135   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpRAB_SetupOrModifiedItemIEs_Value value;

    rnp_seq135();
    rnp_seq135(const rnp_seq135 &);
    rnp_seq135(id, criticality, const value &);

    rnp_seq135 & operator = (const rnp_seq135 &);
    int operator == (const rnp_seq135 &) const;
    int operator != (const rnp_seq135 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

class OSS_PUBLIC rnpRAB_SetupOrModifiedItem_ExtIEs_Extension : public OssConstrainedOpenType
{
public:
    rnpRAB_SetupOrModifiedItem_ExtIEs_Extension();
    rnpRAB_SetupOrModifiedItem_ExtIEs_Extension(const rnpRAB_SetupOrModifiedItem_ExtIEs_Extension &);
    ~rnpRAB_SetupOrModifiedItem_ExtIEs_Extension();
    rnpRAB_SetupOrModifiedItem_ExtIEs_Extension & operator = (const rnpRAB_SetupOrModifiedItem_ExtIEs_Extension &);
    int operator == (const rnpRAB_SetupOrModifiedItem_ExtIEs_Extension &) const;
    int operator != (const rnpRAB_SetupOrModifiedItem_ExtIEs_Extension &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpAss_RAB_Parameters *get_rnpAss_RAB_Parameters();
    const rnpAss_RAB_Parameters *get_rnpAss_RAB_Parameters() const;
    void set_rnpAss_RAB_Parameters(const rnpAss_RAB_Parameters &);
    rnpAss_RAB_Parameters *release_rnpAss_RAB_Parameters();
    void set_rnpAss_RAB_Parameters(rnpAss_RAB_Parameters *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq136   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpRAB_SetupOrModifiedItem_ExtIEs_Extension extensionValue;

    rnp_seq136();
    rnp_seq136(const rnp_seq136 &);
    rnp_seq136(id, criticality, const extensionValue &);

    rnp_seq136 & operator = (const rnp_seq136 &);
    int operator == (const rnp_seq136 &) const;
    int operator != (const rnp_seq136 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    extensionValue & get_extensionValue();
    const extensionValue & get_extensionValue() const;
    void set_extensionValue(const extensionValue &);
private:
    id id_field;
    criticality criticality_field;
    extensionValue extensionValue_field;
};

typedef rnp__shared6 rnp_seqof137;

class OSS_PUBLIC rnpRAB_ReleasedItem   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssBitString rAB_ID;
    typedef rnp__shared34 dl_dataVolumes;
    typedef OSS_UINT32 dL_GTP_PDU_SequenceNumber;
    typedef OSS_UINT32 uL_GTP_PDU_SequenceNumber;
    typedef rnp__shared6 iE_Extensions;

    rnpRAB_ReleasedItem();
    rnpRAB_ReleasedItem(const rnpRAB_ReleasedItem &);
    rnpRAB_ReleasedItem(const rAB_ID &, const dl_dataVolumes &, dL_GTP_PDU_SequenceNumber, 
	uL_GTP_PDU_SequenceNumber, const iE_Extensions &);
    rnpRAB_ReleasedItem(const rAB_ID &);

    rnpRAB_ReleasedItem & operator = (const rnpRAB_ReleasedItem &);
    int operator == (const rnpRAB_ReleasedItem &) const;
    int operator != (const rnpRAB_ReleasedItem &) const;

    rAB_ID & get_rAB_ID();
    const rAB_ID & get_rAB_ID() const;
    void set_rAB_ID(const rAB_ID &);

    dl_dataVolumes *get_dl_dataVolumes();
    const dl_dataVolumes *get_dl_dataVolumes() const;
    void set_dl_dataVolumes(const dl_dataVolumes &);
    int dl_dataVolumes_is_present() const;
    void omit_dl_dataVolumes();

    dL_GTP_PDU_SequenceNumber *get_dL_GTP_PDU_SequenceNumber();
    const dL_GTP_PDU_SequenceNumber *get_dL_GTP_PDU_SequenceNumber() const;
    void set_dL_GTP_PDU_SequenceNumber(dL_GTP_PDU_SequenceNumber);
    int dL_GTP_PDU_SequenceNumber_is_present() const;
    void omit_dL_GTP_PDU_SequenceNumber();

    uL_GTP_PDU_SequenceNumber *get_uL_GTP_PDU_SequenceNumber();
    const uL_GTP_PDU_SequenceNumber *get_uL_GTP_PDU_SequenceNumber() const;
    void set_uL_GTP_PDU_SequenceNumber(uL_GTP_PDU_SequenceNumber);
    int uL_GTP_PDU_SequenceNumber_is_present() const;
    void omit_uL_GTP_PDU_SequenceNumber();

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    rAB_ID rAB_ID_field;
    dl_dataVolumes dl_dataVolumes_field;
    dL_GTP_PDU_SequenceNumber dL_GTP_PDU_SequenceNumber_field;
    uL_GTP_PDU_SequenceNumber uL_GTP_PDU_SequenceNumber_field;
    iE_Extensions iE_Extensions_field;
};

class OSS_PUBLIC rnpRAB_ReleasedItemIEs_Value : public OssConstrainedOpenType
{
public:
    rnpRAB_ReleasedItemIEs_Value();
    rnpRAB_ReleasedItemIEs_Value(const rnpRAB_ReleasedItemIEs_Value &);
    ~rnpRAB_ReleasedItemIEs_Value();
    rnpRAB_ReleasedItemIEs_Value & operator = (const rnpRAB_ReleasedItemIEs_Value &);
    int operator == (const rnpRAB_ReleasedItemIEs_Value &) const;
    int operator != (const rnpRAB_ReleasedItemIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpRAB_ReleasedItem *get_rnpRAB_ReleasedItem();
    const rnpRAB_ReleasedItem *get_rnpRAB_ReleasedItem() const;
    void set_rnpRAB_ReleasedItem(const rnpRAB_ReleasedItem &);
    rnpRAB_ReleasedItem *release_rnpRAB_ReleasedItem();
    void set_rnpRAB_ReleasedItem(rnpRAB_ReleasedItem *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq137;

class OSS_PUBLIC rnp_seqof136 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq137 component;

    rnp_seqof136();
    rnp_seqof136(const rnp_seqof136 &);
    ~rnp_seqof136();

    rnp_seqof136 & operator = (const rnp_seqof136 &);
    int operator == (const rnp_seqof136 &) const;
    int operator != (const rnp_seqof136 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof136 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof136 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof136 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnp_seq137   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpRAB_ReleasedItemIEs_Value value;

    rnp_seq137();
    rnp_seq137(const rnp_seq137 &);
    rnp_seq137(id, criticality, const value &);

    rnp_seq137 & operator = (const rnp_seq137 &);
    int operator == (const rnp_seq137 &) const;
    int operator != (const rnp_seq137 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

typedef rnp__shared5 rnp_seq138;

typedef OSS_UINT32 rnpUnsuccessfullyTransmittedDataVolume;

typedef OSS_UINT32 rnpDataVolumeReference;

typedef rnp__shared6 rnp_seqof283;

class OSS_PUBLIC rnp__shared33   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 dl_UnsuccessfullyTransmittedDataVolume;
    typedef OSS_UINT32 dataVolumeReference;
    typedef rnp__shared6 iE_Extensions;

    rnp__shared33();
    rnp__shared33(const rnp__shared33 &);
    rnp__shared33(dl_UnsuccessfullyTransmittedDataVolume, dataVolumeReference, const iE_Extensions &);
    rnp__shared33(dl_UnsuccessfullyTransmittedDataVolume);

    rnp__shared33 & operator = (const rnp__shared33 &);
    int operator == (const rnp__shared33 &) const;
    int operator != (const rnp__shared33 &) const;

    dl_UnsuccessfullyTransmittedDataVolume & get_dl_UnsuccessfullyTransmittedDataVolume();
    dl_UnsuccessfullyTransmittedDataVolume get_dl_UnsuccessfullyTransmittedDataVolume() const;
    void set_dl_UnsuccessfullyTransmittedDataVolume(dl_UnsuccessfullyTransmittedDataVolume);

    dataVolumeReference *get_dataVolumeReference();
    const dataVolumeReference *get_dataVolumeReference() const;
    void set_dataVolumeReference(dataVolumeReference);
    int dataVolumeReference_is_present() const;
    void omit_dataVolumeReference();

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    dl_UnsuccessfullyTransmittedDataVolume dl_UnsuccessfullyTransmittedDataVolume_field;
    dataVolumeReference dataVolumeReference_field;
    iE_Extensions iE_Extensions_field;
};

typedef rnp__shared33 rnp_seq293;

typedef rnp__shared33 rnp_seq140;

typedef rnp__shared6 rnp_seqof138;

typedef rnp__shared5 rnp_seq139;

typedef rnp__shared19 rnpRAB_QueuedItem;

class OSS_PUBLIC rnpRAB_QueuedItemIEs_Value : public OssConstrainedOpenType
{
public:
    rnpRAB_QueuedItemIEs_Value();
    rnpRAB_QueuedItemIEs_Value(const rnpRAB_QueuedItemIEs_Value &);
    ~rnpRAB_QueuedItemIEs_Value();
    rnpRAB_QueuedItemIEs_Value & operator = (const rnpRAB_QueuedItemIEs_Value &);
    int operator == (const rnpRAB_QueuedItemIEs_Value &) const;
    int operator != (const rnpRAB_QueuedItemIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnp__shared19 *get_rnpRAB_QueuedItem();
    const rnp__shared19 *get_rnpRAB_QueuedItem() const;
    void set_rnpRAB_QueuedItem(const rnp__shared19 &);
    rnp__shared19 *release_rnpRAB_QueuedItem();
    void set_rnpRAB_QueuedItem(rnp__shared19 *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq141;

class OSS_PUBLIC rnp_seqof139 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq141 component;

    rnp_seqof139();
    rnp_seqof139(const rnp_seqof139 &);
    ~rnp_seqof139();

    rnp_seqof139 & operator = (const rnp_seqof139 &);
    int operator == (const rnp_seqof139 &) const;
    int operator != (const rnp_seqof139 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof139 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof139 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof139 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnp_seq141   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpRAB_QueuedItemIEs_Value value;

    rnp_seq141();
    rnp_seq141(const rnp_seq141 &);
    rnp_seq141(id, criticality, const value &);

    rnp_seq141 & operator = (const rnp_seq141 &);
    int operator == (const rnp_seq141 &) const;
    int operator != (const rnp_seq141 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

typedef rnp__shared6 rnp_seqof140;

typedef rnp__shared5 rnp_seq142;

typedef rnp__shared6 rnp_seqof142;

class OSS_PUBLIC rnpGERAN_Iumode_RAB_Failed_RABAssgntResponse_Item   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssBitString rAB_ID;
    typedef rnpCause cause;
    typedef OssString gERAN_Classmark;
    typedef rnp__shared6 iE_Extensions;

    rnpGERAN_Iumode_RAB_Failed_RABAssgntResponse_Item();
    rnpGERAN_Iumode_RAB_Failed_RABAssgntResponse_Item(const rnpGERAN_Iumode_RAB_Failed_RABAssgntResponse_Item &);
    rnpGERAN_Iumode_RAB_Failed_RABAssgntResponse_Item(const rAB_ID &, const cause &, 
	const gERAN_Classmark &, const iE_Extensions &);
    rnpGERAN_Iumode_RAB_Failed_RABAssgntResponse_Item(const rAB_ID &, const cause &);

    rnpGERAN_Iumode_RAB_Failed_RABAssgntResponse_Item & operator = (const rnpGERAN_Iumode_RAB_Failed_RABAssgntResponse_Item &);
    int operator == (const rnpGERAN_Iumode_RAB_Failed_RABAssgntResponse_Item &) const;
    int operator != (const rnpGERAN_Iumode_RAB_Failed_RABAssgntResponse_Item &) const;

    rAB_ID & get_rAB_ID();
    const rAB_ID & get_rAB_ID() const;
    void set_rAB_ID(const rAB_ID &);

    cause & get_cause();
    const cause & get_cause() const;
    void set_cause(const cause &);

    gERAN_Classmark *get_gERAN_Classmark();
    const gERAN_Classmark *get_gERAN_Classmark() const;
    void set_gERAN_Classmark(const gERAN_Classmark &);
    int gERAN_Classmark_is_present() const;
    void omit_gERAN_Classmark();

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    rAB_ID rAB_ID_field;
    cause cause_field;
    gERAN_Classmark gERAN_Classmark_field;
    iE_Extensions iE_Extensions_field;
};

class OSS_PUBLIC rnpGERAN_Iumode_RAB_Failed_RABAssgntResponse_ItemIEs_Value : public OssConstrainedOpenType
{
public:
    rnpGERAN_Iumode_RAB_Failed_RABAssgntResponse_ItemIEs_Value();
    rnpGERAN_Iumode_RAB_Failed_RABAssgntResponse_ItemIEs_Value(const rnpGERAN_Iumode_RAB_Failed_RABAssgntResponse_ItemIEs_Value &);
    ~rnpGERAN_Iumode_RAB_Failed_RABAssgntResponse_ItemIEs_Value();
    rnpGERAN_Iumode_RAB_Failed_RABAssgntResponse_ItemIEs_Value & operator = (const rnpGERAN_Iumode_RAB_Failed_RABAssgntResponse_ItemIEs_Value &);
    int operator == (const rnpGERAN_Iumode_RAB_Failed_RABAssgntResponse_ItemIEs_Value &) const;
    int operator != (const rnpGERAN_Iumode_RAB_Failed_RABAssgntResponse_ItemIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpGERAN_Iumode_RAB_Failed_RABAssgntResponse_Item *get_rnpGERAN_Iumode_RAB_Failed_RABAssgntResponse_Item();
    const rnpGERAN_Iumode_RAB_Failed_RABAssgntResponse_Item *get_rnpGERAN_Iumode_RAB_Failed_RABAssgntResponse_Item() const;
    void set_rnpGERAN_Iumode_RAB_Failed_RABAssgntResponse_Item(const rnpGERAN_Iumode_RAB_Failed_RABAssgntResponse_Item &);
    rnpGERAN_Iumode_RAB_Failed_RABAssgntResponse_Item *release_rnpGERAN_Iumode_RAB_Failed_RABAssgntResponse_Item();
    void set_rnpGERAN_Iumode_RAB_Failed_RABAssgntResponse_Item(rnpGERAN_Iumode_RAB_Failed_RABAssgntResponse_Item *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq143;

class OSS_PUBLIC rnp_seqof141 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq143 component;

    rnp_seqof141();
    rnp_seqof141(const rnp_seqof141 &);
    ~rnp_seqof141();

    rnp_seqof141 & operator = (const rnp_seqof141 &);
    int operator == (const rnp_seqof141 &) const;
    int operator != (const rnp_seqof141 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof141 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof141 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof141 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnp_seq143   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpGERAN_Iumode_RAB_Failed_RABAssgntResponse_ItemIEs_Value value;

    rnp_seq143();
    rnp_seq143(const rnp_seq143 &);
    rnp_seq143(id, criticality, const value &);

    rnp_seq143 & operator = (const rnp_seq143 &);
    int operator == (const rnp_seq143 &) const;
    int operator != (const rnp_seq143 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

typedef rnp__shared5 rnp_seq144;

class OSS_PUBLIC rnpPrivateIE_ID  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	local_chosen = 1,
	global_chosen = 2
    };
    typedef OSS_UINT32 local;
    typedef OssEncOID global;

    rnpPrivateIE_ID();
    rnpPrivateIE_ID(const rnpPrivateIE_ID &);
    ~rnpPrivateIE_ID();

    rnpPrivateIE_ID & operator = (const rnpPrivateIE_ID &);
    int operator == (const rnpPrivateIE_ID &) const;
    int operator != (const rnpPrivateIE_ID &) const;

    local *get_local();
    const local *get_local() const;
    void set_local(local);

    global *get_global();
    const global *get_global() const;
    void set_global(const global &);
private:
    union {
	local local_field;
	OSSC::COssEncOID global_field;
    };
    void cleanup();
};

class OSS_PUBLIC rnpPrivateIE_Field   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnpPrivateIE_ID id;
    typedef enum rnpCriticality criticality;
    typedef rnpIu_ReleaseCompleteExtensions_Extension value;

    rnpPrivateIE_Field();
    rnpPrivateIE_Field(const rnpPrivateIE_Field &);
    rnpPrivateIE_Field(const id &, criticality, const value &);

    rnpPrivateIE_Field & operator = (const rnpPrivateIE_Field &);
    int operator == (const rnpPrivateIE_Field &) const;
    int operator != (const rnpPrivateIE_Field &) const;

    id & get_id();
    const id & get_id() const;
    void set_id(const id &);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

class OSS_PUBLIC rnp_seqof146;

class OSS_PUBLIC rnpDirectTransferInformationList_RANAP_RelocInf : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seqof146 component;

    rnpDirectTransferInformationList_RANAP_RelocInf();
    rnpDirectTransferInformationList_RANAP_RelocInf(const rnpDirectTransferInformationList_RANAP_RelocInf &);
    ~rnpDirectTransferInformationList_RANAP_RelocInf();

    rnpDirectTransferInformationList_RANAP_RelocInf & operator = (const rnpDirectTransferInformationList_RANAP_RelocInf &);
    int operator == (const rnpDirectTransferInformationList_RANAP_RelocInf &) const;
    int operator != (const rnpDirectTransferInformationList_RANAP_RelocInf &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnpDirectTransferInformationList_RANAP_RelocInf *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnpDirectTransferInformationList_RANAP_RelocInf *);

    int remove_front();
    int remove_after(OssIndex);

    rnpDirectTransferInformationList_RANAP_RelocInf *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnp_seqof148;

class OSS_PUBLIC rnpRAB_ContextList_RANAP_RelocInf : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seqof148 component;

    rnpRAB_ContextList_RANAP_RelocInf();
    rnpRAB_ContextList_RANAP_RelocInf(const rnpRAB_ContextList_RANAP_RelocInf &);
    ~rnpRAB_ContextList_RANAP_RelocInf();

    rnpRAB_ContextList_RANAP_RelocInf & operator = (const rnpRAB_ContextList_RANAP_RelocInf &);
    int operator == (const rnpRAB_ContextList_RANAP_RelocInf &) const;
    int operator != (const rnpRAB_ContextList_RANAP_RelocInf &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnpRAB_ContextList_RANAP_RelocInf *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnpRAB_ContextList_RANAP_RelocInf *);

    int remove_front();
    int remove_after(OssIndex);

    rnpRAB_ContextList_RANAP_RelocInf *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpRANAP_RelocationInformationIEs_Value : public OssConstrainedOpenType
{
public:
    rnpRANAP_RelocationInformationIEs_Value();
    rnpRANAP_RelocationInformationIEs_Value(const rnpRANAP_RelocationInformationIEs_Value &);
    ~rnpRANAP_RelocationInformationIEs_Value();
    rnpRANAP_RelocationInformationIEs_Value & operator = (const rnpRANAP_RelocationInformationIEs_Value &);
    int operator == (const rnpRANAP_RelocationInformationIEs_Value &) const;
    int operator != (const rnpRANAP_RelocationInformationIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpDirectTransferInformationList_RANAP_RelocInf *get_rnpDirectTransferInformationList_RANAP_RelocInf();
    const rnpDirectTransferInformationList_RANAP_RelocInf *get_rnpDirectTransferInformationList_RANAP_RelocInf() const;
    void set_rnpDirectTransferInformationList_RANAP_RelocInf(const rnpDirectTransferInformationList_RANAP_RelocInf &);
    rnpDirectTransferInformationList_RANAP_RelocInf *release_rnpDirectTransferInformationList_RANAP_RelocInf();
    void set_rnpDirectTransferInformationList_RANAP_RelocInf(rnpDirectTransferInformationList_RANAP_RelocInf *);

    rnpRAB_ContextList_RANAP_RelocInf *get_rnpRAB_ContextList_RANAP_RelocInf();
    const rnpRAB_ContextList_RANAP_RelocInf *get_rnpRAB_ContextList_RANAP_RelocInf() const;
    void set_rnpRAB_ContextList_RANAP_RelocInf(const rnpRAB_ContextList_RANAP_RelocInf &);
    rnpRAB_ContextList_RANAP_RelocInf *release_rnpRAB_ContextList_RANAP_RelocInf();
    void set_rnpRAB_ContextList_RANAP_RelocInf(rnpRAB_ContextList_RANAP_RelocInf *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq296;

class OSS_PUBLIC rnpRABParametersList : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq296 component;

    rnpRABParametersList();
    rnpRABParametersList(const rnpRABParametersList &);
    ~rnpRABParametersList();

    rnpRABParametersList & operator = (const rnpRABParametersList &);
    int operator == (const rnpRABParametersList &) const;
    int operator != (const rnpRABParametersList &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnpRABParametersList *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnpRABParametersList *);

    int remove_front();
    int remove_after(OssIndex);

    rnpRABParametersList *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared6 rnp_seqof271;

class OSS_PUBLIC rnpLocationReportingTransferInformation   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef enum rnpReportChangeOfSAI reportChangeOfSAI;
    typedef enum rnpPeriodicReportingIndicator periodicReportingIndicator;
    typedef enum rnpDirectReportingIndicator directReportingIndicator;
    typedef OSS_UINT32 verticalAccuracyCode;
    typedef enum rnpPositioningPriority positioningPriorityChangeSAI;
    typedef enum rnpPositioningPriority positioningPriorityDirect;
    typedef enum rnpClientType clientTypePeriodic;
    typedef enum rnpClientType clientTypeDirect;
    typedef enum rnpResponseTime responseTime;
    typedef enum rnpIncludeVelocity includeVelocity;
    typedef rnpPeriodicLocationInfo periodicLocationInfo;
    typedef rnp__shared6 iE_Extensions;

    rnpLocationReportingTransferInformation();
    rnpLocationReportingTransferInformation(const rnpLocationReportingTransferInformation &);
    rnpLocationReportingTransferInformation(reportChangeOfSAI, periodicReportingIndicator, 
	directReportingIndicator, verticalAccuracyCode, positioningPriorityChangeSAI, positioningPriorityDirect, 
	clientTypePeriodic, clientTypeDirect, responseTime, includeVelocity, const periodicLocationInfo &, 
	const iE_Extensions &);

    rnpLocationReportingTransferInformation & operator = (const rnpLocationReportingTransferInformation &);
    int operator == (const rnpLocationReportingTransferInformation &) const;
    int operator != (const rnpLocationReportingTransferInformation &) const;

    reportChangeOfSAI *get_reportChangeOfSAI();
    const reportChangeOfSAI *get_reportChangeOfSAI() const;
    void set_reportChangeOfSAI(reportChangeOfSAI);
    int reportChangeOfSAI_is_present() const;
    void omit_reportChangeOfSAI();

    periodicReportingIndicator *get_periodicReportingIndicator();
    const periodicReportingIndicator *get_periodicReportingIndicator() const;
    void set_periodicReportingIndicator(periodicReportingIndicator);
    int periodicReportingIndicator_is_present() const;
    void omit_periodicReportingIndicator();

    directReportingIndicator *get_directReportingIndicator();
    const directReportingIndicator *get_directReportingIndicator() const;
    void set_directReportingIndicator(directReportingIndicator);
    int directReportingIndicator_is_present() const;
    void omit_directReportingIndicator();

    verticalAccuracyCode *get_verticalAccuracyCode();
    const verticalAccuracyCode *get_verticalAccuracyCode() const;
    void set_verticalAccuracyCode(verticalAccuracyCode);
    int verticalAccuracyCode_is_present() const;
    void omit_verticalAccuracyCode();

    positioningPriorityChangeSAI *get_positioningPriorityChangeSAI();
    const positioningPriorityChangeSAI *get_positioningPriorityChangeSAI() const;
    void set_positioningPriorityChangeSAI(positioningPriorityChangeSAI);
    int positioningPriorityChangeSAI_is_present() const;
    void omit_positioningPriorityChangeSAI();

    positioningPriorityDirect *get_positioningPriorityDirect();
    const positioningPriorityDirect *get_positioningPriorityDirect() const;
    void set_positioningPriorityDirect(positioningPriorityDirect);
    int positioningPriorityDirect_is_present() const;
    void omit_positioningPriorityDirect();

    clientTypePeriodic *get_clientTypePeriodic();
    const clientTypePeriodic *get_clientTypePeriodic() const;
    void set_clientTypePeriodic(clientTypePeriodic);
    int clientTypePeriodic_is_present() const;
    void omit_clientTypePeriodic();

    clientTypeDirect *get_clientTypeDirect();
    const clientTypeDirect *get_clientTypeDirect() const;
    void set_clientTypeDirect(clientTypeDirect);
    int clientTypeDirect_is_present() const;
    void omit_clientTypeDirect();

    responseTime *get_responseTime();
    const responseTime *get_responseTime() const;
    void set_responseTime(responseTime);
    int responseTime_is_present() const;
    void omit_responseTime();

    includeVelocity *get_includeVelocity();
    const includeVelocity *get_includeVelocity() const;
    void set_includeVelocity(includeVelocity);
    int includeVelocity_is_present() const;
    void omit_includeVelocity();

    periodicLocationInfo *get_periodicLocationInfo();
    const periodicLocationInfo *get_periodicLocationInfo() const;
    void set_periodicLocationInfo(const periodicLocationInfo &);
    int periodicLocationInfo_is_present() const;
    void omit_periodicLocationInfo();

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    reportChangeOfSAI reportChangeOfSAI_field;
    periodicReportingIndicator periodicReportingIndicator_field;
    directReportingIndicator directReportingIndicator_field;
    verticalAccuracyCode verticalAccuracyCode_field;
    positioningPriorityChangeSAI positioningPriorityChangeSAI_field;
    positioningPriorityDirect positioningPriorityDirect_field;
    clientTypePeriodic clientTypePeriodic_field;
    clientTypeDirect clientTypeDirect_field;
    responseTime responseTime_field;
    includeVelocity includeVelocity_field;
    periodicLocationInfo periodicLocationInfo_field;
    iE_Extensions iE_Extensions_field;
};

typedef rnp__shared6 rnp_seqof293;

class OSS_PUBLIC rnpTraceInformation   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssString traceReference;
    typedef rnpUE_ID ue_identity;
    typedef rnpTracePropagationParameters tracePropagationParameters;
    typedef rnp__shared6 iE_Extensions;

    rnpTraceInformation();
    rnpTraceInformation(const rnpTraceInformation &);
    rnpTraceInformation(const traceReference &, const ue_identity &, const tracePropagationParameters &, 
	const iE_Extensions &);
    rnpTraceInformation(const traceReference &, const ue_identity &);

    rnpTraceInformation & operator = (const rnpTraceInformation &);
    int operator == (const rnpTraceInformation &) const;
    int operator != (const rnpTraceInformation &) const;

    traceReference & get_traceReference();
    const traceReference & get_traceReference() const;
    void set_traceReference(const traceReference &);

    ue_identity & get_ue_identity();
    const ue_identity & get_ue_identity() const;
    void set_ue_identity(const ue_identity &);

    tracePropagationParameters *get_tracePropagationParameters();
    const tracePropagationParameters *get_tracePropagationParameters() const;
    void set_tracePropagationParameters(const tracePropagationParameters &);
    int tracePropagationParameters_is_present() const;
    void omit_tracePropagationParameters();

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    traceReference traceReference_field;
    ue_identity ue_identity_field;
    tracePropagationParameters tracePropagationParameters_field;
    iE_Extensions iE_Extensions_field;
};

typedef rnp__shared6 rnp_seqof294;

class OSS_PUBLIC rnpRNSAPRelocationParameters   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnpRABParametersList rabParmetersList;
    typedef rnpLocationReportingTransferInformation locationReporting;
    typedef rnpTraceInformation traceInformation;
    typedef rnpSAI sourceSAI;
    typedef rnp__shared6 iE_Extensions;

    rnpRNSAPRelocationParameters();
    rnpRNSAPRelocationParameters(const rnpRNSAPRelocationParameters &);
    rnpRNSAPRelocationParameters(const rabParmetersList &, const locationReporting &, 
	const traceInformation &, const sourceSAI &, const iE_Extensions &);

    rnpRNSAPRelocationParameters & operator = (const rnpRNSAPRelocationParameters &);
    int operator == (const rnpRNSAPRelocationParameters &) const;
    int operator != (const rnpRNSAPRelocationParameters &) const;

    rabParmetersList *get_rabParmetersList();
    const rabParmetersList *get_rabParmetersList() const;
    void set_rabParmetersList(const rabParmetersList &);
    int rabParmetersList_is_present() const;
    void omit_rabParmetersList();

    locationReporting *get_locationReporting();
    const locationReporting *get_locationReporting() const;
    void set_locationReporting(const locationReporting &);
    int locationReporting_is_present() const;
    void omit_locationReporting();

    traceInformation *get_traceInformation();
    const traceInformation *get_traceInformation() const;
    void set_traceInformation(const traceInformation &);
    int traceInformation_is_present() const;
    void omit_traceInformation();

    sourceSAI *get_sourceSAI();
    const sourceSAI *get_sourceSAI() const;
    void set_sourceSAI(const sourceSAI &);
    int sourceSAI_is_present() const;
    void omit_sourceSAI();

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    rabParmetersList rabParmetersList_field;
    locationReporting locationReporting_field;
    traceInformation traceInformation_field;
    sourceSAI sourceSAI_field;
    iE_Extensions iE_Extensions_field;
};

class OSS_PUBLIC rnpRANAP_RelocationInformationExtensions_Extension : public OssConstrainedOpenType
{
public:
    rnpRANAP_RelocationInformationExtensions_Extension();
    rnpRANAP_RelocationInformationExtensions_Extension(const rnpRANAP_RelocationInformationExtensions_Extension &);
    ~rnpRANAP_RelocationInformationExtensions_Extension();
    rnpRANAP_RelocationInformationExtensions_Extension & operator = (const rnpRANAP_RelocationInformationExtensions_Extension &);
    int operator == (const rnpRANAP_RelocationInformationExtensions_Extension &) const;
    int operator != (const rnpRANAP_RelocationInformationExtensions_Extension &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpRRC_Container *get_rnpRRC_Container();
    const rnpRRC_Container *get_rnpRRC_Container() const;
    void set_rnpRRC_Container(const rnpRRC_Container &);
    rnpRRC_Container *release_rnpRRC_Container();
    void set_rnpRRC_Container(rnpRRC_Container *);

    rnpRNSAPRelocationParameters *get_rnpRNSAPRelocationParameters();
    const rnpRNSAPRelocationParameters *get_rnpRNSAPRelocationParameters() const;
    void set_rnpRNSAPRelocationParameters(const rnpRNSAPRelocationParameters &);
    rnpRNSAPRelocationParameters *release_rnpRNSAPRelocationParameters();
    void set_rnpRNSAPRelocationParameters(rnpRNSAPRelocationParameters *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq145   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpRANAP_RelocationInformationIEs_Value value;

    rnp_seq145();
    rnp_seq145(const rnp_seq145 &);
    rnp_seq145(id, criticality, const value &);

    rnp_seq145 & operator = (const rnp_seq145 &);
    int operator == (const rnp_seq145 &) const;
    int operator != (const rnp_seq145 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

class OSS_PUBLIC rnp_seq146   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpRANAP_RelocationInformationExtensions_Extension extensionValue;

    rnp_seq146();
    rnp_seq146(const rnp_seq146 &);
    rnp_seq146(id, criticality, const extensionValue &);

    rnp_seq146 & operator = (const rnp_seq146 &);
    int operator == (const rnp_seq146 &) const;
    int operator != (const rnp_seq146 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    extensionValue & get_extensionValue();
    const extensionValue & get_extensionValue() const;
    void set_extensionValue(const extensionValue &);
private:
    id id_field;
    criticality criticality_field;
    extensionValue extensionValue_field;
};

typedef rnp__shared6 rnp_seqof147;

class OSS_PUBLIC rnpDirectTransferInformationItem_RANAP_RelocInf   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssString nAS_PDU;
    typedef enum rnpSAPI sAPI;
    typedef enum rnpCN_DomainIndicator cN_DomainIndicator;
    typedef rnp__shared6 iE_Extensions;

    rnpDirectTransferInformationItem_RANAP_RelocInf();
    rnpDirectTransferInformationItem_RANAP_RelocInf(const rnpDirectTransferInformationItem_RANAP_RelocInf &);
    rnpDirectTransferInformationItem_RANAP_RelocInf(const nAS_PDU &, sAPI, cN_DomainIndicator, 
	const iE_Extensions &);
    rnpDirectTransferInformationItem_RANAP_RelocInf(const nAS_PDU &, sAPI, cN_DomainIndicator);

    rnpDirectTransferInformationItem_RANAP_RelocInf & operator = (const rnpDirectTransferInformationItem_RANAP_RelocInf &);
    int operator == (const rnpDirectTransferInformationItem_RANAP_RelocInf &) const;
    int operator != (const rnpDirectTransferInformationItem_RANAP_RelocInf &) const;

    nAS_PDU & get_nAS_PDU();
    const nAS_PDU & get_nAS_PDU() const;
    void set_nAS_PDU(const nAS_PDU &);

    sAPI & get_sAPI();
    sAPI get_sAPI() const;
    void set_sAPI(sAPI);

    cN_DomainIndicator & get_cN_DomainIndicator();
    cN_DomainIndicator get_cN_DomainIndicator() const;
    void set_cN_DomainIndicator(cN_DomainIndicator);

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    nAS_PDU nAS_PDU_field;
    sAPI sAPI_field;
    cN_DomainIndicator cN_DomainIndicator_field;
    iE_Extensions iE_Extensions_field;
};

class OSS_PUBLIC rnpDirectTransferInformationItemIEs_RANAP_RelocInf_Value : public OssConstrainedOpenType
{
public:
    rnpDirectTransferInformationItemIEs_RANAP_RelocInf_Value();
    rnpDirectTransferInformationItemIEs_RANAP_RelocInf_Value(const rnpDirectTransferInformationItemIEs_RANAP_RelocInf_Value &);
    ~rnpDirectTransferInformationItemIEs_RANAP_RelocInf_Value();
    rnpDirectTransferInformationItemIEs_RANAP_RelocInf_Value & operator = (const rnpDirectTransferInformationItemIEs_RANAP_RelocInf_Value &);
    int operator == (const rnpDirectTransferInformationItemIEs_RANAP_RelocInf_Value &) const;
    int operator != (const rnpDirectTransferInformationItemIEs_RANAP_RelocInf_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpDirectTransferInformationItem_RANAP_RelocInf *get_rnpDirectTransferInformationItem_RANAP_RelocInf();
    const rnpDirectTransferInformationItem_RANAP_RelocInf *get_rnpDirectTransferInformationItem_RANAP_RelocInf() const;
    void set_rnpDirectTransferInformationItem_RANAP_RelocInf(const rnpDirectTransferInformationItem_RANAP_RelocInf &);
    rnpDirectTransferInformationItem_RANAP_RelocInf *release_rnpDirectTransferInformationItem_RANAP_RelocInf();
    void set_rnpDirectTransferInformationItem_RANAP_RelocInf(rnpDirectTransferInformationItem_RANAP_RelocInf *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq147;

class OSS_PUBLIC rnp_seqof146 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq147 component;

    rnp_seqof146();
    rnp_seqof146(const rnp_seqof146 &);
    ~rnp_seqof146();

    rnp_seqof146 & operator = (const rnp_seqof146 &);
    int operator == (const rnp_seqof146 &) const;
    int operator != (const rnp_seqof146 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof146 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof146 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof146 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnp_seq147   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpDirectTransferInformationItemIEs_RANAP_RelocInf_Value value;

    rnp_seq147();
    rnp_seq147(const rnp_seq147 &);
    rnp_seq147(id, criticality, const value &);

    rnp_seq147 & operator = (const rnp_seq147 &);
    int operator == (const rnp_seq147 &) const;
    int operator != (const rnp_seq147 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

typedef rnp__shared5 rnp_seq148;

typedef rnp__shared32 rnpRAB_ContextItem_RANAP_RelocInf;

class OSS_PUBLIC rnpRAB_ContextItemIEs_RANAP_RelocInf_Value : public OssConstrainedOpenType
{
public:
    rnpRAB_ContextItemIEs_RANAP_RelocInf_Value();
    rnpRAB_ContextItemIEs_RANAP_RelocInf_Value(const rnpRAB_ContextItemIEs_RANAP_RelocInf_Value &);
    ~rnpRAB_ContextItemIEs_RANAP_RelocInf_Value();
    rnpRAB_ContextItemIEs_RANAP_RelocInf_Value & operator = (const rnpRAB_ContextItemIEs_RANAP_RelocInf_Value &);
    int operator == (const rnpRAB_ContextItemIEs_RANAP_RelocInf_Value &) const;
    int operator != (const rnpRAB_ContextItemIEs_RANAP_RelocInf_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnp__shared32 *get_rnpRAB_ContextItem_RANAP_RelocInf();
    const rnp__shared32 *get_rnpRAB_ContextItem_RANAP_RelocInf() const;
    void set_rnpRAB_ContextItem_RANAP_RelocInf(const rnp__shared32 &);
    rnp__shared32 *release_rnpRAB_ContextItem_RANAP_RelocInf();
    void set_rnpRAB_ContextItem_RANAP_RelocInf(rnp__shared32 *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq149;

class OSS_PUBLIC rnp_seqof148 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq149 component;

    rnp_seqof148();
    rnp_seqof148(const rnp_seqof148 &);
    ~rnp_seqof148();

    rnp_seqof148 & operator = (const rnp_seqof148 &);
    int operator == (const rnp_seqof148 &) const;
    int operator != (const rnp_seqof148 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof148 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof148 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof148 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnp_seq149   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpRAB_ContextItemIEs_RANAP_RelocInf_Value value;

    rnp_seq149();
    rnp_seq149(const rnp_seq149 &);
    rnp_seq149(id, criticality, const value &);

    rnp_seq149 & operator = (const rnp_seq149 &);
    int operator == (const rnp_seq149 &) const;
    int operator != (const rnp_seq149 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

typedef rnp__shared6 rnp_seqof149;

typedef rnp__shared5 rnp_seq150;

class OSS_PUBLIC rnp_seqof152;

class OSS_PUBLIC rnpRAB_SetupList_EnhRelocInfoReq : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seqof152 component;

    rnpRAB_SetupList_EnhRelocInfoReq();
    rnpRAB_SetupList_EnhRelocInfoReq(const rnpRAB_SetupList_EnhRelocInfoReq &);
    ~rnpRAB_SetupList_EnhRelocInfoReq();

    rnpRAB_SetupList_EnhRelocInfoReq & operator = (const rnpRAB_SetupList_EnhRelocInfoReq &);
    int operator == (const rnpRAB_SetupList_EnhRelocInfoReq &) const;
    int operator != (const rnpRAB_SetupList_EnhRelocInfoReq &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnpRAB_SetupList_EnhRelocInfoReq *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnpRAB_SetupList_EnhRelocInfoReq *);

    int remove_front();
    int remove_after(OssIndex);

    rnpRAB_SetupList_EnhRelocInfoReq *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpRANAP_EnhancedRelocationInformationRequestIEs_Value : public OssConstrainedOpenType
{
public:
    rnpRANAP_EnhancedRelocationInformationRequestIEs_Value();
    rnpRANAP_EnhancedRelocationInformationRequestIEs_Value(const rnpRANAP_EnhancedRelocationInformationRequestIEs_Value &);
    ~rnpRANAP_EnhancedRelocationInformationRequestIEs_Value();
    rnpRANAP_EnhancedRelocationInformationRequestIEs_Value & operator = (const rnpRANAP_EnhancedRelocationInformationRequestIEs_Value &);
    int operator == (const rnpRANAP_EnhancedRelocationInformationRequestIEs_Value &) const;
    int operator != (const rnpRANAP_EnhancedRelocationInformationRequestIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpSourceRNC_ToTargetRNC_TransparentContainer *get_rnpSourceRNC_ToTargetRNC_TransparentContainer();
    const rnpSourceRNC_ToTargetRNC_TransparentContainer *get_rnpSourceRNC_ToTargetRNC_TransparentContainer() const;
    void set_rnpSourceRNC_ToTargetRNC_TransparentContainer(const rnpSourceRNC_ToTargetRNC_TransparentContainer &);
    rnpSourceRNC_ToTargetRNC_TransparentContainer *release_rnpSourceRNC_ToTargetRNC_TransparentContainer();
    void set_rnpSourceRNC_ToTargetRNC_TransparentContainer(rnpSourceRNC_ToTargetRNC_TransparentContainer *);

    rnpIuSignallingConnectionIdentifier *get_rnpIuSignallingConnectionIdentifier();
    const rnpIuSignallingConnectionIdentifier *get_rnpIuSignallingConnectionIdentifier() const;
    void set_rnpIuSignallingConnectionIdentifier(const rnpIuSignallingConnectionIdentifier &);
    rnpIuSignallingConnectionIdentifier *release_rnpIuSignallingConnectionIdentifier();
    void set_rnpIuSignallingConnectionIdentifier(rnpIuSignallingConnectionIdentifier *);

    rnpGlobalCN_ID *get_rnpGlobalCN_ID();
    const rnpGlobalCN_ID *get_rnpGlobalCN_ID() const;
    void set_rnpGlobalCN_ID(const rnpGlobalCN_ID &);
    rnpGlobalCN_ID *release_rnpGlobalCN_ID();
    void set_rnpGlobalCN_ID(rnpGlobalCN_ID *);

    rnpRAB_SetupList_EnhRelocInfoReq *get_rnpRAB_SetupList_EnhRelocInfoReq();
    const rnpRAB_SetupList_EnhRelocInfoReq *get_rnpRAB_SetupList_EnhRelocInfoReq() const;
    void set_rnpRAB_SetupList_EnhRelocInfoReq(const rnpRAB_SetupList_EnhRelocInfoReq &);
    rnpRAB_SetupList_EnhRelocInfoReq *release_rnpRAB_SetupList_EnhRelocInfoReq();
    void set_rnpRAB_SetupList_EnhRelocInfoReq(rnpRAB_SetupList_EnhRelocInfoReq *);

    rnpSNA_Access_Information *get_rnpSNA_Access_Information();
    const rnpSNA_Access_Information *get_rnpSNA_Access_Information() const;
    void set_rnpSNA_Access_Information(const rnpSNA_Access_Information &);
    rnpSNA_Access_Information *release_rnpSNA_Access_Information();
    void set_rnpSNA_Access_Information(rnpSNA_Access_Information *);

    rnpUESBI_Iu *get_rnpUESBI_Iu();
    const rnpUESBI_Iu *get_rnpUESBI_Iu() const;
    void set_rnpUESBI_Iu(const rnpUESBI_Iu &);
    rnpUESBI_Iu *release_rnpUESBI_Iu();
    void set_rnpUESBI_Iu(rnpUESBI_Iu *);

    rnpPLMNidentity *get_rnpPLMNidentity();
    const rnpPLMNidentity *get_rnpPLMNidentity() const;
    void set_rnpPLMNidentity(const rnpPLMNidentity &);
    rnpPLMNidentity *release_rnpPLMNidentity();
    void set_rnpPLMNidentity(rnpPLMNidentity *);

    rnpCNMBMSLinkingInformation *get_rnpCNMBMSLinkingInformation();
    const rnpCNMBMSLinkingInformation *get_rnpCNMBMSLinkingInformation() const;
    void set_rnpCNMBMSLinkingInformation(const rnpCNMBMSLinkingInformation &);
    rnpCNMBMSLinkingInformation *release_rnpCNMBMSLinkingInformation();
    void set_rnpCNMBMSLinkingInformation(rnpCNMBMSLinkingInformation *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnpRANAP_EnhancedRelocationInformationRequestExtensions_Extension : public OssConstrainedOpenType
{
public:
    rnpRANAP_EnhancedRelocationInformationRequestExtensions_Extension();
    rnpRANAP_EnhancedRelocationInformationRequestExtensions_Extension(const rnpRANAP_EnhancedRelocationInformationRequestExtensions_Extension &);
    ~rnpRANAP_EnhancedRelocationInformationRequestExtensions_Extension();
    rnpRANAP_EnhancedRelocationInformationRequestExtensions_Extension & operator = (const rnpRANAP_EnhancedRelocationInformationRequestExtensions_Extension &);
    int operator == (const rnpRANAP_EnhancedRelocationInformationRequestExtensions_Extension &) const;
    int operator != (const rnpRANAP_EnhancedRelocationInformationRequestExtensions_Extension &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnp__shared16 *get_rnpIntegrityProtectionInformation();
    const rnp__shared16 *get_rnpIntegrityProtectionInformation() const;
    void set_rnpIntegrityProtectionInformation(const rnp__shared16 &);
    rnp__shared16 *release_rnpIntegrityProtectionInformation();
    void set_rnpIntegrityProtectionInformation(rnp__shared16 *);

    rnp__shared16 *get_rnpEncryptionInformation();
    const rnp__shared16 *get_rnpEncryptionInformation() const;
    void set_rnpEncryptionInformation(const rnp__shared16 &);
    rnp__shared16 *release_rnpEncryptionInformation();
    void set_rnpEncryptionInformation(rnp__shared16 *);

    rnpUE_AggregateMaximumBitRate *get_rnpUE_AggregateMaximumBitRate();
    const rnpUE_AggregateMaximumBitRate *get_rnpUE_AggregateMaximumBitRate() const;
    void set_rnpUE_AggregateMaximumBitRate(const rnpUE_AggregateMaximumBitRate &);
    rnpUE_AggregateMaximumBitRate *release_rnpUE_AggregateMaximumBitRate();
    void set_rnpUE_AggregateMaximumBitRate(rnpUE_AggregateMaximumBitRate *);

    rnpRABParametersList *get_rnpRABParametersList();
    const rnpRABParametersList *get_rnpRABParametersList() const;
    void set_rnpRABParametersList(const rnpRABParametersList &);
    rnpRABParametersList *release_rnpRABParametersList();
    void set_rnpRABParametersList(rnpRABParametersList *);

    rnpCSG_Id *get_rnpCSG_Id();
    const rnpCSG_Id *get_rnpCSG_Id() const;
    void set_rnpCSG_Id(const rnpCSG_Id &);
    rnpCSG_Id *release_rnpCSG_Id();
    void set_rnpCSG_Id(rnpCSG_Id *);

    rnpCSG_Membership_Status *get_rnpCSG_Membership_Status();
    const rnpCSG_Membership_Status *get_rnpCSG_Membership_Status() const;
    void set_rnpCSG_Membership_Status(const rnpCSG_Membership_Status &);
    rnpCSG_Membership_Status *release_rnpCSG_Membership_Status();
    void set_rnpCSG_Membership_Status(rnpCSG_Membership_Status *);

    rnpPLMNidentity *get_rnpPLMNidentity();
    const rnpPLMNidentity *get_rnpPLMNidentity() const;
    void set_rnpPLMNidentity(const rnpPLMNidentity &);
    rnpPLMNidentity *release_rnpPLMNidentity();
    void set_rnpPLMNidentity(rnpPLMNidentity *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq151;

class OSS_PUBLIC rnp_seqof150 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq151 component;

    rnp_seqof150();
    rnp_seqof150(const rnp_seqof150 &);
    ~rnp_seqof150();

    rnp_seqof150 & operator = (const rnp_seqof150 &);
    int operator == (const rnp_seqof150 &) const;
    int operator != (const rnp_seqof150 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof150 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof150 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof150 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnp_seq152;

class OSS_PUBLIC rnp_seqof151 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq152 component;

    rnp_seqof151();
    rnp_seqof151(const rnp_seqof151 &);
    ~rnp_seqof151();

    rnp_seqof151 & operator = (const rnp_seqof151 &);
    int operator == (const rnp_seqof151 &) const;
    int operator != (const rnp_seqof151 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof151 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof151 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof151 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpRANAP_EnhancedRelocationInformationRequest   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp_seqof150 protocolIEs;
    typedef rnp_seqof151 protocolExtensions;

    rnpRANAP_EnhancedRelocationInformationRequest();
    rnpRANAP_EnhancedRelocationInformationRequest(const rnpRANAP_EnhancedRelocationInformationRequest &);
    rnpRANAP_EnhancedRelocationInformationRequest(const protocolIEs &, const protocolExtensions &);
    rnpRANAP_EnhancedRelocationInformationRequest(const protocolIEs &);

    rnpRANAP_EnhancedRelocationInformationRequest & operator = (const rnpRANAP_EnhancedRelocationInformationRequest &);
    int operator == (const rnpRANAP_EnhancedRelocationInformationRequest &) const;
    int operator != (const rnpRANAP_EnhancedRelocationInformationRequest &) const;

    protocolIEs & get_protocolIEs();
    const protocolIEs & get_protocolIEs() const;
    void set_protocolIEs(const protocolIEs &);

    protocolExtensions *get_protocolExtensions();
    const protocolExtensions *get_protocolExtensions() const;
    void set_protocolExtensions(const protocolExtensions &);
    int protocolExtensions_is_present() const;
    void omit_protocolExtensions();
private:
    OSS_UINT32 bit_mask;
    protocolIEs protocolIEs_field;
    protocolExtensions protocolExtensions_field;
};

class OSS_PUBLIC rnp_seq151   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpRANAP_EnhancedRelocationInformationRequestIEs_Value value;

    rnp_seq151();
    rnp_seq151(const rnp_seq151 &);
    rnp_seq151(id, criticality, const value &);

    rnp_seq151 & operator = (const rnp_seq151 &);
    int operator == (const rnp_seq151 &) const;
    int operator != (const rnp_seq151 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

class OSS_PUBLIC rnp_seq152   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpRANAP_EnhancedRelocationInformationRequestExtensions_Extension extensionValue;

    rnp_seq152();
    rnp_seq152(const rnp_seq152 &);
    rnp_seq152(id, criticality, const extensionValue &);

    rnp_seq152 & operator = (const rnp_seq152 &);
    int operator == (const rnp_seq152 &) const;
    int operator != (const rnp_seq152 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    extensionValue & get_extensionValue();
    const extensionValue & get_extensionValue() const;
    void set_extensionValue(const extensionValue &);
private:
    id id_field;
    criticality criticality_field;
    extensionValue extensionValue_field;
};

typedef rnp__shared35 rnpTNLInformationEnhRelInfoReq;

class OSS_PUBLIC rnp_seq156;

class OSS_PUBLIC rnp_seqof155 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq156 component;

    rnp_seqof155();
    rnp_seqof155(const rnp_seqof155 &);
    ~rnp_seqof155();

    rnp_seqof155 & operator = (const rnp_seqof155 &);
    int operator == (const rnp_seqof155 &) const;
    int operator != (const rnp_seqof155 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof155 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof155 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof155 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpRAB_SetupItem_EnhRelocInfoReq   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssBitString rAB_ID;
    typedef enum rnpCN_DomainIndicator cN_DomainIndicator;
    typedef rnpRAB_Parameters rAB_Parameters;
    typedef enum rnpDataVolumeReportingIndication dataVolumeReportingIndication;
    typedef rnp__shared13 pDP_TypeInformation;
    typedef rnpUserPlaneInformation userPlaneInformation;
    typedef rnp__shared35 dataForwardingInformation;
    typedef rnp__shared35 sourceSideIuULTNLInfo;
    typedef enum rnpService_Handover service_Handover;
    typedef rnpAlt_RAB_Parameters alt_RAB_Parameters;
    typedef rnp_seqof155 iE_Extensions;

    rnpRAB_SetupItem_EnhRelocInfoReq();
    rnpRAB_SetupItem_EnhRelocInfoReq(const rnpRAB_SetupItem_EnhRelocInfoReq &);
    rnpRAB_SetupItem_EnhRelocInfoReq(const rAB_ID &, cN_DomainIndicator, const rAB_Parameters &, 
	dataVolumeReportingIndication, const pDP_TypeInformation &, const userPlaneInformation &, 
	const dataForwardingInformation &, const sourceSideIuULTNLInfo &, service_Handover, 
	const alt_RAB_Parameters &, const iE_Extensions &);
    rnpRAB_SetupItem_EnhRelocInfoReq(const rAB_ID &, cN_DomainIndicator, const rAB_Parameters &, 
	const userPlaneInformation &);

    rnpRAB_SetupItem_EnhRelocInfoReq & operator = (const rnpRAB_SetupItem_EnhRelocInfoReq &);
    int operator == (const rnpRAB_SetupItem_EnhRelocInfoReq &) const;
    int operator != (const rnpRAB_SetupItem_EnhRelocInfoReq &) const;

    rAB_ID & get_rAB_ID();
    const rAB_ID & get_rAB_ID() const;
    void set_rAB_ID(const rAB_ID &);

    cN_DomainIndicator & get_cN_DomainIndicator();
    cN_DomainIndicator get_cN_DomainIndicator() const;
    void set_cN_DomainIndicator(cN_DomainIndicator);

    rAB_Parameters & get_rAB_Parameters();
    const rAB_Parameters & get_rAB_Parameters() const;
    void set_rAB_Parameters(const rAB_Parameters &);

    dataVolumeReportingIndication *get_dataVolumeReportingIndication();
    const dataVolumeReportingIndication *get_dataVolumeReportingIndication() const;
    void set_dataVolumeReportingIndication(dataVolumeReportingIndication);
    int dataVolumeReportingIndication_is_present() const;
    void omit_dataVolumeReportingIndication();

    pDP_TypeInformation *get_pDP_TypeInformation();
    const pDP_TypeInformation *get_pDP_TypeInformation() const;
    void set_pDP_TypeInformation(const pDP_TypeInformation &);
    int pDP_TypeInformation_is_present() const;
    void omit_pDP_TypeInformation();

    userPlaneInformation & get_userPlaneInformation();
    const userPlaneInformation & get_userPlaneInformation() const;
    void set_userPlaneInformation(const userPlaneInformation &);

    dataForwardingInformation *get_dataForwardingInformation();
    const dataForwardingInformation *get_dataForwardingInformation() const;
    void set_dataForwardingInformation(const dataForwardingInformation &);
    int dataForwardingInformation_is_present() const;
    void omit_dataForwardingInformation();

    sourceSideIuULTNLInfo *get_sourceSideIuULTNLInfo();
    const sourceSideIuULTNLInfo *get_sourceSideIuULTNLInfo() const;
    void set_sourceSideIuULTNLInfo(const sourceSideIuULTNLInfo &);
    int sourceSideIuULTNLInfo_is_present() const;
    void omit_sourceSideIuULTNLInfo();

    service_Handover *get_service_Handover();
    const service_Handover *get_service_Handover() const;
    void set_service_Handover(service_Handover);
    int service_Handover_is_present() const;
    void omit_service_Handover();

    alt_RAB_Parameters *get_alt_RAB_Parameters();
    const alt_RAB_Parameters *get_alt_RAB_Parameters() const;
    void set_alt_RAB_Parameters(const alt_RAB_Parameters &);
    int alt_RAB_Parameters_is_present() const;
    void omit_alt_RAB_Parameters();

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    rAB_ID rAB_ID_field;
    cN_DomainIndicator cN_DomainIndicator_field;
    rAB_Parameters rAB_Parameters_field;
    dataVolumeReportingIndication dataVolumeReportingIndication_field;
    pDP_TypeInformation pDP_TypeInformation_field;
    userPlaneInformation userPlaneInformation_field;
    dataForwardingInformation dataForwardingInformation_field;
    sourceSideIuULTNLInfo sourceSideIuULTNLInfo_field;
    service_Handover service_Handover_field;
    alt_RAB_Parameters alt_RAB_Parameters_field;
    iE_Extensions iE_Extensions_field;
};

class OSS_PUBLIC rnpRAB_SetupItem_EnhRelocInfoReq_IEs_Value : public OssConstrainedOpenType
{
public:
    rnpRAB_SetupItem_EnhRelocInfoReq_IEs_Value();
    rnpRAB_SetupItem_EnhRelocInfoReq_IEs_Value(const rnpRAB_SetupItem_EnhRelocInfoReq_IEs_Value &);
    ~rnpRAB_SetupItem_EnhRelocInfoReq_IEs_Value();
    rnpRAB_SetupItem_EnhRelocInfoReq_IEs_Value & operator = (const rnpRAB_SetupItem_EnhRelocInfoReq_IEs_Value &);
    int operator == (const rnpRAB_SetupItem_EnhRelocInfoReq_IEs_Value &) const;
    int operator != (const rnpRAB_SetupItem_EnhRelocInfoReq_IEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpRAB_SetupItem_EnhRelocInfoReq *get_rnpRAB_SetupItem_EnhRelocInfoReq();
    const rnpRAB_SetupItem_EnhRelocInfoReq *get_rnpRAB_SetupItem_EnhRelocInfoReq() const;
    void set_rnpRAB_SetupItem_EnhRelocInfoReq(const rnpRAB_SetupItem_EnhRelocInfoReq &);
    rnpRAB_SetupItem_EnhRelocInfoReq *release_rnpRAB_SetupItem_EnhRelocInfoReq();
    void set_rnpRAB_SetupItem_EnhRelocInfoReq(rnpRAB_SetupItem_EnhRelocInfoReq *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq153;

class OSS_PUBLIC rnp_seqof152 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq153 component;

    rnp_seqof152();
    rnp_seqof152(const rnp_seqof152 &);
    ~rnp_seqof152();

    rnp_seqof152 & operator = (const rnp_seqof152 &);
    int operator == (const rnp_seqof152 &) const;
    int operator != (const rnp_seqof152 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof152 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof152 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof152 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnp_seq153   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpRAB_SetupItem_EnhRelocInfoReq_IEs_Value value;

    rnp_seq153();
    rnp_seq153(const rnp_seq153 &);
    rnp_seq153(id, criticality, const value &);

    rnp_seq153 & operator = (const rnp_seq153 &);
    int operator == (const rnp_seq153 &) const;
    int operator != (const rnp_seq153 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

typedef rnp__shared6 rnp_seqof153;

typedef rnp__shared5 rnp_seq154;

typedef rnp__shared14 rnpAlt_RAB_Parameter_ExtendedGuaranteedBitrates;

class OSS_PUBLIC rnpAlt_RAB_Parameter_ExtendedGuaranteedBitrateInf   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef enum rnpAlt_RAB_Parameter_GuaranteedBitrateType altExtendedGuaranteedBitrateType;
    typedef rnp__shared14 altExtendedGuaranteedBitrates;

    rnpAlt_RAB_Parameter_ExtendedGuaranteedBitrateInf();
    rnpAlt_RAB_Parameter_ExtendedGuaranteedBitrateInf(const rnpAlt_RAB_Parameter_ExtendedGuaranteedBitrateInf &);
    rnpAlt_RAB_Parameter_ExtendedGuaranteedBitrateInf(altExtendedGuaranteedBitrateType, 
	const altExtendedGuaranteedBitrates &);
    rnpAlt_RAB_Parameter_ExtendedGuaranteedBitrateInf(altExtendedGuaranteedBitrateType);

    rnpAlt_RAB_Parameter_ExtendedGuaranteedBitrateInf & operator = (const rnpAlt_RAB_Parameter_ExtendedGuaranteedBitrateInf &);
    int operator == (const rnpAlt_RAB_Parameter_ExtendedGuaranteedBitrateInf &) const;
    int operator != (const rnpAlt_RAB_Parameter_ExtendedGuaranteedBitrateInf &) const;

    altExtendedGuaranteedBitrateType & get_altExtendedGuaranteedBitrateType();
    altExtendedGuaranteedBitrateType get_altExtendedGuaranteedBitrateType() const;
    void set_altExtendedGuaranteedBitrateType(altExtendedGuaranteedBitrateType);

    altExtendedGuaranteedBitrates *get_altExtendedGuaranteedBitrates();
    const altExtendedGuaranteedBitrates *get_altExtendedGuaranteedBitrates() const;
    void set_altExtendedGuaranteedBitrates(const altExtendedGuaranteedBitrates &);
    int altExtendedGuaranteedBitrates_is_present() const;
    void omit_altExtendedGuaranteedBitrates();
private:
    OSS_UINT32 bit_mask;
    altExtendedGuaranteedBitrateType altExtendedGuaranteedBitrateType_field;
    altExtendedGuaranteedBitrates altExtendedGuaranteedBitrates_field;
};

typedef rnp__shared14 rnpAlt_RAB_Parameter_ExtendedMaxBitrates;

class OSS_PUBLIC rnpAlt_RAB_Parameter_ExtendedMaxBitrateInf   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef enum rnpAlt_RAB_Parameter_MaxBitrateType altExtendedMaxBitrateType;
    typedef rnp__shared14 altExtendedMaxBitrates;

    rnpAlt_RAB_Parameter_ExtendedMaxBitrateInf();
    rnpAlt_RAB_Parameter_ExtendedMaxBitrateInf(const rnpAlt_RAB_Parameter_ExtendedMaxBitrateInf &);
    rnpAlt_RAB_Parameter_ExtendedMaxBitrateInf(altExtendedMaxBitrateType, const altExtendedMaxBitrates &);
    rnpAlt_RAB_Parameter_ExtendedMaxBitrateInf(altExtendedMaxBitrateType);

    rnpAlt_RAB_Parameter_ExtendedMaxBitrateInf & operator = (const rnpAlt_RAB_Parameter_ExtendedMaxBitrateInf &);
    int operator == (const rnpAlt_RAB_Parameter_ExtendedMaxBitrateInf &) const;
    int operator != (const rnpAlt_RAB_Parameter_ExtendedMaxBitrateInf &) const;

    altExtendedMaxBitrateType & get_altExtendedMaxBitrateType();
    altExtendedMaxBitrateType get_altExtendedMaxBitrateType() const;
    void set_altExtendedMaxBitrateType(altExtendedMaxBitrateType);

    altExtendedMaxBitrates *get_altExtendedMaxBitrates();
    const altExtendedMaxBitrates *get_altExtendedMaxBitrates() const;
    void set_altExtendedMaxBitrates(const altExtendedMaxBitrates &);
    int altExtendedMaxBitrates_is_present() const;
    void omit_altExtendedMaxBitrates();
private:
    OSS_UINT32 bit_mask;
    altExtendedMaxBitrateType altExtendedMaxBitrateType_field;
    altExtendedMaxBitrates altExtendedMaxBitrates_field;
};

class OSS_PUBLIC rnp__shared15 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnpSupportedRAB_ParameterBitrateList component;

    rnp__shared15();
    rnp__shared15(const rnp__shared15 &);
    ~rnp__shared15();

    rnp__shared15 & operator = (const rnp__shared15 &);
    int operator == (const rnp__shared15 &) const;
    int operator != (const rnp__shared15 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp__shared15 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp__shared15 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp__shared15 *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared15 rnpAlt_RAB_Parameter_SupportedMaxBitrates;

typedef rnp__shared6 rnp_seqof240;

class OSS_PUBLIC rnpAlt_RAB_Parameter_SupportedMaxBitrateInf   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef enum rnpAlt_RAB_Parameter_MaxBitrateType altSupportedMaxBitrateType;
    typedef rnp__shared15 altSupportedMaxBitrates;
    typedef rnp__shared6 iE_Extensions;

    rnpAlt_RAB_Parameter_SupportedMaxBitrateInf();
    rnpAlt_RAB_Parameter_SupportedMaxBitrateInf(const rnpAlt_RAB_Parameter_SupportedMaxBitrateInf &);
    rnpAlt_RAB_Parameter_SupportedMaxBitrateInf(altSupportedMaxBitrateType, const altSupportedMaxBitrates &, 
	const iE_Extensions &);
    rnpAlt_RAB_Parameter_SupportedMaxBitrateInf(altSupportedMaxBitrateType);

    rnpAlt_RAB_Parameter_SupportedMaxBitrateInf & operator = (const rnpAlt_RAB_Parameter_SupportedMaxBitrateInf &);
    int operator == (const rnpAlt_RAB_Parameter_SupportedMaxBitrateInf &) const;
    int operator != (const rnpAlt_RAB_Parameter_SupportedMaxBitrateInf &) const;

    altSupportedMaxBitrateType & get_altSupportedMaxBitrateType();
    altSupportedMaxBitrateType get_altSupportedMaxBitrateType() const;
    void set_altSupportedMaxBitrateType(altSupportedMaxBitrateType);

    altSupportedMaxBitrates *get_altSupportedMaxBitrates();
    const altSupportedMaxBitrates *get_altSupportedMaxBitrates() const;
    void set_altSupportedMaxBitrates(const altSupportedMaxBitrates &);
    int altSupportedMaxBitrates_is_present() const;
    void omit_altSupportedMaxBitrates();

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    altSupportedMaxBitrateType altSupportedMaxBitrateType_field;
    altSupportedMaxBitrates altSupportedMaxBitrates_field;
    iE_Extensions iE_Extensions_field;
};

typedef rnp__shared15 rnpAlt_RAB_Parameter_SupportedGuaranteedBitrates;

typedef rnp__shared6 rnp_seqof239;

class OSS_PUBLIC rnpAlt_RAB_Parameter_SupportedGuaranteedBitrateInf   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef enum rnpAlt_RAB_Parameter_GuaranteedBitrateType altSupportedGuaranteedBitrateType;
    typedef rnp__shared15 altSupportedGuaranteedBitrates;
    typedef rnp__shared6 iE_Extensions;

    rnpAlt_RAB_Parameter_SupportedGuaranteedBitrateInf();
    rnpAlt_RAB_Parameter_SupportedGuaranteedBitrateInf(const rnpAlt_RAB_Parameter_SupportedGuaranteedBitrateInf &);
    rnpAlt_RAB_Parameter_SupportedGuaranteedBitrateInf(altSupportedGuaranteedBitrateType, 
	const altSupportedGuaranteedBitrates &, const iE_Extensions &);
    rnpAlt_RAB_Parameter_SupportedGuaranteedBitrateInf(altSupportedGuaranteedBitrateType);

    rnpAlt_RAB_Parameter_SupportedGuaranteedBitrateInf & operator = (const rnpAlt_RAB_Parameter_SupportedGuaranteedBitrateInf &);
    int operator == (const rnpAlt_RAB_Parameter_SupportedGuaranteedBitrateInf &) const;
    int operator != (const rnpAlt_RAB_Parameter_SupportedGuaranteedBitrateInf &) const;

    altSupportedGuaranteedBitrateType & get_altSupportedGuaranteedBitrateType();
    altSupportedGuaranteedBitrateType get_altSupportedGuaranteedBitrateType() const;
    void set_altSupportedGuaranteedBitrateType(altSupportedGuaranteedBitrateType);

    altSupportedGuaranteedBitrates *get_altSupportedGuaranteedBitrates();
    const altSupportedGuaranteedBitrates *get_altSupportedGuaranteedBitrates() const;
    void set_altSupportedGuaranteedBitrates(const altSupportedGuaranteedBitrates &);
    int altSupportedGuaranteedBitrates_is_present() const;
    void omit_altSupportedGuaranteedBitrates();

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    altSupportedGuaranteedBitrateType altSupportedGuaranteedBitrateType_field;
    altSupportedGuaranteedBitrates altSupportedGuaranteedBitrates_field;
    iE_Extensions iE_Extensions_field;
};

class OSS_PUBLIC rnpAlt_RAB_Parameters_ExtIEs_Extension : public OssConstrainedOpenType
{
public:
    rnpAlt_RAB_Parameters_ExtIEs_Extension();
    rnpAlt_RAB_Parameters_ExtIEs_Extension(const rnpAlt_RAB_Parameters_ExtIEs_Extension &);
    ~rnpAlt_RAB_Parameters_ExtIEs_Extension();
    rnpAlt_RAB_Parameters_ExtIEs_Extension & operator = (const rnpAlt_RAB_Parameters_ExtIEs_Extension &);
    int operator == (const rnpAlt_RAB_Parameters_ExtIEs_Extension &) const;
    int operator != (const rnpAlt_RAB_Parameters_ExtIEs_Extension &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpRAB_Parameters *get_rnpRAB_Parameters();
    const rnpRAB_Parameters *get_rnpRAB_Parameters() const;
    void set_rnpRAB_Parameters(const rnpRAB_Parameters &);
    rnpRAB_Parameters *release_rnpRAB_Parameters();
    void set_rnpRAB_Parameters(rnpRAB_Parameters *);

    rnpAlt_RAB_Parameter_ExtendedGuaranteedBitrateInf *get_rnpAlt_RAB_Parameter_ExtendedGuaranteedBitrateInf();
    const rnpAlt_RAB_Parameter_ExtendedGuaranteedBitrateInf *get_rnpAlt_RAB_Parameter_ExtendedGuaranteedBitrateInf() const;
    void set_rnpAlt_RAB_Parameter_ExtendedGuaranteedBitrateInf(const rnpAlt_RAB_Parameter_ExtendedGuaranteedBitrateInf &);
    rnpAlt_RAB_Parameter_ExtendedGuaranteedBitrateInf *release_rnpAlt_RAB_Parameter_ExtendedGuaranteedBitrateInf();
    void set_rnpAlt_RAB_Parameter_ExtendedGuaranteedBitrateInf(rnpAlt_RAB_Parameter_ExtendedGuaranteedBitrateInf *);

    rnpAlt_RAB_Parameter_ExtendedMaxBitrateInf *get_rnpAlt_RAB_Parameter_ExtendedMaxBitrateInf();
    const rnpAlt_RAB_Parameter_ExtendedMaxBitrateInf *get_rnpAlt_RAB_Parameter_ExtendedMaxBitrateInf() const;
    void set_rnpAlt_RAB_Parameter_ExtendedMaxBitrateInf(const rnpAlt_RAB_Parameter_ExtendedMaxBitrateInf &);
    rnpAlt_RAB_Parameter_ExtendedMaxBitrateInf *release_rnpAlt_RAB_Parameter_ExtendedMaxBitrateInf();
    void set_rnpAlt_RAB_Parameter_ExtendedMaxBitrateInf(rnpAlt_RAB_Parameter_ExtendedMaxBitrateInf *);

    rnpAlt_RAB_Parameter_SupportedMaxBitrateInf *get_rnpAlt_RAB_Parameter_SupportedMaxBitrateInf();
    const rnpAlt_RAB_Parameter_SupportedMaxBitrateInf *get_rnpAlt_RAB_Parameter_SupportedMaxBitrateInf() const;
    void set_rnpAlt_RAB_Parameter_SupportedMaxBitrateInf(const rnpAlt_RAB_Parameter_SupportedMaxBitrateInf &);
    rnpAlt_RAB_Parameter_SupportedMaxBitrateInf *release_rnpAlt_RAB_Parameter_SupportedMaxBitrateInf();
    void set_rnpAlt_RAB_Parameter_SupportedMaxBitrateInf(rnpAlt_RAB_Parameter_SupportedMaxBitrateInf *);

    rnpAlt_RAB_Parameter_SupportedGuaranteedBitrateInf *get_rnpAlt_RAB_Parameter_SupportedGuaranteedBitrateInf();
    const rnpAlt_RAB_Parameter_SupportedGuaranteedBitrateInf *get_rnpAlt_RAB_Parameter_SupportedGuaranteedBitrateInf() const;
    void set_rnpAlt_RAB_Parameter_SupportedGuaranteedBitrateInf(const rnpAlt_RAB_Parameter_SupportedGuaranteedBitrateInf &);
    rnpAlt_RAB_Parameter_SupportedGuaranteedBitrateInf *release_rnpAlt_RAB_Parameter_SupportedGuaranteedBitrateInf();
    void set_rnpAlt_RAB_Parameter_SupportedGuaranteedBitrateInf(rnpAlt_RAB_Parameter_SupportedGuaranteedBitrateInf *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq155   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpAlt_RAB_Parameters_ExtIEs_Extension extensionValue;

    rnp_seq155();
    rnp_seq155(const rnp_seq155 &);
    rnp_seq155(id, criticality, const extensionValue &);

    rnp_seq155 & operator = (const rnp_seq155 &);
    int operator == (const rnp_seq155 &) const;
    int operator != (const rnp_seq155 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    extensionValue & get_extensionValue();
    const extensionValue & get_extensionValue() const;
    void set_extensionValue(const extensionValue &);
private:
    id id_field;
    criticality criticality_field;
    extensionValue extensionValue_field;
};

class OSS_PUBLIC rnpRAB_SetupItem_EnhRelocInfoReq_ExtIEs_Extension : public OssConstrainedOpenType
{
public:
    rnpRAB_SetupItem_EnhRelocInfoReq_ExtIEs_Extension();
    rnpRAB_SetupItem_EnhRelocInfoReq_ExtIEs_Extension(const rnpRAB_SetupItem_EnhRelocInfoReq_ExtIEs_Extension &);
    ~rnpRAB_SetupItem_EnhRelocInfoReq_ExtIEs_Extension();
    rnpRAB_SetupItem_EnhRelocInfoReq_ExtIEs_Extension & operator = (const rnpRAB_SetupItem_EnhRelocInfoReq_ExtIEs_Extension &);
    int operator == (const rnpRAB_SetupItem_EnhRelocInfoReq_ExtIEs_Extension &) const;
    int operator != (const rnpRAB_SetupItem_EnhRelocInfoReq_ExtIEs_Extension &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpE_UTRAN_Service_Handover *get_rnpE_UTRAN_Service_Handover();
    const rnpE_UTRAN_Service_Handover *get_rnpE_UTRAN_Service_Handover() const;
    void set_rnpE_UTRAN_Service_Handover(const rnpE_UTRAN_Service_Handover &);
    rnpE_UTRAN_Service_Handover *release_rnpE_UTRAN_Service_Handover();
    void set_rnpE_UTRAN_Service_Handover(rnpE_UTRAN_Service_Handover *);

    rnpPDP_TypeInformation_extension *get_rnpPDP_TypeInformation_extension();
    const rnpPDP_TypeInformation_extension *get_rnpPDP_TypeInformation_extension() const;
    void set_rnpPDP_TypeInformation_extension(const rnpPDP_TypeInformation_extension &);
    rnpPDP_TypeInformation_extension *release_rnpPDP_TypeInformation_extension();
    void set_rnpPDP_TypeInformation_extension(rnpPDP_TypeInformation_extension *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq156   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpRAB_SetupItem_EnhRelocInfoReq_ExtIEs_Extension extensionValue;

    rnp_seq156();
    rnp_seq156(const rnp_seq156 &);
    rnp_seq156(id, criticality, const extensionValue &);

    rnp_seq156 & operator = (const rnp_seq156 &);
    int operator == (const rnp_seq156 &) const;
    int operator != (const rnp_seq156 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    extensionValue & get_extensionValue();
    const extensionValue & get_extensionValue() const;
    void set_extensionValue(const extensionValue &);
private:
    id id_field;
    criticality criticality_field;
    extensionValue extensionValue_field;
};

class OSS_PUBLIC rnp_seqof158;

class OSS_PUBLIC rnpRAB_SetupList_EnhRelocInfoRes : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seqof158 component;

    rnpRAB_SetupList_EnhRelocInfoRes();
    rnpRAB_SetupList_EnhRelocInfoRes(const rnpRAB_SetupList_EnhRelocInfoRes &);
    ~rnpRAB_SetupList_EnhRelocInfoRes();

    rnpRAB_SetupList_EnhRelocInfoRes & operator = (const rnpRAB_SetupList_EnhRelocInfoRes &);
    int operator == (const rnpRAB_SetupList_EnhRelocInfoRes &) const;
    int operator != (const rnpRAB_SetupList_EnhRelocInfoRes &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnpRAB_SetupList_EnhRelocInfoRes *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnpRAB_SetupList_EnhRelocInfoRes *);

    int remove_front();
    int remove_after(OssIndex);

    rnpRAB_SetupList_EnhRelocInfoRes *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnp_seqof161;

class OSS_PUBLIC rnpRAB_FailedList_EnhRelocInfoRes : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seqof161 component;

    rnpRAB_FailedList_EnhRelocInfoRes();
    rnpRAB_FailedList_EnhRelocInfoRes(const rnpRAB_FailedList_EnhRelocInfoRes &);
    ~rnpRAB_FailedList_EnhRelocInfoRes();

    rnpRAB_FailedList_EnhRelocInfoRes & operator = (const rnpRAB_FailedList_EnhRelocInfoRes &);
    int operator == (const rnpRAB_FailedList_EnhRelocInfoRes &) const;
    int operator != (const rnpRAB_FailedList_EnhRelocInfoRes &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnpRAB_FailedList_EnhRelocInfoRes *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnpRAB_FailedList_EnhRelocInfoRes *);

    int remove_front();
    int remove_after(OssIndex);

    rnpRAB_FailedList_EnhRelocInfoRes *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpRANAP_EnhancedRelocationInformationResponseIEs_Value : public OssConstrainedOpenType
{
public:
    rnpRANAP_EnhancedRelocationInformationResponseIEs_Value();
    rnpRANAP_EnhancedRelocationInformationResponseIEs_Value(const rnpRANAP_EnhancedRelocationInformationResponseIEs_Value &);
    ~rnpRANAP_EnhancedRelocationInformationResponseIEs_Value();
    rnpRANAP_EnhancedRelocationInformationResponseIEs_Value & operator = (const rnpRANAP_EnhancedRelocationInformationResponseIEs_Value &);
    int operator == (const rnpRANAP_EnhancedRelocationInformationResponseIEs_Value &) const;
    int operator != (const rnpRANAP_EnhancedRelocationInformationResponseIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpTargetRNC_ToSourceRNC_TransparentContainer *get_rnpTargetRNC_ToSourceRNC_TransparentContainer();
    const rnpTargetRNC_ToSourceRNC_TransparentContainer *get_rnpTargetRNC_ToSourceRNC_TransparentContainer() const;
    void set_rnpTargetRNC_ToSourceRNC_TransparentContainer(const rnpTargetRNC_ToSourceRNC_TransparentContainer &);
    rnpTargetRNC_ToSourceRNC_TransparentContainer *release_rnpTargetRNC_ToSourceRNC_TransparentContainer();
    void set_rnpTargetRNC_ToSourceRNC_TransparentContainer(rnpTargetRNC_ToSourceRNC_TransparentContainer *);

    rnpRAB_SetupList_EnhRelocInfoRes *get_rnpRAB_SetupList_EnhRelocInfoRes();
    const rnpRAB_SetupList_EnhRelocInfoRes *get_rnpRAB_SetupList_EnhRelocInfoRes() const;
    void set_rnpRAB_SetupList_EnhRelocInfoRes(const rnpRAB_SetupList_EnhRelocInfoRes &);
    rnpRAB_SetupList_EnhRelocInfoRes *release_rnpRAB_SetupList_EnhRelocInfoRes();
    void set_rnpRAB_SetupList_EnhRelocInfoRes(rnpRAB_SetupList_EnhRelocInfoRes *);

    rnpRAB_FailedList_EnhRelocInfoRes *get_rnpRAB_FailedList_EnhRelocInfoRes();
    const rnpRAB_FailedList_EnhRelocInfoRes *get_rnpRAB_FailedList_EnhRelocInfoRes() const;
    void set_rnpRAB_FailedList_EnhRelocInfoRes(const rnpRAB_FailedList_EnhRelocInfoRes &);
    rnpRAB_FailedList_EnhRelocInfoRes *release_rnpRAB_FailedList_EnhRelocInfoRes();
    void set_rnpRAB_FailedList_EnhRelocInfoRes(rnpRAB_FailedList_EnhRelocInfoRes *);

    rnpCriticalityDiagnostics *get_rnpCriticalityDiagnostics();
    const rnpCriticalityDiagnostics *get_rnpCriticalityDiagnostics() const;
    void set_rnpCriticalityDiagnostics(const rnpCriticalityDiagnostics &);
    rnpCriticalityDiagnostics *release_rnpCriticalityDiagnostics();
    void set_rnpCriticalityDiagnostics(rnpCriticalityDiagnostics *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq157;

class OSS_PUBLIC rnp_seqof156 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq157 component;

    rnp_seqof156();
    rnp_seqof156(const rnp_seqof156 &);
    ~rnp_seqof156();

    rnp_seqof156 & operator = (const rnp_seqof156 &);
    int operator == (const rnp_seqof156 &) const;
    int operator != (const rnp_seqof156 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof156 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof156 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof156 *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared6 rnp_seqof157;

class OSS_PUBLIC rnpRANAP_EnhancedRelocationInformationResponse   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp_seqof156 protocolIEs;
    typedef rnp__shared6 protocolExtensions;

    rnpRANAP_EnhancedRelocationInformationResponse();
    rnpRANAP_EnhancedRelocationInformationResponse(const rnpRANAP_EnhancedRelocationInformationResponse &);
    rnpRANAP_EnhancedRelocationInformationResponse(const protocolIEs &, const protocolExtensions &);
    rnpRANAP_EnhancedRelocationInformationResponse(const protocolIEs &);

    rnpRANAP_EnhancedRelocationInformationResponse & operator = (const rnpRANAP_EnhancedRelocationInformationResponse &);
    int operator == (const rnpRANAP_EnhancedRelocationInformationResponse &) const;
    int operator != (const rnpRANAP_EnhancedRelocationInformationResponse &) const;

    protocolIEs & get_protocolIEs();
    const protocolIEs & get_protocolIEs() const;
    void set_protocolIEs(const protocolIEs &);

    protocolExtensions *get_protocolExtensions();
    const protocolExtensions *get_protocolExtensions() const;
    void set_protocolExtensions(const protocolExtensions &);
    int protocolExtensions_is_present() const;
    void omit_protocolExtensions();
private:
    OSS_UINT32 bit_mask;
    protocolIEs protocolIEs_field;
    protocolExtensions protocolExtensions_field;
};

class OSS_PUBLIC rnp_seq157   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpRANAP_EnhancedRelocationInformationResponseIEs_Value value;

    rnp_seq157();
    rnp_seq157(const rnp_seq157 &);
    rnp_seq157(id, criticality, const value &);

    rnp_seq157 & operator = (const rnp_seq157 &);
    int operator == (const rnp_seq157 &) const;
    int operator != (const rnp_seq157 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

typedef rnp__shared5 rnp_seq158;

typedef rnp__shared6 rnp_seqof159;

class OSS_PUBLIC rnpTNLInformationEnhRelInfoRes   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssBitString dl_forwardingTransportLayerAddress;
    typedef rnpIuTransportAssociation dl_forwardingTransportAssociation;
    typedef rnp__shared6 iE_Extensions;

    rnpTNLInformationEnhRelInfoRes();
    rnpTNLInformationEnhRelInfoRes(const rnpTNLInformationEnhRelInfoRes &);
    rnpTNLInformationEnhRelInfoRes(const dl_forwardingTransportLayerAddress &, const dl_forwardingTransportAssociation &, 
	const iE_Extensions &);
    rnpTNLInformationEnhRelInfoRes(const dl_forwardingTransportLayerAddress &, const dl_forwardingTransportAssociation &);

    rnpTNLInformationEnhRelInfoRes & operator = (const rnpTNLInformationEnhRelInfoRes &);
    int operator == (const rnpTNLInformationEnhRelInfoRes &) const;
    int operator != (const rnpTNLInformationEnhRelInfoRes &) const;

    dl_forwardingTransportLayerAddress & get_dl_forwardingTransportLayerAddress();
    const dl_forwardingTransportLayerAddress & get_dl_forwardingTransportLayerAddress() const;
    void set_dl_forwardingTransportLayerAddress(const dl_forwardingTransportLayerAddress &);

    dl_forwardingTransportAssociation & get_dl_forwardingTransportAssociation();
    const dl_forwardingTransportAssociation & get_dl_forwardingTransportAssociation() const;
    void set_dl_forwardingTransportAssociation(const dl_forwardingTransportAssociation &);

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    dl_forwardingTransportLayerAddress dl_forwardingTransportLayerAddress_field;
    dl_forwardingTransportAssociation dl_forwardingTransportAssociation_field;
    iE_Extensions iE_Extensions_field;
};

typedef rnp__shared6 rnp_seqof160;

class OSS_PUBLIC rnpRAB_SetupItem_EnhRelocInfoRes   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef enum rnpCN_DomainIndicator cN_DomainIndicator;
    typedef OssBitString rAB_ID;
    typedef rnpTNLInformationEnhRelInfoRes dataForwardingInformation;
    typedef rnpAss_RAB_Parameters ass_RAB_Parameters;
    typedef rnp__shared6 iE_Extensions;

    rnpRAB_SetupItem_EnhRelocInfoRes();
    rnpRAB_SetupItem_EnhRelocInfoRes(const rnpRAB_SetupItem_EnhRelocInfoRes &);
    rnpRAB_SetupItem_EnhRelocInfoRes(cN_DomainIndicator, const rAB_ID &, const dataForwardingInformation &, 
	const ass_RAB_Parameters &, const iE_Extensions &);
    rnpRAB_SetupItem_EnhRelocInfoRes(cN_DomainIndicator, const rAB_ID &);

    rnpRAB_SetupItem_EnhRelocInfoRes & operator = (const rnpRAB_SetupItem_EnhRelocInfoRes &);
    int operator == (const rnpRAB_SetupItem_EnhRelocInfoRes &) const;
    int operator != (const rnpRAB_SetupItem_EnhRelocInfoRes &) const;

    cN_DomainIndicator & get_cN_DomainIndicator();
    cN_DomainIndicator get_cN_DomainIndicator() const;
    void set_cN_DomainIndicator(cN_DomainIndicator);

    rAB_ID & get_rAB_ID();
    const rAB_ID & get_rAB_ID() const;
    void set_rAB_ID(const rAB_ID &);

    dataForwardingInformation *get_dataForwardingInformation();
    const dataForwardingInformation *get_dataForwardingInformation() const;
    void set_dataForwardingInformation(const dataForwardingInformation &);
    int dataForwardingInformation_is_present() const;
    void omit_dataForwardingInformation();

    ass_RAB_Parameters *get_ass_RAB_Parameters();
    const ass_RAB_Parameters *get_ass_RAB_Parameters() const;
    void set_ass_RAB_Parameters(const ass_RAB_Parameters &);
    int ass_RAB_Parameters_is_present() const;
    void omit_ass_RAB_Parameters();

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    cN_DomainIndicator cN_DomainIndicator_field;
    rAB_ID rAB_ID_field;
    dataForwardingInformation dataForwardingInformation_field;
    ass_RAB_Parameters ass_RAB_Parameters_field;
    iE_Extensions iE_Extensions_field;
};

class OSS_PUBLIC rnpRAB_SetupItem_EnhRelocInfoRes_IEs_Value : public OssConstrainedOpenType
{
public:
    rnpRAB_SetupItem_EnhRelocInfoRes_IEs_Value();
    rnpRAB_SetupItem_EnhRelocInfoRes_IEs_Value(const rnpRAB_SetupItem_EnhRelocInfoRes_IEs_Value &);
    ~rnpRAB_SetupItem_EnhRelocInfoRes_IEs_Value();
    rnpRAB_SetupItem_EnhRelocInfoRes_IEs_Value & operator = (const rnpRAB_SetupItem_EnhRelocInfoRes_IEs_Value &);
    int operator == (const rnpRAB_SetupItem_EnhRelocInfoRes_IEs_Value &) const;
    int operator != (const rnpRAB_SetupItem_EnhRelocInfoRes_IEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpRAB_SetupItem_EnhRelocInfoRes *get_rnpRAB_SetupItem_EnhRelocInfoRes();
    const rnpRAB_SetupItem_EnhRelocInfoRes *get_rnpRAB_SetupItem_EnhRelocInfoRes() const;
    void set_rnpRAB_SetupItem_EnhRelocInfoRes(const rnpRAB_SetupItem_EnhRelocInfoRes &);
    rnpRAB_SetupItem_EnhRelocInfoRes *release_rnpRAB_SetupItem_EnhRelocInfoRes();
    void set_rnpRAB_SetupItem_EnhRelocInfoRes(rnpRAB_SetupItem_EnhRelocInfoRes *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq159;

class OSS_PUBLIC rnp_seqof158 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq159 component;

    rnp_seqof158();
    rnp_seqof158(const rnp_seqof158 &);
    ~rnp_seqof158();

    rnp_seqof158 & operator = (const rnp_seqof158 &);
    int operator == (const rnp_seqof158 &) const;
    int operator != (const rnp_seqof158 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof158 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof158 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof158 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnp_seq159   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpRAB_SetupItem_EnhRelocInfoRes_IEs_Value value;

    rnp_seq159();
    rnp_seq159(const rnp_seq159 &);
    rnp_seq159(id, criticality, const value &);

    rnp_seq159 & operator = (const rnp_seq159 &);
    int operator == (const rnp_seq159 &) const;
    int operator != (const rnp_seq159 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

typedef rnp__shared5 rnp_seq160;

typedef rnp__shared5 rnp_seq161;

typedef rnp__shared6 rnp_seqof162;

class OSS_PUBLIC rnpRAB_FailedItem_EnhRelocInfoRes   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef enum rnpCN_DomainIndicator cN_DomainIndicator;
    typedef OssBitString rAB_ID;
    typedef rnpCause cause;
    typedef rnp__shared6 iE_Extensions;

    rnpRAB_FailedItem_EnhRelocInfoRes();
    rnpRAB_FailedItem_EnhRelocInfoRes(const rnpRAB_FailedItem_EnhRelocInfoRes &);
    rnpRAB_FailedItem_EnhRelocInfoRes(cN_DomainIndicator, const rAB_ID &, const cause &, 
	const iE_Extensions &);
    rnpRAB_FailedItem_EnhRelocInfoRes(cN_DomainIndicator, const rAB_ID &, const cause &);

    rnpRAB_FailedItem_EnhRelocInfoRes & operator = (const rnpRAB_FailedItem_EnhRelocInfoRes &);
    int operator == (const rnpRAB_FailedItem_EnhRelocInfoRes &) const;
    int operator != (const rnpRAB_FailedItem_EnhRelocInfoRes &) const;

    cN_DomainIndicator & get_cN_DomainIndicator();
    cN_DomainIndicator get_cN_DomainIndicator() const;
    void set_cN_DomainIndicator(cN_DomainIndicator);

    rAB_ID & get_rAB_ID();
    const rAB_ID & get_rAB_ID() const;
    void set_rAB_ID(const rAB_ID &);

    cause & get_cause();
    const cause & get_cause() const;
    void set_cause(const cause &);

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    cN_DomainIndicator cN_DomainIndicator_field;
    rAB_ID rAB_ID_field;
    cause cause_field;
    iE_Extensions iE_Extensions_field;
};

class OSS_PUBLIC rnpRAB_FailedItem_EnhRelocInfoRes_IEs_Value : public OssConstrainedOpenType
{
public:
    rnpRAB_FailedItem_EnhRelocInfoRes_IEs_Value();
    rnpRAB_FailedItem_EnhRelocInfoRes_IEs_Value(const rnpRAB_FailedItem_EnhRelocInfoRes_IEs_Value &);
    ~rnpRAB_FailedItem_EnhRelocInfoRes_IEs_Value();
    rnpRAB_FailedItem_EnhRelocInfoRes_IEs_Value & operator = (const rnpRAB_FailedItem_EnhRelocInfoRes_IEs_Value &);
    int operator == (const rnpRAB_FailedItem_EnhRelocInfoRes_IEs_Value &) const;
    int operator != (const rnpRAB_FailedItem_EnhRelocInfoRes_IEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpRAB_FailedItem_EnhRelocInfoRes *get_rnpRAB_FailedItem_EnhRelocInfoRes();
    const rnpRAB_FailedItem_EnhRelocInfoRes *get_rnpRAB_FailedItem_EnhRelocInfoRes() const;
    void set_rnpRAB_FailedItem_EnhRelocInfoRes(const rnpRAB_FailedItem_EnhRelocInfoRes &);
    rnpRAB_FailedItem_EnhRelocInfoRes *release_rnpRAB_FailedItem_EnhRelocInfoRes();
    void set_rnpRAB_FailedItem_EnhRelocInfoRes(rnpRAB_FailedItem_EnhRelocInfoRes *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq162;

class OSS_PUBLIC rnp_seqof161 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq162 component;

    rnp_seqof161();
    rnp_seqof161(const rnp_seqof161 &);
    ~rnp_seqof161();

    rnp_seqof161 & operator = (const rnp_seqof161 &);
    int operator == (const rnp_seqof161 &) const;
    int operator != (const rnp_seqof161 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof161 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof161 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof161 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnp_seq162   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpRAB_FailedItem_EnhRelocInfoRes_IEs_Value value;

    rnp_seq162();
    rnp_seq162(const rnp_seq162 &);
    rnp_seq162(id, criticality, const value &);

    rnp_seq162 & operator = (const rnp_seq162 &);
    int operator == (const rnp_seq162 &) const;
    int operator != (const rnp_seq162 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

typedef rnp__shared5 rnp_seq163;

class OSS_PUBLIC rnp_seqof165;

class OSS_PUBLIC rnpRAB_ModifyList : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seqof165 component;

    rnpRAB_ModifyList();
    rnpRAB_ModifyList(const rnpRAB_ModifyList &);
    ~rnpRAB_ModifyList();

    rnpRAB_ModifyList & operator = (const rnpRAB_ModifyList &);
    int operator == (const rnpRAB_ModifyList &) const;
    int operator != (const rnpRAB_ModifyList &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnpRAB_ModifyList *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnpRAB_ModifyList *);

    int remove_front();
    int remove_after(OssIndex);

    rnpRAB_ModifyList *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpRAB_ModifyRequestIEs_Value : public OssConstrainedOpenType
{
public:
    rnpRAB_ModifyRequestIEs_Value();
    rnpRAB_ModifyRequestIEs_Value(const rnpRAB_ModifyRequestIEs_Value &);
    ~rnpRAB_ModifyRequestIEs_Value();
    rnpRAB_ModifyRequestIEs_Value & operator = (const rnpRAB_ModifyRequestIEs_Value &);
    int operator == (const rnpRAB_ModifyRequestIEs_Value &) const;
    int operator != (const rnpRAB_ModifyRequestIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpRAB_ModifyList *get_rnpRAB_ModifyList();
    const rnpRAB_ModifyList *get_rnpRAB_ModifyList() const;
    void set_rnpRAB_ModifyList(const rnpRAB_ModifyList &);
    rnpRAB_ModifyList *release_rnpRAB_ModifyList();
    void set_rnpRAB_ModifyList(rnpRAB_ModifyList *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq164;

class OSS_PUBLIC rnp_seqof163 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq164 component;

    rnp_seqof163();
    rnp_seqof163(const rnp_seqof163 &);
    ~rnp_seqof163();

    rnp_seqof163 & operator = (const rnp_seqof163 &);
    int operator == (const rnp_seqof163 &) const;
    int operator != (const rnp_seqof163 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof163 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof163 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof163 *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared6 rnp_seqof164;

class OSS_PUBLIC rnpRAB_ModifyRequest   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp_seqof163 protocolIEs;
    typedef rnp__shared6 protocolExtensions;

    rnpRAB_ModifyRequest();
    rnpRAB_ModifyRequest(const rnpRAB_ModifyRequest &);
    rnpRAB_ModifyRequest(const protocolIEs &, const protocolExtensions &);
    rnpRAB_ModifyRequest(const protocolIEs &);

    rnpRAB_ModifyRequest & operator = (const rnpRAB_ModifyRequest &);
    int operator == (const rnpRAB_ModifyRequest &) const;
    int operator != (const rnpRAB_ModifyRequest &) const;

    protocolIEs & get_protocolIEs();
    const protocolIEs & get_protocolIEs() const;
    void set_protocolIEs(const protocolIEs &);

    protocolExtensions *get_protocolExtensions();
    const protocolExtensions *get_protocolExtensions() const;
    void set_protocolExtensions(const protocolExtensions &);
    int protocolExtensions_is_present() const;
    void omit_protocolExtensions();
private:
    OSS_UINT32 bit_mask;
    protocolIEs protocolIEs_field;
    protocolExtensions protocolExtensions_field;
};

class OSS_PUBLIC rnp_seq164   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpRAB_ModifyRequestIEs_Value value;

    rnp_seq164();
    rnp_seq164(const rnp_seq164 &);
    rnp_seq164(id, criticality, const value &);

    rnp_seq164 & operator = (const rnp_seq164 &);
    int operator == (const rnp_seq164 &) const;
    int operator != (const rnp_seq164 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

typedef rnp__shared5 rnp_seq165;

typedef rnp__shared10 rnpRequested_RAB_Parameter_MaxBitrateList;

typedef rnp__shared10 rnpRequested_RAB_Parameter_GuaranteedBitrateList;

class OSS_PUBLIC rnp_seq167;

class OSS_PUBLIC rnp_seqof166 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq167 component;

    rnp_seqof166();
    rnp_seqof166(const rnp_seqof166 &);
    ~rnp_seqof166();

    rnp_seqof166 & operator = (const rnp_seqof166 &);
    int operator == (const rnp_seqof166 &) const;
    int operator != (const rnp_seqof166 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof166 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof166 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof166 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpRequested_RAB_Parameter_Values   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp__shared10 requestedMaxBitrates;
    typedef rnp__shared10 requestedGuaranteedBitrates;
    typedef rnp_seqof166 iE_Extensions;

    rnpRequested_RAB_Parameter_Values();
    rnpRequested_RAB_Parameter_Values(const rnpRequested_RAB_Parameter_Values &);
    rnpRequested_RAB_Parameter_Values(const requestedMaxBitrates &, const requestedGuaranteedBitrates &, 
	const iE_Extensions &);

    rnpRequested_RAB_Parameter_Values & operator = (const rnpRequested_RAB_Parameter_Values &);
    int operator == (const rnpRequested_RAB_Parameter_Values &) const;
    int operator != (const rnpRequested_RAB_Parameter_Values &) const;

    requestedMaxBitrates *get_requestedMaxBitrates();
    const requestedMaxBitrates *get_requestedMaxBitrates() const;
    void set_requestedMaxBitrates(const requestedMaxBitrates &);
    int requestedMaxBitrates_is_present() const;
    void omit_requestedMaxBitrates();

    requestedGuaranteedBitrates *get_requestedGuaranteedBitrates();
    const requestedGuaranteedBitrates *get_requestedGuaranteedBitrates() const;
    void set_requestedGuaranteedBitrates(const requestedGuaranteedBitrates &);
    int requestedGuaranteedBitrates_is_present() const;
    void omit_requestedGuaranteedBitrates();

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    requestedMaxBitrates requestedMaxBitrates_field;
    requestedGuaranteedBitrates requestedGuaranteedBitrates_field;
    iE_Extensions iE_Extensions_field;
};

typedef rnp__shared6 rnp_seqof167;

class OSS_PUBLIC rnpRAB_ModifyItem   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssBitString rAB_ID;
    typedef rnpRequested_RAB_Parameter_Values requested_RAB_Parameter_Values;
    typedef rnp__shared6 iE_Extensions;

    rnpRAB_ModifyItem();
    rnpRAB_ModifyItem(const rnpRAB_ModifyItem &);
    rnpRAB_ModifyItem(const rAB_ID &, const requested_RAB_Parameter_Values &, const iE_Extensions &);
    rnpRAB_ModifyItem(const rAB_ID &, const requested_RAB_Parameter_Values &);

    rnpRAB_ModifyItem & operator = (const rnpRAB_ModifyItem &);
    int operator == (const rnpRAB_ModifyItem &) const;
    int operator != (const rnpRAB_ModifyItem &) const;

    rAB_ID & get_rAB_ID();
    const rAB_ID & get_rAB_ID() const;
    void set_rAB_ID(const rAB_ID &);

    requested_RAB_Parameter_Values & get_requested_RAB_Parameter_Values();
    const requested_RAB_Parameter_Values & get_requested_RAB_Parameter_Values() const;
    void set_requested_RAB_Parameter_Values(const requested_RAB_Parameter_Values &);

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    rAB_ID rAB_ID_field;
    requested_RAB_Parameter_Values requested_RAB_Parameter_Values_field;
    iE_Extensions iE_Extensions_field;
};

class OSS_PUBLIC rnpRAB_ModifyItemIEs_Value : public OssConstrainedOpenType
{
public:
    rnpRAB_ModifyItemIEs_Value();
    rnpRAB_ModifyItemIEs_Value(const rnpRAB_ModifyItemIEs_Value &);
    ~rnpRAB_ModifyItemIEs_Value();
    rnpRAB_ModifyItemIEs_Value & operator = (const rnpRAB_ModifyItemIEs_Value &);
    int operator == (const rnpRAB_ModifyItemIEs_Value &) const;
    int operator != (const rnpRAB_ModifyItemIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpRAB_ModifyItem *get_rnpRAB_ModifyItem();
    const rnpRAB_ModifyItem *get_rnpRAB_ModifyItem() const;
    void set_rnpRAB_ModifyItem(const rnpRAB_ModifyItem &);
    rnpRAB_ModifyItem *release_rnpRAB_ModifyItem();
    void set_rnpRAB_ModifyItem(rnpRAB_ModifyItem *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq166;

class OSS_PUBLIC rnp_seqof165 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq166 component;

    rnp_seqof165();
    rnp_seqof165(const rnp_seqof165 &);
    ~rnp_seqof165();

    rnp_seqof165 & operator = (const rnp_seqof165 &);
    int operator == (const rnp_seqof165 &) const;
    int operator != (const rnp_seqof165 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof165 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof165 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof165 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnp_seq166   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpRAB_ModifyItemIEs_Value value;

    rnp_seq166();
    rnp_seq166(const rnp_seq166 &);
    rnp_seq166(id, criticality, const value &);

    rnp_seq166 & operator = (const rnp_seq166 &);
    int operator == (const rnp_seq166 &) const;
    int operator != (const rnp_seq166 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

typedef rnp__shared10 rnpRequested_RAB_Parameter_ExtendedMaxBitrateList;

typedef rnp__shared10 rnpRequested_RAB_Parameter_ExtendedGuaranteedBitrateList;

class OSS_PUBLIC rnpRequested_RAB_Parameter_Values_ExtIEs_Extension : public OssConstrainedOpenType
{
public:
    rnpRequested_RAB_Parameter_Values_ExtIEs_Extension();
    rnpRequested_RAB_Parameter_Values_ExtIEs_Extension(const rnpRequested_RAB_Parameter_Values_ExtIEs_Extension &);
    ~rnpRequested_RAB_Parameter_Values_ExtIEs_Extension();
    rnpRequested_RAB_Parameter_Values_ExtIEs_Extension & operator = (const rnpRequested_RAB_Parameter_Values_ExtIEs_Extension &);
    int operator == (const rnpRequested_RAB_Parameter_Values_ExtIEs_Extension &) const;
    int operator != (const rnpRequested_RAB_Parameter_Values_ExtIEs_Extension &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpAlternativeRABConfigurationRequest *get_rnpAlternativeRABConfigurationRequest();
    const rnpAlternativeRABConfigurationRequest *get_rnpAlternativeRABConfigurationRequest() const;
    void set_rnpAlternativeRABConfigurationRequest(const rnpAlternativeRABConfigurationRequest &);
    rnpAlternativeRABConfigurationRequest *release_rnpAlternativeRABConfigurationRequest();
    void set_rnpAlternativeRABConfigurationRequest(rnpAlternativeRABConfigurationRequest *);

    rnp__shared10 *get_rnpRequested_RAB_Parameter_ExtendedMaxBitrateList();
    const rnp__shared10 *get_rnpRequested_RAB_Parameter_ExtendedMaxBitrateList() const;
    void set_rnpRequested_RAB_Parameter_ExtendedMaxBitrateList(const rnp__shared10 &);
    rnp__shared10 *release_rnpRequested_RAB_Parameter_ExtendedMaxBitrateList();
    void set_rnpRequested_RAB_Parameter_ExtendedMaxBitrateList(rnp__shared10 *);

    rnp__shared10 *get_rnpRequested_RAB_Parameter_ExtendedGuaranteedBitrateList();
    const rnp__shared10 *get_rnpRequested_RAB_Parameter_ExtendedGuaranteedBitrateList() const;
    void set_rnpRequested_RAB_Parameter_ExtendedGuaranteedBitrateList(const rnp__shared10 &);
    rnp__shared10 *release_rnpRequested_RAB_Parameter_ExtendedGuaranteedBitrateList();
    void set_rnpRequested_RAB_Parameter_ExtendedGuaranteedBitrateList(rnp__shared10 *);

    rnpSupportedRAB_ParameterBitrateList *get_rnpSupportedRAB_ParameterBitrateList();
    const rnpSupportedRAB_ParameterBitrateList *get_rnpSupportedRAB_ParameterBitrateList() const;
    void set_rnpSupportedRAB_ParameterBitrateList(const rnpSupportedRAB_ParameterBitrateList &);
    rnpSupportedRAB_ParameterBitrateList *release_rnpSupportedRAB_ParameterBitrateList();
    void set_rnpSupportedRAB_ParameterBitrateList(rnpSupportedRAB_ParameterBitrateList *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq167   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpRequested_RAB_Parameter_Values_ExtIEs_Extension extensionValue;

    rnp_seq167();
    rnp_seq167(const rnp_seq167 &);
    rnp_seq167(id, criticality, const extensionValue &);

    rnp_seq167 & operator = (const rnp_seq167 &);
    int operator == (const rnp_seq167 &) const;
    int operator != (const rnp_seq167 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    extensionValue & get_extensionValue();
    const extensionValue & get_extensionValue() const;
    void set_extensionValue(const extensionValue &);
private:
    id id_field;
    criticality criticality_field;
    extensionValue extensionValue_field;
};

typedef rnp__shared5 rnp_seq168;

class OSS_PUBLIC rnpLocationRelatedDataRequestType   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef enum rnpRequestedLocationRelatedDataType requestedLocationRelatedDataType;
    typedef OssString requestedGPSAssistanceData;

    rnpLocationRelatedDataRequestType();
    rnpLocationRelatedDataRequestType(const rnpLocationRelatedDataRequestType &);
    rnpLocationRelatedDataRequestType(requestedLocationRelatedDataType, const requestedGPSAssistanceData &);
    rnpLocationRelatedDataRequestType(requestedLocationRelatedDataType);

    rnpLocationRelatedDataRequestType & operator = (const rnpLocationRelatedDataRequestType &);
    int operator == (const rnpLocationRelatedDataRequestType &) const;
    int operator != (const rnpLocationRelatedDataRequestType &) const;

    requestedLocationRelatedDataType & get_requestedLocationRelatedDataType();
    requestedLocationRelatedDataType get_requestedLocationRelatedDataType() const;
    void set_requestedLocationRelatedDataType(requestedLocationRelatedDataType);

    requestedGPSAssistanceData *get_requestedGPSAssistanceData();
    const requestedGPSAssistanceData *get_requestedGPSAssistanceData() const;
    void set_requestedGPSAssistanceData(const requestedGPSAssistanceData &);
    int requestedGPSAssistanceData_is_present() const;
    void omit_requestedGPSAssistanceData();
private:
    OSS_UINT32 bit_mask;
    requestedLocationRelatedDataType requestedLocationRelatedDataType_field;
    requestedGPSAssistanceData requestedGPSAssistanceData_field;
};

class OSS_PUBLIC rnpLocationRelatedDataRequestIEs_Value : public OssConstrainedOpenType
{
public:
    rnpLocationRelatedDataRequestIEs_Value();
    rnpLocationRelatedDataRequestIEs_Value(const rnpLocationRelatedDataRequestIEs_Value &);
    ~rnpLocationRelatedDataRequestIEs_Value();
    rnpLocationRelatedDataRequestIEs_Value & operator = (const rnpLocationRelatedDataRequestIEs_Value &);
    int operator == (const rnpLocationRelatedDataRequestIEs_Value &) const;
    int operator != (const rnpLocationRelatedDataRequestIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpLocationRelatedDataRequestType *get_rnpLocationRelatedDataRequestType();
    const rnpLocationRelatedDataRequestType *get_rnpLocationRelatedDataRequestType() const;
    void set_rnpLocationRelatedDataRequestType(const rnpLocationRelatedDataRequestType &);
    rnpLocationRelatedDataRequestType *release_rnpLocationRelatedDataRequestType();
    void set_rnpLocationRelatedDataRequestType(rnpLocationRelatedDataRequestType *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnpLocationRelatedDataRequestExtensions_Extension : public OssConstrainedOpenType
{
public:
    rnpLocationRelatedDataRequestExtensions_Extension();
    rnpLocationRelatedDataRequestExtensions_Extension(const rnpLocationRelatedDataRequestExtensions_Extension &);
    ~rnpLocationRelatedDataRequestExtensions_Extension();
    rnpLocationRelatedDataRequestExtensions_Extension & operator = (const rnpLocationRelatedDataRequestExtensions_Extension &);
    int operator == (const rnpLocationRelatedDataRequestExtensions_Extension &) const;
    int operator != (const rnpLocationRelatedDataRequestExtensions_Extension &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpLocationRelatedDataRequestTypeSpecificToGERANIuMode *get_rnpLocationRelatedDataRequestTypeSpecificToGERANIuMode();
    const rnpLocationRelatedDataRequestTypeSpecificToGERANIuMode *get_rnpLocationRelatedDataRequestTypeSpecificToGERANIuMode() const;
    void set_rnpLocationRelatedDataRequestTypeSpecificToGERANIuMode(const rnpLocationRelatedDataRequestTypeSpecificToGERANIuMode &);
    rnpLocationRelatedDataRequestTypeSpecificToGERANIuMode *release_rnpLocationRelatedDataRequestTypeSpecificToGERANIuMode();
    void set_rnpLocationRelatedDataRequestTypeSpecificToGERANIuMode(rnpLocationRelatedDataRequestTypeSpecificToGERANIuMode *);

    rnpRequestedGANSSAssistanceData *get_rnpRequestedGANSSAssistanceData();
    const rnpRequestedGANSSAssistanceData *get_rnpRequestedGANSSAssistanceData() const;
    void set_rnpRequestedGANSSAssistanceData(const rnpRequestedGANSSAssistanceData &);
    rnpRequestedGANSSAssistanceData *release_rnpRequestedGANSSAssistanceData();
    void set_rnpRequestedGANSSAssistanceData(rnpRequestedGANSSAssistanceData *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq169;

class OSS_PUBLIC rnp_seqof168 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq169 component;

    rnp_seqof168();
    rnp_seqof168(const rnp_seqof168 &);
    ~rnp_seqof168();

    rnp_seqof168 & operator = (const rnp_seqof168 &);
    int operator == (const rnp_seqof168 &) const;
    int operator != (const rnp_seqof168 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof168 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof168 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof168 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnp_seq170;

class OSS_PUBLIC rnp_seqof169 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq170 component;

    rnp_seqof169();
    rnp_seqof169(const rnp_seqof169 &);
    ~rnp_seqof169();

    rnp_seqof169 & operator = (const rnp_seqof169 &);
    int operator == (const rnp_seqof169 &) const;
    int operator != (const rnp_seqof169 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof169 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof169 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof169 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpLocationRelatedDataRequest   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp_seqof168 protocolIEs;
    typedef rnp_seqof169 protocolExtensions;

    rnpLocationRelatedDataRequest();
    rnpLocationRelatedDataRequest(const rnpLocationRelatedDataRequest &);
    rnpLocationRelatedDataRequest(const protocolIEs &, const protocolExtensions &);
    rnpLocationRelatedDataRequest(const protocolIEs &);

    rnpLocationRelatedDataRequest & operator = (const rnpLocationRelatedDataRequest &);
    int operator == (const rnpLocationRelatedDataRequest &) const;
    int operator != (const rnpLocationRelatedDataRequest &) const;

    protocolIEs & get_protocolIEs();
    const protocolIEs & get_protocolIEs() const;
    void set_protocolIEs(const protocolIEs &);

    protocolExtensions *get_protocolExtensions();
    const protocolExtensions *get_protocolExtensions() const;
    void set_protocolExtensions(const protocolExtensions &);
    int protocolExtensions_is_present() const;
    void omit_protocolExtensions();
private:
    OSS_UINT32 bit_mask;
    protocolIEs protocolIEs_field;
    protocolExtensions protocolExtensions_field;
};

class OSS_PUBLIC rnp_seq169   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpLocationRelatedDataRequestIEs_Value value;

    rnp_seq169();
    rnp_seq169(const rnp_seq169 &);
    rnp_seq169(id, criticality, const value &);

    rnp_seq169 & operator = (const rnp_seq169 &);
    int operator == (const rnp_seq169 &) const;
    int operator != (const rnp_seq169 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

class OSS_PUBLIC rnp_seq170   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpLocationRelatedDataRequestExtensions_Extension extensionValue;

    rnp_seq170();
    rnp_seq170(const rnp_seq170 &);
    rnp_seq170(id, criticality, const extensionValue &);

    rnp_seq170 & operator = (const rnp_seq170 &);
    int operator == (const rnp_seq170 &) const;
    int operator != (const rnp_seq170 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    extensionValue & get_extensionValue();
    const extensionValue & get_extensionValue() const;
    void set_extensionValue(const extensionValue &);
private:
    id id_field;
    criticality criticality_field;
    extensionValue extensionValue_field;
};

class OSS_PUBLIC rnpBroadcastAssistanceDataDecipheringKeys   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssBitString cipheringKeyFlag;
    typedef OssBitString currentDecipheringKey;
    typedef OssBitString nextDecipheringKey;

    rnpBroadcastAssistanceDataDecipheringKeys();
    rnpBroadcastAssistanceDataDecipheringKeys(const rnpBroadcastAssistanceDataDecipheringKeys &);
    rnpBroadcastAssistanceDataDecipheringKeys(const cipheringKeyFlag &, const currentDecipheringKey &, 
	const nextDecipheringKey &);

    rnpBroadcastAssistanceDataDecipheringKeys & operator = (const rnpBroadcastAssistanceDataDecipheringKeys &);
    int operator == (const rnpBroadcastAssistanceDataDecipheringKeys &) const;
    int operator != (const rnpBroadcastAssistanceDataDecipheringKeys &) const;

    cipheringKeyFlag & get_cipheringKeyFlag();
    const cipheringKeyFlag & get_cipheringKeyFlag() const;
    void set_cipheringKeyFlag(const cipheringKeyFlag &);

    currentDecipheringKey & get_currentDecipheringKey();
    const currentDecipheringKey & get_currentDecipheringKey() const;
    void set_currentDecipheringKey(const currentDecipheringKey &);

    nextDecipheringKey & get_nextDecipheringKey();
    const nextDecipheringKey & get_nextDecipheringKey() const;
    void set_nextDecipheringKey(const nextDecipheringKey &);
private:
    cipheringKeyFlag cipheringKeyFlag_field;
    currentDecipheringKey currentDecipheringKey_field;
    nextDecipheringKey nextDecipheringKey_field;
};

class OSS_PUBLIC rnpLocationRelatedDataResponseIEs_Value : public OssConstrainedOpenType
{
public:
    rnpLocationRelatedDataResponseIEs_Value();
    rnpLocationRelatedDataResponseIEs_Value(const rnpLocationRelatedDataResponseIEs_Value &);
    ~rnpLocationRelatedDataResponseIEs_Value();
    rnpLocationRelatedDataResponseIEs_Value & operator = (const rnpLocationRelatedDataResponseIEs_Value &);
    int operator == (const rnpLocationRelatedDataResponseIEs_Value &) const;
    int operator != (const rnpLocationRelatedDataResponseIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpBroadcastAssistanceDataDecipheringKeys *get_rnpBroadcastAssistanceDataDecipheringKeys();
    const rnpBroadcastAssistanceDataDecipheringKeys *get_rnpBroadcastAssistanceDataDecipheringKeys() const;
    void set_rnpBroadcastAssistanceDataDecipheringKeys(const rnpBroadcastAssistanceDataDecipheringKeys &);
    rnpBroadcastAssistanceDataDecipheringKeys *release_rnpBroadcastAssistanceDataDecipheringKeys();
    void set_rnpBroadcastAssistanceDataDecipheringKeys(rnpBroadcastAssistanceDataDecipheringKeys *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnpLocationRelatedDataResponseExtensions_Extension : public OssConstrainedOpenType
{
public:
    rnpLocationRelatedDataResponseExtensions_Extension();
    rnpLocationRelatedDataResponseExtensions_Extension(const rnpLocationRelatedDataResponseExtensions_Extension &);
    ~rnpLocationRelatedDataResponseExtensions_Extension();
    rnpLocationRelatedDataResponseExtensions_Extension & operator = (const rnpLocationRelatedDataResponseExtensions_Extension &);
    int operator == (const rnpLocationRelatedDataResponseExtensions_Extension &) const;
    int operator != (const rnpLocationRelatedDataResponseExtensions_Extension &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpCriticalityDiagnostics *get_rnpCriticalityDiagnostics();
    const rnpCriticalityDiagnostics *get_rnpCriticalityDiagnostics() const;
    void set_rnpCriticalityDiagnostics(const rnpCriticalityDiagnostics &);
    rnpCriticalityDiagnostics *release_rnpCriticalityDiagnostics();
    void set_rnpCriticalityDiagnostics(rnpCriticalityDiagnostics *);

    rnpBroadcastAssistanceDataDecipheringKeys *get_rnpBroadcastAssistanceDataDecipheringKeys();
    const rnpBroadcastAssistanceDataDecipheringKeys *get_rnpBroadcastAssistanceDataDecipheringKeys() const;
    void set_rnpBroadcastAssistanceDataDecipheringKeys(const rnpBroadcastAssistanceDataDecipheringKeys &);
    rnpBroadcastAssistanceDataDecipheringKeys *release_rnpBroadcastAssistanceDataDecipheringKeys();
    void set_rnpBroadcastAssistanceDataDecipheringKeys(rnpBroadcastAssistanceDataDecipheringKeys *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq171;

class OSS_PUBLIC rnp_seqof170 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq171 component;

    rnp_seqof170();
    rnp_seqof170(const rnp_seqof170 &);
    ~rnp_seqof170();

    rnp_seqof170 & operator = (const rnp_seqof170 &);
    int operator == (const rnp_seqof170 &) const;
    int operator != (const rnp_seqof170 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof170 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof170 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof170 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnp_seq172;

class OSS_PUBLIC rnp_seqof171 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq172 component;

    rnp_seqof171();
    rnp_seqof171(const rnp_seqof171 &);
    ~rnp_seqof171();

    rnp_seqof171 & operator = (const rnp_seqof171 &);
    int operator == (const rnp_seqof171 &) const;
    int operator != (const rnp_seqof171 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof171 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof171 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof171 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpLocationRelatedDataResponse   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp_seqof170 protocolIEs;
    typedef rnp_seqof171 protocolExtensions;

    rnpLocationRelatedDataResponse();
    rnpLocationRelatedDataResponse(const rnpLocationRelatedDataResponse &);
    rnpLocationRelatedDataResponse(const protocolIEs &, const protocolExtensions &);
    rnpLocationRelatedDataResponse(const protocolIEs &);

    rnpLocationRelatedDataResponse & operator = (const rnpLocationRelatedDataResponse &);
    int operator == (const rnpLocationRelatedDataResponse &) const;
    int operator != (const rnpLocationRelatedDataResponse &) const;

    protocolIEs & get_protocolIEs();
    const protocolIEs & get_protocolIEs() const;
    void set_protocolIEs(const protocolIEs &);

    protocolExtensions *get_protocolExtensions();
    const protocolExtensions *get_protocolExtensions() const;
    void set_protocolExtensions(const protocolExtensions &);
    int protocolExtensions_is_present() const;
    void omit_protocolExtensions();
private:
    OSS_UINT32 bit_mask;
    protocolIEs protocolIEs_field;
    protocolExtensions protocolExtensions_field;
};

class OSS_PUBLIC rnp_seq171   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpLocationRelatedDataResponseIEs_Value value;

    rnp_seq171();
    rnp_seq171(const rnp_seq171 &);
    rnp_seq171(id, criticality, const value &);

    rnp_seq171 & operator = (const rnp_seq171 &);
    int operator == (const rnp_seq171 &) const;
    int operator != (const rnp_seq171 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

class OSS_PUBLIC rnp_seq172   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpLocationRelatedDataResponseExtensions_Extension extensionValue;

    rnp_seq172();
    rnp_seq172(const rnp_seq172 &);
    rnp_seq172(id, criticality, const extensionValue &);

    rnp_seq172 & operator = (const rnp_seq172 &);
    int operator == (const rnp_seq172 &) const;
    int operator != (const rnp_seq172 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    extensionValue & get_extensionValue();
    const extensionValue & get_extensionValue() const;
    void set_extensionValue(const extensionValue &);
private:
    id id_field;
    criticality criticality_field;
    extensionValue extensionValue_field;
};

typedef rnp__shared2 rnp_seqof172;

class OSS_PUBLIC rnp_seq174;

class OSS_PUBLIC rnp_seqof173 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq174 component;

    rnp_seqof173();
    rnp_seqof173(const rnp_seqof173 &);
    ~rnp_seqof173();

    rnp_seqof173 & operator = (const rnp_seqof173 &);
    int operator == (const rnp_seqof173 &) const;
    int operator != (const rnp_seqof173 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof173 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof173 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof173 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpLocationRelatedDataFailure   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp__shared2 protocolIEs;
    typedef rnp_seqof173 protocolExtensions;

    rnpLocationRelatedDataFailure();
    rnpLocationRelatedDataFailure(const rnpLocationRelatedDataFailure &);
    rnpLocationRelatedDataFailure(const protocolIEs &, const protocolExtensions &);
    rnpLocationRelatedDataFailure(const protocolIEs &);

    rnpLocationRelatedDataFailure & operator = (const rnpLocationRelatedDataFailure &);
    int operator == (const rnpLocationRelatedDataFailure &) const;
    int operator != (const rnpLocationRelatedDataFailure &) const;

    protocolIEs & get_protocolIEs();
    const protocolIEs & get_protocolIEs() const;
    void set_protocolIEs(const protocolIEs &);

    protocolExtensions *get_protocolExtensions();
    const protocolExtensions *get_protocolExtensions() const;
    void set_protocolExtensions(const protocolExtensions &);
    int protocolExtensions_is_present() const;
    void omit_protocolExtensions();
private:
    OSS_UINT32 bit_mask;
    protocolIEs protocolIEs_field;
    protocolExtensions protocolExtensions_field;
};

typedef rnp__shared1 rnp_seq173;

class OSS_PUBLIC rnp_seq174   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpRelocationCancelAcknowledgeIEs_Value extensionValue;

    rnp_seq174();
    rnp_seq174(const rnp_seq174 &);
    rnp_seq174(id, criticality, const extensionValue &);

    rnp_seq174 & operator = (const rnp_seq174 &);
    int operator == (const rnp_seq174 &) const;
    int operator != (const rnp_seq174 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    extensionValue & get_extensionValue();
    const extensionValue & get_extensionValue() const;
    void set_extensionValue(const extensionValue &);
private:
    id id_field;
    criticality criticality_field;
    extensionValue extensionValue_field;
};

class OSS_PUBLIC rnp_seq288;

class OSS_PUBLIC rnpPLMNs_in_shared_network : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq288 component;

    rnpPLMNs_in_shared_network();
    rnpPLMNs_in_shared_network(const rnpPLMNs_in_shared_network &);
    ~rnpPLMNs_in_shared_network();

    rnpPLMNs_in_shared_network & operator = (const rnpPLMNs_in_shared_network &);
    int operator == (const rnpPLMNs_in_shared_network &) const;
    int operator != (const rnpPLMNs_in_shared_network &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnpPLMNs_in_shared_network *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnpPLMNs_in_shared_network *);

    int remove_front();
    int remove_after(OssIndex);

    rnpPLMNs_in_shared_network *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared6 rnp_seqof296;

class OSS_PUBLIC rnpShared_Network_Information   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnpPLMNs_in_shared_network pLMNs_in_shared_network;
    typedef rnp__shared6 iE_Extensions;

    rnpShared_Network_Information();
    rnpShared_Network_Information(const rnpShared_Network_Information &);
    rnpShared_Network_Information(const pLMNs_in_shared_network &, const iE_Extensions &);
    rnpShared_Network_Information(const pLMNs_in_shared_network &);

    rnpShared_Network_Information & operator = (const rnpShared_Network_Information &);
    int operator == (const rnpShared_Network_Information &) const;
    int operator != (const rnpShared_Network_Information &) const;

    pLMNs_in_shared_network & get_pLMNs_in_shared_network();
    const pLMNs_in_shared_network & get_pLMNs_in_shared_network() const;
    void set_pLMNs_in_shared_network(const pLMNs_in_shared_network &);

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    pLMNs_in_shared_network pLMNs_in_shared_network_field;
    iE_Extensions iE_Extensions_field;
};

class OSS_PUBLIC rnpProvidedData  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	shared_network_information_chosen = 1
    };
    typedef rnpShared_Network_Information shared_network_information;

    rnpProvidedData();
    rnpProvidedData(const rnpProvidedData &);
    ~rnpProvidedData();

    rnpProvidedData & operator = (const rnpProvidedData &);
    int operator == (const rnpProvidedData &) const;
    int operator != (const rnpProvidedData &) const;

    shared_network_information *get_shared_network_information();
    const shared_network_information *get_shared_network_information() const;
    void set_shared_network_information(const shared_network_information &);
private:
    union {
	shared_network_information *shared_network_information_field;
    };
    void cleanup();
};

class OSS_PUBLIC rnpInformationTransferIndicationIEs_Value : public OssConstrainedOpenType
{
public:
    rnpInformationTransferIndicationIEs_Value();
    rnpInformationTransferIndicationIEs_Value(const rnpInformationTransferIndicationIEs_Value &);
    ~rnpInformationTransferIndicationIEs_Value();
    rnpInformationTransferIndicationIEs_Value & operator = (const rnpInformationTransferIndicationIEs_Value &);
    int operator == (const rnpInformationTransferIndicationIEs_Value &) const;
    int operator != (const rnpInformationTransferIndicationIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpInformationTransferID *get_rnpInformationTransferID();
    const rnpInformationTransferID *get_rnpInformationTransferID() const;
    void set_rnpInformationTransferID(const rnpInformationTransferID &);
    rnpInformationTransferID *release_rnpInformationTransferID();
    void set_rnpInformationTransferID(rnpInformationTransferID *);

    rnpProvidedData *get_rnpProvidedData();
    const rnpProvidedData *get_rnpProvidedData() const;
    void set_rnpProvidedData(const rnpProvidedData &);
    rnpProvidedData *release_rnpProvidedData();
    void set_rnpProvidedData(rnpProvidedData *);

    rnpCN_DomainIndicator *get_rnpCN_DomainIndicator();
    const rnpCN_DomainIndicator *get_rnpCN_DomainIndicator() const;
    void set_rnpCN_DomainIndicator(const rnpCN_DomainIndicator &);
    rnpCN_DomainIndicator *release_rnpCN_DomainIndicator();
    void set_rnpCN_DomainIndicator(rnpCN_DomainIndicator *);

    rnpGlobalCN_ID *get_rnpGlobalCN_ID();
    const rnpGlobalCN_ID *get_rnpGlobalCN_ID() const;
    void set_rnpGlobalCN_ID(const rnpGlobalCN_ID &);
    rnpGlobalCN_ID *release_rnpGlobalCN_ID();
    void set_rnpGlobalCN_ID(rnpGlobalCN_ID *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq175;

class OSS_PUBLIC rnp_seqof174 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq175 component;

    rnp_seqof174();
    rnp_seqof174(const rnp_seqof174 &);
    ~rnp_seqof174();

    rnp_seqof174 & operator = (const rnp_seqof174 &);
    int operator == (const rnp_seqof174 &) const;
    int operator != (const rnp_seqof174 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof174 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof174 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof174 *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared6 rnp_seqof175;

class OSS_PUBLIC rnpInformationTransferIndication   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp_seqof174 protocolIEs;
    typedef rnp__shared6 protocolExtensions;

    rnpInformationTransferIndication();
    rnpInformationTransferIndication(const rnpInformationTransferIndication &);
    rnpInformationTransferIndication(const protocolIEs &, const protocolExtensions &);
    rnpInformationTransferIndication(const protocolIEs &);

    rnpInformationTransferIndication & operator = (const rnpInformationTransferIndication &);
    int operator == (const rnpInformationTransferIndication &) const;
    int operator != (const rnpInformationTransferIndication &) const;

    protocolIEs & get_protocolIEs();
    const protocolIEs & get_protocolIEs() const;
    void set_protocolIEs(const protocolIEs &);

    protocolExtensions *get_protocolExtensions();
    const protocolExtensions *get_protocolExtensions() const;
    void set_protocolExtensions(const protocolExtensions &);
    int protocolExtensions_is_present() const;
    void omit_protocolExtensions();
private:
    OSS_UINT32 bit_mask;
    protocolIEs protocolIEs_field;
    protocolExtensions protocolExtensions_field;
};

class OSS_PUBLIC rnp_seq175   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpInformationTransferIndicationIEs_Value value;

    rnp_seq175();
    rnp_seq175(const rnp_seq175 &);
    rnp_seq175(id, criticality, const value &);

    rnp_seq175 & operator = (const rnp_seq175 &);
    int operator == (const rnp_seq175 &) const;
    int operator != (const rnp_seq175 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

typedef rnp__shared5 rnp_seq176;

class OSS_PUBLIC rnpInformationTransferConfirmationIEs_Value : public OssConstrainedOpenType
{
public:
    rnpInformationTransferConfirmationIEs_Value();
    rnpInformationTransferConfirmationIEs_Value(const rnpInformationTransferConfirmationIEs_Value &);
    ~rnpInformationTransferConfirmationIEs_Value();
    rnpInformationTransferConfirmationIEs_Value & operator = (const rnpInformationTransferConfirmationIEs_Value &);
    int operator == (const rnpInformationTransferConfirmationIEs_Value &) const;
    int operator != (const rnpInformationTransferConfirmationIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpInformationTransferID *get_rnpInformationTransferID();
    const rnpInformationTransferID *get_rnpInformationTransferID() const;
    void set_rnpInformationTransferID(const rnpInformationTransferID &);
    rnpInformationTransferID *release_rnpInformationTransferID();
    void set_rnpInformationTransferID(rnpInformationTransferID *);

    rnpCN_DomainIndicator *get_rnpCN_DomainIndicator();
    const rnpCN_DomainIndicator *get_rnpCN_DomainIndicator() const;
    void set_rnpCN_DomainIndicator(const rnpCN_DomainIndicator &);
    rnpCN_DomainIndicator *release_rnpCN_DomainIndicator();
    void set_rnpCN_DomainIndicator(rnpCN_DomainIndicator *);

    rnpCriticalityDiagnostics *get_rnpCriticalityDiagnostics();
    const rnpCriticalityDiagnostics *get_rnpCriticalityDiagnostics() const;
    void set_rnpCriticalityDiagnostics(const rnpCriticalityDiagnostics &);
    rnpCriticalityDiagnostics *release_rnpCriticalityDiagnostics();
    void set_rnpCriticalityDiagnostics(rnpCriticalityDiagnostics *);

    rnpGlobalRNC_ID *get_rnpGlobalRNC_ID();
    const rnpGlobalRNC_ID *get_rnpGlobalRNC_ID() const;
    void set_rnpGlobalRNC_ID(const rnpGlobalRNC_ID &);
    rnpGlobalRNC_ID *release_rnpGlobalRNC_ID();
    void set_rnpGlobalRNC_ID(rnpGlobalRNC_ID *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnpInformationTransferConfirmationExtensions_Extension : public OssConstrainedOpenType
{
public:
    rnpInformationTransferConfirmationExtensions_Extension();
    rnpInformationTransferConfirmationExtensions_Extension(const rnpInformationTransferConfirmationExtensions_Extension &);
    ~rnpInformationTransferConfirmationExtensions_Extension();
    rnpInformationTransferConfirmationExtensions_Extension & operator = (const rnpInformationTransferConfirmationExtensions_Extension &);
    int operator == (const rnpInformationTransferConfirmationExtensions_Extension &) const;
    int operator != (const rnpInformationTransferConfirmationExtensions_Extension &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpExtendedRNC_ID *get_rnpExtendedRNC_ID();
    const rnpExtendedRNC_ID *get_rnpExtendedRNC_ID() const;
    void set_rnpExtendedRNC_ID(const rnpExtendedRNC_ID &);
    rnpExtendedRNC_ID *release_rnpExtendedRNC_ID();
    void set_rnpExtendedRNC_ID(rnpExtendedRNC_ID *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq177;

class OSS_PUBLIC rnp_seqof176 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq177 component;

    rnp_seqof176();
    rnp_seqof176(const rnp_seqof176 &);
    ~rnp_seqof176();

    rnp_seqof176 & operator = (const rnp_seqof176 &);
    int operator == (const rnp_seqof176 &) const;
    int operator != (const rnp_seqof176 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof176 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof176 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof176 *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared4 rnp_seqof177;

class OSS_PUBLIC rnpInformationTransferConfirmation   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp_seqof176 protocolIEs;
    typedef rnp__shared4 protocolExtensions;

    rnpInformationTransferConfirmation();
    rnpInformationTransferConfirmation(const rnpInformationTransferConfirmation &);
    rnpInformationTransferConfirmation(const protocolIEs &, const protocolExtensions &);
    rnpInformationTransferConfirmation(const protocolIEs &);

    rnpInformationTransferConfirmation & operator = (const rnpInformationTransferConfirmation &);
    int operator == (const rnpInformationTransferConfirmation &) const;
    int operator != (const rnpInformationTransferConfirmation &) const;

    protocolIEs & get_protocolIEs();
    const protocolIEs & get_protocolIEs() const;
    void set_protocolIEs(const protocolIEs &);

    protocolExtensions *get_protocolExtensions();
    const protocolExtensions *get_protocolExtensions() const;
    void set_protocolExtensions(const protocolExtensions &);
    int protocolExtensions_is_present() const;
    void omit_protocolExtensions();
private:
    OSS_UINT32 bit_mask;
    protocolIEs protocolIEs_field;
    protocolExtensions protocolExtensions_field;
};

class OSS_PUBLIC rnp_seq177   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpInformationTransferConfirmationIEs_Value value;

    rnp_seq177();
    rnp_seq177(const rnp_seq177 &);
    rnp_seq177(id, criticality, const value &);

    rnp_seq177 & operator = (const rnp_seq177 &);
    int operator == (const rnp_seq177 &) const;
    int operator != (const rnp_seq177 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

class OSS_PUBLIC rnp__shared3   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpInformationTransferConfirmationExtensions_Extension extensionValue;

    rnp__shared3();
    rnp__shared3(const rnp__shared3 &);
    rnp__shared3(id, criticality, const extensionValue &);

    rnp__shared3 & operator = (const rnp__shared3 &);
    int operator == (const rnp__shared3 &) const;
    int operator != (const rnp__shared3 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    extensionValue & get_extensionValue();
    const extensionValue & get_extensionValue() const;
    void set_extensionValue(const extensionValue &);
private:
    id id_field;
    criticality criticality_field;
    extensionValue extensionValue_field;
};

typedef rnp__shared3 rnp_seq314;

typedef rnp__shared3 rnp_seq178;

class OSS_PUBLIC rnpInformationTransferFailureIEs_Value : public OssConstrainedOpenType
{
public:
    rnpInformationTransferFailureIEs_Value();
    rnpInformationTransferFailureIEs_Value(const rnpInformationTransferFailureIEs_Value &);
    ~rnpInformationTransferFailureIEs_Value();
    rnpInformationTransferFailureIEs_Value & operator = (const rnpInformationTransferFailureIEs_Value &);
    int operator == (const rnpInformationTransferFailureIEs_Value &) const;
    int operator != (const rnpInformationTransferFailureIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpInformationTransferID *get_rnpInformationTransferID();
    const rnpInformationTransferID *get_rnpInformationTransferID() const;
    void set_rnpInformationTransferID(const rnpInformationTransferID &);
    rnpInformationTransferID *release_rnpInformationTransferID();
    void set_rnpInformationTransferID(rnpInformationTransferID *);

    rnpCN_DomainIndicator *get_rnpCN_DomainIndicator();
    const rnpCN_DomainIndicator *get_rnpCN_DomainIndicator() const;
    void set_rnpCN_DomainIndicator(const rnpCN_DomainIndicator &);
    rnpCN_DomainIndicator *release_rnpCN_DomainIndicator();
    void set_rnpCN_DomainIndicator(rnpCN_DomainIndicator *);

    rnpCause *get_rnpCause();
    const rnpCause *get_rnpCause() const;
    void set_rnpCause(const rnpCause &);
    rnpCause *release_rnpCause();
    void set_rnpCause(rnpCause *);

    rnpCriticalityDiagnostics *get_rnpCriticalityDiagnostics();
    const rnpCriticalityDiagnostics *get_rnpCriticalityDiagnostics() const;
    void set_rnpCriticalityDiagnostics(const rnpCriticalityDiagnostics &);
    rnpCriticalityDiagnostics *release_rnpCriticalityDiagnostics();
    void set_rnpCriticalityDiagnostics(rnpCriticalityDiagnostics *);

    rnpGlobalRNC_ID *get_rnpGlobalRNC_ID();
    const rnpGlobalRNC_ID *get_rnpGlobalRNC_ID() const;
    void set_rnpGlobalRNC_ID(const rnpGlobalRNC_ID &);
    rnpGlobalRNC_ID *release_rnpGlobalRNC_ID();
    void set_rnpGlobalRNC_ID(rnpGlobalRNC_ID *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq179;

class OSS_PUBLIC rnp_seqof178 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq179 component;

    rnp_seqof178();
    rnp_seqof178(const rnp_seqof178 &);
    ~rnp_seqof178();

    rnp_seqof178 & operator = (const rnp_seqof178 &);
    int operator == (const rnp_seqof178 &) const;
    int operator != (const rnp_seqof178 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof178 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof178 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof178 *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared4 rnp_seqof179;

class OSS_PUBLIC rnpInformationTransferFailure   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp_seqof178 protocolIEs;
    typedef rnp__shared4 protocolExtensions;

    rnpInformationTransferFailure();
    rnpInformationTransferFailure(const rnpInformationTransferFailure &);
    rnpInformationTransferFailure(const protocolIEs &, const protocolExtensions &);
    rnpInformationTransferFailure(const protocolIEs &);

    rnpInformationTransferFailure & operator = (const rnpInformationTransferFailure &);
    int operator == (const rnpInformationTransferFailure &) const;
    int operator != (const rnpInformationTransferFailure &) const;

    protocolIEs & get_protocolIEs();
    const protocolIEs & get_protocolIEs() const;
    void set_protocolIEs(const protocolIEs &);

    protocolExtensions *get_protocolExtensions();
    const protocolExtensions *get_protocolExtensions() const;
    void set_protocolExtensions(const protocolExtensions &);
    int protocolExtensions_is_present() const;
    void omit_protocolExtensions();
private:
    OSS_UINT32 bit_mask;
    protocolIEs protocolIEs_field;
    protocolExtensions protocolExtensions_field;
};

class OSS_PUBLIC rnp_seq179   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpInformationTransferFailureIEs_Value value;

    rnp_seq179();
    rnp_seq179(const rnp_seq179 &);
    rnp_seq179(id, criticality, const value &);

    rnp_seq179 & operator = (const rnp_seq179 &);
    int operator == (const rnp_seq179 &) const;
    int operator != (const rnp_seq179 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

typedef rnp__shared3 rnp_seq180;

class OSS_PUBLIC rnpUESpecificInformationIndicationIEs_Value : public OssConstrainedOpenType
{
public:
    rnpUESpecificInformationIndicationIEs_Value();
    rnpUESpecificInformationIndicationIEs_Value(const rnpUESpecificInformationIndicationIEs_Value &);
    ~rnpUESpecificInformationIndicationIEs_Value();
    rnpUESpecificInformationIndicationIEs_Value & operator = (const rnpUESpecificInformationIndicationIEs_Value &);
    int operator == (const rnpUESpecificInformationIndicationIEs_Value &) const;
    int operator != (const rnpUESpecificInformationIndicationIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpUESBI_Iu *get_rnpUESBI_Iu();
    const rnpUESBI_Iu *get_rnpUESBI_Iu() const;
    void set_rnpUESBI_Iu(const rnpUESBI_Iu &);
    rnpUESBI_Iu *release_rnpUESBI_Iu();
    void set_rnpUESBI_Iu(rnpUESBI_Iu *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq181;

class OSS_PUBLIC rnp_seqof180 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq181 component;

    rnp_seqof180();
    rnp_seqof180(const rnp_seqof180 &);
    ~rnp_seqof180();

    rnp_seqof180 & operator = (const rnp_seqof180 &);
    int operator == (const rnp_seqof180 &) const;
    int operator != (const rnp_seqof180 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof180 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof180 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof180 *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared6 rnp_seqof181;

class OSS_PUBLIC rnpUESpecificInformationIndication   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp_seqof180 protocolIEs;
    typedef rnp__shared6 protocolExtensions;

    rnpUESpecificInformationIndication();
    rnpUESpecificInformationIndication(const rnpUESpecificInformationIndication &);
    rnpUESpecificInformationIndication(const protocolIEs &, const protocolExtensions &);
    rnpUESpecificInformationIndication(const protocolIEs &);

    rnpUESpecificInformationIndication & operator = (const rnpUESpecificInformationIndication &);
    int operator == (const rnpUESpecificInformationIndication &) const;
    int operator != (const rnpUESpecificInformationIndication &) const;

    protocolIEs & get_protocolIEs();
    const protocolIEs & get_protocolIEs() const;
    void set_protocolIEs(const protocolIEs &);

    protocolExtensions *get_protocolExtensions();
    const protocolExtensions *get_protocolExtensions() const;
    void set_protocolExtensions(const protocolExtensions &);
    int protocolExtensions_is_present() const;
    void omit_protocolExtensions();
private:
    OSS_UINT32 bit_mask;
    protocolIEs protocolIEs_field;
    protocolExtensions protocolExtensions_field;
};

class OSS_PUBLIC rnp_seq181   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpUESpecificInformationIndicationIEs_Value value;

    rnp_seq181();
    rnp_seq181(const rnp_seq181 &);
    rnp_seq181(id, criticality, const value &);

    rnp_seq181 & operator = (const rnp_seq181 &);
    int operator == (const rnp_seq181 &) const;
    int operator != (const rnp_seq181 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

typedef rnp__shared5 rnp_seq182;

typedef rnp__shared6 rnp_seqof260;

class OSS_PUBLIC rnpGERAN_Cell_ID   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnpLAI lAI;
    typedef OssString rAC;
    typedef OssString cI;
    typedef rnp__shared6 iE_Extensions;

    rnpGERAN_Cell_ID();
    rnpGERAN_Cell_ID(const rnpGERAN_Cell_ID &);
    rnpGERAN_Cell_ID(const lAI &, const rAC &, const cI &, const iE_Extensions &);
    rnpGERAN_Cell_ID(const lAI &, const rAC &, const cI &);

    rnpGERAN_Cell_ID & operator = (const rnpGERAN_Cell_ID &);
    int operator == (const rnpGERAN_Cell_ID &) const;
    int operator != (const rnpGERAN_Cell_ID &) const;

    lAI & get_lAI();
    const lAI & get_lAI() const;
    void set_lAI(const lAI &);

    rAC & get_rAC();
    const rAC & get_rAC() const;
    void set_rAC(const rAC &);

    cI & get_cI();
    const cI & get_cI() const;
    void set_cI(const cI &);

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    lAI lAI_field;
    rAC rAC_field;
    cI cI_field;
    iE_Extensions iE_Extensions_field;
};

class OSS_PUBLIC rnpRIMRoutingAddress  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	targetRNC_ID_chosen = 1,
	gERAN_Cell_ID_chosen = 2,
	targeteNB_ID_chosen = 3
    };
    typedef rnpTargetRNC_ID targetRNC_ID;
    typedef rnpGERAN_Cell_ID gERAN_Cell_ID;
    typedef rnpTargetENB_ID targeteNB_ID;

    rnpRIMRoutingAddress();
    rnpRIMRoutingAddress(const rnpRIMRoutingAddress &);
    ~rnpRIMRoutingAddress();

    rnpRIMRoutingAddress & operator = (const rnpRIMRoutingAddress &);
    int operator == (const rnpRIMRoutingAddress &) const;
    int operator != (const rnpRIMRoutingAddress &) const;

    targetRNC_ID *get_targetRNC_ID();
    const targetRNC_ID *get_targetRNC_ID() const;
    void set_targetRNC_ID(const targetRNC_ID &);

    gERAN_Cell_ID *get_gERAN_Cell_ID();
    const gERAN_Cell_ID *get_gERAN_Cell_ID() const;
    void set_gERAN_Cell_ID(const gERAN_Cell_ID &);

    targeteNB_ID *get_targeteNB_ID();
    const targeteNB_ID *get_targeteNB_ID() const;
    void set_targeteNB_ID(const targeteNB_ID &);
private:
    union {
	targetRNC_ID *targetRNC_ID_field;
	gERAN_Cell_ID *gERAN_Cell_ID_field;
	targeteNB_ID *targeteNB_ID_field;
    };
    void cleanup();
};

typedef rnp__shared6 rnp_seqof290;

class OSS_PUBLIC rnpRIM_Transfer   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssString rIMInformation;
    typedef rnpRIMRoutingAddress rIMRoutingAddress;
    typedef rnp__shared6 iE_Extensions;

    rnpRIM_Transfer();
    rnpRIM_Transfer(const rnpRIM_Transfer &);
    rnpRIM_Transfer(const rIMInformation &, const rIMRoutingAddress &, const iE_Extensions &);
    rnpRIM_Transfer(const rIMInformation &);

    rnpRIM_Transfer & operator = (const rnpRIM_Transfer &);
    int operator == (const rnpRIM_Transfer &) const;
    int operator != (const rnpRIM_Transfer &) const;

    rIMInformation & get_rIMInformation();
    const rIMInformation & get_rIMInformation() const;
    void set_rIMInformation(const rIMInformation &);

    rIMRoutingAddress *get_rIMRoutingAddress();
    const rIMRoutingAddress *get_rIMRoutingAddress() const;
    void set_rIMRoutingAddress(const rIMRoutingAddress &);
    int rIMRoutingAddress_is_present() const;
    void omit_rIMRoutingAddress();

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    rIMInformation rIMInformation_field;
    rIMRoutingAddress rIMRoutingAddress_field;
    iE_Extensions iE_Extensions_field;
};

class OSS_PUBLIC rnpInterSystemInformationTransferType  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	rIM_Transfer_chosen = 1
    };
    typedef rnpRIM_Transfer rIM_Transfer;

    rnpInterSystemInformationTransferType();
    rnpInterSystemInformationTransferType(const rnpInterSystemInformationTransferType &);
    ~rnpInterSystemInformationTransferType();

    rnpInterSystemInformationTransferType & operator = (const rnpInterSystemInformationTransferType &);
    int operator == (const rnpInterSystemInformationTransferType &) const;
    int operator != (const rnpInterSystemInformationTransferType &) const;

    rIM_Transfer *get_rIM_Transfer();
    const rIM_Transfer *get_rIM_Transfer() const;
    void set_rIM_Transfer(const rIM_Transfer &);
private:
    union {
	rIM_Transfer *rIM_Transfer_field;
    };
    void cleanup();
};

class OSS_PUBLIC rnpDirectInformationTransferIEs_Value : public OssConstrainedOpenType
{
public:
    rnpDirectInformationTransferIEs_Value();
    rnpDirectInformationTransferIEs_Value(const rnpDirectInformationTransferIEs_Value &);
    ~rnpDirectInformationTransferIEs_Value();
    rnpDirectInformationTransferIEs_Value & operator = (const rnpDirectInformationTransferIEs_Value &);
    int operator == (const rnpDirectInformationTransferIEs_Value &) const;
    int operator != (const rnpDirectInformationTransferIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpInterSystemInformationTransferType *get_rnpInterSystemInformationTransferType();
    const rnpInterSystemInformationTransferType *get_rnpInterSystemInformationTransferType() const;
    void set_rnpInterSystemInformationTransferType(const rnpInterSystemInformationTransferType &);
    rnpInterSystemInformationTransferType *release_rnpInterSystemInformationTransferType();
    void set_rnpInterSystemInformationTransferType(rnpInterSystemInformationTransferType *);

    rnpCN_DomainIndicator *get_rnpCN_DomainIndicator();
    const rnpCN_DomainIndicator *get_rnpCN_DomainIndicator() const;
    void set_rnpCN_DomainIndicator(const rnpCN_DomainIndicator &);
    rnpCN_DomainIndicator *release_rnpCN_DomainIndicator();
    void set_rnpCN_DomainIndicator(rnpCN_DomainIndicator *);

    rnpGlobalRNC_ID *get_rnpGlobalRNC_ID();
    const rnpGlobalRNC_ID *get_rnpGlobalRNC_ID() const;
    void set_rnpGlobalRNC_ID(const rnpGlobalRNC_ID &);
    rnpGlobalRNC_ID *release_rnpGlobalRNC_ID();
    void set_rnpGlobalRNC_ID(rnpGlobalRNC_ID *);

    rnpGlobalCN_ID *get_rnpGlobalCN_ID();
    const rnpGlobalCN_ID *get_rnpGlobalCN_ID() const;
    void set_rnpGlobalCN_ID(const rnpGlobalCN_ID &);
    rnpGlobalCN_ID *release_rnpGlobalCN_ID();
    void set_rnpGlobalCN_ID(rnpGlobalCN_ID *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq183;

class OSS_PUBLIC rnp_seqof182 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq183 component;

    rnp_seqof182();
    rnp_seqof182(const rnp_seqof182 &);
    ~rnp_seqof182();

    rnp_seqof182 & operator = (const rnp_seqof182 &);
    int operator == (const rnp_seqof182 &) const;
    int operator != (const rnp_seqof182 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof182 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof182 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof182 *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared4 rnp_seqof183;

class OSS_PUBLIC rnpDirectInformationTransfer   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp_seqof182 protocolIEs;
    typedef rnp__shared4 protocolExtensions;

    rnpDirectInformationTransfer();
    rnpDirectInformationTransfer(const rnpDirectInformationTransfer &);
    rnpDirectInformationTransfer(const protocolIEs &, const protocolExtensions &);
    rnpDirectInformationTransfer(const protocolIEs &);

    rnpDirectInformationTransfer & operator = (const rnpDirectInformationTransfer &);
    int operator == (const rnpDirectInformationTransfer &) const;
    int operator != (const rnpDirectInformationTransfer &) const;

    protocolIEs & get_protocolIEs();
    const protocolIEs & get_protocolIEs() const;
    void set_protocolIEs(const protocolIEs &);

    protocolExtensions *get_protocolExtensions();
    const protocolExtensions *get_protocolExtensions() const;
    void set_protocolExtensions(const protocolExtensions &);
    int protocolExtensions_is_present() const;
    void omit_protocolExtensions();
private:
    OSS_UINT32 bit_mask;
    protocolIEs protocolIEs_field;
    protocolExtensions protocolExtensions_field;
};

class OSS_PUBLIC rnp_seq183   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpDirectInformationTransferIEs_Value value;

    rnp_seq183();
    rnp_seq183(const rnp_seq183 &);
    rnp_seq183(id, criticality, const value &);

    rnp_seq183 & operator = (const rnp_seq183 &);
    int operator == (const rnp_seq183 &) const;
    int operator != (const rnp_seq183 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

typedef rnp__shared3 rnp_seq184;

typedef rnp__shared9 rnpIMEIList;

typedef rnp__shared9 rnpIMEISVList;

typedef rnp__shared6 rnp_seqof261;

class OSS_PUBLIC rnpIMEIGroup   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssString iMEI;
    typedef OssBitString iMEIMask;
    typedef rnp__shared6 iE_Extensions;

    rnpIMEIGroup();
    rnpIMEIGroup(const rnpIMEIGroup &);
    rnpIMEIGroup(const iMEI &, const iMEIMask &, const iE_Extensions &);
    rnpIMEIGroup(const iMEI &, const iMEIMask &);

    rnpIMEIGroup & operator = (const rnpIMEIGroup &);
    int operator == (const rnpIMEIGroup &) const;
    int operator != (const rnpIMEIGroup &) const;

    iMEI & get_iMEI();
    const iMEI & get_iMEI() const;
    void set_iMEI(const iMEI &);

    iMEIMask & get_iMEIMask();
    const iMEIMask & get_iMEIMask() const;
    void set_iMEIMask(const iMEIMask &);

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    iMEI iMEI_field;
    iMEIMask iMEIMask_field;
    iE_Extensions iE_Extensions_field;
};

typedef rnp__shared6 rnp_seqof262;

class OSS_PUBLIC rnpIMEISVGroup   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssString iMEISV;
    typedef OssBitString iMEISVMask;
    typedef rnp__shared6 iE_Extensions;

    rnpIMEISVGroup();
    rnpIMEISVGroup(const rnpIMEISVGroup &);
    rnpIMEISVGroup(const iMEISV &, const iMEISVMask &, const iE_Extensions &);
    rnpIMEISVGroup(const iMEISV &, const iMEISVMask &);

    rnpIMEISVGroup & operator = (const rnpIMEISVGroup &);
    int operator == (const rnpIMEISVGroup &) const;
    int operator != (const rnpIMEISVGroup &) const;

    iMEISV & get_iMEISV();
    const iMEISV & get_iMEISV() const;
    void set_iMEISV(const iMEISV &);

    iMEISVMask & get_iMEISVMask();
    const iMEISVMask & get_iMEISVMask() const;
    void set_iMEISVMask(const iMEISVMask &);

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    iMEISV iMEISV_field;
    iMEISVMask iMEISVMask_field;
    iE_Extensions iE_Extensions_field;
};

class OSS_PUBLIC rnpEquipmentsToBeTraced  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	iMEIlist_chosen = 1,
	iMEISVlist_chosen = 2,
	iMEIgroup_chosen = 3,
	iMEISVgroup_chosen = 4
    };
    typedef rnp__shared9 iMEIlist;
    typedef rnp__shared9 iMEISVlist;
    typedef rnpIMEIGroup iMEIgroup;
    typedef rnpIMEISVGroup iMEISVgroup;

    rnpEquipmentsToBeTraced();
    rnpEquipmentsToBeTraced(const rnpEquipmentsToBeTraced &);
    ~rnpEquipmentsToBeTraced();

    rnpEquipmentsToBeTraced & operator = (const rnpEquipmentsToBeTraced &);
    int operator == (const rnpEquipmentsToBeTraced &) const;
    int operator != (const rnpEquipmentsToBeTraced &) const;

    iMEIlist *get_iMEIlist();
    const iMEIlist *get_iMEIlist() const;
    void set_iMEIlist(const iMEIlist &);

    iMEISVlist *get_iMEISVlist();
    const iMEISVlist *get_iMEISVlist() const;
    void set_iMEISVlist(const iMEISVlist &);

    iMEIgroup *get_iMEIgroup();
    const iMEIgroup *get_iMEIgroup() const;
    void set_iMEIgroup(const iMEIgroup &);

    iMEISVgroup *get_iMEISVgroup();
    const iMEISVgroup *get_iMEISVgroup() const;
    void set_iMEISVgroup(const iMEISVgroup &);
private:
    union {
	void *iMEIlist_field;
	void *iMEISVlist_field;
	iMEIgroup *iMEIgroup_field;
	iMEISVgroup *iMEISVgroup_field;
    };
    void cleanup();
};

class OSS_PUBLIC rnp_seq302;

class OSS_PUBLIC rnp_seqof291 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq302 component;

    rnp_seqof291();
    rnp_seqof291(const rnp_seqof291 &);
    ~rnp_seqof291();

    rnp_seqof291 & operator = (const rnp_seqof291 &);
    int operator == (const rnp_seqof291 &) const;
    int operator != (const rnp_seqof291 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof291 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof291 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof291 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpRNCTraceInformation   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssString traceReference;
    typedef enum rnp_enum5 traceActivationIndicator;
    typedef rnpEquipmentsToBeTraced equipmentsToBeTraced;
    typedef rnp_seqof291 iE_Extensions;

    rnpRNCTraceInformation();
    rnpRNCTraceInformation(const rnpRNCTraceInformation &);
    rnpRNCTraceInformation(const traceReference &, traceActivationIndicator, const equipmentsToBeTraced &, 
	const iE_Extensions &);
    rnpRNCTraceInformation(const traceReference &, traceActivationIndicator);

    rnpRNCTraceInformation & operator = (const rnpRNCTraceInformation &);
    int operator == (const rnpRNCTraceInformation &) const;
    int operator != (const rnpRNCTraceInformation &) const;

    traceReference & get_traceReference();
    const traceReference & get_traceReference() const;
    void set_traceReference(const traceReference &);

    traceActivationIndicator & get_traceActivationIndicator();
    traceActivationIndicator get_traceActivationIndicator() const;
    void set_traceActivationIndicator(traceActivationIndicator);

    equipmentsToBeTraced *get_equipmentsToBeTraced();
    const equipmentsToBeTraced *get_equipmentsToBeTraced() const;
    void set_equipmentsToBeTraced(const equipmentsToBeTraced &);
    int equipmentsToBeTraced_is_present() const;
    void omit_equipmentsToBeTraced();

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    traceReference traceReference_field;
    traceActivationIndicator traceActivationIndicator_field;
    equipmentsToBeTraced equipmentsToBeTraced_field;
    iE_Extensions iE_Extensions_field;
};

class OSS_PUBLIC rnpInformationTransferType  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	rNCTraceInformation_chosen = 1
    };
    typedef rnpRNCTraceInformation rNCTraceInformation;

    rnpInformationTransferType();
    rnpInformationTransferType(const rnpInformationTransferType &);
    ~rnpInformationTransferType();

    rnpInformationTransferType & operator = (const rnpInformationTransferType &);
    int operator == (const rnpInformationTransferType &) const;
    int operator != (const rnpInformationTransferType &) const;

    rNCTraceInformation *get_rNCTraceInformation();
    const rNCTraceInformation *get_rNCTraceInformation() const;
    void set_rNCTraceInformation(const rNCTraceInformation &);
private:
    union {
	rNCTraceInformation *rNCTraceInformation_field;
    };
    void cleanup();
};

class OSS_PUBLIC rnp__shared40 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnpTMGI component;

    rnp__shared40();
    rnp__shared40(const rnp__shared40 &);
    ~rnp__shared40();

    rnp__shared40 & operator = (const rnp__shared40 &);
    int operator == (const rnp__shared40 &) const;
    int operator != (const rnp__shared40 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp__shared40 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp__shared40 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp__shared40 *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared40 rnpMBMSIPMulticastAddressandAPNRequest;

class OSS_PUBLIC rnpInformationRequestType  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	mBMSIPMulticastAddressandAPNRequest_chosen = 1,
	permanentNAS_UE_ID_chosen = 2
    };
    typedef rnp__shared40 mBMSIPMulticastAddressandAPNRequest;
    typedef rnpPermanentNAS_UE_ID permanentNAS_UE_ID;

    rnpInformationRequestType();
    rnpInformationRequestType(const rnpInformationRequestType &);
    ~rnpInformationRequestType();

    rnpInformationRequestType & operator = (const rnpInformationRequestType &);
    int operator == (const rnpInformationRequestType &) const;
    int operator != (const rnpInformationRequestType &) const;

    mBMSIPMulticastAddressandAPNRequest *get_mBMSIPMulticastAddressandAPNRequest();
    const mBMSIPMulticastAddressandAPNRequest *get_mBMSIPMulticastAddressandAPNRequest() const;
    void set_mBMSIPMulticastAddressandAPNRequest(const mBMSIPMulticastAddressandAPNRequest &);

    permanentNAS_UE_ID *get_permanentNAS_UE_ID();
    const permanentNAS_UE_ID *get_permanentNAS_UE_ID() const;
    void set_permanentNAS_UE_ID(const permanentNAS_UE_ID &);
private:
    union {
	void *mBMSIPMulticastAddressandAPNRequest_field;
	permanentNAS_UE_ID *permanentNAS_UE_ID_field;
    };
    void cleanup();
};

class OSS_PUBLIC rnpUplinkInformationExchangeRequestIEs_Value : public OssConstrainedOpenType
{
public:
    rnpUplinkInformationExchangeRequestIEs_Value();
    rnpUplinkInformationExchangeRequestIEs_Value(const rnpUplinkInformationExchangeRequestIEs_Value &);
    ~rnpUplinkInformationExchangeRequestIEs_Value();
    rnpUplinkInformationExchangeRequestIEs_Value & operator = (const rnpUplinkInformationExchangeRequestIEs_Value &);
    int operator == (const rnpUplinkInformationExchangeRequestIEs_Value &) const;
    int operator != (const rnpUplinkInformationExchangeRequestIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpInformationExchangeID *get_rnpInformationExchangeID();
    const rnpInformationExchangeID *get_rnpInformationExchangeID() const;
    void set_rnpInformationExchangeID(const rnpInformationExchangeID &);
    rnpInformationExchangeID *release_rnpInformationExchangeID();
    void set_rnpInformationExchangeID(rnpInformationExchangeID *);

    rnpInformationExchangeType *get_rnpInformationExchangeType();
    const rnpInformationExchangeType *get_rnpInformationExchangeType() const;
    void set_rnpInformationExchangeType(const rnpInformationExchangeType &);
    rnpInformationExchangeType *release_rnpInformationExchangeType();
    void set_rnpInformationExchangeType(rnpInformationExchangeType *);

    rnpInformationTransferType *get_rnpInformationTransferType();
    const rnpInformationTransferType *get_rnpInformationTransferType() const;
    void set_rnpInformationTransferType(const rnpInformationTransferType &);
    rnpInformationTransferType *release_rnpInformationTransferType();
    void set_rnpInformationTransferType(rnpInformationTransferType *);

    rnpInformationRequestType *get_rnpInformationRequestType();
    const rnpInformationRequestType *get_rnpInformationRequestType() const;
    void set_rnpInformationRequestType(const rnpInformationRequestType &);
    rnpInformationRequestType *release_rnpInformationRequestType();
    void set_rnpInformationRequestType(rnpInformationRequestType *);

    rnpCN_DomainIndicator *get_rnpCN_DomainIndicator();
    const rnpCN_DomainIndicator *get_rnpCN_DomainIndicator() const;
    void set_rnpCN_DomainIndicator(const rnpCN_DomainIndicator &);
    rnpCN_DomainIndicator *release_rnpCN_DomainIndicator();
    void set_rnpCN_DomainIndicator(rnpCN_DomainIndicator *);

    rnpGlobalRNC_ID *get_rnpGlobalRNC_ID();
    const rnpGlobalRNC_ID *get_rnpGlobalRNC_ID() const;
    void set_rnpGlobalRNC_ID(const rnpGlobalRNC_ID &);
    rnpGlobalRNC_ID *release_rnpGlobalRNC_ID();
    void set_rnpGlobalRNC_ID(rnpGlobalRNC_ID *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq185;

class OSS_PUBLIC rnp_seqof184 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq185 component;

    rnp_seqof184();
    rnp_seqof184(const rnp_seqof184 &);
    ~rnp_seqof184();

    rnp_seqof184 & operator = (const rnp_seqof184 &);
    int operator == (const rnp_seqof184 &) const;
    int operator != (const rnp_seqof184 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof184 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof184 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof184 *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared4 rnp_seqof185;

class OSS_PUBLIC rnpUplinkInformationExchangeRequest   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp_seqof184 protocolIEs;
    typedef rnp__shared4 protocolExtensions;

    rnpUplinkInformationExchangeRequest();
    rnpUplinkInformationExchangeRequest(const rnpUplinkInformationExchangeRequest &);
    rnpUplinkInformationExchangeRequest(const protocolIEs &, const protocolExtensions &);
    rnpUplinkInformationExchangeRequest(const protocolIEs &);

    rnpUplinkInformationExchangeRequest & operator = (const rnpUplinkInformationExchangeRequest &);
    int operator == (const rnpUplinkInformationExchangeRequest &) const;
    int operator != (const rnpUplinkInformationExchangeRequest &) const;

    protocolIEs & get_protocolIEs();
    const protocolIEs & get_protocolIEs() const;
    void set_protocolIEs(const protocolIEs &);

    protocolExtensions *get_protocolExtensions();
    const protocolExtensions *get_protocolExtensions() const;
    void set_protocolExtensions(const protocolExtensions &);
    int protocolExtensions_is_present() const;
    void omit_protocolExtensions();
private:
    OSS_UINT32 bit_mask;
    protocolIEs protocolIEs_field;
    protocolExtensions protocolExtensions_field;
};

class OSS_PUBLIC rnp_seq185   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpUplinkInformationExchangeRequestIEs_Value value;

    rnp_seq185();
    rnp_seq185(const rnp_seq185 &);
    rnp_seq185(id, criticality, const value &);

    rnp_seq185 & operator = (const rnp_seq185 &);
    int operator == (const rnp_seq185 &) const;
    int operator != (const rnp_seq185 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

typedef rnp__shared3 rnp_seq186;

class OSS_PUBLIC rnpMBMSIPMulticastAddressandAPNlist;

class OSS_PUBLIC rnp__shared41 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnpMBMSIPMulticastAddressandAPNlist component;

    rnp__shared41();
    rnp__shared41(const rnp__shared41 &);
    ~rnp__shared41();

    rnp__shared41 & operator = (const rnp__shared41 &);
    int operator == (const rnp__shared41 &) const;
    int operator != (const rnp__shared41 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp__shared41 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp__shared41 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp__shared41 *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared41 rnpRequestedMBMSIPMulticastAddressandAPNRequest;

typedef rnp__shared40 rnpRequestedMulticastServiceList;

class OSS_PUBLIC rnpInformationRequested  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	requestedMBMSIPMulticastAddressandAPNRequest_chosen = 1,
	requestedMulticastServiceList_chosen = 2
    };
    typedef rnp__shared41 requestedMBMSIPMulticastAddressandAPNRequest;
    typedef rnp__shared40 requestedMulticastServiceList;

    rnpInformationRequested();
    rnpInformationRequested(const rnpInformationRequested &);
    ~rnpInformationRequested();

    rnpInformationRequested & operator = (const rnpInformationRequested &);
    int operator == (const rnpInformationRequested &) const;
    int operator != (const rnpInformationRequested &) const;

    requestedMBMSIPMulticastAddressandAPNRequest *get_requestedMBMSIPMulticastAddressandAPNRequest();
    const requestedMBMSIPMulticastAddressandAPNRequest *get_requestedMBMSIPMulticastAddressandAPNRequest() const;
    void set_requestedMBMSIPMulticastAddressandAPNRequest(const requestedMBMSIPMulticastAddressandAPNRequest &);

    requestedMulticastServiceList *get_requestedMulticastServiceList();
    const requestedMulticastServiceList *get_requestedMulticastServiceList() const;
    void set_requestedMulticastServiceList(const requestedMulticastServiceList &);
private:
    union {
	void *requestedMBMSIPMulticastAddressandAPNRequest_field;
	void *requestedMulticastServiceList_field;
    };
    void cleanup();
};

class OSS_PUBLIC rnpUplinkInformationExchangeResponseIEs_Value : public OssConstrainedOpenType
{
public:
    rnpUplinkInformationExchangeResponseIEs_Value();
    rnpUplinkInformationExchangeResponseIEs_Value(const rnpUplinkInformationExchangeResponseIEs_Value &);
    ~rnpUplinkInformationExchangeResponseIEs_Value();
    rnpUplinkInformationExchangeResponseIEs_Value & operator = (const rnpUplinkInformationExchangeResponseIEs_Value &);
    int operator == (const rnpUplinkInformationExchangeResponseIEs_Value &) const;
    int operator != (const rnpUplinkInformationExchangeResponseIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpInformationExchangeID *get_rnpInformationExchangeID();
    const rnpInformationExchangeID *get_rnpInformationExchangeID() const;
    void set_rnpInformationExchangeID(const rnpInformationExchangeID &);
    rnpInformationExchangeID *release_rnpInformationExchangeID();
    void set_rnpInformationExchangeID(rnpInformationExchangeID *);

    rnpInformationRequested *get_rnpInformationRequested();
    const rnpInformationRequested *get_rnpInformationRequested() const;
    void set_rnpInformationRequested(const rnpInformationRequested &);
    rnpInformationRequested *release_rnpInformationRequested();
    void set_rnpInformationRequested(rnpInformationRequested *);

    rnpCN_DomainIndicator *get_rnpCN_DomainIndicator();
    const rnpCN_DomainIndicator *get_rnpCN_DomainIndicator() const;
    void set_rnpCN_DomainIndicator(const rnpCN_DomainIndicator &);
    rnpCN_DomainIndicator *release_rnpCN_DomainIndicator();
    void set_rnpCN_DomainIndicator(rnpCN_DomainIndicator *);

    rnpGlobalCN_ID *get_rnpGlobalCN_ID();
    const rnpGlobalCN_ID *get_rnpGlobalCN_ID() const;
    void set_rnpGlobalCN_ID(const rnpGlobalCN_ID &);
    rnpGlobalCN_ID *release_rnpGlobalCN_ID();
    void set_rnpGlobalCN_ID(rnpGlobalCN_ID *);

    rnpCriticalityDiagnostics *get_rnpCriticalityDiagnostics();
    const rnpCriticalityDiagnostics *get_rnpCriticalityDiagnostics() const;
    void set_rnpCriticalityDiagnostics(const rnpCriticalityDiagnostics &);
    rnpCriticalityDiagnostics *release_rnpCriticalityDiagnostics();
    void set_rnpCriticalityDiagnostics(rnpCriticalityDiagnostics *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq187;

class OSS_PUBLIC rnp_seqof186 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq187 component;

    rnp_seqof186();
    rnp_seqof186(const rnp_seqof186 &);
    ~rnp_seqof186();

    rnp_seqof186 & operator = (const rnp_seqof186 &);
    int operator == (const rnp_seqof186 &) const;
    int operator != (const rnp_seqof186 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof186 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof186 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof186 *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared6 rnp_seqof187;

class OSS_PUBLIC rnpUplinkInformationExchangeResponse   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp_seqof186 protocolIEs;
    typedef rnp__shared6 protocolExtensions;

    rnpUplinkInformationExchangeResponse();
    rnpUplinkInformationExchangeResponse(const rnpUplinkInformationExchangeResponse &);
    rnpUplinkInformationExchangeResponse(const protocolIEs &, const protocolExtensions &);
    rnpUplinkInformationExchangeResponse(const protocolIEs &);

    rnpUplinkInformationExchangeResponse & operator = (const rnpUplinkInformationExchangeResponse &);
    int operator == (const rnpUplinkInformationExchangeResponse &) const;
    int operator != (const rnpUplinkInformationExchangeResponse &) const;

    protocolIEs & get_protocolIEs();
    const protocolIEs & get_protocolIEs() const;
    void set_protocolIEs(const protocolIEs &);

    protocolExtensions *get_protocolExtensions();
    const protocolExtensions *get_protocolExtensions() const;
    void set_protocolExtensions(const protocolExtensions &);
    int protocolExtensions_is_present() const;
    void omit_protocolExtensions();
private:
    OSS_UINT32 bit_mask;
    protocolIEs protocolIEs_field;
    protocolExtensions protocolExtensions_field;
};

class OSS_PUBLIC rnp_seq187   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpUplinkInformationExchangeResponseIEs_Value value;

    rnp_seq187();
    rnp_seq187(const rnp_seq187 &);
    rnp_seq187(id, criticality, const value &);

    rnp_seq187 & operator = (const rnp_seq187 &);
    int operator == (const rnp_seq187 &) const;
    int operator != (const rnp_seq187 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

typedef rnp__shared5 rnp_seq188;

class OSS_PUBLIC rnpUplinkInformationExchangeFailureIEs_Value : public OssConstrainedOpenType
{
public:
    rnpUplinkInformationExchangeFailureIEs_Value();
    rnpUplinkInformationExchangeFailureIEs_Value(const rnpUplinkInformationExchangeFailureIEs_Value &);
    ~rnpUplinkInformationExchangeFailureIEs_Value();
    rnpUplinkInformationExchangeFailureIEs_Value & operator = (const rnpUplinkInformationExchangeFailureIEs_Value &);
    int operator == (const rnpUplinkInformationExchangeFailureIEs_Value &) const;
    int operator != (const rnpUplinkInformationExchangeFailureIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpInformationExchangeID *get_rnpInformationExchangeID();
    const rnpInformationExchangeID *get_rnpInformationExchangeID() const;
    void set_rnpInformationExchangeID(const rnpInformationExchangeID &);
    rnpInformationExchangeID *release_rnpInformationExchangeID();
    void set_rnpInformationExchangeID(rnpInformationExchangeID *);

    rnpCN_DomainIndicator *get_rnpCN_DomainIndicator();
    const rnpCN_DomainIndicator *get_rnpCN_DomainIndicator() const;
    void set_rnpCN_DomainIndicator(const rnpCN_DomainIndicator &);
    rnpCN_DomainIndicator *release_rnpCN_DomainIndicator();
    void set_rnpCN_DomainIndicator(rnpCN_DomainIndicator *);

    rnpGlobalCN_ID *get_rnpGlobalCN_ID();
    const rnpGlobalCN_ID *get_rnpGlobalCN_ID() const;
    void set_rnpGlobalCN_ID(const rnpGlobalCN_ID &);
    rnpGlobalCN_ID *release_rnpGlobalCN_ID();
    void set_rnpGlobalCN_ID(rnpGlobalCN_ID *);

    rnpCause *get_rnpCause();
    const rnpCause *get_rnpCause() const;
    void set_rnpCause(const rnpCause &);
    rnpCause *release_rnpCause();
    void set_rnpCause(rnpCause *);

    rnpCriticalityDiagnostics *get_rnpCriticalityDiagnostics();
    const rnpCriticalityDiagnostics *get_rnpCriticalityDiagnostics() const;
    void set_rnpCriticalityDiagnostics(const rnpCriticalityDiagnostics &);
    rnpCriticalityDiagnostics *release_rnpCriticalityDiagnostics();
    void set_rnpCriticalityDiagnostics(rnpCriticalityDiagnostics *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq189;

class OSS_PUBLIC rnp_seqof188 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq189 component;

    rnp_seqof188();
    rnp_seqof188(const rnp_seqof188 &);
    ~rnp_seqof188();

    rnp_seqof188 & operator = (const rnp_seqof188 &);
    int operator == (const rnp_seqof188 &) const;
    int operator != (const rnp_seqof188 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof188 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof188 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof188 *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared6 rnp_seqof189;

class OSS_PUBLIC rnpUplinkInformationExchangeFailure   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp_seqof188 protocolIEs;
    typedef rnp__shared6 protocolExtensions;

    rnpUplinkInformationExchangeFailure();
    rnpUplinkInformationExchangeFailure(const rnpUplinkInformationExchangeFailure &);
    rnpUplinkInformationExchangeFailure(const protocolIEs &, const protocolExtensions &);
    rnpUplinkInformationExchangeFailure(const protocolIEs &);

    rnpUplinkInformationExchangeFailure & operator = (const rnpUplinkInformationExchangeFailure &);
    int operator == (const rnpUplinkInformationExchangeFailure &) const;
    int operator != (const rnpUplinkInformationExchangeFailure &) const;

    protocolIEs & get_protocolIEs();
    const protocolIEs & get_protocolIEs() const;
    void set_protocolIEs(const protocolIEs &);

    protocolExtensions *get_protocolExtensions();
    const protocolExtensions *get_protocolExtensions() const;
    void set_protocolExtensions(const protocolExtensions &);
    int protocolExtensions_is_present() const;
    void omit_protocolExtensions();
private:
    OSS_UINT32 bit_mask;
    protocolIEs protocolIEs_field;
    protocolExtensions protocolExtensions_field;
};

class OSS_PUBLIC rnp_seq189   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpUplinkInformationExchangeFailureIEs_Value value;

    rnp_seq189();
    rnp_seq189(const rnp_seq189 &);
    rnp_seq189(id, criticality, const value &);

    rnp_seq189 & operator = (const rnp_seq189 &);
    int operator == (const rnp_seq189 &) const;
    int operator != (const rnp_seq189 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

typedef rnp__shared5 rnp_seq190;

typedef rnp__shared9 rnpRAofIdleModeUEs;

class OSS_PUBLIC rnp__shared42;

class OSS_PUBLIC rnp__shared43 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp__shared42 component;

    rnp__shared43();
    rnp__shared43(const rnp__shared43 &);
    ~rnp__shared43();

    rnp__shared43 & operator = (const rnp__shared43 &);
    int operator == (const rnp__shared43 &) const;
    int operator != (const rnp__shared43 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp__shared43 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp__shared43 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp__shared43 *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared43 rnp_seqof287;

class OSS_PUBLIC rnpNotEmptyRAListofIdleModeUEs   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp__shared9 rAofIdleModeUEs;
    typedef rnp__shared43 iE_Extensions;

    rnpNotEmptyRAListofIdleModeUEs();
    rnpNotEmptyRAListofIdleModeUEs(const rnpNotEmptyRAListofIdleModeUEs &);
    rnpNotEmptyRAListofIdleModeUEs(const rAofIdleModeUEs &, const iE_Extensions &);
    rnpNotEmptyRAListofIdleModeUEs(const rAofIdleModeUEs &);

    rnpNotEmptyRAListofIdleModeUEs & operator = (const rnpNotEmptyRAListofIdleModeUEs &);
    int operator == (const rnpNotEmptyRAListofIdleModeUEs &) const;
    int operator != (const rnpNotEmptyRAListofIdleModeUEs &) const;

    rAofIdleModeUEs & get_rAofIdleModeUEs();
    const rAofIdleModeUEs & get_rAofIdleModeUEs() const;
    void set_rAofIdleModeUEs(const rAofIdleModeUEs &);

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    rAofIdleModeUEs rAofIdleModeUEs_field;
    iE_Extensions iE_Extensions_field;
};

class OSS_PUBLIC rnpRAListofIdleModeUEs  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	notEmptyRAListofIdleModeUEs_chosen = 1,
	emptyFullRAListofIdleModeUEs_chosen = 2
    };
    typedef rnpNotEmptyRAListofIdleModeUEs notEmptyRAListofIdleModeUEs;
    typedef enum rnp_enum4 emptyFullRAListofIdleModeUEs;

    rnpRAListofIdleModeUEs();
    rnpRAListofIdleModeUEs(const rnpRAListofIdleModeUEs &);
    ~rnpRAListofIdleModeUEs();

    rnpRAListofIdleModeUEs & operator = (const rnpRAListofIdleModeUEs &);
    int operator == (const rnpRAListofIdleModeUEs &) const;
    int operator != (const rnpRAListofIdleModeUEs &) const;

    notEmptyRAListofIdleModeUEs *get_notEmptyRAListofIdleModeUEs();
    const notEmptyRAListofIdleModeUEs *get_notEmptyRAListofIdleModeUEs() const;
    void set_notEmptyRAListofIdleModeUEs(const notEmptyRAListofIdleModeUEs &);

    emptyFullRAListofIdleModeUEs *get_emptyFullRAListofIdleModeUEs();
    const emptyFullRAListofIdleModeUEs *get_emptyFullRAListofIdleModeUEs() const;
    void set_emptyFullRAListofIdleModeUEs(emptyFullRAListofIdleModeUEs);
private:
    union {
	notEmptyRAListofIdleModeUEs *notEmptyRAListofIdleModeUEs_field;
	emptyFullRAListofIdleModeUEs emptyFullRAListofIdleModeUEs_field;
    };
    void cleanup();
};

class OSS_PUBLIC rnpMBMSSessionStartIEs_Value : public OssConstrainedOpenType
{
public:
    rnpMBMSSessionStartIEs_Value();
    rnpMBMSSessionStartIEs_Value(const rnpMBMSSessionStartIEs_Value &);
    ~rnpMBMSSessionStartIEs_Value();
    rnpMBMSSessionStartIEs_Value & operator = (const rnpMBMSSessionStartIEs_Value &);
    int operator == (const rnpMBMSSessionStartIEs_Value &) const;
    int operator != (const rnpMBMSSessionStartIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpTMGI *get_rnpTMGI();
    const rnpTMGI *get_rnpTMGI() const;
    void set_rnpTMGI(const rnpTMGI &);
    rnpTMGI *release_rnpTMGI();
    void set_rnpTMGI(rnpTMGI *);

    rnpMBMSSessionIdentity *get_rnpMBMSSessionIdentity();
    const rnpMBMSSessionIdentity *get_rnpMBMSSessionIdentity() const;
    void set_rnpMBMSSessionIdentity(const rnpMBMSSessionIdentity &);
    rnpMBMSSessionIdentity *release_rnpMBMSSessionIdentity();
    void set_rnpMBMSSessionIdentity(rnpMBMSSessionIdentity *);

    rnpMBMSBearerServiceType *get_rnpMBMSBearerServiceType();
    const rnpMBMSBearerServiceType *get_rnpMBMSBearerServiceType() const;
    void set_rnpMBMSBearerServiceType(const rnpMBMSBearerServiceType &);
    rnpMBMSBearerServiceType *release_rnpMBMSBearerServiceType();
    void set_rnpMBMSBearerServiceType(rnpMBMSBearerServiceType *);

    rnpIuSignallingConnectionIdentifier *get_rnpIuSignallingConnectionIdentifier();
    const rnpIuSignallingConnectionIdentifier *get_rnpIuSignallingConnectionIdentifier() const;
    void set_rnpIuSignallingConnectionIdentifier(const rnpIuSignallingConnectionIdentifier &);
    rnpIuSignallingConnectionIdentifier *release_rnpIuSignallingConnectionIdentifier();
    void set_rnpIuSignallingConnectionIdentifier(rnpIuSignallingConnectionIdentifier *);

    rnpRAB_Parameters *get_rnpRAB_Parameters();
    const rnpRAB_Parameters *get_rnpRAB_Parameters() const;
    void set_rnpRAB_Parameters(const rnpRAB_Parameters &);
    rnpRAB_Parameters *release_rnpRAB_Parameters();
    void set_rnpRAB_Parameters(rnpRAB_Parameters *);

    rnp__shared13 *get_rnpPDP_TypeInformation();
    const rnp__shared13 *get_rnpPDP_TypeInformation() const;
    void set_rnpPDP_TypeInformation(const rnp__shared13 &);
    rnp__shared13 *release_rnpPDP_TypeInformation();
    void set_rnpPDP_TypeInformation(rnp__shared13 *);

    rnpMBMSSessionDuration *get_rnpMBMSSessionDuration();
    const rnpMBMSSessionDuration *get_rnpMBMSSessionDuration() const;
    void set_rnpMBMSSessionDuration(const rnpMBMSSessionDuration &);
    rnpMBMSSessionDuration *release_rnpMBMSSessionDuration();
    void set_rnpMBMSSessionDuration(rnpMBMSSessionDuration *);

    rnpMBMSServiceArea *get_rnpMBMSServiceArea();
    const rnpMBMSServiceArea *get_rnpMBMSServiceArea() const;
    void set_rnpMBMSServiceArea(const rnpMBMSServiceArea &);
    rnpMBMSServiceArea *release_rnpMBMSServiceArea();
    void set_rnpMBMSServiceArea(rnpMBMSServiceArea *);

    rnpFrequenceLayerConvergenceFlag *get_rnpFrequenceLayerConvergenceFlag();
    const rnpFrequenceLayerConvergenceFlag *get_rnpFrequenceLayerConvergenceFlag() const;
    void set_rnpFrequenceLayerConvergenceFlag(const rnpFrequenceLayerConvergenceFlag &);
    rnpFrequenceLayerConvergenceFlag *release_rnpFrequenceLayerConvergenceFlag();
    void set_rnpFrequenceLayerConvergenceFlag(rnpFrequenceLayerConvergenceFlag *);

    rnpRAListofIdleModeUEs *get_rnpRAListofIdleModeUEs();
    const rnpRAListofIdleModeUEs *get_rnpRAListofIdleModeUEs() const;
    void set_rnpRAListofIdleModeUEs(const rnpRAListofIdleModeUEs &);
    rnpRAListofIdleModeUEs *release_rnpRAListofIdleModeUEs();
    void set_rnpRAListofIdleModeUEs(rnpRAListofIdleModeUEs *);

    rnpGlobalCN_ID *get_rnpGlobalCN_ID();
    const rnpGlobalCN_ID *get_rnpGlobalCN_ID() const;
    void set_rnpGlobalCN_ID(const rnpGlobalCN_ID &);
    rnpGlobalCN_ID *release_rnpGlobalCN_ID();
    void set_rnpGlobalCN_ID(rnpGlobalCN_ID *);

    rnpMBMSSessionRepetitionNumber *get_rnpMBMSSessionRepetitionNumber();
    const rnpMBMSSessionRepetitionNumber *get_rnpMBMSSessionRepetitionNumber() const;
    void set_rnpMBMSSessionRepetitionNumber(const rnpMBMSSessionRepetitionNumber &);
    rnpMBMSSessionRepetitionNumber *release_rnpMBMSSessionRepetitionNumber();
    void set_rnpMBMSSessionRepetitionNumber(rnpMBMSSessionRepetitionNumber *);

    rnpTimeToMBMSDataTransfer *get_rnpTimeToMBMSDataTransfer();
    const rnpTimeToMBMSDataTransfer *get_rnpTimeToMBMSDataTransfer() const;
    void set_rnpTimeToMBMSDataTransfer(const rnpTimeToMBMSDataTransfer &);
    rnpTimeToMBMSDataTransfer *release_rnpTimeToMBMSDataTransfer();
    void set_rnpTimeToMBMSDataTransfer(rnpTimeToMBMSDataTransfer *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq193;

class OSS_PUBLIC rnp_seqof192 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq193 component;

    rnp_seqof192();
    rnp_seqof192(const rnp_seqof192 &);
    ~rnp_seqof192();

    rnp_seqof192 & operator = (const rnp_seqof192 &);
    int operator == (const rnp_seqof192 &) const;
    int operator != (const rnp_seqof192 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof192 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof192 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof192 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpMBMSSynchronisationInformation   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef enum rnpMBMSHCIndicator mBMSHCIndicator;
    typedef OssString iPMulticastAddress;
    typedef OssString gTPDLTEID;
    typedef rnp_seqof192 iE_Extensions;

    rnpMBMSSynchronisationInformation();
    rnpMBMSSynchronisationInformation(const rnpMBMSSynchronisationInformation &);
    rnpMBMSSynchronisationInformation(mBMSHCIndicator, const iPMulticastAddress &, 
	const gTPDLTEID &, const iE_Extensions &);
    rnpMBMSSynchronisationInformation(mBMSHCIndicator, const iPMulticastAddress &, 
	const gTPDLTEID &);

    rnpMBMSSynchronisationInformation & operator = (const rnpMBMSSynchronisationInformation &);
    int operator == (const rnpMBMSSynchronisationInformation &) const;
    int operator != (const rnpMBMSSynchronisationInformation &) const;

    mBMSHCIndicator & get_mBMSHCIndicator();
    mBMSHCIndicator get_mBMSHCIndicator() const;
    void set_mBMSHCIndicator(mBMSHCIndicator);

    iPMulticastAddress & get_iPMulticastAddress();
    const iPMulticastAddress & get_iPMulticastAddress() const;
    void set_iPMulticastAddress(const iPMulticastAddress &);

    gTPDLTEID & get_gTPDLTEID();
    const gTPDLTEID & get_gTPDLTEID() const;
    void set_gTPDLTEID(const gTPDLTEID &);

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    mBMSHCIndicator mBMSHCIndicator_field;
    iPMulticastAddress iPMulticastAddress_field;
    gTPDLTEID gTPDLTEID_field;
    iE_Extensions iE_Extensions_field;
};

class OSS_PUBLIC rnpMBMSSessionStartExtensions_Extension : public OssConstrainedOpenType
{
public:
    rnpMBMSSessionStartExtensions_Extension();
    rnpMBMSSessionStartExtensions_Extension(const rnpMBMSSessionStartExtensions_Extension &);
    ~rnpMBMSSessionStartExtensions_Extension();
    rnpMBMSSessionStartExtensions_Extension & operator = (const rnpMBMSSessionStartExtensions_Extension &);
    int operator == (const rnpMBMSSessionStartExtensions_Extension &) const;
    int operator != (const rnpMBMSSessionStartExtensions_Extension &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpMBMSCountingInformation *get_rnpMBMSCountingInformation();
    const rnpMBMSCountingInformation *get_rnpMBMSCountingInformation() const;
    void set_rnpMBMSCountingInformation(const rnpMBMSCountingInformation &);
    rnpMBMSCountingInformation *release_rnpMBMSCountingInformation();
    void set_rnpMBMSCountingInformation(rnpMBMSCountingInformation *);

    rnpMBMSSynchronisationInformation *get_rnpMBMSSynchronisationInformation();
    const rnpMBMSSynchronisationInformation *get_rnpMBMSSynchronisationInformation() const;
    void set_rnpMBMSSynchronisationInformation(const rnpMBMSSynchronisationInformation &);
    rnpMBMSSynchronisationInformation *release_rnpMBMSSynchronisationInformation();
    void set_rnpMBMSSynchronisationInformation(rnpMBMSSynchronisationInformation *);

    rnpPDP_TypeInformation_extension *get_rnpPDP_TypeInformation_extension();
    const rnpPDP_TypeInformation_extension *get_rnpPDP_TypeInformation_extension() const;
    void set_rnpPDP_TypeInformation_extension(const rnpPDP_TypeInformation_extension &);
    rnpPDP_TypeInformation_extension *release_rnpPDP_TypeInformation_extension();
    void set_rnpPDP_TypeInformation_extension(rnpPDP_TypeInformation_extension *);

    rnpSession_Re_establishment_Indicator *get_rnpSession_Re_establishment_Indicator();
    const rnpSession_Re_establishment_Indicator *get_rnpSession_Re_establishment_Indicator() const;
    void set_rnpSession_Re_establishment_Indicator(const rnpSession_Re_establishment_Indicator &);
    rnpSession_Re_establishment_Indicator *release_rnpSession_Re_establishment_Indicator();
    void set_rnpSession_Re_establishment_Indicator(rnpSession_Re_establishment_Indicator *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq191;

class OSS_PUBLIC rnp_seqof190 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq191 component;

    rnp_seqof190();
    rnp_seqof190(const rnp_seqof190 &);
    ~rnp_seqof190();

    rnp_seqof190 & operator = (const rnp_seqof190 &);
    int operator == (const rnp_seqof190 &) const;
    int operator != (const rnp_seqof190 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof190 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof190 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof190 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnp_seq192;

class OSS_PUBLIC rnp_seqof191 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq192 component;

    rnp_seqof191();
    rnp_seqof191(const rnp_seqof191 &);
    ~rnp_seqof191();

    rnp_seqof191 & operator = (const rnp_seqof191 &);
    int operator == (const rnp_seqof191 &) const;
    int operator != (const rnp_seqof191 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof191 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof191 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof191 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpMBMSSessionStart   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp_seqof190 protocolIEs;
    typedef rnp_seqof191 protocolExtensions;

    rnpMBMSSessionStart();
    rnpMBMSSessionStart(const rnpMBMSSessionStart &);
    rnpMBMSSessionStart(const protocolIEs &, const protocolExtensions &);
    rnpMBMSSessionStart(const protocolIEs &);

    rnpMBMSSessionStart & operator = (const rnpMBMSSessionStart &);
    int operator == (const rnpMBMSSessionStart &) const;
    int operator != (const rnpMBMSSessionStart &) const;

    protocolIEs & get_protocolIEs();
    const protocolIEs & get_protocolIEs() const;
    void set_protocolIEs(const protocolIEs &);

    protocolExtensions *get_protocolExtensions();
    const protocolExtensions *get_protocolExtensions() const;
    void set_protocolExtensions(const protocolExtensions &);
    int protocolExtensions_is_present() const;
    void omit_protocolExtensions();
private:
    OSS_UINT32 bit_mask;
    protocolIEs protocolIEs_field;
    protocolExtensions protocolExtensions_field;
};

class OSS_PUBLIC rnp_seq191   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpMBMSSessionStartIEs_Value value;

    rnp_seq191();
    rnp_seq191(const rnp_seq191 &);
    rnp_seq191(id, criticality, const value &);

    rnp_seq191 & operator = (const rnp_seq191 &);
    int operator == (const rnp_seq191 &) const;
    int operator != (const rnp_seq191 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

class OSS_PUBLIC rnp_seq192   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpMBMSSessionStartExtensions_Extension extensionValue;

    rnp_seq192();
    rnp_seq192(const rnp_seq192 &);
    rnp_seq192(id, criticality, const extensionValue &);

    rnp_seq192 & operator = (const rnp_seq192 &);
    int operator == (const rnp_seq192 &) const;
    int operator != (const rnp_seq192 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    extensionValue & get_extensionValue();
    const extensionValue & get_extensionValue() const;
    void set_extensionValue(const extensionValue &);
private:
    id id_field;
    criticality criticality_field;
    extensionValue extensionValue_field;
};

class OSS_PUBLIC rnpMBMSSynchronisationInformation_ExtIEs_Extension : public OssConstrainedOpenType
{
public:
    rnpMBMSSynchronisationInformation_ExtIEs_Extension();
    rnpMBMSSynchronisationInformation_ExtIEs_Extension(const rnpMBMSSynchronisationInformation_ExtIEs_Extension &);
    ~rnpMBMSSynchronisationInformation_ExtIEs_Extension();
    rnpMBMSSynchronisationInformation_ExtIEs_Extension & operator = (const rnpMBMSSynchronisationInformation_ExtIEs_Extension &);
    int operator == (const rnpMBMSSynchronisationInformation_ExtIEs_Extension &) const;
    int operator != (const rnpMBMSSynchronisationInformation_ExtIEs_Extension &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpIPMulticastAddress *get_rnpIPMulticastAddress();
    const rnpIPMulticastAddress *get_rnpIPMulticastAddress() const;
    void set_rnpIPMulticastAddress(const rnpIPMulticastAddress &);
    rnpIPMulticastAddress *release_rnpIPMulticastAddress();
    void set_rnpIPMulticastAddress(rnpIPMulticastAddress *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq193   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpMBMSSynchronisationInformation_ExtIEs_Extension extensionValue;

    rnp_seq193();
    rnp_seq193(const rnp_seq193 &);
    rnp_seq193(id, criticality, const extensionValue &);

    rnp_seq193 & operator = (const rnp_seq193 &);
    int operator == (const rnp_seq193 &) const;
    int operator != (const rnp_seq193 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    extensionValue & get_extensionValue();
    const extensionValue & get_extensionValue() const;
    void set_extensionValue(const extensionValue &);
private:
    id id_field;
    criticality criticality_field;
    extensionValue extensionValue_field;
};

class OSS_PUBLIC rnpMBMSSessionStartResponseIEs_Value : public OssConstrainedOpenType
{
public:
    rnpMBMSSessionStartResponseIEs_Value();
    rnpMBMSSessionStartResponseIEs_Value(const rnpMBMSSessionStartResponseIEs_Value &);
    ~rnpMBMSSessionStartResponseIEs_Value();
    rnpMBMSSessionStartResponseIEs_Value & operator = (const rnpMBMSSessionStartResponseIEs_Value &);
    int operator == (const rnpMBMSSessionStartResponseIEs_Value &) const;
    int operator != (const rnpMBMSSessionStartResponseIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnp__shared35 *get_rnpTransportLayerInformation();
    const rnp__shared35 *get_rnpTransportLayerInformation() const;
    void set_rnpTransportLayerInformation(const rnp__shared35 &);
    rnp__shared35 *release_rnpTransportLayerInformation();
    void set_rnpTransportLayerInformation(rnp__shared35 *);

    rnpCause *get_rnpCause();
    const rnpCause *get_rnpCause() const;
    void set_rnpCause(const rnpCause &);
    rnpCause *release_rnpCause();
    void set_rnpCause(rnpCause *);

    rnpCriticalityDiagnostics *get_rnpCriticalityDiagnostics();
    const rnpCriticalityDiagnostics *get_rnpCriticalityDiagnostics() const;
    void set_rnpCriticalityDiagnostics(const rnpCriticalityDiagnostics &);
    rnpCriticalityDiagnostics *release_rnpCriticalityDiagnostics();
    void set_rnpCriticalityDiagnostics(rnpCriticalityDiagnostics *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq194;

class OSS_PUBLIC rnp_seqof193 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq194 component;

    rnp_seqof193();
    rnp_seqof193(const rnp_seqof193 &);
    ~rnp_seqof193();

    rnp_seqof193 & operator = (const rnp_seqof193 &);
    int operator == (const rnp_seqof193 &) const;
    int operator != (const rnp_seqof193 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof193 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof193 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof193 *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared6 rnp_seqof194;

class OSS_PUBLIC rnpMBMSSessionStartResponse   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp_seqof193 protocolIEs;
    typedef rnp__shared6 protocolExtensions;

    rnpMBMSSessionStartResponse();
    rnpMBMSSessionStartResponse(const rnpMBMSSessionStartResponse &);
    rnpMBMSSessionStartResponse(const protocolIEs &, const protocolExtensions &);
    rnpMBMSSessionStartResponse(const protocolIEs &);

    rnpMBMSSessionStartResponse & operator = (const rnpMBMSSessionStartResponse &);
    int operator == (const rnpMBMSSessionStartResponse &) const;
    int operator != (const rnpMBMSSessionStartResponse &) const;

    protocolIEs & get_protocolIEs();
    const protocolIEs & get_protocolIEs() const;
    void set_protocolIEs(const protocolIEs &);

    protocolExtensions *get_protocolExtensions();
    const protocolExtensions *get_protocolExtensions() const;
    void set_protocolExtensions(const protocolExtensions &);
    int protocolExtensions_is_present() const;
    void omit_protocolExtensions();
private:
    OSS_UINT32 bit_mask;
    protocolIEs protocolIEs_field;
    protocolExtensions protocolExtensions_field;
};

class OSS_PUBLIC rnp_seq194   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpMBMSSessionStartResponseIEs_Value value;

    rnp_seq194();
    rnp_seq194(const rnp_seq194 &);
    rnp_seq194(id, criticality, const value &);

    rnp_seq194 & operator = (const rnp_seq194 &);
    int operator == (const rnp_seq194 &) const;
    int operator != (const rnp_seq194 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

typedef rnp__shared5 rnp_seq195;

typedef rnp__shared39 rnpMBMSSessionStartFailure;

typedef rnp__shared38 rnp_seqof195;

typedef rnp__shared37 rnp_seq196;

typedef rnp__shared6 rnp_seqof196;

typedef rnp__shared5 rnp_seq197;

typedef rnp__shared9 rnpNewRAListofIdleModeUEs;

typedef rnp__shared9 rnpRAListwithNoIdleModeUEsAnyMore;

typedef rnp__shared43 rnp_seqof249;

class OSS_PUBLIC rnpDeltaRAListofIdleModeUEs   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp__shared9 newRAListofIdleModeUEs;
    typedef rnp__shared9 rAListwithNoIdleModeUEsAnyMore;
    typedef rnp__shared43 iE_Extensions;

    rnpDeltaRAListofIdleModeUEs();
    rnpDeltaRAListofIdleModeUEs(const rnpDeltaRAListofIdleModeUEs &);
    rnpDeltaRAListofIdleModeUEs(const newRAListofIdleModeUEs &, const rAListwithNoIdleModeUEsAnyMore &, 
	const iE_Extensions &);

    rnpDeltaRAListofIdleModeUEs & operator = (const rnpDeltaRAListofIdleModeUEs &);
    int operator == (const rnpDeltaRAListofIdleModeUEs &) const;
    int operator != (const rnpDeltaRAListofIdleModeUEs &) const;

    newRAListofIdleModeUEs *get_newRAListofIdleModeUEs();
    const newRAListofIdleModeUEs *get_newRAListofIdleModeUEs() const;
    void set_newRAListofIdleModeUEs(const newRAListofIdleModeUEs &);
    int newRAListofIdleModeUEs_is_present() const;
    void omit_newRAListofIdleModeUEs();

    rAListwithNoIdleModeUEsAnyMore *get_rAListwithNoIdleModeUEsAnyMore();
    const rAListwithNoIdleModeUEsAnyMore *get_rAListwithNoIdleModeUEsAnyMore() const;
    void set_rAListwithNoIdleModeUEsAnyMore(const rAListwithNoIdleModeUEsAnyMore &);
    int rAListwithNoIdleModeUEsAnyMore_is_present() const;
    void omit_rAListwithNoIdleModeUEsAnyMore();

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    newRAListofIdleModeUEs newRAListofIdleModeUEs_field;
    rAListwithNoIdleModeUEsAnyMore rAListwithNoIdleModeUEsAnyMore_field;
    iE_Extensions iE_Extensions_field;
};

class OSS_PUBLIC rnpMBMSSessionUpdateIEs_Value : public OssConstrainedOpenType
{
public:
    rnpMBMSSessionUpdateIEs_Value();
    rnpMBMSSessionUpdateIEs_Value(const rnpMBMSSessionUpdateIEs_Value &);
    ~rnpMBMSSessionUpdateIEs_Value();
    rnpMBMSSessionUpdateIEs_Value & operator = (const rnpMBMSSessionUpdateIEs_Value &);
    int operator == (const rnpMBMSSessionUpdateIEs_Value &) const;
    int operator != (const rnpMBMSSessionUpdateIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpSessionUpdateID *get_rnpSessionUpdateID();
    const rnpSessionUpdateID *get_rnpSessionUpdateID() const;
    void set_rnpSessionUpdateID(const rnpSessionUpdateID &);
    rnpSessionUpdateID *release_rnpSessionUpdateID();
    void set_rnpSessionUpdateID(rnpSessionUpdateID *);

    rnpDeltaRAListofIdleModeUEs *get_rnpDeltaRAListofIdleModeUEs();
    const rnpDeltaRAListofIdleModeUEs *get_rnpDeltaRAListofIdleModeUEs() const;
    void set_rnpDeltaRAListofIdleModeUEs(const rnpDeltaRAListofIdleModeUEs &);
    rnpDeltaRAListofIdleModeUEs *release_rnpDeltaRAListofIdleModeUEs();
    void set_rnpDeltaRAListofIdleModeUEs(rnpDeltaRAListofIdleModeUEs *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq198;

class OSS_PUBLIC rnp_seqof197 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq198 component;

    rnp_seqof197();
    rnp_seqof197(const rnp_seqof197 &);
    ~rnp_seqof197();

    rnp_seqof197 & operator = (const rnp_seqof197 &);
    int operator == (const rnp_seqof197 &) const;
    int operator != (const rnp_seqof197 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof197 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof197 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof197 *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared6 rnp_seqof198;

class OSS_PUBLIC rnpMBMSSessionUpdate   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp_seqof197 protocolIEs;
    typedef rnp__shared6 protocolExtensions;

    rnpMBMSSessionUpdate();
    rnpMBMSSessionUpdate(const rnpMBMSSessionUpdate &);
    rnpMBMSSessionUpdate(const protocolIEs &, const protocolExtensions &);
    rnpMBMSSessionUpdate(const protocolIEs &);

    rnpMBMSSessionUpdate & operator = (const rnpMBMSSessionUpdate &);
    int operator == (const rnpMBMSSessionUpdate &) const;
    int operator != (const rnpMBMSSessionUpdate &) const;

    protocolIEs & get_protocolIEs();
    const protocolIEs & get_protocolIEs() const;
    void set_protocolIEs(const protocolIEs &);

    protocolExtensions *get_protocolExtensions();
    const protocolExtensions *get_protocolExtensions() const;
    void set_protocolExtensions(const protocolExtensions &);
    int protocolExtensions_is_present() const;
    void omit_protocolExtensions();
private:
    OSS_UINT32 bit_mask;
    protocolIEs protocolIEs_field;
    protocolExtensions protocolExtensions_field;
};

class OSS_PUBLIC rnp_seq198   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpMBMSSessionUpdateIEs_Value value;

    rnp_seq198();
    rnp_seq198(const rnp_seq198 &);
    rnp_seq198(id, criticality, const value &);

    rnp_seq198 & operator = (const rnp_seq198 &);
    int operator == (const rnp_seq198 &) const;
    int operator != (const rnp_seq198 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

typedef rnp__shared5 rnp_seq199;

class OSS_PUBLIC rnpMBMSSessionUpdateResponseIEs_Value : public OssConstrainedOpenType
{
public:
    rnpMBMSSessionUpdateResponseIEs_Value();
    rnpMBMSSessionUpdateResponseIEs_Value(const rnpMBMSSessionUpdateResponseIEs_Value &);
    ~rnpMBMSSessionUpdateResponseIEs_Value();
    rnpMBMSSessionUpdateResponseIEs_Value & operator = (const rnpMBMSSessionUpdateResponseIEs_Value &);
    int operator == (const rnpMBMSSessionUpdateResponseIEs_Value &) const;
    int operator != (const rnpMBMSSessionUpdateResponseIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpSessionUpdateID *get_rnpSessionUpdateID();
    const rnpSessionUpdateID *get_rnpSessionUpdateID() const;
    void set_rnpSessionUpdateID(const rnpSessionUpdateID &);
    rnpSessionUpdateID *release_rnpSessionUpdateID();
    void set_rnpSessionUpdateID(rnpSessionUpdateID *);

    rnp__shared35 *get_rnpTransportLayerInformation();
    const rnp__shared35 *get_rnpTransportLayerInformation() const;
    void set_rnpTransportLayerInformation(const rnp__shared35 &);
    rnp__shared35 *release_rnpTransportLayerInformation();
    void set_rnpTransportLayerInformation(rnp__shared35 *);

    rnpCause *get_rnpCause();
    const rnpCause *get_rnpCause() const;
    void set_rnpCause(const rnpCause &);
    rnpCause *release_rnpCause();
    void set_rnpCause(rnpCause *);

    rnpCriticalityDiagnostics *get_rnpCriticalityDiagnostics();
    const rnpCriticalityDiagnostics *get_rnpCriticalityDiagnostics() const;
    void set_rnpCriticalityDiagnostics(const rnpCriticalityDiagnostics &);
    rnpCriticalityDiagnostics *release_rnpCriticalityDiagnostics();
    void set_rnpCriticalityDiagnostics(rnpCriticalityDiagnostics *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq200;

class OSS_PUBLIC rnp_seqof199 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq200 component;

    rnp_seqof199();
    rnp_seqof199(const rnp_seqof199 &);
    ~rnp_seqof199();

    rnp_seqof199 & operator = (const rnp_seqof199 &);
    int operator == (const rnp_seqof199 &) const;
    int operator != (const rnp_seqof199 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof199 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof199 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof199 *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared6 rnp_seqof200;

class OSS_PUBLIC rnpMBMSSessionUpdateResponse   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp_seqof199 protocolIEs;
    typedef rnp__shared6 protocolExtensions;

    rnpMBMSSessionUpdateResponse();
    rnpMBMSSessionUpdateResponse(const rnpMBMSSessionUpdateResponse &);
    rnpMBMSSessionUpdateResponse(const protocolIEs &, const protocolExtensions &);
    rnpMBMSSessionUpdateResponse(const protocolIEs &);

    rnpMBMSSessionUpdateResponse & operator = (const rnpMBMSSessionUpdateResponse &);
    int operator == (const rnpMBMSSessionUpdateResponse &) const;
    int operator != (const rnpMBMSSessionUpdateResponse &) const;

    protocolIEs & get_protocolIEs();
    const protocolIEs & get_protocolIEs() const;
    void set_protocolIEs(const protocolIEs &);

    protocolExtensions *get_protocolExtensions();
    const protocolExtensions *get_protocolExtensions() const;
    void set_protocolExtensions(const protocolExtensions &);
    int protocolExtensions_is_present() const;
    void omit_protocolExtensions();
private:
    OSS_UINT32 bit_mask;
    protocolIEs protocolIEs_field;
    protocolExtensions protocolExtensions_field;
};

class OSS_PUBLIC rnp_seq200   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpMBMSSessionUpdateResponseIEs_Value value;

    rnp_seq200();
    rnp_seq200(const rnp_seq200 &);
    rnp_seq200(id, criticality, const value &);

    rnp_seq200 & operator = (const rnp_seq200 &);
    int operator == (const rnp_seq200 &) const;
    int operator != (const rnp_seq200 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

typedef rnp__shared5 rnp_seq201;

class OSS_PUBLIC rnpMBMSSessionUpdateFailureIEs_Value : public OssConstrainedOpenType
{
public:
    rnpMBMSSessionUpdateFailureIEs_Value();
    rnpMBMSSessionUpdateFailureIEs_Value(const rnpMBMSSessionUpdateFailureIEs_Value &);
    ~rnpMBMSSessionUpdateFailureIEs_Value();
    rnpMBMSSessionUpdateFailureIEs_Value & operator = (const rnpMBMSSessionUpdateFailureIEs_Value &);
    int operator == (const rnpMBMSSessionUpdateFailureIEs_Value &) const;
    int operator != (const rnpMBMSSessionUpdateFailureIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpSessionUpdateID *get_rnpSessionUpdateID();
    const rnpSessionUpdateID *get_rnpSessionUpdateID() const;
    void set_rnpSessionUpdateID(const rnpSessionUpdateID &);
    rnpSessionUpdateID *release_rnpSessionUpdateID();
    void set_rnpSessionUpdateID(rnpSessionUpdateID *);

    rnpCause *get_rnpCause();
    const rnpCause *get_rnpCause() const;
    void set_rnpCause(const rnpCause &);
    rnpCause *release_rnpCause();
    void set_rnpCause(rnpCause *);

    rnpCriticalityDiagnostics *get_rnpCriticalityDiagnostics();
    const rnpCriticalityDiagnostics *get_rnpCriticalityDiagnostics() const;
    void set_rnpCriticalityDiagnostics(const rnpCriticalityDiagnostics &);
    rnpCriticalityDiagnostics *release_rnpCriticalityDiagnostics();
    void set_rnpCriticalityDiagnostics(rnpCriticalityDiagnostics *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq202;

class OSS_PUBLIC rnp_seqof201 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq202 component;

    rnp_seqof201();
    rnp_seqof201(const rnp_seqof201 &);
    ~rnp_seqof201();

    rnp_seqof201 & operator = (const rnp_seqof201 &);
    int operator == (const rnp_seqof201 &) const;
    int operator != (const rnp_seqof201 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof201 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof201 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof201 *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared6 rnp_seqof202;

class OSS_PUBLIC rnpMBMSSessionUpdateFailure   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp_seqof201 protocolIEs;
    typedef rnp__shared6 protocolExtensions;

    rnpMBMSSessionUpdateFailure();
    rnpMBMSSessionUpdateFailure(const rnpMBMSSessionUpdateFailure &);
    rnpMBMSSessionUpdateFailure(const protocolIEs &, const protocolExtensions &);
    rnpMBMSSessionUpdateFailure(const protocolIEs &);

    rnpMBMSSessionUpdateFailure & operator = (const rnpMBMSSessionUpdateFailure &);
    int operator == (const rnpMBMSSessionUpdateFailure &) const;
    int operator != (const rnpMBMSSessionUpdateFailure &) const;

    protocolIEs & get_protocolIEs();
    const protocolIEs & get_protocolIEs() const;
    void set_protocolIEs(const protocolIEs &);

    protocolExtensions *get_protocolExtensions();
    const protocolExtensions *get_protocolExtensions() const;
    void set_protocolExtensions(const protocolExtensions &);
    int protocolExtensions_is_present() const;
    void omit_protocolExtensions();
private:
    OSS_UINT32 bit_mask;
    protocolIEs protocolIEs_field;
    protocolExtensions protocolExtensions_field;
};

class OSS_PUBLIC rnp_seq202   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpMBMSSessionUpdateFailureIEs_Value value;

    rnp_seq202();
    rnp_seq202(const rnp_seq202 &);
    rnp_seq202(id, criticality, const value &);

    rnp_seq202 & operator = (const rnp_seq202 &);
    int operator == (const rnp_seq202 &) const;
    int operator != (const rnp_seq202 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

typedef rnp__shared5 rnp_seq203;

class OSS_PUBLIC rnpMBMSSessionStopIEs_Value : public OssConstrainedOpenType
{
public:
    rnpMBMSSessionStopIEs_Value();
    rnpMBMSSessionStopIEs_Value(const rnpMBMSSessionStopIEs_Value &);
    ~rnpMBMSSessionStopIEs_Value();
    rnpMBMSSessionStopIEs_Value & operator = (const rnpMBMSSessionStopIEs_Value &);
    int operator == (const rnpMBMSSessionStopIEs_Value &) const;
    int operator != (const rnpMBMSSessionStopIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpMBMSCNDe_Registration *get_rnpMBMSCNDe_Registration();
    const rnpMBMSCNDe_Registration *get_rnpMBMSCNDe_Registration() const;
    void set_rnpMBMSCNDe_Registration(const rnpMBMSCNDe_Registration &);
    rnpMBMSCNDe_Registration *release_rnpMBMSCNDe_Registration();
    void set_rnpMBMSCNDe_Registration(rnpMBMSCNDe_Registration *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq204;

class OSS_PUBLIC rnp_seqof203 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq204 component;

    rnp_seqof203();
    rnp_seqof203(const rnp_seqof203 &);
    ~rnp_seqof203();

    rnp_seqof203 & operator = (const rnp_seqof203 &);
    int operator == (const rnp_seqof203 &) const;
    int operator != (const rnp_seqof203 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof203 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof203 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof203 *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared6 rnp_seqof204;

class OSS_PUBLIC rnpMBMSSessionStop   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp_seqof203 protocolIEs;
    typedef rnp__shared6 protocolExtensions;

    rnpMBMSSessionStop();
    rnpMBMSSessionStop(const rnpMBMSSessionStop &);
    rnpMBMSSessionStop(const protocolIEs &, const protocolExtensions &);
    rnpMBMSSessionStop(const protocolIEs &);

    rnpMBMSSessionStop & operator = (const rnpMBMSSessionStop &);
    int operator == (const rnpMBMSSessionStop &) const;
    int operator != (const rnpMBMSSessionStop &) const;

    protocolIEs & get_protocolIEs();
    const protocolIEs & get_protocolIEs() const;
    void set_protocolIEs(const protocolIEs &);

    protocolExtensions *get_protocolExtensions();
    const protocolExtensions *get_protocolExtensions() const;
    void set_protocolExtensions(const protocolExtensions &);
    int protocolExtensions_is_present() const;
    void omit_protocolExtensions();
private:
    OSS_UINT32 bit_mask;
    protocolIEs protocolIEs_field;
    protocolExtensions protocolExtensions_field;
};

class OSS_PUBLIC rnp_seq204   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpMBMSSessionStopIEs_Value value;

    rnp_seq204();
    rnp_seq204(const rnp_seq204 &);
    rnp_seq204(id, criticality, const value &);

    rnp_seq204 & operator = (const rnp_seq204 &);
    int operator == (const rnp_seq204 &) const;
    int operator != (const rnp_seq204 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

typedef rnp__shared5 rnp_seq205;

typedef rnp__shared39 rnpMBMSSessionStopResponse;

typedef rnp__shared38 rnp_seqof205;

typedef rnp__shared37 rnp_seq206;

typedef rnp__shared6 rnp_seqof206;

typedef rnp__shared5 rnp_seq207;

class OSS_PUBLIC rnp_seq211;

class OSS_PUBLIC rnpLeftMBMSBearerService_IEs : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq211 component;

    rnpLeftMBMSBearerService_IEs();
    rnpLeftMBMSBearerService_IEs(const rnpLeftMBMSBearerService_IEs &);
    ~rnpLeftMBMSBearerService_IEs();

    rnpLeftMBMSBearerService_IEs & operator = (const rnpLeftMBMSBearerService_IEs &);
    int operator == (const rnpLeftMBMSBearerService_IEs &) const;
    int operator != (const rnpLeftMBMSBearerService_IEs &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnpLeftMBMSBearerService_IEs *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnpLeftMBMSBearerService_IEs *);

    int remove_front();
    int remove_after(OssIndex);

    rnpLeftMBMSBearerService_IEs *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpMBMSUELinkingRequestIEs_Value : public OssConstrainedOpenType
{
public:
    rnpMBMSUELinkingRequestIEs_Value();
    rnpMBMSUELinkingRequestIEs_Value(const rnpMBMSUELinkingRequestIEs_Value &);
    ~rnpMBMSUELinkingRequestIEs_Value();
    rnpMBMSUELinkingRequestIEs_Value & operator = (const rnpMBMSUELinkingRequestIEs_Value &);
    int operator == (const rnpMBMSUELinkingRequestIEs_Value &) const;
    int operator != (const rnpMBMSUELinkingRequestIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnp__shared17 *get_rnpJoinedMBMSBearerService_IEs();
    const rnp__shared17 *get_rnpJoinedMBMSBearerService_IEs() const;
    void set_rnpJoinedMBMSBearerService_IEs(const rnp__shared17 &);
    rnp__shared17 *release_rnpJoinedMBMSBearerService_IEs();
    void set_rnpJoinedMBMSBearerService_IEs(rnp__shared17 *);

    rnpLeftMBMSBearerService_IEs *get_rnpLeftMBMSBearerService_IEs();
    const rnpLeftMBMSBearerService_IEs *get_rnpLeftMBMSBearerService_IEs() const;
    void set_rnpLeftMBMSBearerService_IEs(const rnpLeftMBMSBearerService_IEs &);
    rnpLeftMBMSBearerService_IEs *release_rnpLeftMBMSBearerService_IEs();
    void set_rnpLeftMBMSBearerService_IEs(rnpLeftMBMSBearerService_IEs *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq208;

class OSS_PUBLIC rnp_seqof207 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq208 component;

    rnp_seqof207();
    rnp_seqof207(const rnp_seqof207 &);
    ~rnp_seqof207();

    rnp_seqof207 & operator = (const rnp_seqof207 &);
    int operator == (const rnp_seqof207 &) const;
    int operator != (const rnp_seqof207 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof207 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof207 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof207 *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared6 rnp_seqof208;

class OSS_PUBLIC rnpMBMSUELinkingRequest   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp_seqof207 protocolIEs;
    typedef rnp__shared6 protocolExtensions;

    rnpMBMSUELinkingRequest();
    rnpMBMSUELinkingRequest(const rnpMBMSUELinkingRequest &);
    rnpMBMSUELinkingRequest(const protocolIEs &, const protocolExtensions &);
    rnpMBMSUELinkingRequest(const protocolIEs &);

    rnpMBMSUELinkingRequest & operator = (const rnpMBMSUELinkingRequest &);
    int operator == (const rnpMBMSUELinkingRequest &) const;
    int operator != (const rnpMBMSUELinkingRequest &) const;

    protocolIEs & get_protocolIEs();
    const protocolIEs & get_protocolIEs() const;
    void set_protocolIEs(const protocolIEs &);

    protocolExtensions *get_protocolExtensions();
    const protocolExtensions *get_protocolExtensions() const;
    void set_protocolExtensions(const protocolExtensions &);
    int protocolExtensions_is_present() const;
    void omit_protocolExtensions();
private:
    OSS_UINT32 bit_mask;
    protocolIEs protocolIEs_field;
    protocolExtensions protocolExtensions_field;
};

class OSS_PUBLIC rnp_seq208   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpMBMSUELinkingRequestIEs_Value value;

    rnp_seq208();
    rnp_seq208(const rnp_seq208 &);
    rnp_seq208(id, criticality, const value &);

    rnp_seq208 & operator = (const rnp_seq208 &);
    int operator == (const rnp_seq208 &) const;
    int operator != (const rnp_seq208 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

typedef rnp__shared5 rnp_seq209;

typedef rnp__shared6 rnp_seqof209;

class OSS_PUBLIC rnp_seq211   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnpTMGI tMGI;
    typedef rnp__shared6 iE_Extensions;

    rnp_seq211();
    rnp_seq211(const rnp_seq211 &);
    rnp_seq211(const tMGI &, const iE_Extensions &);
    rnp_seq211(const tMGI &);

    rnp_seq211 & operator = (const rnp_seq211 &);
    int operator == (const rnp_seq211 &) const;
    int operator != (const rnp_seq211 &) const;

    tMGI & get_tMGI();
    const tMGI & get_tMGI() const;
    void set_tMGI(const tMGI &);

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    tMGI tMGI_field;
    iE_Extensions iE_Extensions_field;
};

typedef rnp__shared5 rnp_seq210;

class OSS_PUBLIC rnp_seq215;

class OSS_PUBLIC rnpUnsuccessfulLinking_IEs : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq215 component;

    rnpUnsuccessfulLinking_IEs();
    rnpUnsuccessfulLinking_IEs(const rnpUnsuccessfulLinking_IEs &);
    ~rnpUnsuccessfulLinking_IEs();

    rnpUnsuccessfulLinking_IEs & operator = (const rnpUnsuccessfulLinking_IEs &);
    int operator == (const rnpUnsuccessfulLinking_IEs &) const;
    int operator != (const rnpUnsuccessfulLinking_IEs &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnpUnsuccessfulLinking_IEs *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnpUnsuccessfulLinking_IEs *);

    int remove_front();
    int remove_after(OssIndex);

    rnpUnsuccessfulLinking_IEs *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpMBMSUELinkingResponseIEs_Value : public OssConstrainedOpenType
{
public:
    rnpMBMSUELinkingResponseIEs_Value();
    rnpMBMSUELinkingResponseIEs_Value(const rnpMBMSUELinkingResponseIEs_Value &);
    ~rnpMBMSUELinkingResponseIEs_Value();
    rnpMBMSUELinkingResponseIEs_Value & operator = (const rnpMBMSUELinkingResponseIEs_Value &);
    int operator == (const rnpMBMSUELinkingResponseIEs_Value &) const;
    int operator != (const rnpMBMSUELinkingResponseIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpUnsuccessfulLinking_IEs *get_rnpUnsuccessfulLinking_IEs();
    const rnpUnsuccessfulLinking_IEs *get_rnpUnsuccessfulLinking_IEs() const;
    void set_rnpUnsuccessfulLinking_IEs(const rnpUnsuccessfulLinking_IEs &);
    rnpUnsuccessfulLinking_IEs *release_rnpUnsuccessfulLinking_IEs();
    void set_rnpUnsuccessfulLinking_IEs(rnpUnsuccessfulLinking_IEs *);

    rnpCriticalityDiagnostics *get_rnpCriticalityDiagnostics();
    const rnpCriticalityDiagnostics *get_rnpCriticalityDiagnostics() const;
    void set_rnpCriticalityDiagnostics(const rnpCriticalityDiagnostics &);
    rnpCriticalityDiagnostics *release_rnpCriticalityDiagnostics();
    void set_rnpCriticalityDiagnostics(rnpCriticalityDiagnostics *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq212;

class OSS_PUBLIC rnp_seqof210 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq212 component;

    rnp_seqof210();
    rnp_seqof210(const rnp_seqof210 &);
    ~rnp_seqof210();

    rnp_seqof210 & operator = (const rnp_seqof210 &);
    int operator == (const rnp_seqof210 &) const;
    int operator != (const rnp_seqof210 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof210 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof210 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof210 *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared6 rnp_seqof211;

class OSS_PUBLIC rnpMBMSUELinkingResponse   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp_seqof210 protocolIEs;
    typedef rnp__shared6 protocolExtensions;

    rnpMBMSUELinkingResponse();
    rnpMBMSUELinkingResponse(const rnpMBMSUELinkingResponse &);
    rnpMBMSUELinkingResponse(const protocolIEs &, const protocolExtensions &);
    rnpMBMSUELinkingResponse(const protocolIEs &);

    rnpMBMSUELinkingResponse & operator = (const rnpMBMSUELinkingResponse &);
    int operator == (const rnpMBMSUELinkingResponse &) const;
    int operator != (const rnpMBMSUELinkingResponse &) const;

    protocolIEs & get_protocolIEs();
    const protocolIEs & get_protocolIEs() const;
    void set_protocolIEs(const protocolIEs &);

    protocolExtensions *get_protocolExtensions();
    const protocolExtensions *get_protocolExtensions() const;
    void set_protocolExtensions(const protocolExtensions &);
    int protocolExtensions_is_present() const;
    void omit_protocolExtensions();
private:
    OSS_UINT32 bit_mask;
    protocolIEs protocolIEs_field;
    protocolExtensions protocolExtensions_field;
};

class OSS_PUBLIC rnp_seq212   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpMBMSUELinkingResponseIEs_Value value;

    rnp_seq212();
    rnp_seq212(const rnp_seq212 &);
    rnp_seq212(id, criticality, const value &);

    rnp_seq212 & operator = (const rnp_seq212 &);
    int operator == (const rnp_seq212 &) const;
    int operator != (const rnp_seq212 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

typedef rnp__shared5 rnp_seq213;

typedef rnp__shared6 rnp_seqof212;

class OSS_PUBLIC rnp_seq215   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnpTMGI tMGI;
    typedef rnpCause cause;
    typedef rnp__shared6 iE_Extensions;

    rnp_seq215();
    rnp_seq215(const rnp_seq215 &);
    rnp_seq215(const tMGI &, const cause &, const iE_Extensions &);
    rnp_seq215(const tMGI &, const cause &);

    rnp_seq215 & operator = (const rnp_seq215 &);
    int operator == (const rnp_seq215 &) const;
    int operator != (const rnp_seq215 &) const;

    tMGI & get_tMGI();
    const tMGI & get_tMGI() const;
    void set_tMGI(const tMGI &);

    cause & get_cause();
    const cause & get_cause() const;
    void set_cause(const cause &);

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    tMGI tMGI_field;
    cause cause_field;
    iE_Extensions iE_Extensions_field;
};

typedef rnp__shared5 rnp_seq214;

class OSS_PUBLIC rnpMBMSRegistrationRequestIEs_Value : public OssConstrainedOpenType
{
public:
    rnpMBMSRegistrationRequestIEs_Value();
    rnpMBMSRegistrationRequestIEs_Value(const rnpMBMSRegistrationRequestIEs_Value &);
    ~rnpMBMSRegistrationRequestIEs_Value();
    rnpMBMSRegistrationRequestIEs_Value & operator = (const rnpMBMSRegistrationRequestIEs_Value &);
    int operator == (const rnpMBMSRegistrationRequestIEs_Value &) const;
    int operator != (const rnpMBMSRegistrationRequestIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpMBMSRegistrationRequestType *get_rnpMBMSRegistrationRequestType();
    const rnpMBMSRegistrationRequestType *get_rnpMBMSRegistrationRequestType() const;
    void set_rnpMBMSRegistrationRequestType(const rnpMBMSRegistrationRequestType &);
    rnpMBMSRegistrationRequestType *release_rnpMBMSRegistrationRequestType();
    void set_rnpMBMSRegistrationRequestType(rnpMBMSRegistrationRequestType *);

    rnpTMGI *get_rnpTMGI();
    const rnpTMGI *get_rnpTMGI() const;
    void set_rnpTMGI(const rnpTMGI &);
    rnpTMGI *release_rnpTMGI();
    void set_rnpTMGI(rnpTMGI *);

    rnpIPMulticastAddress *get_rnpIPMulticastAddress();
    const rnpIPMulticastAddress *get_rnpIPMulticastAddress() const;
    void set_rnpIPMulticastAddress(const rnpIPMulticastAddress &);
    rnpIPMulticastAddress *release_rnpIPMulticastAddress();
    void set_rnpIPMulticastAddress(rnpIPMulticastAddress *);

    rnpAPN *get_rnpAPN();
    const rnpAPN *get_rnpAPN() const;
    void set_rnpAPN(const rnpAPN &);
    rnpAPN *release_rnpAPN();
    void set_rnpAPN(rnpAPN *);

    rnpGlobalRNC_ID *get_rnpGlobalRNC_ID();
    const rnpGlobalRNC_ID *get_rnpGlobalRNC_ID() const;
    void set_rnpGlobalRNC_ID(const rnpGlobalRNC_ID &);
    rnpGlobalRNC_ID *release_rnpGlobalRNC_ID();
    void set_rnpGlobalRNC_ID(rnpGlobalRNC_ID *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq216;

class OSS_PUBLIC rnp_seqof213 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq216 component;

    rnp_seqof213();
    rnp_seqof213(const rnp_seqof213 &);
    ~rnp_seqof213();

    rnp_seqof213 & operator = (const rnp_seqof213 &);
    int operator == (const rnp_seqof213 &) const;
    int operator != (const rnp_seqof213 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof213 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof213 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof213 *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared4 rnp_seqof214;

class OSS_PUBLIC rnpMBMSRegistrationRequest   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp_seqof213 protocolIEs;
    typedef rnp__shared4 protocolExtensions;

    rnpMBMSRegistrationRequest();
    rnpMBMSRegistrationRequest(const rnpMBMSRegistrationRequest &);
    rnpMBMSRegistrationRequest(const protocolIEs &, const protocolExtensions &);
    rnpMBMSRegistrationRequest(const protocolIEs &);

    rnpMBMSRegistrationRequest & operator = (const rnpMBMSRegistrationRequest &);
    int operator == (const rnpMBMSRegistrationRequest &) const;
    int operator != (const rnpMBMSRegistrationRequest &) const;

    protocolIEs & get_protocolIEs();
    const protocolIEs & get_protocolIEs() const;
    void set_protocolIEs(const protocolIEs &);

    protocolExtensions *get_protocolExtensions();
    const protocolExtensions *get_protocolExtensions() const;
    void set_protocolExtensions(const protocolExtensions &);
    int protocolExtensions_is_present() const;
    void omit_protocolExtensions();
private:
    OSS_UINT32 bit_mask;
    protocolIEs protocolIEs_field;
    protocolExtensions protocolExtensions_field;
};

class OSS_PUBLIC rnp_seq216   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpMBMSRegistrationRequestIEs_Value value;

    rnp_seq216();
    rnp_seq216(const rnp_seq216 &);
    rnp_seq216(id, criticality, const value &);

    rnp_seq216 & operator = (const rnp_seq216 &);
    int operator == (const rnp_seq216 &) const;
    int operator != (const rnp_seq216 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

typedef rnp__shared3 rnp_seq217;

class OSS_PUBLIC rnpMBMSRegistrationResponseIEs_Value : public OssConstrainedOpenType
{
public:
    rnpMBMSRegistrationResponseIEs_Value();
    rnpMBMSRegistrationResponseIEs_Value(const rnpMBMSRegistrationResponseIEs_Value &);
    ~rnpMBMSRegistrationResponseIEs_Value();
    rnpMBMSRegistrationResponseIEs_Value & operator = (const rnpMBMSRegistrationResponseIEs_Value &);
    int operator == (const rnpMBMSRegistrationResponseIEs_Value &) const;
    int operator != (const rnpMBMSRegistrationResponseIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpTMGI *get_rnpTMGI();
    const rnpTMGI *get_rnpTMGI() const;
    void set_rnpTMGI(const rnpTMGI &);
    rnpTMGI *release_rnpTMGI();
    void set_rnpTMGI(rnpTMGI *);

    rnpGlobalCN_ID *get_rnpGlobalCN_ID();
    const rnpGlobalCN_ID *get_rnpGlobalCN_ID() const;
    void set_rnpGlobalCN_ID(const rnpGlobalCN_ID &);
    rnpGlobalCN_ID *release_rnpGlobalCN_ID();
    void set_rnpGlobalCN_ID(rnpGlobalCN_ID *);

    rnpCriticalityDiagnostics *get_rnpCriticalityDiagnostics();
    const rnpCriticalityDiagnostics *get_rnpCriticalityDiagnostics() const;
    void set_rnpCriticalityDiagnostics(const rnpCriticalityDiagnostics &);
    rnpCriticalityDiagnostics *release_rnpCriticalityDiagnostics();
    void set_rnpCriticalityDiagnostics(rnpCriticalityDiagnostics *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq218;

class OSS_PUBLIC rnp_seqof215 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq218 component;

    rnp_seqof215();
    rnp_seqof215(const rnp_seqof215 &);
    ~rnp_seqof215();

    rnp_seqof215 & operator = (const rnp_seqof215 &);
    int operator == (const rnp_seqof215 &) const;
    int operator != (const rnp_seqof215 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof215 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof215 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof215 *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared6 rnp_seqof216;

class OSS_PUBLIC rnpMBMSRegistrationResponse   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp_seqof215 protocolIEs;
    typedef rnp__shared6 protocolExtensions;

    rnpMBMSRegistrationResponse();
    rnpMBMSRegistrationResponse(const rnpMBMSRegistrationResponse &);
    rnpMBMSRegistrationResponse(const protocolIEs &, const protocolExtensions &);
    rnpMBMSRegistrationResponse(const protocolIEs &);

    rnpMBMSRegistrationResponse & operator = (const rnpMBMSRegistrationResponse &);
    int operator == (const rnpMBMSRegistrationResponse &) const;
    int operator != (const rnpMBMSRegistrationResponse &) const;

    protocolIEs & get_protocolIEs();
    const protocolIEs & get_protocolIEs() const;
    void set_protocolIEs(const protocolIEs &);

    protocolExtensions *get_protocolExtensions();
    const protocolExtensions *get_protocolExtensions() const;
    void set_protocolExtensions(const protocolExtensions &);
    int protocolExtensions_is_present() const;
    void omit_protocolExtensions();
private:
    OSS_UINT32 bit_mask;
    protocolIEs protocolIEs_field;
    protocolExtensions protocolExtensions_field;
};

class OSS_PUBLIC rnp_seq218   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpMBMSRegistrationResponseIEs_Value value;

    rnp_seq218();
    rnp_seq218(const rnp_seq218 &);
    rnp_seq218(id, criticality, const value &);

    rnp_seq218 & operator = (const rnp_seq218 &);
    int operator == (const rnp_seq218 &) const;
    int operator != (const rnp_seq218 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

typedef rnp__shared5 rnp_seq219;

class OSS_PUBLIC rnpMBMSRegistrationFailureIEs_Value : public OssConstrainedOpenType
{
public:
    rnpMBMSRegistrationFailureIEs_Value();
    rnpMBMSRegistrationFailureIEs_Value(const rnpMBMSRegistrationFailureIEs_Value &);
    ~rnpMBMSRegistrationFailureIEs_Value();
    rnpMBMSRegistrationFailureIEs_Value & operator = (const rnpMBMSRegistrationFailureIEs_Value &);
    int operator == (const rnpMBMSRegistrationFailureIEs_Value &) const;
    int operator != (const rnpMBMSRegistrationFailureIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpTMGI *get_rnpTMGI();
    const rnpTMGI *get_rnpTMGI() const;
    void set_rnpTMGI(const rnpTMGI &);
    rnpTMGI *release_rnpTMGI();
    void set_rnpTMGI(rnpTMGI *);

    rnpGlobalCN_ID *get_rnpGlobalCN_ID();
    const rnpGlobalCN_ID *get_rnpGlobalCN_ID() const;
    void set_rnpGlobalCN_ID(const rnpGlobalCN_ID &);
    rnpGlobalCN_ID *release_rnpGlobalCN_ID();
    void set_rnpGlobalCN_ID(rnpGlobalCN_ID *);

    rnpCause *get_rnpCause();
    const rnpCause *get_rnpCause() const;
    void set_rnpCause(const rnpCause &);
    rnpCause *release_rnpCause();
    void set_rnpCause(rnpCause *);

    rnpCriticalityDiagnostics *get_rnpCriticalityDiagnostics();
    const rnpCriticalityDiagnostics *get_rnpCriticalityDiagnostics() const;
    void set_rnpCriticalityDiagnostics(const rnpCriticalityDiagnostics &);
    rnpCriticalityDiagnostics *release_rnpCriticalityDiagnostics();
    void set_rnpCriticalityDiagnostics(rnpCriticalityDiagnostics *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq220;

class OSS_PUBLIC rnp_seqof217 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq220 component;

    rnp_seqof217();
    rnp_seqof217(const rnp_seqof217 &);
    ~rnp_seqof217();

    rnp_seqof217 & operator = (const rnp_seqof217 &);
    int operator == (const rnp_seqof217 &) const;
    int operator != (const rnp_seqof217 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof217 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof217 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof217 *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared6 rnp_seqof218;

class OSS_PUBLIC rnpMBMSRegistrationFailure   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp_seqof217 protocolIEs;
    typedef rnp__shared6 protocolExtensions;

    rnpMBMSRegistrationFailure();
    rnpMBMSRegistrationFailure(const rnpMBMSRegistrationFailure &);
    rnpMBMSRegistrationFailure(const protocolIEs &, const protocolExtensions &);
    rnpMBMSRegistrationFailure(const protocolIEs &);

    rnpMBMSRegistrationFailure & operator = (const rnpMBMSRegistrationFailure &);
    int operator == (const rnpMBMSRegistrationFailure &) const;
    int operator != (const rnpMBMSRegistrationFailure &) const;

    protocolIEs & get_protocolIEs();
    const protocolIEs & get_protocolIEs() const;
    void set_protocolIEs(const protocolIEs &);

    protocolExtensions *get_protocolExtensions();
    const protocolExtensions *get_protocolExtensions() const;
    void set_protocolExtensions(const protocolExtensions &);
    int protocolExtensions_is_present() const;
    void omit_protocolExtensions();
private:
    OSS_UINT32 bit_mask;
    protocolIEs protocolIEs_field;
    protocolExtensions protocolExtensions_field;
};

class OSS_PUBLIC rnp_seq220   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpMBMSRegistrationFailureIEs_Value value;

    rnp_seq220();
    rnp_seq220(const rnp_seq220 &);
    rnp_seq220(id, criticality, const value &);

    rnp_seq220 & operator = (const rnp_seq220 &);
    int operator == (const rnp_seq220 &) const;
    int operator != (const rnp_seq220 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

typedef rnp__shared5 rnp_seq221;

class OSS_PUBLIC rnpMBMSCNDe_RegistrationRequestIEs_Value : public OssConstrainedOpenType
{
public:
    rnpMBMSCNDe_RegistrationRequestIEs_Value();
    rnpMBMSCNDe_RegistrationRequestIEs_Value(const rnpMBMSCNDe_RegistrationRequestIEs_Value &);
    ~rnpMBMSCNDe_RegistrationRequestIEs_Value();
    rnpMBMSCNDe_RegistrationRequestIEs_Value & operator = (const rnpMBMSCNDe_RegistrationRequestIEs_Value &);
    int operator == (const rnpMBMSCNDe_RegistrationRequestIEs_Value &) const;
    int operator != (const rnpMBMSCNDe_RegistrationRequestIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpTMGI *get_rnpTMGI();
    const rnpTMGI *get_rnpTMGI() const;
    void set_rnpTMGI(const rnpTMGI &);
    rnpTMGI *release_rnpTMGI();
    void set_rnpTMGI(rnpTMGI *);

    rnpGlobalCN_ID *get_rnpGlobalCN_ID();
    const rnpGlobalCN_ID *get_rnpGlobalCN_ID() const;
    void set_rnpGlobalCN_ID(const rnpGlobalCN_ID &);
    rnpGlobalCN_ID *release_rnpGlobalCN_ID();
    void set_rnpGlobalCN_ID(rnpGlobalCN_ID *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq222;

class OSS_PUBLIC rnp_seqof219 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq222 component;

    rnp_seqof219();
    rnp_seqof219(const rnp_seqof219 &);
    ~rnp_seqof219();

    rnp_seqof219 & operator = (const rnp_seqof219 &);
    int operator == (const rnp_seqof219 &) const;
    int operator != (const rnp_seqof219 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof219 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof219 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof219 *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared6 rnp_seqof220;

class OSS_PUBLIC rnpMBMSCNDe_RegistrationRequest   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp_seqof219 protocolIEs;
    typedef rnp__shared6 protocolExtensions;

    rnpMBMSCNDe_RegistrationRequest();
    rnpMBMSCNDe_RegistrationRequest(const rnpMBMSCNDe_RegistrationRequest &);
    rnpMBMSCNDe_RegistrationRequest(const protocolIEs &, const protocolExtensions &);
    rnpMBMSCNDe_RegistrationRequest(const protocolIEs &);

    rnpMBMSCNDe_RegistrationRequest & operator = (const rnpMBMSCNDe_RegistrationRequest &);
    int operator == (const rnpMBMSCNDe_RegistrationRequest &) const;
    int operator != (const rnpMBMSCNDe_RegistrationRequest &) const;

    protocolIEs & get_protocolIEs();
    const protocolIEs & get_protocolIEs() const;
    void set_protocolIEs(const protocolIEs &);

    protocolExtensions *get_protocolExtensions();
    const protocolExtensions *get_protocolExtensions() const;
    void set_protocolExtensions(const protocolExtensions &);
    int protocolExtensions_is_present() const;
    void omit_protocolExtensions();
private:
    OSS_UINT32 bit_mask;
    protocolIEs protocolIEs_field;
    protocolExtensions protocolExtensions_field;
};

class OSS_PUBLIC rnp_seq222   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpMBMSCNDe_RegistrationRequestIEs_Value value;

    rnp_seq222();
    rnp_seq222(const rnp_seq222 &);
    rnp_seq222(id, criticality, const value &);

    rnp_seq222 & operator = (const rnp_seq222 &);
    int operator == (const rnp_seq222 &) const;
    int operator != (const rnp_seq222 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

typedef rnp__shared5 rnp_seq223;

class OSS_PUBLIC rnpMBMSCNDe_RegistrationResponseIEs_Value : public OssConstrainedOpenType
{
public:
    rnpMBMSCNDe_RegistrationResponseIEs_Value();
    rnpMBMSCNDe_RegistrationResponseIEs_Value(const rnpMBMSCNDe_RegistrationResponseIEs_Value &);
    ~rnpMBMSCNDe_RegistrationResponseIEs_Value();
    rnpMBMSCNDe_RegistrationResponseIEs_Value & operator = (const rnpMBMSCNDe_RegistrationResponseIEs_Value &);
    int operator == (const rnpMBMSCNDe_RegistrationResponseIEs_Value &) const;
    int operator != (const rnpMBMSCNDe_RegistrationResponseIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpTMGI *get_rnpTMGI();
    const rnpTMGI *get_rnpTMGI() const;
    void set_rnpTMGI(const rnpTMGI &);
    rnpTMGI *release_rnpTMGI();
    void set_rnpTMGI(rnpTMGI *);

    rnpGlobalRNC_ID *get_rnpGlobalRNC_ID();
    const rnpGlobalRNC_ID *get_rnpGlobalRNC_ID() const;
    void set_rnpGlobalRNC_ID(const rnpGlobalRNC_ID &);
    rnpGlobalRNC_ID *release_rnpGlobalRNC_ID();
    void set_rnpGlobalRNC_ID(rnpGlobalRNC_ID *);

    rnpCause *get_rnpCause();
    const rnpCause *get_rnpCause() const;
    void set_rnpCause(const rnpCause &);
    rnpCause *release_rnpCause();
    void set_rnpCause(rnpCause *);

    rnpCriticalityDiagnostics *get_rnpCriticalityDiagnostics();
    const rnpCriticalityDiagnostics *get_rnpCriticalityDiagnostics() const;
    void set_rnpCriticalityDiagnostics(const rnpCriticalityDiagnostics &);
    rnpCriticalityDiagnostics *release_rnpCriticalityDiagnostics();
    void set_rnpCriticalityDiagnostics(rnpCriticalityDiagnostics *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq224;

class OSS_PUBLIC rnp_seqof221 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq224 component;

    rnp_seqof221();
    rnp_seqof221(const rnp_seqof221 &);
    ~rnp_seqof221();

    rnp_seqof221 & operator = (const rnp_seqof221 &);
    int operator == (const rnp_seqof221 &) const;
    int operator != (const rnp_seqof221 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof221 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof221 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof221 *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared4 rnp_seqof222;

class OSS_PUBLIC rnpMBMSCNDe_RegistrationResponse   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp_seqof221 protocolIEs;
    typedef rnp__shared4 protocolExtensions;

    rnpMBMSCNDe_RegistrationResponse();
    rnpMBMSCNDe_RegistrationResponse(const rnpMBMSCNDe_RegistrationResponse &);
    rnpMBMSCNDe_RegistrationResponse(const protocolIEs &, const protocolExtensions &);
    rnpMBMSCNDe_RegistrationResponse(const protocolIEs &);

    rnpMBMSCNDe_RegistrationResponse & operator = (const rnpMBMSCNDe_RegistrationResponse &);
    int operator == (const rnpMBMSCNDe_RegistrationResponse &) const;
    int operator != (const rnpMBMSCNDe_RegistrationResponse &) const;

    protocolIEs & get_protocolIEs();
    const protocolIEs & get_protocolIEs() const;
    void set_protocolIEs(const protocolIEs &);

    protocolExtensions *get_protocolExtensions();
    const protocolExtensions *get_protocolExtensions() const;
    void set_protocolExtensions(const protocolExtensions &);
    int protocolExtensions_is_present() const;
    void omit_protocolExtensions();
private:
    OSS_UINT32 bit_mask;
    protocolIEs protocolIEs_field;
    protocolExtensions protocolExtensions_field;
};

class OSS_PUBLIC rnp_seq224   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpMBMSCNDe_RegistrationResponseIEs_Value value;

    rnp_seq224();
    rnp_seq224(const rnp_seq224 &);
    rnp_seq224(id, criticality, const value &);

    rnp_seq224 & operator = (const rnp_seq224 &);
    int operator == (const rnp_seq224 &) const;
    int operator != (const rnp_seq224 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

typedef rnp__shared3 rnp_seq225;

class OSS_PUBLIC rnpMBMSRABEstablishmentIndicationIEs_Value : public OssConstrainedOpenType
{
public:
    rnpMBMSRABEstablishmentIndicationIEs_Value();
    rnpMBMSRABEstablishmentIndicationIEs_Value(const rnpMBMSRABEstablishmentIndicationIEs_Value &);
    ~rnpMBMSRABEstablishmentIndicationIEs_Value();
    rnpMBMSRABEstablishmentIndicationIEs_Value & operator = (const rnpMBMSRABEstablishmentIndicationIEs_Value &);
    int operator == (const rnpMBMSRABEstablishmentIndicationIEs_Value &) const;
    int operator != (const rnpMBMSRABEstablishmentIndicationIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnp__shared35 *get_rnpTransportLayerInformation();
    const rnp__shared35 *get_rnpTransportLayerInformation() const;
    void set_rnpTransportLayerInformation(const rnp__shared35 &);
    rnp__shared35 *release_rnpTransportLayerInformation();
    void set_rnpTransportLayerInformation(rnp__shared35 *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq226;

class OSS_PUBLIC rnp_seqof223 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq226 component;

    rnp_seqof223();
    rnp_seqof223(const rnp_seqof223 &);
    ~rnp_seqof223();

    rnp_seqof223 & operator = (const rnp_seqof223 &);
    int operator == (const rnp_seqof223 &) const;
    int operator != (const rnp_seqof223 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof223 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof223 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof223 *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared6 rnp_seqof224;

class OSS_PUBLIC rnpMBMSRABEstablishmentIndication   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp_seqof223 protocolIEs;
    typedef rnp__shared6 protocolExtensions;

    rnpMBMSRABEstablishmentIndication();
    rnpMBMSRABEstablishmentIndication(const rnpMBMSRABEstablishmentIndication &);
    rnpMBMSRABEstablishmentIndication(const protocolIEs &, const protocolExtensions &);
    rnpMBMSRABEstablishmentIndication(const protocolIEs &);

    rnpMBMSRABEstablishmentIndication & operator = (const rnpMBMSRABEstablishmentIndication &);
    int operator == (const rnpMBMSRABEstablishmentIndication &) const;
    int operator != (const rnpMBMSRABEstablishmentIndication &) const;

    protocolIEs & get_protocolIEs();
    const protocolIEs & get_protocolIEs() const;
    void set_protocolIEs(const protocolIEs &);

    protocolExtensions *get_protocolExtensions();
    const protocolExtensions *get_protocolExtensions() const;
    void set_protocolExtensions(const protocolExtensions &);
    int protocolExtensions_is_present() const;
    void omit_protocolExtensions();
private:
    OSS_UINT32 bit_mask;
    protocolIEs protocolIEs_field;
    protocolExtensions protocolExtensions_field;
};

class OSS_PUBLIC rnp_seq226   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpMBMSRABEstablishmentIndicationIEs_Value value;

    rnp_seq226();
    rnp_seq226(const rnp_seq226 &);
    rnp_seq226(id, criticality, const value &);

    rnp_seq226 & operator = (const rnp_seq226 &);
    int operator == (const rnp_seq226 &) const;
    int operator != (const rnp_seq226 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

typedef rnp__shared5 rnp_seq227;

typedef rnp__shared18 rnpMBMSRABReleaseRequest;

typedef rnp__shared2 rnp_seqof225;

typedef rnp__shared1 rnp_seq228;

typedef rnp__shared6 rnp_seqof226;

typedef rnp__shared5 rnp_seq229;

typedef rnp__shared39 rnpMBMSRABRelease;

typedef rnp__shared38 rnp_seqof227;

typedef rnp__shared37 rnp_seq230;

typedef rnp__shared6 rnp_seqof228;

typedef rnp__shared5 rnp_seq231;

typedef rnp__shared39 rnpMBMSRABReleaseFailure;

typedef rnp__shared38 rnp_seqof229;

typedef rnp__shared37 rnp_seq232;

typedef rnp__shared6 rnp_seqof230;

typedef rnp__shared5 rnp_seq233;

typedef rnp__shared26 rnpSRVCC_CSKeysRequest;

typedef rnp__shared25 rnp_seqof231;

typedef rnp__shared24 rnp_seq234;

typedef rnp__shared6 rnp_seqof232;

typedef rnp__shared5 rnp_seq235;

class OSS_PUBLIC rnpSRVCC_CSKeysResponseIEs_Value : public OssConstrainedOpenType
{
public:
    rnpSRVCC_CSKeysResponseIEs_Value();
    rnpSRVCC_CSKeysResponseIEs_Value(const rnpSRVCC_CSKeysResponseIEs_Value &);
    ~rnpSRVCC_CSKeysResponseIEs_Value();
    rnpSRVCC_CSKeysResponseIEs_Value & operator = (const rnpSRVCC_CSKeysResponseIEs_Value &);
    int operator == (const rnpSRVCC_CSKeysResponseIEs_Value &) const;
    int operator != (const rnpSRVCC_CSKeysResponseIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpIntegrityProtectionKey *get_rnpIntegrityProtectionKey();
    const rnpIntegrityProtectionKey *get_rnpIntegrityProtectionKey() const;
    void set_rnpIntegrityProtectionKey(const rnpIntegrityProtectionKey &);
    rnpIntegrityProtectionKey *release_rnpIntegrityProtectionKey();
    void set_rnpIntegrityProtectionKey(rnpIntegrityProtectionKey *);

    rnpEncryptionKey *get_rnpEncryptionKey();
    const rnpEncryptionKey *get_rnpEncryptionKey() const;
    void set_rnpEncryptionKey(const rnpEncryptionKey &);
    rnpEncryptionKey *release_rnpEncryptionKey();
    void set_rnpEncryptionKey(rnpEncryptionKey *);

    rnpSRVCC_Information *get_rnpSRVCC_Information();
    const rnpSRVCC_Information *get_rnpSRVCC_Information() const;
    void set_rnpSRVCC_Information(const rnpSRVCC_Information &);
    rnpSRVCC_Information *release_rnpSRVCC_Information();
    void set_rnpSRVCC_Information(rnpSRVCC_Information *);

    rnpCriticalityDiagnostics *get_rnpCriticalityDiagnostics();
    const rnpCriticalityDiagnostics *get_rnpCriticalityDiagnostics() const;
    void set_rnpCriticalityDiagnostics(const rnpCriticalityDiagnostics &);
    rnpCriticalityDiagnostics *release_rnpCriticalityDiagnostics();
    void set_rnpCriticalityDiagnostics(rnpCriticalityDiagnostics *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq236;

class OSS_PUBLIC rnp_seqof233 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq236 component;

    rnp_seqof233();
    rnp_seqof233(const rnp_seqof233 &);
    ~rnp_seqof233();

    rnp_seqof233 & operator = (const rnp_seqof233 &);
    int operator == (const rnp_seqof233 &) const;
    int operator != (const rnp_seqof233 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof233 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof233 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof233 *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared6 rnp_seqof234;

class OSS_PUBLIC rnpSRVCC_CSKeysResponse   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp_seqof233 protocolIEs;
    typedef rnp__shared6 protocolExtensions;

    rnpSRVCC_CSKeysResponse();
    rnpSRVCC_CSKeysResponse(const rnpSRVCC_CSKeysResponse &);
    rnpSRVCC_CSKeysResponse(const protocolIEs &, const protocolExtensions &);
    rnpSRVCC_CSKeysResponse(const protocolIEs &);

    rnpSRVCC_CSKeysResponse & operator = (const rnpSRVCC_CSKeysResponse &);
    int operator == (const rnpSRVCC_CSKeysResponse &) const;
    int operator != (const rnpSRVCC_CSKeysResponse &) const;

    protocolIEs & get_protocolIEs();
    const protocolIEs & get_protocolIEs() const;
    void set_protocolIEs(const protocolIEs &);

    protocolExtensions *get_protocolExtensions();
    const protocolExtensions *get_protocolExtensions() const;
    void set_protocolExtensions(const protocolExtensions &);
    int protocolExtensions_is_present() const;
    void omit_protocolExtensions();
private:
    OSS_UINT32 bit_mask;
    protocolIEs protocolIEs_field;
    protocolExtensions protocolExtensions_field;
};

class OSS_PUBLIC rnp_seq236   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpSRVCC_CSKeysResponseIEs_Value value;

    rnp_seq236();
    rnp_seq236(const rnp_seq236 &);
    rnp_seq236(id, criticality, const value &);

    rnp_seq236 & operator = (const rnp_seq236 &);
    int operator == (const rnp_seq236 &) const;
    int operator != (const rnp_seq236 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

typedef rnp__shared5 rnp_seq237;

typedef rnp__shared26 rnpUeRadioCapabilityMatchRequest;

typedef rnp__shared25 rnp_seqof235;

typedef rnp__shared24 rnp_seq238;

typedef rnp__shared6 rnp_seqof236;

typedef rnp__shared5 rnp_seq239;

class OSS_PUBLIC rnpUeRadioCapabilityMatchResponseIEs_Value : public OssConstrainedOpenType
{
public:
    rnpUeRadioCapabilityMatchResponseIEs_Value();
    rnpUeRadioCapabilityMatchResponseIEs_Value(const rnpUeRadioCapabilityMatchResponseIEs_Value &);
    ~rnpUeRadioCapabilityMatchResponseIEs_Value();
    rnpUeRadioCapabilityMatchResponseIEs_Value & operator = (const rnpUeRadioCapabilityMatchResponseIEs_Value &);
    int operator == (const rnpUeRadioCapabilityMatchResponseIEs_Value &) const;
    int operator != (const rnpUeRadioCapabilityMatchResponseIEs_Value &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpVoiceSupportMatchIndicator *get_rnpVoiceSupportMatchIndicator();
    const rnpVoiceSupportMatchIndicator *get_rnpVoiceSupportMatchIndicator() const;
    void set_rnpVoiceSupportMatchIndicator(const rnpVoiceSupportMatchIndicator &);
    rnpVoiceSupportMatchIndicator *release_rnpVoiceSupportMatchIndicator();
    void set_rnpVoiceSupportMatchIndicator(rnpVoiceSupportMatchIndicator *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq240;

class OSS_PUBLIC rnp_seqof237 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq240 component;

    rnp_seqof237();
    rnp_seqof237(const rnp_seqof237 &);
    ~rnp_seqof237();

    rnp_seqof237 & operator = (const rnp_seqof237 &);
    int operator == (const rnp_seqof237 &) const;
    int operator != (const rnp_seqof237 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof237 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof237 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof237 *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared6 rnp_seqof238;

class OSS_PUBLIC rnpUeRadioCapabilityMatchResponse   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp_seqof237 protocolIEs;
    typedef rnp__shared6 protocolExtensions;

    rnpUeRadioCapabilityMatchResponse();
    rnpUeRadioCapabilityMatchResponse(const rnpUeRadioCapabilityMatchResponse &);
    rnpUeRadioCapabilityMatchResponse(const protocolIEs &, const protocolExtensions &);
    rnpUeRadioCapabilityMatchResponse(const protocolIEs &);

    rnpUeRadioCapabilityMatchResponse & operator = (const rnpUeRadioCapabilityMatchResponse &);
    int operator == (const rnpUeRadioCapabilityMatchResponse &) const;
    int operator != (const rnpUeRadioCapabilityMatchResponse &) const;

    protocolIEs & get_protocolIEs();
    const protocolIEs & get_protocolIEs() const;
    void set_protocolIEs(const protocolIEs &);

    protocolExtensions *get_protocolExtensions();
    const protocolExtensions *get_protocolExtensions() const;
    void set_protocolExtensions(const protocolExtensions &);
    int protocolExtensions_is_present() const;
    void omit_protocolExtensions();
private:
    OSS_UINT32 bit_mask;
    protocolIEs protocolIEs_field;
    protocolExtensions protocolExtensions_field;
};

class OSS_PUBLIC rnp_seq240   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpUeRadioCapabilityMatchResponseIEs_Value value;

    rnp_seq240();
    rnp_seq240(const rnp_seq240 &);
    rnp_seq240(id, criticality, const value &);

    rnp_seq240 & operator = (const rnp_seq240 &);
    int operator == (const rnp_seq240 &) const;
    int operator != (const rnp_seq240 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    id id_field;
    criticality criticality_field;
    value value_field;
};

typedef rnp__shared5 rnp_seq241;

typedef OSS_UINT32 rnpExtendedGuaranteedBitrate;

typedef rnp__shared10 rnpAlt_RAB_Parameter_ExtendedGuaranteedBitrateList;

typedef OSS_UINT32 rnpGuaranteedBitrate;

typedef rnp__shared10 rnpAlt_RAB_Parameter_GuaranteedBitrateList;

typedef rnp__shared5 rnp_seq242;

typedef OSS_UINT32 rnpExtendedMaxBitrate;

typedef rnp__shared10 rnpAlt_RAB_Parameter_ExtendedMaxBitrateList;

typedef OSS_UINT32 rnpMaxBitrate;

typedef rnp__shared10 rnpAlt_RAB_Parameter_MaxBitrateList;

typedef rnp__shared5 rnp_seq243;

typedef rnp__shared10 rnpAuthorisedSNAs;

typedef rnp__shared6 rnp_seqof241;

class OSS_PUBLIC rnp_seq245   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssString pLMNidentity;
    typedef rnp__shared10 authorisedSNAsList;
    typedef rnp__shared6 iE_Extensions;

    rnp_seq245();
    rnp_seq245(const rnp_seq245 &);
    rnp_seq245(const pLMNidentity &, const authorisedSNAsList &, const iE_Extensions &);
    rnp_seq245(const pLMNidentity &);

    rnp_seq245 & operator = (const rnp_seq245 &);
    int operator == (const rnp_seq245 &) const;
    int operator != (const rnp_seq245 &) const;

    pLMNidentity & get_pLMNidentity();
    const pLMNidentity & get_pLMNidentity() const;
    void set_pLMNidentity(const pLMNidentity &);

    authorisedSNAsList *get_authorisedSNAsList();
    const authorisedSNAsList *get_authorisedSNAsList() const;
    void set_authorisedSNAsList(const authorisedSNAsList &);
    int authorisedSNAsList_is_present() const;
    void omit_authorisedSNAsList();

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    pLMNidentity pLMNidentity_field;
    authorisedSNAsList authorisedSNAsList_field;
    iE_Extensions iE_Extensions_field;
};

typedef rnp__shared5 rnp_seq244;

typedef OSS_UINT32 rnpSNAC;

typedef rnp__shared5 rnp_seq246;

typedef OSS_UINT32 rnpCell_Id;

typedef OSS_INT32 rnpCell_Capacity_Class_Value;

typedef OSS_UINT32 rnpLoadValue;

typedef OSS_UINT32 rnpRTLoadValue;

typedef OSS_UINT32 rnpNRTLoadInformationValue;

typedef rnp__shared5 rnp_seq247;

typedef rnp__shared6 rnp_seqof306;

class OSS_PUBLIC rnpSourceUTRANCellID   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssString pLMNidentity;
    typedef OSS_UINT32 uTRANcellID;
    typedef rnp__shared6 iE_Extensions;

    rnpSourceUTRANCellID();
    rnpSourceUTRANCellID(const rnpSourceUTRANCellID &);
    rnpSourceUTRANCellID(const pLMNidentity &, uTRANcellID, const iE_Extensions &);
    rnpSourceUTRANCellID(const pLMNidentity &, uTRANcellID);

    rnpSourceUTRANCellID & operator = (const rnpSourceUTRANCellID &);
    int operator == (const rnpSourceUTRANCellID &) const;
    int operator != (const rnpSourceUTRANCellID &) const;

    pLMNidentity & get_pLMNidentity();
    const pLMNidentity & get_pLMNidentity() const;
    void set_pLMNidentity(const pLMNidentity &);

    uTRANcellID & get_uTRANcellID();
    uTRANcellID get_uTRANcellID() const;
    void set_uTRANcellID(uTRANcellID);

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    pLMNidentity pLMNidentity_field;
    uTRANcellID uTRANcellID_field;
    iE_Extensions iE_Extensions_field;
};

class OSS_PUBLIC rnpSourceCellID  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	sourceUTRANCellID_chosen = 1,
	sourceGERANCellID_chosen = 2
    };
    typedef rnpSourceUTRANCellID sourceUTRANCellID;
    typedef rnpCGI sourceGERANCellID;

    rnpSourceCellID();
    rnpSourceCellID(const rnpSourceCellID &);
    ~rnpSourceCellID();

    rnpSourceCellID & operator = (const rnpSourceCellID &);
    int operator == (const rnpSourceCellID &) const;
    int operator != (const rnpSourceCellID &) const;

    sourceUTRANCellID *get_sourceUTRANCellID();
    const sourceUTRANCellID *get_sourceUTRANCellID() const;
    void set_sourceUTRANCellID(const sourceUTRANCellID &);

    sourceGERANCellID *get_sourceGERANCellID();
    const sourceGERANCellID *get_sourceGERANCellID() const;
    void set_sourceGERANCellID(const sourceGERANCellID &);
private:
    union {
	sourceUTRANCellID *sourceUTRANCellID_field;
	sourceGERANCellID *sourceGERANCellID_field;
    };
    void cleanup();
};

typedef rnp__shared6 rnp_seqof244;

class OSS_PUBLIC rnpCellLoadInformationGroup   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnpSourceCellID sourceCellID;
    typedef rnpCellLoadInformation uplinkCellLoadInformation;
    typedef rnpCellLoadInformation downlinkCellLoadInformation;
    typedef rnp__shared6 iE_Extensions;

    rnpCellLoadInformationGroup();
    rnpCellLoadInformationGroup(const rnpCellLoadInformationGroup &);
    rnpCellLoadInformationGroup(const sourceCellID &, const uplinkCellLoadInformation &, 
	const downlinkCellLoadInformation &, const iE_Extensions &);
    rnpCellLoadInformationGroup(const sourceCellID &);

    rnpCellLoadInformationGroup & operator = (const rnpCellLoadInformationGroup &);
    int operator == (const rnpCellLoadInformationGroup &) const;
    int operator != (const rnpCellLoadInformationGroup &) const;

    sourceCellID & get_sourceCellID();
    const sourceCellID & get_sourceCellID() const;
    void set_sourceCellID(const sourceCellID &);

    uplinkCellLoadInformation *get_uplinkCellLoadInformation();
    const uplinkCellLoadInformation *get_uplinkCellLoadInformation() const;
    void set_uplinkCellLoadInformation(const uplinkCellLoadInformation &);
    int uplinkCellLoadInformation_is_present() const;
    void omit_uplinkCellLoadInformation();

    downlinkCellLoadInformation *get_downlinkCellLoadInformation();
    const downlinkCellLoadInformation *get_downlinkCellLoadInformation() const;
    void set_downlinkCellLoadInformation(const downlinkCellLoadInformation &);
    int downlinkCellLoadInformation_is_present() const;
    void omit_downlinkCellLoadInformation();

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    sourceCellID sourceCellID_field;
    uplinkCellLoadInformation uplinkCellLoadInformation_field;
    downlinkCellLoadInformation downlinkCellLoadInformation_field;
    iE_Extensions iE_Extensions_field;
};

typedef rnp__shared5 rnp_seq248;

typedef rnp__shared5 rnp_seq249;

typedef OSS_UINT32 rnpRepetitionNumber0;

class OSS_PUBLIC rnp_seq253;

class OSS_PUBLIC rnpMessageStructure : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq253 component;

    rnpMessageStructure();
    rnpMessageStructure(const rnpMessageStructure &);
    ~rnpMessageStructure();

    rnpMessageStructure & operator = (const rnpMessageStructure &);
    int operator == (const rnpMessageStructure &) const;
    int operator != (const rnpMessageStructure &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnpMessageStructure *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnpMessageStructure *);

    int remove_front();
    int remove_after(OssIndex);

    rnpMessageStructure *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpCriticalityDiagnostics_IE_List_ExtIEs_Extension : public OssConstrainedOpenType
{
public:
    rnpCriticalityDiagnostics_IE_List_ExtIEs_Extension();
    rnpCriticalityDiagnostics_IE_List_ExtIEs_Extension(const rnpCriticalityDiagnostics_IE_List_ExtIEs_Extension &);
    ~rnpCriticalityDiagnostics_IE_List_ExtIEs_Extension();
    rnpCriticalityDiagnostics_IE_List_ExtIEs_Extension & operator = (const rnpCriticalityDiagnostics_IE_List_ExtIEs_Extension &);
    int operator == (const rnpCriticalityDiagnostics_IE_List_ExtIEs_Extension &) const;
    int operator != (const rnpCriticalityDiagnostics_IE_List_ExtIEs_Extension &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpMessageStructure *get_rnpMessageStructure();
    const rnpMessageStructure *get_rnpMessageStructure() const;
    void set_rnpMessageStructure(const rnpMessageStructure &);
    rnpMessageStructure *release_rnpMessageStructure();
    void set_rnpMessageStructure(rnpMessageStructure *);

    rnpTypeOfError *get_rnpTypeOfError();
    const rnpTypeOfError *get_rnpTypeOfError() const;
    void set_rnpTypeOfError(const rnpTypeOfError &);
    rnpTypeOfError *release_rnpTypeOfError();
    void set_rnpTypeOfError(rnpTypeOfError *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq250;

class OSS_PUBLIC rnp_seqof246 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq250 component;

    rnp_seqof246();
    rnp_seqof246(const rnp_seqof246 &);
    ~rnp_seqof246();

    rnp_seqof246 & operator = (const rnp_seqof246 &);
    int operator == (const rnp_seqof246 &) const;
    int operator != (const rnp_seqof246 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof246 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof246 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof246 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnp_seq251   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef enum rnpCriticality iECriticality;
    typedef OSS_UINT32 iE_ID;
    typedef OSS_UINT32 repetitionNumber;
    typedef rnp_seqof246 iE_Extensions;

    rnp_seq251();
    rnp_seq251(const rnp_seq251 &);
    rnp_seq251(iECriticality, iE_ID, repetitionNumber, const iE_Extensions &);
    rnp_seq251(iECriticality, iE_ID);

    rnp_seq251 & operator = (const rnp_seq251 &);
    int operator == (const rnp_seq251 &) const;
    int operator != (const rnp_seq251 &) const;

    iECriticality & get_iECriticality();
    iECriticality get_iECriticality() const;
    void set_iECriticality(iECriticality);

    iE_ID & get_iE_ID();
    iE_ID get_iE_ID() const;
    void set_iE_ID(iE_ID);

    repetitionNumber *get_repetitionNumber();
    const repetitionNumber *get_repetitionNumber() const;
    void set_repetitionNumber(repetitionNumber);
    int repetitionNumber_is_present() const;
    void omit_repetitionNumber();

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    iECriticality iECriticality_field;
    iE_ID iE_ID_field;
    repetitionNumber repetitionNumber_field;
    iE_Extensions iE_Extensions_field;
};

class OSS_PUBLIC rnp_seq250   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpCriticalityDiagnostics_IE_List_ExtIEs_Extension extensionValue;

    rnp_seq250();
    rnp_seq250(const rnp_seq250 &);
    rnp_seq250(id, criticality, const extensionValue &);

    rnp_seq250 & operator = (const rnp_seq250 &);
    int operator == (const rnp_seq250 &) const;
    int operator != (const rnp_seq250 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    extensionValue & get_extensionValue();
    const extensionValue & get_extensionValue() const;
    void set_extensionValue(const extensionValue &);
private:
    id id_field;
    criticality criticality_field;
    extensionValue extensionValue_field;
};

typedef OSS_UINT32 rnpRepetitionNumber1;

typedef rnp__shared6 rnp_seqof247;

class OSS_PUBLIC rnp_seq253   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 iE_ID;
    typedef OSS_UINT32 repetitionNumber;
    typedef rnp__shared6 iE_Extensions;

    rnp_seq253();
    rnp_seq253(const rnp_seq253 &);
    rnp_seq253(iE_ID, repetitionNumber, const iE_Extensions &);
    rnp_seq253(iE_ID);

    rnp_seq253 & operator = (const rnp_seq253 &);
    int operator == (const rnp_seq253 &) const;
    int operator != (const rnp_seq253 &) const;

    iE_ID & get_iE_ID();
    iE_ID get_iE_ID() const;
    void set_iE_ID(iE_ID);

    repetitionNumber *get_repetitionNumber();
    const repetitionNumber *get_repetitionNumber() const;
    void set_repetitionNumber(repetitionNumber);
    int repetitionNumber_is_present() const;
    void omit_repetitionNumber();

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    iE_ID iE_ID_field;
    repetitionNumber repetitionNumber_field;
    iE_Extensions iE_Extensions_field;
};

typedef rnp__shared5 rnp_seq252;

typedef OssString rnpLAC;

typedef OssString rnpCI;

class OSS_PUBLIC rnpCGI_ExtIEs_Extension : public OssConstrainedOpenType
{
public:
    rnpCGI_ExtIEs_Extension();
    rnpCGI_ExtIEs_Extension(const rnpCGI_ExtIEs_Extension &);
    ~rnpCGI_ExtIEs_Extension();
    rnpCGI_ExtIEs_Extension & operator = (const rnpCGI_ExtIEs_Extension &);
    int operator == (const rnpCGI_ExtIEs_Extension &) const;
    int operator != (const rnpCGI_ExtIEs_Extension &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpRAC *get_rnpRAC();
    const rnpRAC *get_rnpRAC() const;
    void set_rnpRAC(const rnpRAC &);
    rnpRAC *release_rnpRAC();
    void set_rnpRAC(rnpRAC *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq254   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpCGI_ExtIEs_Extension extensionValue;

    rnp_seq254();
    rnp_seq254(const rnp_seq254 &);
    rnp_seq254(id, criticality, const extensionValue &);

    rnp_seq254 & operator = (const rnp_seq254 &);
    int operator == (const rnp_seq254 &) const;
    int operator != (const rnp_seq254 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    extensionValue & get_extensionValue();
    const extensionValue & get_extensionValue() const;
    void set_extensionValue(const extensionValue &);
private:
    id id_field;
    criticality criticality_field;
    extensionValue extensionValue_field;
};

typedef OSS_UINT32 rnpCN_ID;

typedef OSS_UINT32 rnpDCH_ID;

typedef rnp__shared27 rnpLAListofIdleModeUEs;

class OSS_PUBLIC rnpDeltaRAListofIdleModeUEs_ExtIEs_Extension : public OssConstrainedOpenType
{
public:
    rnpDeltaRAListofIdleModeUEs_ExtIEs_Extension();
    rnpDeltaRAListofIdleModeUEs_ExtIEs_Extension(const rnpDeltaRAListofIdleModeUEs_ExtIEs_Extension &);
    ~rnpDeltaRAListofIdleModeUEs_ExtIEs_Extension();
    rnpDeltaRAListofIdleModeUEs_ExtIEs_Extension & operator = (const rnpDeltaRAListofIdleModeUEs_ExtIEs_Extension &);
    int operator == (const rnpDeltaRAListofIdleModeUEs_ExtIEs_Extension &) const;
    int operator != (const rnpDeltaRAListofIdleModeUEs_ExtIEs_Extension &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnp__shared27 *get_rnpLAListofIdleModeUEs();
    const rnp__shared27 *get_rnpLAListofIdleModeUEs() const;
    void set_rnpLAListofIdleModeUEs(const rnp__shared27 &);
    rnp__shared27 *release_rnpLAListofIdleModeUEs();
    void set_rnpLAListofIdleModeUEs(rnp__shared27 *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp__shared42   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpDeltaRAListofIdleModeUEs_ExtIEs_Extension extensionValue;

    rnp__shared42();
    rnp__shared42(const rnp__shared42 &);
    rnp__shared42(id, criticality, const extensionValue &);

    rnp__shared42 & operator = (const rnp__shared42 &);
    int operator == (const rnp__shared42 &) const;
    int operator != (const rnp__shared42 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    extensionValue & get_extensionValue();
    const extensionValue & get_extensionValue() const;
    void set_extensionValue(const extensionValue &);
private:
    id id_field;
    criticality criticality_field;
    extensionValue extensionValue_field;
};

typedef rnp__shared42 rnp_seq298;

typedef rnp__shared42 rnp_seq255;

typedef OSS_UINT32 rnpDSCH_ID;

typedef rnp__shared6 rnp_seqof250;

typedef rnp__shared5 rnp_seq256;

typedef OSS_UINT32 rnpFrameSequenceNumber;

typedef OssString rnpGANSS_PositioningMethodAndUsage;

typedef rnp__shared9 rnpGANSS_PositioningDataSet;

typedef rnp__shared5 rnp_seq257;

typedef rnp__shared5 rnp_seq258;

typedef rnp__shared5 rnp_seq259;

typedef rnp__shared5 rnp_seq260;

typedef rnp__shared5 rnp_seq261;

typedef rnp__shared5 rnp_seq262;

typedef rnp__shared5 rnp_seq263;

typedef rnp__shared29 rnp_seq265;

typedef rnp__shared6 rnp_seqof258;

typedef rnp__shared5 rnp_seq264;

typedef rnp__shared5 rnp_seq266;

typedef rnp__shared5 rnp_seq267;

typedef OSS_UINT32 rnpRNC_ID;

typedef OssString rnpIMEI;

typedef rnp__shared5 rnp_seq268;

typedef OssString rnpIMEISV;

typedef rnp__shared5 rnp_seq269;

typedef OssBitString rnpMeasurementsToActivate;

typedef rnp__shared6 rnp_seqof272;

class OSS_PUBLIC rnpM4_Collection_Parameters   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef enum rnpM4_Period m4_period;
    typedef OSS_UINT32 m4_threshold;
    typedef rnp__shared6 iE_Extensions;

    rnpM4_Collection_Parameters();
    rnpM4_Collection_Parameters(const rnpM4_Collection_Parameters &);
    rnpM4_Collection_Parameters(m4_period, m4_threshold, const iE_Extensions &);
    rnpM4_Collection_Parameters(m4_period);

    rnpM4_Collection_Parameters & operator = (const rnpM4_Collection_Parameters &);
    int operator == (const rnpM4_Collection_Parameters &) const;
    int operator != (const rnpM4_Collection_Parameters &) const;

    m4_period & get_m4_period();
    m4_period get_m4_period() const;
    void set_m4_period(m4_period);

    m4_threshold *get_m4_threshold();
    const m4_threshold *get_m4_threshold() const;
    void set_m4_threshold(m4_threshold);
    int m4_threshold_is_present() const;
    void omit_m4_threshold();

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    m4_period m4_period_field;
    m4_threshold m4_threshold_field;
    iE_Extensions iE_Extensions_field;
};

class OSS_PUBLIC rnpM4Report  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	all_chosen = 1,
	m4_collection_parameters_chosen = 2
    };
    typedef Nulltype all;
    typedef rnpM4_Collection_Parameters m4_collection_parameters;

    rnpM4Report();
    rnpM4Report(const rnpM4Report &);
    ~rnpM4Report();

    rnpM4Report & operator = (const rnpM4Report &);
    int operator == (const rnpM4Report &) const;
    int operator != (const rnpM4Report &) const;

    all *get_all();
    const all *get_all() const;
    void set_all(all);

    m4_collection_parameters *get_m4_collection_parameters();
    const m4_collection_parameters *get_m4_collection_parameters() const;
    void set_m4_collection_parameters(const m4_collection_parameters &);
private:
    union {
	all all_field;
	m4_collection_parameters *m4_collection_parameters_field;
    };
    void cleanup();
};

class OSS_PUBLIC rnpM5Report  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	when_available_chosen = 1,
	m5_period_chosen = 2
    };
    typedef Nulltype when_available;
    typedef enum rnpM5_Period m5_period;

    rnpM5Report();
    rnpM5Report(const rnpM5Report &);

    rnpM5Report & operator = (const rnpM5Report &);
    int operator == (const rnpM5Report &) const;
    int operator != (const rnpM5Report &) const;

    when_available *get_when_available();
    const when_available *get_when_available() const;
    void set_when_available(when_available);

    m5_period *get_m5_period();
    const m5_period *get_m5_period() const;
    void set_m5_period(m5_period);
private:
    union {
	when_available when_available_field;
	m5_period m5_period_field;
    };
};

typedef rnp__shared6 rnp_seqof273;

class OSS_PUBLIC rnpM6Report   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef enum rnpM6_Period m6_period;
    typedef enum rnpLinks_to_log m6_links_to_log;
    typedef rnp__shared6 iE_Extensions;

    rnpM6Report();
    rnpM6Report(const rnpM6Report &);
    rnpM6Report(m6_period, m6_links_to_log, const iE_Extensions &);
    rnpM6Report(m6_period, m6_links_to_log);

    rnpM6Report & operator = (const rnpM6Report &);
    int operator == (const rnpM6Report &) const;
    int operator != (const rnpM6Report &) const;

    m6_period & get_m6_period();
    m6_period get_m6_period() const;
    void set_m6_period(m6_period);

    m6_links_to_log & get_m6_links_to_log();
    m6_links_to_log get_m6_links_to_log() const;
    void set_m6_links_to_log(m6_links_to_log);

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    m6_period m6_period_field;
    m6_links_to_log m6_links_to_log_field;
    iE_Extensions iE_Extensions_field;
};

typedef rnp__shared6 rnp_seqof274;

class OSS_PUBLIC rnpM7Report   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef enum rnpM7_Period m7_period;
    typedef enum rnpLinks_to_log m7_links_to_log;
    typedef rnp__shared6 iE_Extensions;

    rnpM7Report();
    rnpM7Report(const rnpM7Report &);
    rnpM7Report(m7_period, m7_links_to_log, const iE_Extensions &);
    rnpM7Report(m7_period, m7_links_to_log);

    rnpM7Report & operator = (const rnpM7Report &);
    int operator == (const rnpM7Report &) const;
    int operator != (const rnpM7Report &) const;

    m7_period & get_m7_period();
    m7_period get_m7_period() const;
    void set_m7_period(m7_period);

    m7_links_to_log & get_m7_links_to_log();
    m7_links_to_log get_m7_links_to_log() const;
    void set_m7_links_to_log(m7_links_to_log);

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    m7_period m7_period_field;
    m7_links_to_log m7_links_to_log_field;
    iE_Extensions iE_Extensions_field;
};

class OSS_PUBLIC rnpImmediateMDT_ExtIEs_Extension : public OssConstrainedOpenType
{
public:
    rnpImmediateMDT_ExtIEs_Extension();
    rnpImmediateMDT_ExtIEs_Extension(const rnpImmediateMDT_ExtIEs_Extension &);
    ~rnpImmediateMDT_ExtIEs_Extension();
    rnpImmediateMDT_ExtIEs_Extension & operator = (const rnpImmediateMDT_ExtIEs_Extension &);
    int operator == (const rnpImmediateMDT_ExtIEs_Extension &) const;
    int operator != (const rnpImmediateMDT_ExtIEs_Extension &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpM4Report *get_rnpM4Report();
    const rnpM4Report *get_rnpM4Report() const;
    void set_rnpM4Report(const rnpM4Report &);
    rnpM4Report *release_rnpM4Report();
    void set_rnpM4Report(rnpM4Report *);

    rnpM5Report *get_rnpM5Report();
    const rnpM5Report *get_rnpM5Report() const;
    void set_rnpM5Report(const rnpM5Report &);
    rnpM5Report *release_rnpM5Report();
    void set_rnpM5Report(rnpM5Report *);

    rnpM6Report *get_rnpM6Report();
    const rnpM6Report *get_rnpM6Report() const;
    void set_rnpM6Report(const rnpM6Report &);
    rnpM6Report *release_rnpM6Report();
    void set_rnpM6Report(rnpM6Report *);

    rnpM7Report *get_rnpM7Report();
    const rnpM7Report *get_rnpM7Report() const;
    void set_rnpM7Report(const rnpM7Report &);
    rnpM7Report *release_rnpM7Report();
    void set_rnpM7Report(rnpM7Report *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq270   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpImmediateMDT_ExtIEs_Extension extensionValue;

    rnp_seq270();
    rnp_seq270(const rnp_seq270 &);
    rnp_seq270(id, criticality, const extensionValue &);

    rnp_seq270 & operator = (const rnp_seq270 &);
    int operator == (const rnp_seq270 &) const;
    int operator != (const rnp_seq270 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    extensionValue & get_extensionValue();
    const extensionValue & get_extensionValue() const;
    void set_extensionValue(const extensionValue &);
private:
    id id_field;
    criticality criticality_field;
    extensionValue extensionValue_field;
};

typedef rnp__shared5 rnp_seq271;

typedef rnp__shared5 rnp_seq272;

class OSS_PUBLIC rnp_seq274;

class OSS_PUBLIC rnpLA_LIST : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq274 component;

    rnpLA_LIST();
    rnpLA_LIST(const rnpLA_LIST &);
    ~rnpLA_LIST();

    rnpLA_LIST & operator = (const rnpLA_LIST &);
    int operator == (const rnpLA_LIST &) const;
    int operator != (const rnpLA_LIST &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnpLA_LIST *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnpLA_LIST *);

    int remove_front();
    int remove_after(OssIndex);

    rnpLA_LIST *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared10 rnpListOF_SNAs;

typedef rnp__shared6 rnp_seqof266;

class OSS_PUBLIC rnp_seq274   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssString lAC;
    typedef rnp__shared10 listOF_SNAs;
    typedef rnp__shared6 iE_Extensions;

    rnp_seq274();
    rnp_seq274(const rnp_seq274 &);
    rnp_seq274(const lAC &, const listOF_SNAs &, const iE_Extensions &);
    rnp_seq274(const lAC &, const listOF_SNAs &);

    rnp_seq274 & operator = (const rnp_seq274 &);
    int operator == (const rnp_seq274 &) const;
    int operator != (const rnp_seq274 &) const;

    lAC & get_lAC();
    const lAC & get_lAC() const;
    void set_lAC(const lAC &);

    listOF_SNAs & get_listOF_SNAs();
    const listOF_SNAs & get_listOF_SNAs() const;
    void set_listOF_SNAs(const listOF_SNAs &);

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    lAC lAC_field;
    listOF_SNAs listOF_SNAs_field;
    iE_Extensions iE_Extensions_field;
};

typedef rnp__shared5 rnp_seq273;

typedef OssString rnpSAC;

typedef rnp__shared5 rnp_seq276;

typedef rnp__shared6 rnp_seqof269;

class OSS_PUBLIC rnpInterfacesToTraceItem   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef enum rnp_enum3 InterfacesToTraceItem_interface;
    typedef rnp__shared6 iE_Extensions;

    rnpInterfacesToTraceItem();
    rnpInterfacesToTraceItem(const rnpInterfacesToTraceItem &);
    rnpInterfacesToTraceItem(InterfacesToTraceItem_interface, const iE_Extensions &);
    rnpInterfacesToTraceItem(InterfacesToTraceItem_interface);

    rnpInterfacesToTraceItem & operator = (const rnpInterfacesToTraceItem &);
    int operator == (const rnpInterfacesToTraceItem &) const;
    int operator != (const rnpInterfacesToTraceItem &) const;

    InterfacesToTraceItem_interface & get_InterfacesToTraceItem_interface();
    InterfacesToTraceItem_interface get_InterfacesToTraceItem_interface() const;
    void set_InterfacesToTraceItem_interface(InterfacesToTraceItem_interface);

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    InterfacesToTraceItem_interface InterfacesToTraceItem_interface_field;
    iE_Extensions iE_Extensions_field;
};

typedef rnp__shared5 rnp_seq277;

typedef OssString rnpRequestedGPSAssistanceData;

typedef rnp__shared5 rnp_seq278;

typedef rnp__shared5 rnp_seq279;

typedef OSS_UINT32 rnpM4_Threshold;

typedef rnp__shared5 rnp_seq280;

typedef rnp__shared5 rnp_seq281;

typedef rnp__shared5 rnp_seq282;

class OSS_PUBLIC rnpMDT_Configuration_ExtIEs_Extension : public OssConstrainedOpenType
{
public:
    rnpMDT_Configuration_ExtIEs_Extension();
    rnpMDT_Configuration_ExtIEs_Extension(const rnpMDT_Configuration_ExtIEs_Extension &);
    ~rnpMDT_Configuration_ExtIEs_Extension();
    rnpMDT_Configuration_ExtIEs_Extension & operator = (const rnpMDT_Configuration_ExtIEs_Extension &);
    int operator == (const rnpMDT_Configuration_ExtIEs_Extension &) const;
    int operator != (const rnpMDT_Configuration_ExtIEs_Extension &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnp__shared9 *get_rnpMDT_PLMN_List();
    const rnp__shared9 *get_rnpMDT_PLMN_List() const;
    void set_rnpMDT_PLMN_List(const rnp__shared9 &);
    rnp__shared9 *release_rnpMDT_PLMN_List();
    void set_rnpMDT_PLMN_List(rnp__shared9 *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq283   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpMDT_Configuration_ExtIEs_Extension extensionValue;

    rnp_seq283();
    rnp_seq283(const rnp_seq283 &);
    rnp_seq283(id, criticality, const extensionValue &);

    rnp_seq283 & operator = (const rnp_seq283 &);
    int operator == (const rnp_seq283 &) const;
    int operator != (const rnp_seq283 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    extensionValue & get_extensionValue();
    const extensionValue & get_extensionValue() const;
    void set_extensionValue(const extensionValue &);
private:
    id id_field;
    criticality criticality_field;
    extensionValue extensionValue_field;
};

typedef OSS_UINT32 rnpNumberOfIuInstances;

typedef OssString rnpOffload_RAB_Parameters_APN;

typedef OssString rnpOffload_RAB_Parameters_ChargingCharacteristics;

typedef rnp__shared5 rnp_seq284;

typedef OSS_UINT32 rnpPDUType14FrameSequenceNumber;

typedef rnp__shared10 rnpPermittedEncryptionAlgorithms;

typedef rnp__shared5 rnp_seq285;

typedef rnp__shared5 rnp_seq286;

typedef rnp__shared6 rnp_seqof279;

class OSS_PUBLIC rnp_seq288   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssString pLMNidentity;
    typedef rnpLA_LIST lA_LIST;
    typedef rnp__shared6 iE_Extensions;

    rnp_seq288();
    rnp_seq288(const rnp_seq288 &);
    rnp_seq288(const pLMNidentity &, const lA_LIST &, const iE_Extensions &);
    rnp_seq288(const pLMNidentity &, const lA_LIST &);

    rnp_seq288 & operator = (const rnp_seq288 &);
    int operator == (const rnp_seq288 &) const;
    int operator != (const rnp_seq288 &) const;

    pLMNidentity & get_pLMNidentity();
    const pLMNidentity & get_pLMNidentity() const;
    void set_pLMNidentity(const pLMNidentity &);

    lA_LIST & get_lA_LIST();
    const lA_LIST & get_lA_LIST() const;
    void set_lA_LIST(const lA_LIST &);

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    pLMNidentity pLMNidentity_field;
    lA_LIST lA_LIST_field;
    iE_Extensions iE_Extensions_field;
};

typedef rnp__shared5 rnp_seq287;

typedef OssString rnpPort_Number;

typedef OssBitString rnpPositioningDataDiscriminator;

typedef OssString rnpPositioningMethodAndUsage;

class OSS_PUBLIC rnpPositionData_ExtIEs_Extension : public OssConstrainedOpenType
{
public:
    rnpPositionData_ExtIEs_Extension();
    rnpPositionData_ExtIEs_Extension(const rnpPositionData_ExtIEs_Extension &);
    ~rnpPositionData_ExtIEs_Extension();
    rnpPositionData_ExtIEs_Extension & operator = (const rnpPositionData_ExtIEs_Extension &);
    int operator == (const rnpPositionData_ExtIEs_Extension &) const;
    int operator != (const rnpPositionData_ExtIEs_Extension &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnp__shared9 *get_rnpGANSS_PositioningDataSet();
    const rnp__shared9 *get_rnpGANSS_PositioningDataSet() const;
    void set_rnpGANSS_PositioningDataSet(const rnp__shared9 &);
    rnp__shared9 *release_rnpGANSS_PositioningDataSet();
    void set_rnpGANSS_PositioningDataSet(rnp__shared9 *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq289   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpPositionData_ExtIEs_Extension extensionValue;

    rnp_seq289();
    rnp_seq289(const rnp_seq289 &);
    rnp_seq289(id, criticality, const extensionValue &);

    rnp_seq289 & operator = (const rnp_seq289 &);
    int operator == (const rnp_seq289 &) const;
    int operator != (const rnp_seq289 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    extensionValue & get_extensionValue();
    const extensionValue & get_extensionValue() const;
    void set_extensionValue(const extensionValue &);
private:
    id id_field;
    criticality criticality_field;
    extensionValue extensionValue_field;
};

typedef OssString rnpP_TMSI;

typedef rnp__shared5 rnp_seq290;

typedef rnp__shared5 rnp_seq291;

typedef rnp__shared5 rnp_seq292;

typedef OssString rnpUPInitialisationFrame;

class OSS_PUBLIC rnpUPInformation_ExtIEs_Extension : public OssConstrainedOpenType
{
public:
    rnpUPInformation_ExtIEs_Extension();
    rnpUPInformation_ExtIEs_Extension(const rnpUPInformation_ExtIEs_Extension &);
    ~rnpUPInformation_ExtIEs_Extension();
    rnpUPInformation_ExtIEs_Extension & operator = (const rnpUPInformation_ExtIEs_Extension &);
    int operator == (const rnpUPInformation_ExtIEs_Extension &) const;
    int operator != (const rnpUPInformation_ExtIEs_Extension &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpTimingDifferenceULDL *get_rnpTimingDifferenceULDL();
    const rnpTimingDifferenceULDL *get_rnpTimingDifferenceULDL() const;
    void set_rnpTimingDifferenceULDL(const rnpTimingDifferenceULDL &);
    rnpTimingDifferenceULDL *release_rnpTimingDifferenceULDL();
    void set_rnpTimingDifferenceULDL(rnpTimingDifferenceULDL *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq294;

class OSS_PUBLIC rnp_seqof284 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq294 component;

    rnp_seqof284();
    rnp_seqof284(const rnp_seqof284 &);
    ~rnp_seqof284();

    rnp_seqof284 & operator = (const rnp_seqof284 &);
    int operator == (const rnp_seqof284 &) const;
    int operator != (const rnp_seqof284 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof284 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof284 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof284 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpUPInformation   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 frameSeqNoUL;
    typedef OSS_UINT32 frameSeqNoDL;
    typedef OSS_UINT32 pdu14FrameSeqNoUL;
    typedef OSS_UINT32 pdu14FrameSeqNoDL;
    typedef enum rnpDataPDUType dataPDUType;
    typedef OssString upinitialisationFrame;
    typedef rnp_seqof284 iE_Extensions;

    rnpUPInformation();
    rnpUPInformation(const rnpUPInformation &);
    rnpUPInformation(frameSeqNoUL, frameSeqNoDL, pdu14FrameSeqNoUL, pdu14FrameSeqNoDL, 
	dataPDUType, const upinitialisationFrame &, const iE_Extensions &);
    rnpUPInformation(frameSeqNoUL, frameSeqNoDL, pdu14FrameSeqNoUL, pdu14FrameSeqNoDL, 
	dataPDUType, const upinitialisationFrame &);

    rnpUPInformation & operator = (const rnpUPInformation &);
    int operator == (const rnpUPInformation &) const;
    int operator != (const rnpUPInformation &) const;

    frameSeqNoUL & get_frameSeqNoUL();
    frameSeqNoUL get_frameSeqNoUL() const;
    void set_frameSeqNoUL(frameSeqNoUL);

    frameSeqNoDL & get_frameSeqNoDL();
    frameSeqNoDL get_frameSeqNoDL() const;
    void set_frameSeqNoDL(frameSeqNoDL);

    pdu14FrameSeqNoUL & get_pdu14FrameSeqNoUL();
    pdu14FrameSeqNoUL get_pdu14FrameSeqNoUL() const;
    void set_pdu14FrameSeqNoUL(pdu14FrameSeqNoUL);

    pdu14FrameSeqNoDL & get_pdu14FrameSeqNoDL();
    pdu14FrameSeqNoDL get_pdu14FrameSeqNoDL() const;
    void set_pdu14FrameSeqNoDL(pdu14FrameSeqNoDL);

    dataPDUType & get_dataPDUType();
    dataPDUType get_dataPDUType() const;
    void set_dataPDUType(dataPDUType);

    upinitialisationFrame & get_upinitialisationFrame();
    const upinitialisationFrame & get_upinitialisationFrame() const;
    void set_upinitialisationFrame(const upinitialisationFrame &);

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    frameSeqNoUL frameSeqNoUL_field;
    frameSeqNoDL frameSeqNoDL_field;
    pdu14FrameSeqNoUL pdu14FrameSeqNoUL_field;
    pdu14FrameSeqNoDL pdu14FrameSeqNoDL_field;
    dataPDUType dataPDUType_field;
    upinitialisationFrame upinitialisationFrame_field;
    iE_Extensions iE_Extensions_field;
};

class OSS_PUBLIC rnp_seq294   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpUPInformation_ExtIEs_Extension extensionValue;

    rnp_seq294();
    rnp_seq294(const rnp_seq294 &);
    rnp_seq294(id, criticality, const extensionValue &);

    rnp_seq294 & operator = (const rnp_seq294 &);
    int operator == (const rnp_seq294 &) const;
    int operator != (const rnp_seq294 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    extensionValue & get_extensionValue();
    const extensionValue & get_extensionValue() const;
    void set_extensionValue(const extensionValue &);
private:
    id id_field;
    criticality criticality_field;
    extensionValue extensionValue_field;
};

typedef rnp__shared6 rnp_seqof285;

class OSS_PUBLIC rnp_seq296   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssBitString rab_Id;
    typedef enum rnpCN_DomainIndicator cn_domain;
    typedef rnp__shared34 rabDataVolumeReport;
    typedef rnpUPInformation upInformation;
    typedef rnp__shared6 iE_Extensions;

    rnp_seq296();
    rnp_seq296(const rnp_seq296 &);
    rnp_seq296(const rab_Id &, cn_domain, const rabDataVolumeReport &, const upInformation &, 
	const iE_Extensions &);
    rnp_seq296(const rab_Id &, cn_domain);

    rnp_seq296 & operator = (const rnp_seq296 &);
    int operator == (const rnp_seq296 &) const;
    int operator != (const rnp_seq296 &) const;

    rab_Id & get_rab_Id();
    const rab_Id & get_rab_Id() const;
    void set_rab_Id(const rab_Id &);

    cn_domain & get_cn_domain();
    cn_domain get_cn_domain() const;
    void set_cn_domain(cn_domain);

    rabDataVolumeReport *get_rabDataVolumeReport();
    const rabDataVolumeReport *get_rabDataVolumeReport() const;
    void set_rabDataVolumeReport(const rabDataVolumeReport &);
    int rabDataVolumeReport_is_present() const;
    void omit_rabDataVolumeReport();

    upInformation *get_upInformation();
    const upInformation *get_upInformation() const;
    void set_upInformation(const upInformation &);
    int upInformation_is_present() const;
    void omit_upInformation();

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    rab_Id rab_Id_field;
    cn_domain cn_domain_field;
    rabDataVolumeReport rabDataVolumeReport_field;
    upInformation upInformation_field;
    iE_Extensions iE_Extensions_field;
};

typedef rnp__shared5 rnp_seq295;

typedef OSS_UINT32 rnpRAB_SubflowCombinationBitRate;

class OSS_PUBLIC rnpRAB_TrCH_MappingItem_ExtIEs_Extension : public OssConstrainedOpenType
{
public:
    rnpRAB_TrCH_MappingItem_ExtIEs_Extension();
    rnpRAB_TrCH_MappingItem_ExtIEs_Extension(const rnpRAB_TrCH_MappingItem_ExtIEs_Extension &);
    ~rnpRAB_TrCH_MappingItem_ExtIEs_Extension();
    rnpRAB_TrCH_MappingItem_ExtIEs_Extension & operator = (const rnpRAB_TrCH_MappingItem_ExtIEs_Extension &);
    int operator == (const rnpRAB_TrCH_MappingItem_ExtIEs_Extension &) const;
    int operator != (const rnpRAB_TrCH_MappingItem_ExtIEs_Extension &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpCN_DomainIndicator *get_rnpCN_DomainIndicator();
    const rnpCN_DomainIndicator *get_rnpCN_DomainIndicator() const;
    void set_rnpCN_DomainIndicator(const rnpCN_DomainIndicator &);
    rnpCN_DomainIndicator *release_rnpCN_DomainIndicator();
    void set_rnpCN_DomainIndicator(rnpCN_DomainIndicator *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnpTrCH_ID;

class OSS_PUBLIC rnp__shared7 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnpTrCH_ID component;

    rnp__shared7();
    rnp__shared7(const rnp__shared7 &);
    ~rnp__shared7();

    rnp__shared7 & operator = (const rnp__shared7 &);
    int operator == (const rnp__shared7 &) const;
    int operator != (const rnp__shared7 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp__shared7 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp__shared7 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp__shared7 *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared7 rnpTrCH_ID_List;

class OSS_PUBLIC rnp_seq297;

class OSS_PUBLIC rnp_seqof286 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq297 component;

    rnp_seqof286();
    rnp_seqof286(const rnp_seqof286 &);
    ~rnp_seqof286();

    rnp_seqof286 & operator = (const rnp_seqof286 &);
    int operator == (const rnp_seqof286 &) const;
    int operator != (const rnp_seqof286 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof286 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof286 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof286 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpRAB_TrCH_MappingItem   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssBitString rAB_ID;
    typedef rnp__shared7 trCH_ID_List;
    typedef rnp_seqof286 iE_Extensions;

    rnpRAB_TrCH_MappingItem();
    rnpRAB_TrCH_MappingItem(const rnpRAB_TrCH_MappingItem &);
    rnpRAB_TrCH_MappingItem(const rAB_ID &, const trCH_ID_List &, const iE_Extensions &);
    rnpRAB_TrCH_MappingItem(const rAB_ID &, const trCH_ID_List &);

    rnpRAB_TrCH_MappingItem & operator = (const rnpRAB_TrCH_MappingItem &);
    int operator == (const rnpRAB_TrCH_MappingItem &) const;
    int operator != (const rnpRAB_TrCH_MappingItem &) const;

    rAB_ID & get_rAB_ID();
    const rAB_ID & get_rAB_ID() const;
    void set_rAB_ID(const rAB_ID &);

    trCH_ID_List & get_trCH_ID_List();
    const trCH_ID_List & get_trCH_ID_List() const;
    void set_trCH_ID_List(const trCH_ID_List &);

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    rAB_ID rAB_ID_field;
    trCH_ID_List trCH_ID_List_field;
    iE_Extensions iE_Extensions_field;
};

class OSS_PUBLIC rnp_seq297   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpRAB_TrCH_MappingItem_ExtIEs_Extension extensionValue;

    rnp_seq297();
    rnp_seq297(const rnp_seq297 &);
    rnp_seq297(id, criticality, const extensionValue &);

    rnp_seq297 & operator = (const rnp_seq297 &);
    int operator == (const rnp_seq297 &) const;
    int operator != (const rnp_seq297 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    extensionValue & get_extensionValue();
    const extensionValue & get_extensionValue() const;
    void set_extensionValue(const extensionValue &);
private:
    id id_field;
    criticality criticality_field;
    extensionValue extensionValue_field;
};

typedef rnp__shared6 rnp_seqof288;

class OSS_PUBLIC rnpMBMSIPMulticastAddressandAPNlist   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnpTMGI tMGI;
    typedef OssString iPMulticastAddress;
    typedef OssString aPN;
    typedef rnp__shared6 iE_Extensions;

    rnpMBMSIPMulticastAddressandAPNlist();
    rnpMBMSIPMulticastAddressandAPNlist(const rnpMBMSIPMulticastAddressandAPNlist &);
    rnpMBMSIPMulticastAddressandAPNlist(const tMGI &, const iPMulticastAddress &, 
	const aPN &, const iE_Extensions &);
    rnpMBMSIPMulticastAddressandAPNlist(const tMGI &, const iPMulticastAddress &, 
	const aPN &);

    rnpMBMSIPMulticastAddressandAPNlist & operator = (const rnpMBMSIPMulticastAddressandAPNlist &);
    int operator == (const rnpMBMSIPMulticastAddressandAPNlist &) const;
    int operator != (const rnpMBMSIPMulticastAddressandAPNlist &) const;

    tMGI & get_tMGI();
    const tMGI & get_tMGI() const;
    void set_tMGI(const tMGI &);

    iPMulticastAddress & get_iPMulticastAddress();
    const iPMulticastAddress & get_iPMulticastAddress() const;
    void set_iPMulticastAddress(const iPMulticastAddress &);

    aPN & get_aPN();
    const aPN & get_aPN() const;
    void set_aPN(const aPN &);

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    tMGI tMGI_field;
    iPMulticastAddress iPMulticastAddress_field;
    aPN aPN_field;
    iE_Extensions iE_Extensions_field;
};

typedef rnp__shared5 rnp_seq299;

typedef rnp__shared6 rnp_seqof297;

class OSS_PUBLIC rnp__shared11   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 mantissa;
    typedef OSS_UINT32 exponent;
    typedef rnp__shared6 iE_Extensions;

    rnp__shared11();
    rnp__shared11(const rnp__shared11 &);
    rnp__shared11(mantissa, exponent, const iE_Extensions &);
    rnp__shared11(mantissa, exponent);

    rnp__shared11 & operator = (const rnp__shared11 &);
    int operator == (const rnp__shared11 &) const;
    int operator != (const rnp__shared11 &) const;

    mantissa & get_mantissa();
    mantissa get_mantissa() const;
    void set_mantissa(mantissa);

    exponent & get_exponent();
    exponent get_exponent() const;
    void set_exponent(exponent);

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    mantissa mantissa_field;
    exponent exponent_field;
    iE_Extensions iE_Extensions_field;
};

typedef rnp__shared11 rnpSDU_ErrorRatio;

typedef rnp__shared11 rnpResidualBitErrorRatio;

typedef rnp__shared6 rnp_seqof289;

typedef rnp__shared5 rnp_seq300;

typedef OssString rnpRIMInformation;

typedef rnp__shared5 rnp_seq301;

typedef rnp__shared6 rnp_seqof317;

class OSS_PUBLIC rnpUTRAN_CellID   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssString pLMNidentity;
    typedef OSS_UINT32 cellID;
    typedef rnp__shared6 iE_Extensions;

    rnpUTRAN_CellID();
    rnpUTRAN_CellID(const rnpUTRAN_CellID &);
    rnpUTRAN_CellID(const pLMNidentity &, cellID, const iE_Extensions &);
    rnpUTRAN_CellID(const pLMNidentity &, cellID);

    rnpUTRAN_CellID & operator = (const rnpUTRAN_CellID &);
    int operator == (const rnpUTRAN_CellID &) const;
    int operator != (const rnpUTRAN_CellID &) const;

    pLMNidentity & get_pLMNidentity();
    const pLMNidentity & get_pLMNidentity() const;
    void set_pLMNidentity(const pLMNidentity &);

    cellID & get_cellID();
    cellID get_cellID() const;
    void set_cellID(cellID);

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    pLMNidentity pLMNidentity_field;
    cellID cellID_field;
    iE_Extensions iE_Extensions_field;
};

class OSS_PUBLIC rnpRNCTraceInformation_ExtIEs_Extension : public OssConstrainedOpenType
{
public:
    rnpRNCTraceInformation_ExtIEs_Extension();
    rnpRNCTraceInformation_ExtIEs_Extension(const rnpRNCTraceInformation_ExtIEs_Extension &);
    ~rnpRNCTraceInformation_ExtIEs_Extension();
    rnpRNCTraceInformation_ExtIEs_Extension & operator = (const rnpRNCTraceInformation_ExtIEs_Extension &);
    int operator == (const rnpRNCTraceInformation_ExtIEs_Extension &) const;
    int operator != (const rnpRNCTraceInformation_ExtIEs_Extension &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpTraceRecordingSessionReference *get_rnpTraceRecordingSessionReference();
    const rnpTraceRecordingSessionReference *get_rnpTraceRecordingSessionReference() const;
    void set_rnpTraceRecordingSessionReference(const rnpTraceRecordingSessionReference &);
    rnpTraceRecordingSessionReference *release_rnpTraceRecordingSessionReference();
    void set_rnpTraceRecordingSessionReference(rnpTraceRecordingSessionReference *);

    rnpIMSI *get_rnpIMSI();
    const rnpIMSI *get_rnpIMSI() const;
    void set_rnpIMSI(const rnpIMSI &);
    rnpIMSI *release_rnpIMSI();
    void set_rnpIMSI(rnpIMSI *);

    rnpTransportLayerAddress *get_rnpTransportLayerAddress();
    const rnpTransportLayerAddress *get_rnpTransportLayerAddress() const;
    void set_rnpTransportLayerAddress(const rnpTransportLayerAddress &);
    rnpTransportLayerAddress *release_rnpTransportLayerAddress();
    void set_rnpTransportLayerAddress(rnpTransportLayerAddress *);

    rnpUTRAN_CellID *get_rnpUTRAN_CellID();
    const rnpUTRAN_CellID *get_rnpUTRAN_CellID() const;
    void set_rnpUTRAN_CellID(const rnpUTRAN_CellID &);
    rnpUTRAN_CellID *release_rnpUTRAN_CellID();
    void set_rnpUTRAN_CellID(rnpUTRAN_CellID *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq302   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpRNCTraceInformation_ExtIEs_Extension extensionValue;

    rnp_seq302();
    rnp_seq302(const rnp_seq302 &);
    rnp_seq302(id, criticality, const extensionValue &);

    rnp_seq302 & operator = (const rnp_seq302 &);
    int operator == (const rnp_seq302 &) const;
    int operator != (const rnp_seq302 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    extensionValue & get_extensionValue();
    const extensionValue & get_extensionValue() const;
    void set_extensionValue(const extensionValue &);
private:
    id id_field;
    criticality criticality_field;
    extensionValue extensionValue_field;
};

typedef rnp__shared5 rnp_seq303;

typedef rnp__shared5 rnp_seq304;

typedef rnp__shared5 rnp_seq305;

typedef rnp__shared5 rnp_seq306;

typedef rnp__shared5 rnp_seq307;

typedef rnp__shared5 rnp_seq308;

typedef OSS_UINT32 rnpSubflowSDU_Size;

class OSS_PUBLIC rnp_seq310;

class OSS_PUBLIC rnpSDU_FormatInformationParameters : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq310 component;

    rnpSDU_FormatInformationParameters();
    rnpSDU_FormatInformationParameters(const rnpSDU_FormatInformationParameters &);
    ~rnpSDU_FormatInformationParameters();

    rnpSDU_FormatInformationParameters & operator = (const rnpSDU_FormatInformationParameters &);
    int operator == (const rnpSDU_FormatInformationParameters &) const;
    int operator != (const rnpSDU_FormatInformationParameters &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnpSDU_FormatInformationParameters *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnpSDU_FormatInformationParameters *);

    int remove_front();
    int remove_after(OssIndex);

    rnpSDU_FormatInformationParameters *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared6 rnp_seqof298;

class OSS_PUBLIC rnp_seq310   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 subflowSDU_Size;
    typedef OSS_UINT32 rAB_SubflowCombinationBitRate;
    typedef rnp__shared6 iE_Extensions;

    rnp_seq310();
    rnp_seq310(const rnp_seq310 &);
    rnp_seq310(subflowSDU_Size, rAB_SubflowCombinationBitRate, const iE_Extensions &);

    rnp_seq310 & operator = (const rnp_seq310 &);
    int operator == (const rnp_seq310 &) const;
    int operator != (const rnp_seq310 &) const;

    subflowSDU_Size *get_subflowSDU_Size();
    const subflowSDU_Size *get_subflowSDU_Size() const;
    void set_subflowSDU_Size(subflowSDU_Size);
    int subflowSDU_Size_is_present() const;
    void omit_subflowSDU_Size();

    rAB_SubflowCombinationBitRate *get_rAB_SubflowCombinationBitRate();
    const rAB_SubflowCombinationBitRate *get_rAB_SubflowCombinationBitRate() const;
    void set_rAB_SubflowCombinationBitRate(rAB_SubflowCombinationBitRate);
    int rAB_SubflowCombinationBitRate_is_present() const;
    void omit_rAB_SubflowCombinationBitRate();

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    subflowSDU_Size subflowSDU_Size_field;
    rAB_SubflowCombinationBitRate rAB_SubflowCombinationBitRate_field;
    iE_Extensions iE_Extensions_field;
};

typedef rnp__shared5 rnp_seq309;

typedef rnp__shared6 rnp_seqof299;

class OSS_PUBLIC rnp_seq312   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef rnp__shared11 sDU_ErrorRatio;
    typedef rnp__shared11 residualBitErrorRatio;
    typedef enum rnpDeliveryOfErroneousSDU deliveryOfErroneousSDU;
    typedef rnpSDU_FormatInformationParameters sDU_FormatInformationParameters;
    typedef rnp__shared6 iE_Extensions;

    rnp_seq312();
    rnp_seq312(const rnp_seq312 &);
    rnp_seq312(const sDU_ErrorRatio &, const residualBitErrorRatio &, deliveryOfErroneousSDU, 
	const sDU_FormatInformationParameters &, const iE_Extensions &);
    rnp_seq312(const residualBitErrorRatio &, deliveryOfErroneousSDU);

    rnp_seq312 & operator = (const rnp_seq312 &);
    int operator == (const rnp_seq312 &) const;
    int operator != (const rnp_seq312 &) const;

    sDU_ErrorRatio *get_sDU_ErrorRatio();
    const sDU_ErrorRatio *get_sDU_ErrorRatio() const;
    void set_sDU_ErrorRatio(const sDU_ErrorRatio &);
    int sDU_ErrorRatio_is_present() const;
    void omit_sDU_ErrorRatio();

    residualBitErrorRatio & get_residualBitErrorRatio();
    const residualBitErrorRatio & get_residualBitErrorRatio() const;
    void set_residualBitErrorRatio(const residualBitErrorRatio &);

    deliveryOfErroneousSDU & get_deliveryOfErroneousSDU();
    deliveryOfErroneousSDU get_deliveryOfErroneousSDU() const;
    void set_deliveryOfErroneousSDU(deliveryOfErroneousSDU);

    sDU_FormatInformationParameters *get_sDU_FormatInformationParameters();
    const sDU_FormatInformationParameters *get_sDU_FormatInformationParameters() const;
    void set_sDU_FormatInformationParameters(const sDU_FormatInformationParameters &);
    int sDU_FormatInformationParameters_is_present() const;
    void omit_sDU_FormatInformationParameters();

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    sDU_ErrorRatio sDU_ErrorRatio_field;
    residualBitErrorRatio residualBitErrorRatio_field;
    deliveryOfErroneousSDU deliveryOfErroneousSDU_field;
    sDU_FormatInformationParameters sDU_FormatInformationParameters_field;
    iE_Extensions iE_Extensions_field;
};

typedef rnp__shared5 rnp_seq311;

typedef rnp__shared5 rnp_seq313;

typedef OSS_UINT32 rnpTargetCellId;

class OSS_PUBLIC rnpSRB_TrCH_MappingItem;

class OSS_PUBLIC rnpSRB_TrCH_Mapping : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnpSRB_TrCH_MappingItem component;

    rnpSRB_TrCH_Mapping();
    rnpSRB_TrCH_Mapping(const rnpSRB_TrCH_Mapping &);
    ~rnpSRB_TrCH_Mapping();

    rnpSRB_TrCH_Mapping & operator = (const rnpSRB_TrCH_Mapping &);
    int operator == (const rnpSRB_TrCH_Mapping &) const;
    int operator != (const rnpSRB_TrCH_Mapping &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnpSRB_TrCH_Mapping *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnpSRB_TrCH_Mapping *);

    int remove_front();
    int remove_after(OssIndex);

    rnpSRB_TrCH_Mapping *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared6 rnp_seqof314;

class OSS_PUBLIC rnpTraceRecordingSessionInformation   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssString traceReference;
    typedef OSS_UINT32 traceRecordingSessionReference;
    typedef rnp__shared6 iE_Extensions;

    rnpTraceRecordingSessionInformation();
    rnpTraceRecordingSessionInformation(const rnpTraceRecordingSessionInformation &);
    rnpTraceRecordingSessionInformation(const traceReference &, traceRecordingSessionReference, 
	const iE_Extensions &);
    rnpTraceRecordingSessionInformation(const traceReference &, traceRecordingSessionReference);

    rnpTraceRecordingSessionInformation & operator = (const rnpTraceRecordingSessionInformation &);
    int operator == (const rnpTraceRecordingSessionInformation &) const;
    int operator != (const rnpTraceRecordingSessionInformation &) const;

    traceReference & get_traceReference();
    const traceReference & get_traceReference() const;
    void set_traceReference(const traceReference &);

    traceRecordingSessionReference & get_traceRecordingSessionReference();
    traceRecordingSessionReference get_traceRecordingSessionReference() const;
    void set_traceRecordingSessionReference(traceRecordingSessionReference);

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    traceReference traceReference_field;
    traceRecordingSessionReference traceRecordingSessionReference_field;
    iE_Extensions iE_Extensions_field;
};

class OSS_PUBLIC rnp_seq319;

class OSS_PUBLIC rnp__shared8 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq319 component;

    rnp__shared8();
    rnp__shared8(const rnp__shared8 &);
    ~rnp__shared8();

    rnp__shared8 & operator = (const rnp__shared8 &);
    int operator == (const rnp__shared8 &) const;
    int operator != (const rnp__shared8 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp__shared8 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp__shared8 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp__shared8 *extract_after(OssIndex, OssIndex);
};

typedef rnp__shared8 rnpEUTRANFrequencies;

typedef rnp__shared6 rnp_seqof303;

class OSS_PUBLIC rnpIRATmeasurementParameters   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 measurementDuration;
    typedef rnp__shared8 eUTRANFrequencies;
    typedef rnp__shared6 iE_Extensions;

    rnpIRATmeasurementParameters();
    rnpIRATmeasurementParameters(const rnpIRATmeasurementParameters &);
    rnpIRATmeasurementParameters(measurementDuration, const eUTRANFrequencies &, 
	const iE_Extensions &);
    rnpIRATmeasurementParameters(measurementDuration);

    rnpIRATmeasurementParameters & operator = (const rnpIRATmeasurementParameters &);
    int operator == (const rnpIRATmeasurementParameters &) const;
    int operator != (const rnpIRATmeasurementParameters &) const;

    measurementDuration & get_measurementDuration();
    measurementDuration get_measurementDuration() const;
    void set_measurementDuration(measurementDuration);

    eUTRANFrequencies *get_eUTRANFrequencies();
    const eUTRANFrequencies *get_eUTRANFrequencies() const;
    void set_eUTRANFrequencies(const eUTRANFrequencies &);
    int eUTRANFrequencies_is_present() const;
    void omit_eUTRANFrequencies();

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    measurementDuration measurementDuration_field;
    eUTRANFrequencies eUTRANFrequencies_field;
    iE_Extensions iE_Extensions_field;
};

class OSS_PUBLIC rnp_seq317;

class OSS_PUBLIC rnp_seqof304 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq317 component;

    rnp_seqof304();
    rnp_seqof304(const rnp_seqof304 &);
    ~rnp_seqof304();

    rnp_seqof304 & operator = (const rnp_seqof304 &);
    int operator == (const rnp_seqof304 &) const;
    int operator != (const rnp_seqof304 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof304 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof304 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof304 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpIRAT_Measurement_Configuration   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 rSRP;
    typedef OSS_UINT32 rSRQ;
    typedef rnpIRATmeasurementParameters iRATmeasurementParameters;
    typedef rnp_seqof304 iE_Extensions;

    rnpIRAT_Measurement_Configuration();
    rnpIRAT_Measurement_Configuration(const rnpIRAT_Measurement_Configuration &);
    rnpIRAT_Measurement_Configuration(rSRP, rSRQ, const iRATmeasurementParameters &, 
	const iE_Extensions &);
    rnpIRAT_Measurement_Configuration(const iRATmeasurementParameters &);

    rnpIRAT_Measurement_Configuration & operator = (const rnpIRAT_Measurement_Configuration &);
    int operator == (const rnpIRAT_Measurement_Configuration &) const;
    int operator != (const rnpIRAT_Measurement_Configuration &) const;

    rSRP *get_rSRP();
    const rSRP *get_rSRP() const;
    void set_rSRP(rSRP);
    int rSRP_is_present() const;
    void omit_rSRP();

    rSRQ *get_rSRQ();
    const rSRQ *get_rSRQ() const;
    void set_rSRQ(rSRQ);
    int rSRQ_is_present() const;
    void omit_rSRQ();

    iRATmeasurementParameters & get_iRATmeasurementParameters();
    const iRATmeasurementParameters & get_iRATmeasurementParameters() const;
    void set_iRATmeasurementParameters(const iRATmeasurementParameters &);

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    rSRP rSRP_field;
    rSRQ rSRQ_field;
    iRATmeasurementParameters iRATmeasurementParameters_field;
    iE_Extensions iE_Extensions_field;
};

class OSS_PUBLIC rnpSourceRNC_ToTargetRNC_TransparentContainer_ExtIEs_Extension : public OssConstrainedOpenType
{
public:
    rnpSourceRNC_ToTargetRNC_TransparentContainer_ExtIEs_Extension();
    rnpSourceRNC_ToTargetRNC_TransparentContainer_ExtIEs_Extension(const rnpSourceRNC_ToTargetRNC_TransparentContainer_ExtIEs_Extension &);
    ~rnpSourceRNC_ToTargetRNC_TransparentContainer_ExtIEs_Extension();
    rnpSourceRNC_ToTargetRNC_TransparentContainer_ExtIEs_Extension & operator = (const rnpSourceRNC_ToTargetRNC_TransparentContainer_ExtIEs_Extension &);
    int operator == (const rnpSourceRNC_ToTargetRNC_TransparentContainer_ExtIEs_Extension &) const;
    int operator != (const rnpSourceRNC_ToTargetRNC_TransparentContainer_ExtIEs_Extension &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpSRB_TrCH_Mapping *get_rnpSRB_TrCH_Mapping();
    const rnpSRB_TrCH_Mapping *get_rnpSRB_TrCH_Mapping() const;
    void set_rnpSRB_TrCH_Mapping(const rnpSRB_TrCH_Mapping &);
    rnpSRB_TrCH_Mapping *release_rnpSRB_TrCH_Mapping();
    void set_rnpSRB_TrCH_Mapping(rnpSRB_TrCH_Mapping *);

    rnpCellLoadInformationGroup *get_rnpCellLoadInformationGroup();
    const rnpCellLoadInformationGroup *get_rnpCellLoadInformationGroup() const;
    void set_rnpCellLoadInformationGroup(const rnpCellLoadInformationGroup &);
    rnpCellLoadInformationGroup *release_rnpCellLoadInformationGroup();
    void set_rnpCellLoadInformationGroup(rnpCellLoadInformationGroup *);

    rnpTraceRecordingSessionInformation *get_rnpTraceRecordingSessionInformation();
    const rnpTraceRecordingSessionInformation *get_rnpTraceRecordingSessionInformation() const;
    void set_rnpTraceRecordingSessionInformation(const rnpTraceRecordingSessionInformation &);
    rnpTraceRecordingSessionInformation *release_rnpTraceRecordingSessionInformation();
    void set_rnpTraceRecordingSessionInformation(rnpTraceRecordingSessionInformation *);

    rnpMBMSLinkingInformation *get_rnpMBMSLinkingInformation();
    const rnpMBMSLinkingInformation *get_rnpMBMSLinkingInformation() const;
    void set_rnpMBMSLinkingInformation(const rnpMBMSLinkingInformation &);
    rnpMBMSLinkingInformation *release_rnpMBMSLinkingInformation();
    void set_rnpMBMSLinkingInformation(rnpMBMSLinkingInformation *);

    rnpD_RNTI *get_rnpD_RNTI();
    const rnpD_RNTI *get_rnpD_RNTI() const;
    void set_rnpD_RNTI(const rnpD_RNTI &);
    rnpD_RNTI *release_rnpD_RNTI();
    void set_rnpD_RNTI(rnpD_RNTI *);

    rnpUE_History_Information *get_rnpUE_History_Information();
    const rnpUE_History_Information *get_rnpUE_History_Information() const;
    void set_rnpUE_History_Information(const rnpUE_History_Information &);
    rnpUE_History_Information *release_rnpUE_History_Information();
    void set_rnpUE_History_Information(rnpUE_History_Information *);

    rnpSubscriberProfileIDforRFP *get_rnpSubscriberProfileIDforRFP();
    const rnpSubscriberProfileIDforRFP *get_rnpSubscriberProfileIDforRFP() const;
    void set_rnpSubscriberProfileIDforRFP(const rnpSubscriberProfileIDforRFP &);
    rnpSubscriberProfileIDforRFP *release_rnpSubscriberProfileIDforRFP();
    void set_rnpSubscriberProfileIDforRFP(rnpSubscriberProfileIDforRFP *);

    rnpSRVCC_Information *get_rnpSRVCC_Information();
    const rnpSRVCC_Information *get_rnpSRVCC_Information() const;
    void set_rnpSRVCC_Information(const rnpSRVCC_Information &);
    rnpSRVCC_Information *release_rnpSRVCC_Information();
    void set_rnpSRVCC_Information(rnpSRVCC_Information *);

    rnpRAB_ID *get_rnpRAB_ID();
    const rnpRAB_ID *get_rnpRAB_ID() const;
    void set_rnpRAB_ID(const rnpRAB_ID &);
    rnpRAB_ID *release_rnpRAB_ID();
    void set_rnpRAB_ID(rnpRAB_ID *);

    rnpCSFB_Information *get_rnpCSFB_Information();
    const rnpCSFB_Information *get_rnpCSFB_Information() const;
    void set_rnpCSFB_Information(const rnpCSFB_Information &);
    rnpCSFB_Information *release_rnpCSFB_Information();
    void set_rnpCSFB_Information(rnpCSFB_Information *);

    rnpIRAT_Measurement_Configuration *get_rnpIRAT_Measurement_Configuration();
    const rnpIRAT_Measurement_Configuration *get_rnpIRAT_Measurement_Configuration() const;
    void set_rnpIRAT_Measurement_Configuration(const rnpIRAT_Measurement_Configuration &);
    rnpIRAT_Measurement_Configuration *release_rnpIRAT_Measurement_Configuration();
    void set_rnpIRAT_Measurement_Configuration(rnpIRAT_Measurement_Configuration *);

    rnpManagement_Based_MDT_Allowed *get_rnpManagement_Based_MDT_Allowed();
    const rnpManagement_Based_MDT_Allowed *get_rnpManagement_Based_MDT_Allowed() const;
    void set_rnpManagement_Based_MDT_Allowed(const rnpManagement_Based_MDT_Allowed &);
    rnpManagement_Based_MDT_Allowed *release_rnpManagement_Based_MDT_Allowed();
    void set_rnpManagement_Based_MDT_Allowed(rnpManagement_Based_MDT_Allowed *);

    rnp__shared9 *get_rnpMDT_PLMN_List();
    const rnp__shared9 *get_rnpMDT_PLMN_List() const;
    void set_rnpMDT_PLMN_List(const rnp__shared9 &);
    rnp__shared9 *release_rnpMDT_PLMN_List();
    void set_rnpMDT_PLMN_List(rnp__shared9 *);

    rnpPLMNidentity *get_rnpPLMNidentity();
    const rnpPLMNidentity *get_rnpPLMNidentity() const;
    void set_rnpPLMNidentity(const rnpPLMNidentity &);
    rnpPLMNidentity *release_rnpPLMNidentity();
    void set_rnpPLMNidentity(rnpPLMNidentity *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq315   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpSourceRNC_ToTargetRNC_TransparentContainer_ExtIEs_Extension extensionValue;

    rnp_seq315();
    rnp_seq315(const rnp_seq315 &);
    rnp_seq315(id, criticality, const extensionValue &);

    rnp_seq315 & operator = (const rnp_seq315 &);
    int operator == (const rnp_seq315 &) const;
    int operator != (const rnp_seq315 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    extensionValue & get_extensionValue();
    const extensionValue & get_extensionValue() const;
    void set_extensionValue(const extensionValue &);
private:
    id id_field;
    criticality criticality_field;
    extensionValue extensionValue_field;
};

typedef rnp__shared5 rnp_seq316;

class OSS_PUBLIC rnpRSRQ_Type   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef ossBoolean allSymbols;
    typedef ossBoolean wideBand;

    rnpRSRQ_Type();
    rnpRSRQ_Type(const rnpRSRQ_Type &);
    rnpRSRQ_Type(allSymbols, wideBand);

    rnpRSRQ_Type & operator = (const rnpRSRQ_Type &);
    int operator == (const rnpRSRQ_Type &) const;
    int operator != (const rnpRSRQ_Type &) const;

    allSymbols & get_allSymbols();
    allSymbols get_allSymbols() const;
    void set_allSymbols(allSymbols);

    wideBand & get_wideBand();
    wideBand get_wideBand() const;
    void set_wideBand(wideBand);
private:
    allSymbols allSymbols_field;
    wideBand wideBand_field;
};

class OSS_PUBLIC rnpIRAT_Measurement_Configuration_ExtIEs_Extension : public OssConstrainedOpenType
{
public:
    rnpIRAT_Measurement_Configuration_ExtIEs_Extension();
    rnpIRAT_Measurement_Configuration_ExtIEs_Extension(const rnpIRAT_Measurement_Configuration_ExtIEs_Extension &);
    ~rnpIRAT_Measurement_Configuration_ExtIEs_Extension();
    rnpIRAT_Measurement_Configuration_ExtIEs_Extension & operator = (const rnpIRAT_Measurement_Configuration_ExtIEs_Extension &);
    int operator == (const rnpIRAT_Measurement_Configuration_ExtIEs_Extension &) const;
    int operator != (const rnpIRAT_Measurement_Configuration_ExtIEs_Extension &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpRSRQ_Type *get_rnpRSRQ_Type();
    const rnpRSRQ_Type *get_rnpRSRQ_Type() const;
    void set_rnpRSRQ_Type(const rnpRSRQ_Type &);
    rnpRSRQ_Type *release_rnpRSRQ_Type();
    void set_rnpRSRQ_Type(rnpRSRQ_Type *);

    rnpRSRQ_Extension *get_rnpRSRQ_Extension();
    const rnpRSRQ_Extension *get_rnpRSRQ_Extension() const;
    void set_rnpRSRQ_Extension(const rnpRSRQ_Extension &);
    rnpRSRQ_Extension *release_rnpRSRQ_Extension();
    void set_rnpRSRQ_Extension(rnpRSRQ_Extension *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq317   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpIRAT_Measurement_Configuration_ExtIEs_Extension extensionValue;

    rnp_seq317();
    rnp_seq317(const rnp_seq317 &);
    rnp_seq317(id, criticality, const extensionValue &);

    rnp_seq317 & operator = (const rnp_seq317 &);
    int operator == (const rnp_seq317 &) const;
    int operator != (const rnp_seq317 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    extensionValue & get_extensionValue();
    const extensionValue & get_extensionValue() const;
    void set_extensionValue(const extensionValue &);
private:
    id id_field;
    criticality criticality_field;
    extensionValue extensionValue_field;
};

class OSS_PUBLIC rnpEUTRANFrequencies_ExtIEs_Extension : public OssConstrainedOpenType
{
public:
    rnpEUTRANFrequencies_ExtIEs_Extension();
    rnpEUTRANFrequencies_ExtIEs_Extension(const rnpEUTRANFrequencies_ExtIEs_Extension &);
    ~rnpEUTRANFrequencies_ExtIEs_Extension();
    rnpEUTRANFrequencies_ExtIEs_Extension & operator = (const rnpEUTRANFrequencies_ExtIEs_Extension &);
    int operator == (const rnpEUTRANFrequencies_ExtIEs_Extension &) const;
    int operator != (const rnpEUTRANFrequencies_ExtIEs_Extension &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpEARFCN_Extended *get_rnpEARFCN_Extended();
    const rnpEARFCN_Extended *get_rnpEARFCN_Extended() const;
    void set_rnpEARFCN_Extended(const rnpEARFCN_Extended &);
    rnpEARFCN_Extended *release_rnpEARFCN_Extended();
    void set_rnpEARFCN_Extended(rnpEARFCN_Extended *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq318;

class OSS_PUBLIC rnp_seqof305 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq318 component;

    rnp_seqof305();
    rnp_seqof305(const rnp_seqof305 &);
    ~rnp_seqof305();

    rnp_seqof305 & operator = (const rnp_seqof305 &);
    int operator == (const rnp_seqof305 &) const;
    int operator != (const rnp_seqof305 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof305 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof305 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof305 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnp_seq319   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 earfcn;
    typedef enum rnpMeasBand measBand;
    typedef rnp_seqof305 iE_Extensions;

    rnp_seq319();
    rnp_seq319(const rnp_seq319 &);
    rnp_seq319(earfcn, measBand, const iE_Extensions &);
    rnp_seq319(earfcn);

    rnp_seq319 & operator = (const rnp_seq319 &);
    int operator == (const rnp_seq319 &) const;
    int operator != (const rnp_seq319 &) const;

    earfcn & get_earfcn();
    earfcn get_earfcn() const;
    void set_earfcn(earfcn);

    measBand *get_measBand();
    const measBand *get_measBand() const;
    void set_measBand(measBand);
    int measBand_is_present() const;
    void omit_measBand();

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    earfcn earfcn_field;
    measBand measBand_field;
    iE_Extensions iE_Extensions_field;
};

class OSS_PUBLIC rnp_seq318   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpEUTRANFrequencies_ExtIEs_Extension extensionValue;

    rnp_seq318();
    rnp_seq318(const rnp_seq318 &);
    rnp_seq318(id, criticality, const extensionValue &);

    rnp_seq318 & operator = (const rnp_seq318 &);
    int operator == (const rnp_seq318 &) const;
    int operator != (const rnp_seq318 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    extensionValue & get_extensionValue();
    const extensionValue & get_extensionValue() const;
    void set_extensionValue(const extensionValue &);
private:
    id id_field;
    criticality criticality_field;
    extensionValue extensionValue_field;
};

typedef OSS_INT32 rnpSupportedBitrate;

typedef rnp__shared5 rnp_seq320;

typedef OSS_UINT32 rnpSRB_ID;

typedef OSS_UINT32 rnpUSCH_ID;

class OSS_PUBLIC rnpTrCH_ID_ExtIEs_Extension : public OssConstrainedOpenType
{
public:
    rnpTrCH_ID_ExtIEs_Extension();
    rnpTrCH_ID_ExtIEs_Extension(const rnpTrCH_ID_ExtIEs_Extension &);
    ~rnpTrCH_ID_ExtIEs_Extension();
    rnpTrCH_ID_ExtIEs_Extension & operator = (const rnpTrCH_ID_ExtIEs_Extension &);
    int operator == (const rnpTrCH_ID_ExtIEs_Extension &) const;
    int operator != (const rnpTrCH_ID_ExtIEs_Extension &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    rnpHS_DSCH_MAC_d_Flow_ID *get_rnpHS_DSCH_MAC_d_Flow_ID();
    const rnpHS_DSCH_MAC_d_Flow_ID *get_rnpHS_DSCH_MAC_d_Flow_ID() const;
    void set_rnpHS_DSCH_MAC_d_Flow_ID(const rnpHS_DSCH_MAC_d_Flow_ID &);
    rnpHS_DSCH_MAC_d_Flow_ID *release_rnpHS_DSCH_MAC_d_Flow_ID();
    void set_rnpHS_DSCH_MAC_d_Flow_ID(rnpHS_DSCH_MAC_d_Flow_ID *);

    rnpE_DCH_MAC_d_Flow_ID *get_rnpE_DCH_MAC_d_Flow_ID();
    const rnpE_DCH_MAC_d_Flow_ID *get_rnpE_DCH_MAC_d_Flow_ID() const;
    void set_rnpE_DCH_MAC_d_Flow_ID(const rnpE_DCH_MAC_d_Flow_ID &);
    rnpE_DCH_MAC_d_Flow_ID *release_rnpE_DCH_MAC_d_Flow_ID();
    void set_rnpE_DCH_MAC_d_Flow_ID(rnpE_DCH_MAC_d_Flow_ID *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC rnp_seq321;

class OSS_PUBLIC rnp_seqof307 : public OssList  /* SEQUENCE OF */
{
public:
    typedef rnp_seq321 component;

    rnp_seqof307();
    rnp_seqof307(const rnp_seqof307 &);
    ~rnp_seqof307();

    rnp_seqof307 & operator = (const rnp_seqof307 &);
    int operator == (const rnp_seqof307 &) const;
    int operator != (const rnp_seqof307 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(rnp_seqof307 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, rnp_seqof307 *);

    int remove_front();
    int remove_after(OssIndex);

    rnp_seqof307 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC rnpTrCH_ID   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 dCH_ID;
    typedef OSS_UINT32 dSCH_ID;
    typedef OSS_UINT32 uSCH_ID;
    typedef rnp_seqof307 iE_Extensions;

    rnpTrCH_ID();
    rnpTrCH_ID(const rnpTrCH_ID &);
    rnpTrCH_ID(dCH_ID, dSCH_ID, uSCH_ID, const iE_Extensions &);

    rnpTrCH_ID & operator = (const rnpTrCH_ID &);
    int operator == (const rnpTrCH_ID &) const;
    int operator != (const rnpTrCH_ID &) const;

    dCH_ID *get_dCH_ID();
    const dCH_ID *get_dCH_ID() const;
    void set_dCH_ID(dCH_ID);
    int dCH_ID_is_present() const;
    void omit_dCH_ID();

    dSCH_ID *get_dSCH_ID();
    const dSCH_ID *get_dSCH_ID() const;
    void set_dSCH_ID(dSCH_ID);
    int dSCH_ID_is_present() const;
    void omit_dSCH_ID();

    uSCH_ID *get_uSCH_ID();
    const uSCH_ID *get_uSCH_ID() const;
    void set_uSCH_ID(uSCH_ID);
    int uSCH_ID_is_present() const;
    void omit_uSCH_ID();

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    dCH_ID dCH_ID_field;
    dSCH_ID dSCH_ID_field;
    uSCH_ID uSCH_ID_field;
    iE_Extensions iE_Extensions_field;
};

class OSS_PUBLIC rnp_seq321   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum rnpCriticality criticality;
    typedef rnpTrCH_ID_ExtIEs_Extension extensionValue;

    rnp_seq321();
    rnp_seq321(const rnp_seq321 &);
    rnp_seq321(id, criticality, const extensionValue &);

    rnp_seq321 & operator = (const rnp_seq321 &);
    int operator == (const rnp_seq321 &) const;
    int operator != (const rnp_seq321 &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    criticality & get_criticality();
    criticality get_criticality() const;
    void set_criticality(criticality);

    extensionValue & get_extensionValue();
    const extensionValue & get_extensionValue() const;
    void set_extensionValue(const extensionValue &);
private:
    id id_field;
    criticality criticality_field;
    extensionValue extensionValue_field;
};

typedef rnp__shared6 rnp_seqof308;

class OSS_PUBLIC rnpSRB_TrCH_MappingItem   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 sRB_ID;
    typedef rnpTrCH_ID trCH_ID;
    typedef rnp__shared6 iE_Extensions;

    rnpSRB_TrCH_MappingItem();
    rnpSRB_TrCH_MappingItem(const rnpSRB_TrCH_MappingItem &);
    rnpSRB_TrCH_MappingItem(sRB_ID, const trCH_ID &, const iE_Extensions &);
    rnpSRB_TrCH_MappingItem(sRB_ID, const trCH_ID &);

    rnpSRB_TrCH_MappingItem & operator = (const rnpSRB_TrCH_MappingItem &);
    int operator == (const rnpSRB_TrCH_MappingItem &) const;
    int operator != (const rnpSRB_TrCH_MappingItem &) const;

    sRB_ID & get_sRB_ID();
    sRB_ID get_sRB_ID() const;
    void set_sRB_ID(sRB_ID);

    trCH_ID & get_trCH_ID();
    const trCH_ID & get_trCH_ID() const;
    void set_trCH_ID(const trCH_ID &);

    iE_Extensions *get_iE_Extensions();
    const iE_Extensions *get_iE_Extensions() const;
    void set_iE_Extensions(const iE_Extensions &);
    int iE_Extensions_is_present() const;
    void omit_iE_Extensions();
private:
    OSS_UINT32 bit_mask;
    sRB_ID sRB_ID_field;
    trCH_ID trCH_ID_field;
    iE_Extensions iE_Extensions_field;
};

typedef rnp__shared5 rnp_seq322;

typedef rnp__shared5 rnp_seq323;

typedef OssString rnpTAC;

typedef rnp__shared5 rnp_seq324;

typedef rnp__shared5 rnp_seq325;

typedef rnp__shared3 rnp_seq326;

typedef rnp__shared5 rnp_seq327;

typedef OssString rnpTMSI;

typedef rnp__shared5 rnp_seq328;

typedef rnp__shared5 rnp_seq329;

typedef OSS_UINT32 rnpUE_AggregateMaximumBitRateDownlink;

typedef OSS_UINT32 rnpUE_AggregateMaximumBitRateUplink;

typedef OssBitString rnpUESBI_IuA;

typedef OssBitString rnpUESBI_IuB;

typedef rnp__shared5 rnp_seq330;

typedef rnp__shared5 rnp_seq331;

typedef rnp__shared5 rnp_seq332;

typedef rnp__shared5 rnp_seq333;

typedef rnp__shared5 rnp_seq334;

typedef rnp__shared5 rnp_seq335;

/* Universal PDU class */

class OSS_PUBLIC ranap_PDU : public UniversalPDU {
public:
    ranap_PDU();
    void set_rnpRANAP_PDU(rnpRANAP_PDU &);
    rnpRANAP_PDU *get_rnpRANAP_PDU() const;
    void set_rnpIu_ReleaseCommand(rnpIu_ReleaseCommand &);
    rnpIu_ReleaseCommand *get_rnpIu_ReleaseCommand() const;
    void set_rnpIu_ReleaseComplete(rnpIu_ReleaseComplete &);
    rnpIu_ReleaseComplete *get_rnpIu_ReleaseComplete() const;
    void set_rnpRAB_DataVolumeReportList(rnpRAB_DataVolumeReportList &);
    rnpRAB_DataVolumeReportList *get_rnpRAB_DataVolumeReportList() const;
    void set_rnpRAB_DataVolumeReportItem(rnpRAB_DataVolumeReportItem &);
    rnpRAB_DataVolumeReportItem *get_rnpRAB_DataVolumeReportItem() const;
    void set_rnpRAB_ReleasedList_IuRelComp(rnpRAB_ReleasedList_IuRelComp &);
    rnpRAB_ReleasedList_IuRelComp *get_rnpRAB_ReleasedList_IuRelComp() const;
    void set_rnpRAB_ReleasedItem_IuRelComp(rnpRAB_ReleasedItem_IuRelComp &);
    rnpRAB_ReleasedItem_IuRelComp *get_rnpRAB_ReleasedItem_IuRelComp() const;
    void set_rnpRelocationRequired(rnpRelocationRequired &);
    rnpRelocationRequired *get_rnpRelocationRequired() const;
    void set_rnpRelocationCommand(rnpRelocationCommand &);
    rnpRelocationCommand *get_rnpRelocationCommand() const;
    void set_rnpRAB_RelocationReleaseList(rnpRAB_RelocationReleaseList &);
    rnpRAB_RelocationReleaseList *get_rnpRAB_RelocationReleaseList() const;
    void set_rnpRAB_RelocationReleaseItem(rnpRAB_RelocationReleaseItem &);
    rnpRAB_RelocationReleaseItem *get_rnpRAB_RelocationReleaseItem() const;
    void set_rnpRAB_DataForwardingList(rnpRAB_DataForwardingList &);
    rnpRAB_DataForwardingList *get_rnpRAB_DataForwardingList() const;
    void set_rnpRAB_DataForwardingItem(rnpRAB_DataForwardingItem &);
    rnpRAB_DataForwardingItem *get_rnpRAB_DataForwardingItem() const;
    void set_rnpRelocationPreparationFailure(rnpRelocationPreparationFailure &);
    rnpRelocationPreparationFailure *get_rnpRelocationPreparationFailure() const;
    void set_rnpRelocationRequest(rnpRelocationRequest &);
    rnpRelocationRequest *get_rnpRelocationRequest() const;
    void set_rnpRAB_SetupList_RelocReq(rnpRAB_SetupList_RelocReq &);
    rnpRAB_SetupList_RelocReq *get_rnpRAB_SetupList_RelocReq() const;
    void set_rnpRAB_SetupItem_RelocReq(rnpRAB_SetupItem_RelocReq &);
    rnpRAB_SetupItem_RelocReq *get_rnpRAB_SetupItem_RelocReq() const;
    void set_rnpCNMBMSLinkingInformation(rnpCNMBMSLinkingInformation &);
    rnpCNMBMSLinkingInformation *get_rnpCNMBMSLinkingInformation() const;
    void set_rnpJoinedMBMSBearerService_IEs(rnpJoinedMBMSBearerService_IEs &);
    rnpJoinedMBMSBearerService_IEs *get_rnpJoinedMBMSBearerService_IEs() const;
    void set_rnpRelocationRequestAcknowledge(rnpRelocationRequestAcknowledge &);
    rnpRelocationRequestAcknowledge *get_rnpRelocationRequestAcknowledge() const;
    void set_rnpRAB_SetupList_RelocReqAck(rnpRAB_SetupList_RelocReqAck &);
    rnpRAB_SetupList_RelocReqAck *get_rnpRAB_SetupList_RelocReqAck() const;
    void set_rnpRAB_SetupItem_RelocReqAck(rnpRAB_SetupItem_RelocReqAck &);
    rnpRAB_SetupItem_RelocReqAck *get_rnpRAB_SetupItem_RelocReqAck() const;
    void set_rnpRAB_FailedList(rnpRAB_FailedList &);
    rnpRAB_FailedList *get_rnpRAB_FailedList() const;
    void set_rnpRAB_FailedItem(rnpRAB_FailedItem &);
    rnpRAB_FailedItem *get_rnpRAB_FailedItem() const;
    void set_rnpRelocationFailure(rnpRelocationFailure &);
    rnpRelocationFailure *get_rnpRelocationFailure() const;
    void set_rnpRelocationCancel(rnpRelocationCancel &);
    rnpRelocationCancel *get_rnpRelocationCancel() const;
    void set_rnpRelocationCancelAcknowledge(rnpRelocationCancelAcknowledge &);
    rnpRelocationCancelAcknowledge *get_rnpRelocationCancelAcknowledge() const;
    void set_rnpSRNS_ContextRequest(rnpSRNS_ContextRequest &);
    rnpSRNS_ContextRequest *get_rnpSRNS_ContextRequest() const;
    void set_rnpRAB_DataForwardingList_SRNS_CtxReq(rnpRAB_DataForwardingList_SRNS_CtxReq &);
    rnpRAB_DataForwardingList_SRNS_CtxReq *get_rnpRAB_DataForwardingList_SRNS_CtxReq() const;
    void set_rnpRAB_DataForwardingItem_SRNS_CtxReq(rnpRAB_DataForwardingItem_SRNS_CtxReq &);
    rnpRAB_DataForwardingItem_SRNS_CtxReq *get_rnpRAB_DataForwardingItem_SRNS_CtxReq() const;
    void set_rnpSRNS_ContextResponse(rnpSRNS_ContextResponse &);
    rnpSRNS_ContextResponse *get_rnpSRNS_ContextResponse() const;
    void set_rnpRAB_ContextList(rnpRAB_ContextList &);
    rnpRAB_ContextList *get_rnpRAB_ContextList() const;
    void set_rnpRAB_ContextItem(rnpRAB_ContextItem &);
    rnpRAB_ContextItem *get_rnpRAB_ContextItem() const;
    void set_rnpRAB_ContextFailedtoTransferList(rnpRAB_ContextFailedtoTransferList &);
    rnpRAB_ContextFailedtoTransferList *get_rnpRAB_ContextFailedtoTransferList() const;
    void set_rnpRABs_ContextFailedtoTransferItem(rnpRABs_ContextFailedtoTransferItem &);
    rnpRABs_ContextFailedtoTransferItem *get_rnpRABs_ContextFailedtoTransferItem() const;
    void set_rnpSecurityModeCommand(rnpSecurityModeCommand &);
    rnpSecurityModeCommand *get_rnpSecurityModeCommand() const;
    void set_rnpSecurityModeComplete(rnpSecurityModeComplete &);
    rnpSecurityModeComplete *get_rnpSecurityModeComplete() const;
    void set_rnpSecurityModeReject(rnpSecurityModeReject &);
    rnpSecurityModeReject *get_rnpSecurityModeReject() const;
    void set_rnpDataVolumeReportRequest(rnpDataVolumeReportRequest &);
    rnpDataVolumeReportRequest *get_rnpDataVolumeReportRequest() const;
    void set_rnpRAB_DataVolumeReportRequestList(rnpRAB_DataVolumeReportRequestList &);
    rnpRAB_DataVolumeReportRequestList *get_rnpRAB_DataVolumeReportRequestList() const;
    void set_rnpRAB_DataVolumeReportRequestItem(rnpRAB_DataVolumeReportRequestItem &);
    rnpRAB_DataVolumeReportRequestItem *get_rnpRAB_DataVolumeReportRequestItem() const;
    void set_rnpDataVolumeReport(rnpDataVolumeReport &);
    rnpDataVolumeReport *get_rnpDataVolumeReport() const;
    void set_rnpRAB_FailedtoReportList(rnpRAB_FailedtoReportList &);
    rnpRAB_FailedtoReportList *get_rnpRAB_FailedtoReportList() const;
    void set_rnpRABs_failed_to_reportItem(rnpRABs_failed_to_reportItem &);
    rnpRABs_failed_to_reportItem *get_rnpRABs_failed_to_reportItem() const;
    void set_rnpReset(rnpReset &);
    rnpReset *get_rnpReset() const;
    void set_rnpResetAcknowledge(rnpResetAcknowledge &);
    rnpResetAcknowledge *get_rnpResetAcknowledge() const;
    void set_rnpResetResource(rnpResetResource &);
    rnpResetResource *get_rnpResetResource() const;
    void set_rnpResetResourceList(rnpResetResourceList &);
    rnpResetResourceList *get_rnpResetResourceList() const;
    void set_rnpResetResourceItem(rnpResetResourceItem &);
    rnpResetResourceItem *get_rnpResetResourceItem() const;
    void set_rnpResetResourceAcknowledge(rnpResetResourceAcknowledge &);
    rnpResetResourceAcknowledge *get_rnpResetResourceAcknowledge() const;
    void set_rnpResetResourceAckList(rnpResetResourceAckList &);
    rnpResetResourceAckList *get_rnpResetResourceAckList() const;
    void set_rnpResetResourceAckItem(rnpResetResourceAckItem &);
    rnpResetResourceAckItem *get_rnpResetResourceAckItem() const;
    void set_rnpRAB_ReleaseRequest(rnpRAB_ReleaseRequest &);
    rnpRAB_ReleaseRequest *get_rnpRAB_ReleaseRequest() const;
    void set_rnpRAB_ReleaseList(rnpRAB_ReleaseList &);
    rnpRAB_ReleaseList *get_rnpRAB_ReleaseList() const;
    void set_rnpRAB_ReleaseItem(rnpRAB_ReleaseItem &);
    rnpRAB_ReleaseItem *get_rnpRAB_ReleaseItem() const;
    void set_rnpIu_ReleaseRequest(rnpIu_ReleaseRequest &);
    rnpIu_ReleaseRequest *get_rnpIu_ReleaseRequest() const;
    void set_rnpRelocationDetect(rnpRelocationDetect &);
    rnpRelocationDetect *get_rnpRelocationDetect() const;
    void set_rnpRelocationComplete(rnpRelocationComplete &);
    rnpRelocationComplete *get_rnpRelocationComplete() const;
    void set_rnpEnhancedRelocationCompleteRequest(rnpEnhancedRelocationCompleteRequest &);
    rnpEnhancedRelocationCompleteRequest *get_rnpEnhancedRelocationCompleteRequest() const;
    void set_rnpRAB_SetupList_EnhancedRelocCompleteReq(rnpRAB_SetupList_EnhancedRelocCompleteReq &);
    rnpRAB_SetupList_EnhancedRelocCompleteReq *get_rnpRAB_SetupList_EnhancedRelocCompleteReq() const;
    void set_rnpRAB_SetupItem_EnhancedRelocCompleteReq(rnpRAB_SetupItem_EnhancedRelocCompleteReq &);
    rnpRAB_SetupItem_EnhancedRelocCompleteReq *get_rnpRAB_SetupItem_EnhancedRelocCompleteReq() const;
    void set_rnpEnhancedRelocationCompleteResponse(rnpEnhancedRelocationCompleteResponse &);
    rnpEnhancedRelocationCompleteResponse *get_rnpEnhancedRelocationCompleteResponse() const;
    void set_rnpRAB_SetupList_EnhancedRelocCompleteRes(rnpRAB_SetupList_EnhancedRelocCompleteRes &);
    rnpRAB_SetupList_EnhancedRelocCompleteRes *get_rnpRAB_SetupList_EnhancedRelocCompleteRes() const;
    void set_rnpRAB_SetupItem_EnhancedRelocCompleteRes(rnpRAB_SetupItem_EnhancedRelocCompleteRes &);
    rnpRAB_SetupItem_EnhancedRelocCompleteRes *get_rnpRAB_SetupItem_EnhancedRelocCompleteRes() const;
    void set_rnpRAB_ToBeReleasedList_EnhancedRelocCompleteRes(rnpRAB_ToBeReleasedList_EnhancedRelocCompleteRes &);
    rnpRAB_ToBeReleasedList_EnhancedRelocCompleteRes *get_rnpRAB_ToBeReleasedList_EnhancedRelocCompleteRes() const;
    void set_rnpRAB_ToBeReleasedItem_EnhancedRelocCompleteRes(rnpRAB_ToBeReleasedItem_EnhancedRelocCompleteRes &);
    rnpRAB_ToBeReleasedItem_EnhancedRelocCompleteRes *get_rnpRAB_ToBeReleasedItem_EnhancedRelocCompleteRes() const;
    void set_rnpEnhancedRelocationCompleteFailure(rnpEnhancedRelocationCompleteFailure &);
    rnpEnhancedRelocationCompleteFailure *get_rnpEnhancedRelocationCompleteFailure() const;
    void set_rnpEnhancedRelocationCompleteConfirm(rnpEnhancedRelocationCompleteConfirm &);
    rnpEnhancedRelocationCompleteConfirm *get_rnpEnhancedRelocationCompleteConfirm() const;
    void set_rnpPaging(rnpPaging &);
    rnpPaging *get_rnpPaging() const;
    void set_rnpCommonID(rnpCommonID &);
    rnpCommonID *get_rnpCommonID() const;
    void set_rnpCN_InvokeTrace(rnpCN_InvokeTrace &);
    rnpCN_InvokeTrace *get_rnpCN_InvokeTrace() const;
    void set_rnpCN_DeactivateTrace(rnpCN_DeactivateTrace &);
    rnpCN_DeactivateTrace *get_rnpCN_DeactivateTrace() const;
    void set_rnpLocationReportingControl(rnpLocationReportingControl &);
    rnpLocationReportingControl *get_rnpLocationReportingControl() const;
    void set_rnpLocationReport(rnpLocationReport &);
    rnpLocationReport *get_rnpLocationReport() const;
    void set_rnpInitialUE_Message(rnpInitialUE_Message &);
    rnpInitialUE_Message *get_rnpInitialUE_Message() const;
    void set_rnpDirectTransfer(rnpDirectTransfer &);
    rnpDirectTransfer *get_rnpDirectTransfer() const;
    void set_rnpRedirectionIndication(rnpRedirectionIndication &);
    rnpRedirectionIndication *get_rnpRedirectionIndication() const;
    void set_rnpOverload(rnpOverload &);
    rnpOverload *get_rnpOverload() const;
    void set_rnpErrorIndication(rnpErrorIndication &);
    rnpErrorIndication *get_rnpErrorIndication() const;
    void set_rnpSRNS_DataForwardCommand(rnpSRNS_DataForwardCommand &);
    rnpSRNS_DataForwardCommand *get_rnpSRNS_DataForwardCommand() const;
    void set_rnpForwardSRNS_Context(rnpForwardSRNS_Context &);
    rnpForwardSRNS_Context *get_rnpForwardSRNS_Context() const;
    void set_rnpRAB_AssignmentRequest(rnpRAB_AssignmentRequest &);
    rnpRAB_AssignmentRequest *get_rnpRAB_AssignmentRequest() const;
    void set_rnpRAB_SetupOrModifyList(rnpRAB_SetupOrModifyList &);
    rnpRAB_SetupOrModifyList *get_rnpRAB_SetupOrModifyList() const;
    void set_rnpRAB_SetupOrModifyItemFirst(rnpRAB_SetupOrModifyItemFirst &);
    rnpRAB_SetupOrModifyItemFirst *get_rnpRAB_SetupOrModifyItemFirst() const;
    void set_rnpTransportLayerInformation(rnpTransportLayerInformation &);
    rnpTransportLayerInformation *get_rnpTransportLayerInformation() const;
    void set_rnpRAB_SetupOrModifyItemSecond(rnpRAB_SetupOrModifyItemSecond &);
    rnpRAB_SetupOrModifyItemSecond *get_rnpRAB_SetupOrModifyItemSecond() const;
    void set_rnpRAB_AssignmentResponse(rnpRAB_AssignmentResponse &);
    rnpRAB_AssignmentResponse *get_rnpRAB_AssignmentResponse() const;
    void set_rnpRAB_SetupOrModifiedList(rnpRAB_SetupOrModifiedList &);
    rnpRAB_SetupOrModifiedList *get_rnpRAB_SetupOrModifiedList() const;
    void set_rnpRAB_SetupOrModifiedItem(rnpRAB_SetupOrModifiedItem &);
    rnpRAB_SetupOrModifiedItem *get_rnpRAB_SetupOrModifiedItem() const;
    void set_rnpRAB_ReleasedList(rnpRAB_ReleasedList &);
    rnpRAB_ReleasedList *get_rnpRAB_ReleasedList() const;
    void set_rnpRAB_ReleasedItem(rnpRAB_ReleasedItem &);
    rnpRAB_ReleasedItem *get_rnpRAB_ReleasedItem() const;
    void set_rnpRAB_QueuedList(rnpRAB_QueuedList &);
    rnpRAB_QueuedList *get_rnpRAB_QueuedList() const;
    void set_rnpRAB_QueuedItem(rnpRAB_QueuedItem &);
    rnpRAB_QueuedItem *get_rnpRAB_QueuedItem() const;
    void set_rnpRAB_ReleaseFailedList(rnpRAB_ReleaseFailedList &);
    rnpRAB_ReleaseFailedList *get_rnpRAB_ReleaseFailedList() const;
    void set_rnpGERAN_Iumode_RAB_FailedList_RABAssgntResponse(rnpGERAN_Iumode_RAB_FailedList_RABAssgntResponse &);
    rnpGERAN_Iumode_RAB_FailedList_RABAssgntResponse *get_rnpGERAN_Iumode_RAB_FailedList_RABAssgntResponse() const;
    void set_rnpGERAN_Iumode_RAB_Failed_RABAssgntResponse_Item(rnpGERAN_Iumode_RAB_Failed_RABAssgntResponse_Item &);
    rnpGERAN_Iumode_RAB_Failed_RABAssgntResponse_Item *get_rnpGERAN_Iumode_RAB_Failed_RABAssgntResponse_Item() const;
    void set_rnpPrivateMessage(rnpPrivateMessage &);
    rnpPrivateMessage *get_rnpPrivateMessage() const;
    void set_rnpRANAP_RelocationInformation(rnpRANAP_RelocationInformation &);
    rnpRANAP_RelocationInformation *get_rnpRANAP_RelocationInformation() const;
    void set_rnpDirectTransferInformationList_RANAP_RelocInf(rnpDirectTransferInformationList_RANAP_RelocInf &);
    rnpDirectTransferInformationList_RANAP_RelocInf *get_rnpDirectTransferInformationList_RANAP_RelocInf() const;
    void set_rnpDirectTransferInformationItem_RANAP_RelocInf(rnpDirectTransferInformationItem_RANAP_RelocInf &);
    rnpDirectTransferInformationItem_RANAP_RelocInf *get_rnpDirectTransferInformationItem_RANAP_RelocInf() const;
    void set_rnpRAB_ContextList_RANAP_RelocInf(rnpRAB_ContextList_RANAP_RelocInf &);
    rnpRAB_ContextList_RANAP_RelocInf *get_rnpRAB_ContextList_RANAP_RelocInf() const;
    void set_rnpRAB_ContextItem_RANAP_RelocInf(rnpRAB_ContextItem_RANAP_RelocInf &);
    rnpRAB_ContextItem_RANAP_RelocInf *get_rnpRAB_ContextItem_RANAP_RelocInf() const;
    void set_rnpRANAP_EnhancedRelocationInformationRequest(rnpRANAP_EnhancedRelocationInformationRequest &);
    rnpRANAP_EnhancedRelocationInformationRequest *get_rnpRANAP_EnhancedRelocationInformationRequest() const;
    void set_rnpRAB_SetupList_EnhRelocInfoReq(rnpRAB_SetupList_EnhRelocInfoReq &);
    rnpRAB_SetupList_EnhRelocInfoReq *get_rnpRAB_SetupList_EnhRelocInfoReq() const;
    void set_rnpRAB_SetupItem_EnhRelocInfoReq(rnpRAB_SetupItem_EnhRelocInfoReq &);
    rnpRAB_SetupItem_EnhRelocInfoReq *get_rnpRAB_SetupItem_EnhRelocInfoReq() const;
    void set_rnpRANAP_EnhancedRelocationInformationResponse(rnpRANAP_EnhancedRelocationInformationResponse &);
    rnpRANAP_EnhancedRelocationInformationResponse *get_rnpRANAP_EnhancedRelocationInformationResponse() const;
    void set_rnpRAB_SetupList_EnhRelocInfoRes(rnpRAB_SetupList_EnhRelocInfoRes &);
    rnpRAB_SetupList_EnhRelocInfoRes *get_rnpRAB_SetupList_EnhRelocInfoRes() const;
    void set_rnpRAB_SetupItem_EnhRelocInfoRes(rnpRAB_SetupItem_EnhRelocInfoRes &);
    rnpRAB_SetupItem_EnhRelocInfoRes *get_rnpRAB_SetupItem_EnhRelocInfoRes() const;
    void set_rnpRAB_FailedList_EnhRelocInfoRes(rnpRAB_FailedList_EnhRelocInfoRes &);
    rnpRAB_FailedList_EnhRelocInfoRes *get_rnpRAB_FailedList_EnhRelocInfoRes() const;
    void set_rnpRAB_FailedItem_EnhRelocInfoRes(rnpRAB_FailedItem_EnhRelocInfoRes &);
    rnpRAB_FailedItem_EnhRelocInfoRes *get_rnpRAB_FailedItem_EnhRelocInfoRes() const;
    void set_rnpRAB_ModifyRequest(rnpRAB_ModifyRequest &);
    rnpRAB_ModifyRequest *get_rnpRAB_ModifyRequest() const;
    void set_rnpRAB_ModifyList(rnpRAB_ModifyList &);
    rnpRAB_ModifyList *get_rnpRAB_ModifyList() const;
    void set_rnpRAB_ModifyItem(rnpRAB_ModifyItem &);
    rnpRAB_ModifyItem *get_rnpRAB_ModifyItem() const;
    void set_rnpLocationRelatedDataRequest(rnpLocationRelatedDataRequest &);
    rnpLocationRelatedDataRequest *get_rnpLocationRelatedDataRequest() const;
    void set_rnpLocationRelatedDataResponse(rnpLocationRelatedDataResponse &);
    rnpLocationRelatedDataResponse *get_rnpLocationRelatedDataResponse() const;
    void set_rnpLocationRelatedDataFailure(rnpLocationRelatedDataFailure &);
    rnpLocationRelatedDataFailure *get_rnpLocationRelatedDataFailure() const;
    void set_rnpInformationTransferIndication(rnpInformationTransferIndication &);
    rnpInformationTransferIndication *get_rnpInformationTransferIndication() const;
    void set_rnpInformationTransferConfirmation(rnpInformationTransferConfirmation &);
    rnpInformationTransferConfirmation *get_rnpInformationTransferConfirmation() const;
    void set_rnpInformationTransferFailure(rnpInformationTransferFailure &);
    rnpInformationTransferFailure *get_rnpInformationTransferFailure() const;
    void set_rnpUESpecificInformationIndication(rnpUESpecificInformationIndication &);
    rnpUESpecificInformationIndication *get_rnpUESpecificInformationIndication() const;
    void set_rnpDirectInformationTransfer(rnpDirectInformationTransfer &);
    rnpDirectInformationTransfer *get_rnpDirectInformationTransfer() const;
    void set_rnpUplinkInformationExchangeRequest(rnpUplinkInformationExchangeRequest &);
    rnpUplinkInformationExchangeRequest *get_rnpUplinkInformationExchangeRequest() const;
    void set_rnpUplinkInformationExchangeResponse(rnpUplinkInformationExchangeResponse &);
    rnpUplinkInformationExchangeResponse *get_rnpUplinkInformationExchangeResponse() const;
    void set_rnpUplinkInformationExchangeFailure(rnpUplinkInformationExchangeFailure &);
    rnpUplinkInformationExchangeFailure *get_rnpUplinkInformationExchangeFailure() const;
    void set_rnpMBMSSessionStart(rnpMBMSSessionStart &);
    rnpMBMSSessionStart *get_rnpMBMSSessionStart() const;
    void set_rnpMBMSSynchronisationInformation(rnpMBMSSynchronisationInformation &);
    rnpMBMSSynchronisationInformation *get_rnpMBMSSynchronisationInformation() const;
    void set_rnpMBMSSessionStartResponse(rnpMBMSSessionStartResponse &);
    rnpMBMSSessionStartResponse *get_rnpMBMSSessionStartResponse() const;
    void set_rnpMBMSSessionStartFailure(rnpMBMSSessionStartFailure &);
    rnpMBMSSessionStartFailure *get_rnpMBMSSessionStartFailure() const;
    void set_rnpMBMSSessionUpdate(rnpMBMSSessionUpdate &);
    rnpMBMSSessionUpdate *get_rnpMBMSSessionUpdate() const;
    void set_rnpMBMSSessionUpdateResponse(rnpMBMSSessionUpdateResponse &);
    rnpMBMSSessionUpdateResponse *get_rnpMBMSSessionUpdateResponse() const;
    void set_rnpMBMSSessionUpdateFailure(rnpMBMSSessionUpdateFailure &);
    rnpMBMSSessionUpdateFailure *get_rnpMBMSSessionUpdateFailure() const;
    void set_rnpMBMSSessionStop(rnpMBMSSessionStop &);
    rnpMBMSSessionStop *get_rnpMBMSSessionStop() const;
    void set_rnpMBMSSessionStopResponse(rnpMBMSSessionStopResponse &);
    rnpMBMSSessionStopResponse *get_rnpMBMSSessionStopResponse() const;
    void set_rnpMBMSUELinkingRequest(rnpMBMSUELinkingRequest &);
    rnpMBMSUELinkingRequest *get_rnpMBMSUELinkingRequest() const;
    void set_rnpLeftMBMSBearerService_IEs(rnpLeftMBMSBearerService_IEs &);
    rnpLeftMBMSBearerService_IEs *get_rnpLeftMBMSBearerService_IEs() const;
    void set_rnpMBMSUELinkingResponse(rnpMBMSUELinkingResponse &);
    rnpMBMSUELinkingResponse *get_rnpMBMSUELinkingResponse() const;
    void set_rnpUnsuccessfulLinking_IEs(rnpUnsuccessfulLinking_IEs &);
    rnpUnsuccessfulLinking_IEs *get_rnpUnsuccessfulLinking_IEs() const;
    void set_rnpMBMSRegistrationRequest(rnpMBMSRegistrationRequest &);
    rnpMBMSRegistrationRequest *get_rnpMBMSRegistrationRequest() const;
    void set_rnpMBMSRegistrationResponse(rnpMBMSRegistrationResponse &);
    rnpMBMSRegistrationResponse *get_rnpMBMSRegistrationResponse() const;
    void set_rnpMBMSRegistrationFailure(rnpMBMSRegistrationFailure &);
    rnpMBMSRegistrationFailure *get_rnpMBMSRegistrationFailure() const;
    void set_rnpMBMSCNDe_RegistrationRequest(rnpMBMSCNDe_RegistrationRequest &);
    rnpMBMSCNDe_RegistrationRequest *get_rnpMBMSCNDe_RegistrationRequest() const;
    void set_rnpMBMSCNDe_RegistrationResponse(rnpMBMSCNDe_RegistrationResponse &);
    rnpMBMSCNDe_RegistrationResponse *get_rnpMBMSCNDe_RegistrationResponse() const;
    void set_rnpMBMSRABEstablishmentIndication(rnpMBMSRABEstablishmentIndication &);
    rnpMBMSRABEstablishmentIndication *get_rnpMBMSRABEstablishmentIndication() const;
    void set_rnpMBMSRABReleaseRequest(rnpMBMSRABReleaseRequest &);
    rnpMBMSRABReleaseRequest *get_rnpMBMSRABReleaseRequest() const;
    void set_rnpMBMSRABRelease(rnpMBMSRABRelease &);
    rnpMBMSRABRelease *get_rnpMBMSRABRelease() const;
    void set_rnpMBMSRABReleaseFailure(rnpMBMSRABReleaseFailure &);
    rnpMBMSRABReleaseFailure *get_rnpMBMSRABReleaseFailure() const;
    void set_rnpSRVCC_CSKeysRequest(rnpSRVCC_CSKeysRequest &);
    rnpSRVCC_CSKeysRequest *get_rnpSRVCC_CSKeysRequest() const;
    void set_rnpSRVCC_CSKeysResponse(rnpSRVCC_CSKeysResponse &);
    rnpSRVCC_CSKeysResponse *get_rnpSRVCC_CSKeysResponse() const;
    void set_rnpUeRadioCapabilityMatchRequest(rnpUeRadioCapabilityMatchRequest &);
    rnpUeRadioCapabilityMatchRequest *get_rnpUeRadioCapabilityMatchRequest() const;
    void set_rnpUeRadioCapabilityMatchResponse(rnpUeRadioCapabilityMatchResponse &);
    rnpUeRadioCapabilityMatchResponse *get_rnpUeRadioCapabilityMatchResponse() const;
    void set_rnpAccuracyFulfilmentIndicator(rnpAccuracyFulfilmentIndicator &);
    rnpAccuracyFulfilmentIndicator *get_rnpAccuracyFulfilmentIndicator() const;
    void set_rnpAlt_RAB_Parameters(rnpAlt_RAB_Parameters &);
    rnpAlt_RAB_Parameters *get_rnpAlt_RAB_Parameters() const;
    void set_rnpAlt_RAB_Parameter_ExtendedGuaranteedBitrateInf(rnpAlt_RAB_Parameter_ExtendedGuaranteedBitrateInf &);
    rnpAlt_RAB_Parameter_ExtendedGuaranteedBitrateInf *get_rnpAlt_RAB_Parameter_ExtendedGuaranteedBitrateInf() const;
    void set_rnpAlt_RAB_Parameter_SupportedGuaranteedBitrateInf(rnpAlt_RAB_Parameter_SupportedGuaranteedBitrateInf &);
    rnpAlt_RAB_Parameter_SupportedGuaranteedBitrateInf *get_rnpAlt_RAB_Parameter_SupportedGuaranteedBitrateInf() const;
    void set_rnpAlt_RAB_Parameter_ExtendedMaxBitrateInf(rnpAlt_RAB_Parameter_ExtendedMaxBitrateInf &);
    rnpAlt_RAB_Parameter_ExtendedMaxBitrateInf *get_rnpAlt_RAB_Parameter_ExtendedMaxBitrateInf() const;
    void set_rnpAlt_RAB_Parameter_SupportedMaxBitrateInf(rnpAlt_RAB_Parameter_SupportedMaxBitrateInf &);
    rnpAlt_RAB_Parameter_SupportedMaxBitrateInf *get_rnpAlt_RAB_Parameter_SupportedMaxBitrateInf() const;
    void set_rnpAlternativeRABConfigurationRequest(rnpAlternativeRABConfigurationRequest &);
    rnpAlternativeRABConfigurationRequest *get_rnpAlternativeRABConfigurationRequest() const;
    void set_rnpAPN(rnpAPN &);
    rnpAPN *get_rnpAPN() const;
    void set_rnpAreaIdentity(rnpAreaIdentity &);
    rnpAreaIdentity *get_rnpAreaIdentity() const;
    void set_rnpAss_RAB_Parameters(rnpAss_RAB_Parameters &);
    rnpAss_RAB_Parameters *get_rnpAss_RAB_Parameters() const;
    void set_rnpAss_RAB_Parameter_ExtendedGuaranteedBitrateList(rnpAss_RAB_Parameter_ExtendedGuaranteedBitrateList &);
    rnpAss_RAB_Parameter_ExtendedGuaranteedBitrateList *get_rnpAss_RAB_Parameter_ExtendedGuaranteedBitrateList() const;
    void set_rnpAss_RAB_Parameter_ExtendedMaxBitrateList(rnpAss_RAB_Parameter_ExtendedMaxBitrateList &);
    rnpAss_RAB_Parameter_ExtendedMaxBitrateList *get_rnpAss_RAB_Parameter_ExtendedMaxBitrateList() const;
    void set_rnpBroadcastAssistanceDataDecipheringKeys(rnpBroadcastAssistanceDataDecipheringKeys &);
    rnpBroadcastAssistanceDataDecipheringKeys *get_rnpBroadcastAssistanceDataDecipheringKeys() const;
    void set_rnpCause(rnpCause &);
    rnpCause *get_rnpCause() const;
    void set_rnpCell_Access_Mode(rnpCell_Access_Mode &);
    rnpCell_Access_Mode *get_rnpCell_Access_Mode() const;
    void set_rnpCellLoadInformationGroup(rnpCellLoadInformationGroup &);
    rnpCellLoadInformationGroup *get_rnpCellLoadInformationGroup() const;
    void set_rnpClientType(rnpClientType &);
    rnpClientType *get_rnpClientType() const;
    void set_rnpCriticalityDiagnostics(rnpCriticalityDiagnostics &);
    rnpCriticalityDiagnostics *get_rnpCriticalityDiagnostics() const;
    void set_rnpMessageStructure(rnpMessageStructure &);
    rnpMessageStructure *get_rnpMessageStructure() const;
    void set_rnpChosenEncryptionAlgorithm(rnpChosenEncryptionAlgorithm &);
    rnpChosenEncryptionAlgorithm *get_rnpChosenEncryptionAlgorithm() const;
    void set_rnpChosenIntegrityProtectionAlgorithm(rnpChosenIntegrityProtectionAlgorithm &);
    rnpChosenIntegrityProtectionAlgorithm *get_rnpChosenIntegrityProtectionAlgorithm() const;
    void set_rnpClassmarkInformation2(rnpClassmarkInformation2 &);
    rnpClassmarkInformation2 *get_rnpClassmarkInformation2() const;
    void set_rnpClassmarkInformation3(rnpClassmarkInformation3 &);
    rnpClassmarkInformation3 *get_rnpClassmarkInformation3() const;
    void set_rnpCN_DomainIndicator(rnpCN_DomainIndicator &);
    rnpCN_DomainIndicator *get_rnpCN_DomainIndicator() const;
    void set_rnpCorrelation_ID(rnpCorrelation_ID &);
    rnpCorrelation_ID *get_rnpCorrelation_ID() const;
    void set_rnpCSFB_Information(rnpCSFB_Information &);
    rnpCSFB_Information *get_rnpCSFB_Information() const;
    void set_rnpCSG_Id(rnpCSG_Id &);
    rnpCSG_Id *get_rnpCSG_Id() const;
    void set_rnpCSG_Id_List(rnpCSG_Id_List &);
    rnpCSG_Id_List *get_rnpCSG_Id_List() const;
    void set_rnpCSG_Membership_Status(rnpCSG_Membership_Status &);
    rnpCSG_Membership_Status *get_rnpCSG_Membership_Status() const;
    void set_rnpDeltaRAListofIdleModeUEs(rnpDeltaRAListofIdleModeUEs &);
    rnpDeltaRAListofIdleModeUEs *get_rnpDeltaRAListofIdleModeUEs() const;
    void set_rnpD_RNTI(rnpD_RNTI &);
    rnpD_RNTI *get_rnpD_RNTI() const;
    void set_rnpDRX_CycleLengthCoefficient(rnpDRX_CycleLengthCoefficient &);
    rnpDRX_CycleLengthCoefficient *get_rnpDRX_CycleLengthCoefficient() const;
    void set_rnpEARFCN_Extended(rnpEARFCN_Extended &);
    rnpEARFCN_Extended *get_rnpEARFCN_Extended() const;
    void set_rnpE_DCH_MAC_d_Flow_ID(rnpE_DCH_MAC_d_Flow_ID &);
    rnpE_DCH_MAC_d_Flow_ID *get_rnpE_DCH_MAC_d_Flow_ID() const;
    void set_rnpEncryptionInformation(rnpEncryptionInformation &);
    rnpEncryptionInformation *get_rnpEncryptionInformation() const;
    void set_rnpEncryptionKey(rnpEncryptionKey &);
    rnpEncryptionKey *get_rnpEncryptionKey() const;
    void set_rnpEnd_Of_CSFB(rnpEnd_Of_CSFB &);
    rnpEnd_Of_CSFB *get_rnpEnd_Of_CSFB() const;
    void set_rnpE_UTRAN_Service_Handover(rnpE_UTRAN_Service_Handover &);
    rnpE_UTRAN_Service_Handover *get_rnpE_UTRAN_Service_Handover() const;
    void set_rnpExtendedRNC_ID(rnpExtendedRNC_ID &);
    rnpExtendedRNC_ID *get_rnpExtendedRNC_ID() const;
    void set_rnpFrequenceLayerConvergenceFlag(rnpFrequenceLayerConvergenceFlag &);
    rnpFrequenceLayerConvergenceFlag *get_rnpFrequenceLayerConvergenceFlag() const;
    void set_rnpGANSS_PositioningDataSet(rnpGANSS_PositioningDataSet &);
    rnpGANSS_PositioningDataSet *get_rnpGANSS_PositioningDataSet() const;
    void set_rnpGERAN_BSC_Container(rnpGERAN_BSC_Container &);
    rnpGERAN_BSC_Container *get_rnpGERAN_BSC_Container() const;
    void set_rnpGERAN_Classmark(rnpGERAN_Classmark &);
    rnpGERAN_Classmark *get_rnpGERAN_Classmark() const;
    void set_rnpGlobalCN_ID(rnpGlobalCN_ID &);
    rnpGlobalCN_ID *get_rnpGlobalCN_ID() const;
    void set_rnpGlobalRNC_ID(rnpGlobalRNC_ID &);
    rnpGlobalRNC_ID *get_rnpGlobalRNC_ID() const;
    void set_rnpHigherBitratesThan16MbpsFlag(rnpHigherBitratesThan16MbpsFlag &);
    rnpHigherBitratesThan16MbpsFlag *get_rnpHigherBitratesThan16MbpsFlag() const;
    void set_rnpHS_DSCH_MAC_d_Flow_ID(rnpHS_DSCH_MAC_d_Flow_ID &);
    rnpHS_DSCH_MAC_d_Flow_ID *get_rnpHS_DSCH_MAC_d_Flow_ID() const;
    void set_rnpIMSI(rnpIMSI &);
    rnpIMSI *get_rnpIMSI() const;
    void set_rnpIncludeVelocity(rnpIncludeVelocity &);
    rnpIncludeVelocity *get_rnpIncludeVelocity() const;
    void set_rnpInformationExchangeID(rnpInformationExchangeID &);
    rnpInformationExchangeID *get_rnpInformationExchangeID() const;
    void set_rnpInformationExchangeType(rnpInformationExchangeType &);
    rnpInformationExchangeType *get_rnpInformationExchangeType() const;
    void set_rnpInformationRequested(rnpInformationRequested &);
    rnpInformationRequested *get_rnpInformationRequested() const;
    void set_rnpInformationRequestType(rnpInformationRequestType &);
    rnpInformationRequestType *get_rnpInformationRequestType() const;
    void set_rnpInformationTransferID(rnpInformationTransferID &);
    rnpInformationTransferID *get_rnpInformationTransferID() const;
    void set_rnpInformationTransferType(rnpInformationTransferType &);
    rnpInformationTransferType *get_rnpInformationTransferType() const;
    void set_rnpIntegrityProtectionInformation(rnpIntegrityProtectionInformation &);
    rnpIntegrityProtectionInformation *get_rnpIntegrityProtectionInformation() const;
    void set_rnpIntegrityProtectionKey(rnpIntegrityProtectionKey &);
    rnpIntegrityProtectionKey *get_rnpIntegrityProtectionKey() const;
    void set_rnpInterSystemInformationTransferType(rnpInterSystemInformationTransferType &);
    rnpInterSystemInformationTransferType *get_rnpInterSystemInformationTransferType() const;
    void set_rnpInterSystemInformation_TransparentContainer(rnpInterSystemInformation_TransparentContainer &);
    rnpInterSystemInformation_TransparentContainer *get_rnpInterSystemInformation_TransparentContainer() const;
    void set_rnpIPMulticastAddress(rnpIPMulticastAddress &);
    rnpIPMulticastAddress *get_rnpIPMulticastAddress() const;
    void set_rnpIuSignallingConnectionIdentifier(rnpIuSignallingConnectionIdentifier &);
    rnpIuSignallingConnectionIdentifier *get_rnpIuSignallingConnectionIdentifier() const;
    void set_rnpIuTransportAssociation(rnpIuTransportAssociation &);
    rnpIuTransportAssociation *get_rnpIuTransportAssociation() const;
    void set_rnpKeyStatus(rnpKeyStatus &);
    rnpKeyStatus *get_rnpKeyStatus() const;
    void set_rnpLAI(rnpLAI &);
    rnpLAI *get_rnpLAI() const;
    void set_rnpLastKnownServiceArea(rnpLastKnownServiceArea &);
    rnpLastKnownServiceArea *get_rnpLastKnownServiceArea() const;
    void set_rnpLHN_ID(rnpLHN_ID &);
    rnpLHN_ID *get_rnpLHN_ID() const;
    void set_rnpLocationRelatedDataRequestType(rnpLocationRelatedDataRequestType &);
    rnpLocationRelatedDataRequestType *get_rnpLocationRelatedDataRequestType() const;
    void set_rnpLocationRelatedDataRequestTypeSpecificToGERANIuMode(rnpLocationRelatedDataRequestTypeSpecificToGERANIuMode &);
    rnpLocationRelatedDataRequestTypeSpecificToGERANIuMode *get_rnpLocationRelatedDataRequestTypeSpecificToGERANIuMode() const;
    void set_rnpL3_Information(rnpL3_Information &);
    rnpL3_Information *get_rnpL3_Information() const;
    void set_rnpM4Report(rnpM4Report &);
    rnpM4Report *get_rnpM4Report() const;
    void set_rnpM5Report(rnpM5Report &);
    rnpM5Report *get_rnpM5Report() const;
    void set_rnpM6Report(rnpM6Report &);
    rnpM6Report *get_rnpM6Report() const;
    void set_rnpM7Report(rnpM7Report &);
    rnpM7Report *get_rnpM7Report() const;
    void set_rnpManagement_Based_MDT_Allowed(rnpManagement_Based_MDT_Allowed &);
    rnpManagement_Based_MDT_Allowed *get_rnpManagement_Based_MDT_Allowed() const;
    void set_rnpMBMSBearerServiceType(rnpMBMSBearerServiceType &);
    rnpMBMSBearerServiceType *get_rnpMBMSBearerServiceType() const;
    void set_rnpMBMSCNDe_Registration(rnpMBMSCNDe_Registration &);
    rnpMBMSCNDe_Registration *get_rnpMBMSCNDe_Registration() const;
    void set_rnpMBMSCountingInformation(rnpMBMSCountingInformation &);
    rnpMBMSCountingInformation *get_rnpMBMSCountingInformation() const;
    void set_rnpMBMSLinkingInformation(rnpMBMSLinkingInformation &);
    rnpMBMSLinkingInformation *get_rnpMBMSLinkingInformation() const;
    void set_rnpMBMSRegistrationRequestType(rnpMBMSRegistrationRequestType &);
    rnpMBMSRegistrationRequestType *get_rnpMBMSRegistrationRequestType() const;
    void set_rnpMBMSServiceArea(rnpMBMSServiceArea &);
    rnpMBMSServiceArea *get_rnpMBMSServiceArea() const;
    void set_rnpMBMSSessionDuration(rnpMBMSSessionDuration &);
    rnpMBMSSessionDuration *get_rnpMBMSSessionDuration() const;
    void set_rnpMBMSSessionIdentity(rnpMBMSSessionIdentity &);
    rnpMBMSSessionIdentity *get_rnpMBMSSessionIdentity() const;
    void set_rnpMBMSSessionRepetitionNumber(rnpMBMSSessionRepetitionNumber &);
    rnpMBMSSessionRepetitionNumber *get_rnpMBMSSessionRepetitionNumber() const;
    void set_rnpMDT_Configuration(rnpMDT_Configuration &);
    rnpMDT_Configuration *get_rnpMDT_Configuration() const;
    void set_rnpMDT_PLMN_List(rnpMDT_PLMN_List &);
    rnpMDT_PLMN_List *get_rnpMDT_PLMN_List() const;
    void set_rnpMSISDN(rnpMSISDN &);
    rnpMSISDN *get_rnpMSISDN() const;
    void set_rnpNAS_PDU(rnpNAS_PDU &);
    rnpNAS_PDU *get_rnpNAS_PDU() const;
    void set_rnpNAS_SequenceNumber(rnpNAS_SequenceNumber &);
    rnpNAS_SequenceNumber *get_rnpNAS_SequenceNumber() const;
    void set_rnpNewBSS_To_OldBSS_Information(rnpNewBSS_To_OldBSS_Information &);
    rnpNewBSS_To_OldBSS_Information *get_rnpNewBSS_To_OldBSS_Information() const;
    void set_rnpNonSearchingIndication(rnpNonSearchingIndication &);
    rnpNonSearchingIndication *get_rnpNonSearchingIndication() const;
    void set_rnpNumberOfSteps(rnpNumberOfSteps &);
    rnpNumberOfSteps *get_rnpNumberOfSteps() const;
    void set_rnpOffload_RAB_Parameters(rnpOffload_RAB_Parameters &);
    rnpOffload_RAB_Parameters *get_rnpOffload_RAB_Parameters() const;
    void set_rnpOldBSS_ToNewBSS_Information(rnpOldBSS_ToNewBSS_Information &);
    rnpOldBSS_ToNewBSS_Information *get_rnpOldBSS_ToNewBSS_Information() const;
    void set_rnpOMC_ID(rnpOMC_ID &);
    rnpOMC_ID *get_rnpOMC_ID() const;
    void set_rnpOut_Of_UTRAN(rnpOut_Of_UTRAN &);
    rnpOut_Of_UTRAN *get_rnpOut_Of_UTRAN() const;
    void set_rnpPagingAreaID(rnpPagingAreaID &);
    rnpPagingAreaID *get_rnpPagingAreaID() const;
    void set_rnpPagingCause(rnpPagingCause &);
    rnpPagingCause *get_rnpPagingCause() const;
    void set_rnpPDP_TypeInformation(rnpPDP_TypeInformation &);
    rnpPDP_TypeInformation *get_rnpPDP_TypeInformation() const;
    void set_rnpPDP_TypeInformation_extension(rnpPDP_TypeInformation_extension &);
    rnpPDP_TypeInformation_extension *get_rnpPDP_TypeInformation_extension() const;
    void set_rnpPeriodicLocationInfo(rnpPeriodicLocationInfo &);
    rnpPeriodicLocationInfo *get_rnpPeriodicLocationInfo() const;
    void set_rnpPermanentNAS_UE_ID(rnpPermanentNAS_UE_ID &);
    rnpPermanentNAS_UE_ID *get_rnpPermanentNAS_UE_ID() const;
    void set_rnpPLMNidentity(rnpPLMNidentity &);
    rnpPLMNidentity *get_rnpPLMNidentity() const;
    void set_rnpPositioningPriority(rnpPositioningPriority &);
    rnpPositioningPriority *get_rnpPositioningPriority() const;
    void set_rnpPositionData(rnpPositionData &);
    rnpPositionData *get_rnpPositionData() const;
    void set_rnpPositionDataSpecificToGERANIuMode(rnpPositionDataSpecificToGERANIuMode &);
    rnpPositionDataSpecificToGERANIuMode *get_rnpPositionDataSpecificToGERANIuMode() const;
    void set_rnpPriority_Class_Indicator(rnpPriority_Class_Indicator &);
    rnpPriority_Class_Indicator *get_rnpPriority_Class_Indicator() const;
    void set_rnpProvidedData(rnpProvidedData &);
    rnpProvidedData *get_rnpProvidedData() const;
    void set_rnpRAB_ID(rnpRAB_ID &);
    rnpRAB_ID *get_rnpRAB_ID() const;
    void set_rnpRAB_Parameter_ExtendedGuaranteedBitrateList(rnpRAB_Parameter_ExtendedGuaranteedBitrateList &);
    rnpRAB_Parameter_ExtendedGuaranteedBitrateList *get_rnpRAB_Parameter_ExtendedGuaranteedBitrateList() const;
    void set_rnpRAB_Parameter_ExtendedMaxBitrateList(rnpRAB_Parameter_ExtendedMaxBitrateList &);
    rnpRAB_Parameter_ExtendedMaxBitrateList *get_rnpRAB_Parameter_ExtendedMaxBitrateList() const;
    void set_rnpRAB_Parameters(rnpRAB_Parameters &);
    rnpRAB_Parameters *get_rnpRAB_Parameters() const;
    void set_rnpRABParametersList(rnpRABParametersList &);
    rnpRABParametersList *get_rnpRABParametersList() const;
    void set_rnpRAC(rnpRAC &);
    rnpRAC *get_rnpRAC() const;
    void set_rnpRAListofIdleModeUEs(rnpRAListofIdleModeUEs &);
    rnpRAListofIdleModeUEs *get_rnpRAListofIdleModeUEs() const;
    void set_rnpLAListofIdleModeUEs(rnpLAListofIdleModeUEs &);
    rnpLAListofIdleModeUEs *get_rnpLAListofIdleModeUEs() const;
    void set_rnpRAT_Type(rnpRAT_Type &);
    rnpRAT_Type *get_rnpRAT_Type() const;
    void set_rnpRedirectAttemptFlag(rnpRedirectAttemptFlag &);
    rnpRedirectAttemptFlag *get_rnpRedirectAttemptFlag() const;
    void set_rnpRedirectionCompleted(rnpRedirectionCompleted &);
    rnpRedirectionCompleted *get_rnpRedirectionCompleted() const;
    void set_rnpRejectCauseValue(rnpRejectCauseValue &);
    rnpRejectCauseValue *get_rnpRejectCauseValue() const;
    void set_rnpRelocationType(rnpRelocationType &);
    rnpRelocationType *get_rnpRelocationType() const;
    void set_rnpRequestedGANSSAssistanceData(rnpRequestedGANSSAssistanceData &);
    rnpRequestedGANSSAssistanceData *get_rnpRequestedGANSSAssistanceData() const;
    void set_rnpRequested_RAB_Parameter_ExtendedMaxBitrateList(rnpRequested_RAB_Parameter_ExtendedMaxBitrateList &);
    rnpRequested_RAB_Parameter_ExtendedMaxBitrateList *get_rnpRequested_RAB_Parameter_ExtendedMaxBitrateList() const;
    void set_rnpRequested_RAB_Parameter_ExtendedGuaranteedBitrateList(rnpRequested_RAB_Parameter_ExtendedGuaranteedBitrateList &);
    rnpRequested_RAB_Parameter_ExtendedGuaranteedBitrateList *get_rnpRequested_RAB_Parameter_ExtendedGuaranteedBitrateList() const;
    void set_rnpRequestType(rnpRequestType &);
    rnpRequestType *get_rnpRequestType() const;
    void set_rnpResponseTime(rnpResponseTime &);
    rnpResponseTime *get_rnpResponseTime() const;
    void set_rnpRNSAPRelocationParameters(rnpRNSAPRelocationParameters &);
    rnpRNSAPRelocationParameters *get_rnpRNSAPRelocationParameters() const;
    void set_rnpRRC_Container(rnpRRC_Container &);
    rnpRRC_Container *get_rnpRRC_Container() const;
    void set_rnpRSRVCC_HO_Indication(rnpRSRVCC_HO_Indication &);
    rnpRSRVCC_HO_Indication *get_rnpRSRVCC_HO_Indication() const;
    void set_rnpRSRVCC_Information(rnpRSRVCC_Information &);
    rnpRSRVCC_Information *get_rnpRSRVCC_Information() const;
    void set_rnpRSRVCC_Operation_Possible(rnpRSRVCC_Operation_Possible &);
    rnpRSRVCC_Operation_Possible *get_rnpRSRVCC_Operation_Possible() const;
    void set_rnpSAI(rnpSAI &);
    rnpSAI *get_rnpSAI() const;
    void set_rnpSAPI(rnpSAPI &);
    rnpSAPI *get_rnpSAPI() const;
    void set_rnpSessionUpdateID(rnpSessionUpdateID &);
    rnpSessionUpdateID *get_rnpSessionUpdateID() const;
    void set_rnpSession_Re_establishment_Indicator(rnpSession_Re_establishment_Indicator &);
    rnpSession_Re_establishment_Indicator *get_rnpSession_Re_establishment_Indicator() const;
    void set_rnpSignallingIndication(rnpSignallingIndication &);
    rnpSignallingIndication *get_rnpSignallingIndication() const;
    void set_rnpSNA_Access_Information(rnpSNA_Access_Information &);
    rnpSNA_Access_Information *get_rnpSNA_Access_Information() const;
    void set_rnpSource_ToTarget_TransparentContainer(rnpSource_ToTarget_TransparentContainer &);
    rnpSource_ToTarget_TransparentContainer *get_rnpSource_ToTarget_TransparentContainer() const;
    void set_rnpSourceBSS_ToTargetBSS_TransparentContainer(rnpSourceBSS_ToTargetBSS_TransparentContainer &);
    rnpSourceBSS_ToTargetBSS_TransparentContainer *get_rnpSourceBSS_ToTargetBSS_TransparentContainer() const;
    void set_rnpSourceID(rnpSourceID &);
    rnpSourceID *get_rnpSourceID() const;
    void set_rnpSourceRNC_ToTargetRNC_TransparentContainer(rnpSourceRNC_ToTargetRNC_TransparentContainer &);
    rnpSourceRNC_ToTargetRNC_TransparentContainer *get_rnpSourceRNC_ToTargetRNC_TransparentContainer() const;
    void set_rnpIRAT_Measurement_Configuration(rnpIRAT_Measurement_Configuration &);
    rnpIRAT_Measurement_Configuration *get_rnpIRAT_Measurement_Configuration() const;
    void set_rnpRSRQ_Type(rnpRSRQ_Type &);
    rnpRSRQ_Type *get_rnpRSRQ_Type() const;
    void set_rnpRSRQ_Extension(rnpRSRQ_Extension &);
    rnpRSRQ_Extension *get_rnpRSRQ_Extension() const;
    void set_rnpSubscriberProfileIDforRFP(rnpSubscriberProfileIDforRFP &);
    rnpSubscriberProfileIDforRFP *get_rnpSubscriberProfileIDforRFP() const;
    void set_rnpSupportedRAB_ParameterBitrateList(rnpSupportedRAB_ParameterBitrateList &);
    rnpSupportedRAB_ParameterBitrateList *get_rnpSupportedRAB_ParameterBitrateList() const;
    void set_rnpSRB_TrCH_Mapping(rnpSRB_TrCH_Mapping &);
    rnpSRB_TrCH_Mapping *get_rnpSRB_TrCH_Mapping() const;
    void set_rnpSRVCC_HO_Indication(rnpSRVCC_HO_Indication &);
    rnpSRVCC_HO_Indication *get_rnpSRVCC_HO_Indication() const;
    void set_rnpSRVCC_Information(rnpSRVCC_Information &);
    rnpSRVCC_Information *get_rnpSRVCC_Information() const;
    void set_rnpSRVCC_Operation_Possible(rnpSRVCC_Operation_Possible &);
    rnpSRVCC_Operation_Possible *get_rnpSRVCC_Operation_Possible() const;
    void set_rnpTarget_ToSource_TransparentContainer(rnpTarget_ToSource_TransparentContainer &);
    rnpTarget_ToSource_TransparentContainer *get_rnpTarget_ToSource_TransparentContainer() const;
    void set_rnpTargetBSS_ToSourceBSS_TransparentContainer(rnpTargetBSS_ToSourceBSS_TransparentContainer &);
    rnpTargetBSS_ToSourceBSS_TransparentContainer *get_rnpTargetBSS_ToSourceBSS_TransparentContainer() const;
    void set_rnpTargetID(rnpTargetID &);
    rnpTargetID *get_rnpTargetID() const;
    void set_rnpTargetRNC_ToSourceRNC_TransparentContainer(rnpTargetRNC_ToSourceRNC_TransparentContainer &);
    rnpTargetRNC_ToSourceRNC_TransparentContainer *get_rnpTargetRNC_ToSourceRNC_TransparentContainer() const;
    void set_rnpTemporaryUE_ID(rnpTemporaryUE_ID &);
    rnpTemporaryUE_ID *get_rnpTemporaryUE_ID() const;
    void set_rnpTimeToMBMSDataTransfer(rnpTimeToMBMSDataTransfer &);
    rnpTimeToMBMSDataTransfer *get_rnpTimeToMBMSDataTransfer() const;
    void set_rnpTimingDifferenceULDL(rnpTimingDifferenceULDL &);
    rnpTimingDifferenceULDL *get_rnpTimingDifferenceULDL() const;
    void set_rnpTMGI(rnpTMGI &);
    rnpTMGI *get_rnpTMGI() const;
    void set_rnpTracePropagationParameters(rnpTracePropagationParameters &);
    rnpTracePropagationParameters *get_rnpTracePropagationParameters() const;
    void set_rnpTraceRecordingSessionInformation(rnpTraceRecordingSessionInformation &);
    rnpTraceRecordingSessionInformation *get_rnpTraceRecordingSessionInformation() const;
    void set_rnpTraceRecordingSessionReference(rnpTraceRecordingSessionReference &);
    rnpTraceRecordingSessionReference *get_rnpTraceRecordingSessionReference() const;
    void set_rnpTraceReference(rnpTraceReference &);
    rnpTraceReference *get_rnpTraceReference() const;
    void set_rnpTraceType(rnpTraceType &);
    rnpTraceType *get_rnpTraceType() const;
    void set_rnpTransportLayerAddress(rnpTransportLayerAddress &);
    rnpTransportLayerAddress *get_rnpTransportLayerAddress() const;
    void set_rnpTriggerID(rnpTriggerID &);
    rnpTriggerID *get_rnpTriggerID() const;
    void set_rnpTunnelInformation(rnpTunnelInformation &);
    rnpTunnelInformation *get_rnpTunnelInformation() const;
    void set_rnpTypeOfError(rnpTypeOfError &);
    rnpTypeOfError *get_rnpTypeOfError() const;
    void set_rnpUE_AggregateMaximumBitRate(rnpUE_AggregateMaximumBitRate &);
    rnpUE_AggregateMaximumBitRate *get_rnpUE_AggregateMaximumBitRate() const;
    void set_rnpUE_History_Information(rnpUE_History_Information &);
    rnpUE_History_Information *get_rnpUE_History_Information() const;
    void set_rnpUE_ID(rnpUE_ID &);
    rnpUE_ID *get_rnpUE_ID() const;
    void set_rnpUESBI_Iu(rnpUESBI_Iu &);
    rnpUESBI_Iu *get_rnpUESBI_Iu() const;
    void set_rnpUTRAN_CellID(rnpUTRAN_CellID &);
    rnpUTRAN_CellID *get_rnpUTRAN_CellID() const;
    void set_rnpVelocityEstimate(rnpVelocityEstimate &);
    rnpVelocityEstimate *get_rnpVelocityEstimate() const;
    void set_rnpVerticalAccuracyCode(rnpVerticalAccuracyCode &);
    rnpVerticalAccuracyCode *get_rnpVerticalAccuracyCode() const;
    void set_rnpVoiceSupportMatchIndicator(rnpVoiceSupportMatchIndicator &);
    rnpVoiceSupportMatchIndicator *get_rnpVoiceSupportMatchIndicator() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_rnpRANAP_PDU(const rnpRANAP_PDU &);
    const rnpRANAP_PDU *get_const_rnpRANAP_PDU() const;
    void set_const_rnpIu_ReleaseCommand(const rnpIu_ReleaseCommand &);
    const rnpIu_ReleaseCommand *get_const_rnpIu_ReleaseCommand() const;
    void set_const_rnpIu_ReleaseComplete(const rnpIu_ReleaseComplete &);
    const rnpIu_ReleaseComplete *get_const_rnpIu_ReleaseComplete() const;
    void set_const_rnpRAB_DataVolumeReportList(const rnpRAB_DataVolumeReportList &);
    const rnpRAB_DataVolumeReportList *get_const_rnpRAB_DataVolumeReportList() const;
    void set_const_rnpRAB_DataVolumeReportItem(const rnpRAB_DataVolumeReportItem &);
    const rnpRAB_DataVolumeReportItem *get_const_rnpRAB_DataVolumeReportItem() const;
    void set_const_rnpRAB_ReleasedList_IuRelComp(const rnpRAB_ReleasedList_IuRelComp &);
    const rnpRAB_ReleasedList_IuRelComp *get_const_rnpRAB_ReleasedList_IuRelComp() const;
    void set_const_rnpRAB_ReleasedItem_IuRelComp(const rnpRAB_ReleasedItem_IuRelComp &);
    const rnpRAB_ReleasedItem_IuRelComp *get_const_rnpRAB_ReleasedItem_IuRelComp() const;
    void set_const_rnpRelocationRequired(const rnpRelocationRequired &);
    const rnpRelocationRequired *get_const_rnpRelocationRequired() const;
    void set_const_rnpRelocationCommand(const rnpRelocationCommand &);
    const rnpRelocationCommand *get_const_rnpRelocationCommand() const;
    void set_const_rnpRAB_RelocationReleaseList(const rnpRAB_RelocationReleaseList &);
    const rnpRAB_RelocationReleaseList *get_const_rnpRAB_RelocationReleaseList() const;
    void set_const_rnpRAB_RelocationReleaseItem(const rnpRAB_RelocationReleaseItem &);
    const rnpRAB_RelocationReleaseItem *get_const_rnpRAB_RelocationReleaseItem() const;
    void set_const_rnpRAB_DataForwardingList(const rnpRAB_DataForwardingList &);
    const rnpRAB_DataForwardingList *get_const_rnpRAB_DataForwardingList() const;
    void set_const_rnpRAB_DataForwardingItem(const rnpRAB_DataForwardingItem &);
    const rnpRAB_DataForwardingItem *get_const_rnpRAB_DataForwardingItem() const;
    void set_const_rnpRelocationPreparationFailure(const rnpRelocationPreparationFailure &);
    const rnpRelocationPreparationFailure *get_const_rnpRelocationPreparationFailure() const;
    void set_const_rnpRelocationRequest(const rnpRelocationRequest &);
    const rnpRelocationRequest *get_const_rnpRelocationRequest() const;
    void set_const_rnpRAB_SetupList_RelocReq(const rnpRAB_SetupList_RelocReq &);
    const rnpRAB_SetupList_RelocReq *get_const_rnpRAB_SetupList_RelocReq() const;
    void set_const_rnpRAB_SetupItem_RelocReq(const rnpRAB_SetupItem_RelocReq &);
    const rnpRAB_SetupItem_RelocReq *get_const_rnpRAB_SetupItem_RelocReq() const;
    void set_const_rnpCNMBMSLinkingInformation(const rnpCNMBMSLinkingInformation &);
    const rnpCNMBMSLinkingInformation *get_const_rnpCNMBMSLinkingInformation() const;
    void set_const_rnpJoinedMBMSBearerService_IEs(const rnpJoinedMBMSBearerService_IEs &);
    const rnpJoinedMBMSBearerService_IEs *get_const_rnpJoinedMBMSBearerService_IEs() const;
    void set_const_rnpRelocationRequestAcknowledge(const rnpRelocationRequestAcknowledge &);
    const rnpRelocationRequestAcknowledge *get_const_rnpRelocationRequestAcknowledge() const;
    void set_const_rnpRAB_SetupList_RelocReqAck(const rnpRAB_SetupList_RelocReqAck &);
    const rnpRAB_SetupList_RelocReqAck *get_const_rnpRAB_SetupList_RelocReqAck() const;
    void set_const_rnpRAB_SetupItem_RelocReqAck(const rnpRAB_SetupItem_RelocReqAck &);
    const rnpRAB_SetupItem_RelocReqAck *get_const_rnpRAB_SetupItem_RelocReqAck() const;
    void set_const_rnpRAB_FailedList(const rnpRAB_FailedList &);
    const rnpRAB_FailedList *get_const_rnpRAB_FailedList() const;
    void set_const_rnpRAB_FailedItem(const rnpRAB_FailedItem &);
    const rnpRAB_FailedItem *get_const_rnpRAB_FailedItem() const;
    void set_const_rnpRelocationFailure(const rnpRelocationFailure &);
    const rnpRelocationFailure *get_const_rnpRelocationFailure() const;
    void set_const_rnpRelocationCancel(const rnpRelocationCancel &);
    const rnpRelocationCancel *get_const_rnpRelocationCancel() const;
    void set_const_rnpRelocationCancelAcknowledge(const rnpRelocationCancelAcknowledge &);
    const rnpRelocationCancelAcknowledge *get_const_rnpRelocationCancelAcknowledge() const;
    void set_const_rnpSRNS_ContextRequest(const rnpSRNS_ContextRequest &);
    const rnpSRNS_ContextRequest *get_const_rnpSRNS_ContextRequest() const;
    void set_const_rnpRAB_DataForwardingList_SRNS_CtxReq(const rnpRAB_DataForwardingList_SRNS_CtxReq &);
    const rnpRAB_DataForwardingList_SRNS_CtxReq *get_const_rnpRAB_DataForwardingList_SRNS_CtxReq() const;
    void set_const_rnpRAB_DataForwardingItem_SRNS_CtxReq(const rnpRAB_DataForwardingItem_SRNS_CtxReq &);
    const rnpRAB_DataForwardingItem_SRNS_CtxReq *get_const_rnpRAB_DataForwardingItem_SRNS_CtxReq() const;
    void set_const_rnpSRNS_ContextResponse(const rnpSRNS_ContextResponse &);
    const rnpSRNS_ContextResponse *get_const_rnpSRNS_ContextResponse() const;
    void set_const_rnpRAB_ContextList(const rnpRAB_ContextList &);
    const rnpRAB_ContextList *get_const_rnpRAB_ContextList() const;
    void set_const_rnpRAB_ContextItem(const rnpRAB_ContextItem &);
    const rnpRAB_ContextItem *get_const_rnpRAB_ContextItem() const;
    void set_const_rnpRAB_ContextFailedtoTransferList(const rnpRAB_ContextFailedtoTransferList &);
    const rnpRAB_ContextFailedtoTransferList *get_const_rnpRAB_ContextFailedtoTransferList() const;
    void set_const_rnpRABs_ContextFailedtoTransferItem(const rnpRABs_ContextFailedtoTransferItem &);
    const rnpRABs_ContextFailedtoTransferItem *get_const_rnpRABs_ContextFailedtoTransferItem() const;
    void set_const_rnpSecurityModeCommand(const rnpSecurityModeCommand &);
    const rnpSecurityModeCommand *get_const_rnpSecurityModeCommand() const;
    void set_const_rnpSecurityModeComplete(const rnpSecurityModeComplete &);
    const rnpSecurityModeComplete *get_const_rnpSecurityModeComplete() const;
    void set_const_rnpSecurityModeReject(const rnpSecurityModeReject &);
    const rnpSecurityModeReject *get_const_rnpSecurityModeReject() const;
    void set_const_rnpDataVolumeReportRequest(const rnpDataVolumeReportRequest &);
    const rnpDataVolumeReportRequest *get_const_rnpDataVolumeReportRequest() const;
    void set_const_rnpRAB_DataVolumeReportRequestList(const rnpRAB_DataVolumeReportRequestList &);
    const rnpRAB_DataVolumeReportRequestList *get_const_rnpRAB_DataVolumeReportRequestList() const;
    void set_const_rnpRAB_DataVolumeReportRequestItem(const rnpRAB_DataVolumeReportRequestItem &);
    const rnpRAB_DataVolumeReportRequestItem *get_const_rnpRAB_DataVolumeReportRequestItem() const;
    void set_const_rnpDataVolumeReport(const rnpDataVolumeReport &);
    const rnpDataVolumeReport *get_const_rnpDataVolumeReport() const;
    void set_const_rnpRAB_FailedtoReportList(const rnpRAB_FailedtoReportList &);
    const rnpRAB_FailedtoReportList *get_const_rnpRAB_FailedtoReportList() const;
    void set_const_rnpRABs_failed_to_reportItem(const rnpRABs_failed_to_reportItem &);
    const rnpRABs_failed_to_reportItem *get_const_rnpRABs_failed_to_reportItem() const;
    void set_const_rnpReset(const rnpReset &);
    const rnpReset *get_const_rnpReset() const;
    void set_const_rnpResetAcknowledge(const rnpResetAcknowledge &);
    const rnpResetAcknowledge *get_const_rnpResetAcknowledge() const;
    void set_const_rnpResetResource(const rnpResetResource &);
    const rnpResetResource *get_const_rnpResetResource() const;
    void set_const_rnpResetResourceList(const rnpResetResourceList &);
    const rnpResetResourceList *get_const_rnpResetResourceList() const;
    void set_const_rnpResetResourceItem(const rnpResetResourceItem &);
    const rnpResetResourceItem *get_const_rnpResetResourceItem() const;
    void set_const_rnpResetResourceAcknowledge(const rnpResetResourceAcknowledge &);
    const rnpResetResourceAcknowledge *get_const_rnpResetResourceAcknowledge() const;
    void set_const_rnpResetResourceAckList(const rnpResetResourceAckList &);
    const rnpResetResourceAckList *get_const_rnpResetResourceAckList() const;
    void set_const_rnpResetResourceAckItem(const rnpResetResourceAckItem &);
    const rnpResetResourceAckItem *get_const_rnpResetResourceAckItem() const;
    void set_const_rnpRAB_ReleaseRequest(const rnpRAB_ReleaseRequest &);
    const rnpRAB_ReleaseRequest *get_const_rnpRAB_ReleaseRequest() const;
    void set_const_rnpRAB_ReleaseList(const rnpRAB_ReleaseList &);
    const rnpRAB_ReleaseList *get_const_rnpRAB_ReleaseList() const;
    void set_const_rnpRAB_ReleaseItem(const rnpRAB_ReleaseItem &);
    const rnpRAB_ReleaseItem *get_const_rnpRAB_ReleaseItem() const;
    void set_const_rnpIu_ReleaseRequest(const rnpIu_ReleaseRequest &);
    const rnpIu_ReleaseRequest *get_const_rnpIu_ReleaseRequest() const;
    void set_const_rnpRelocationDetect(const rnpRelocationDetect &);
    const rnpRelocationDetect *get_const_rnpRelocationDetect() const;
    void set_const_rnpRelocationComplete(const rnpRelocationComplete &);
    const rnpRelocationComplete *get_const_rnpRelocationComplete() const;
    void set_const_rnpEnhancedRelocationCompleteRequest(const rnpEnhancedRelocationCompleteRequest &);
    const rnpEnhancedRelocationCompleteRequest *get_const_rnpEnhancedRelocationCompleteRequest() const;
    void set_const_rnpRAB_SetupList_EnhancedRelocCompleteReq(const rnpRAB_SetupList_EnhancedRelocCompleteReq &);
    const rnpRAB_SetupList_EnhancedRelocCompleteReq *get_const_rnpRAB_SetupList_EnhancedRelocCompleteReq() const;
    void set_const_rnpRAB_SetupItem_EnhancedRelocCompleteReq(const rnpRAB_SetupItem_EnhancedRelocCompleteReq &);
    const rnpRAB_SetupItem_EnhancedRelocCompleteReq *get_const_rnpRAB_SetupItem_EnhancedRelocCompleteReq() const;
    void set_const_rnpEnhancedRelocationCompleteResponse(const rnpEnhancedRelocationCompleteResponse &);
    const rnpEnhancedRelocationCompleteResponse *get_const_rnpEnhancedRelocationCompleteResponse() const;
    void set_const_rnpRAB_SetupList_EnhancedRelocCompleteRes(const rnpRAB_SetupList_EnhancedRelocCompleteRes &);
    const rnpRAB_SetupList_EnhancedRelocCompleteRes *get_const_rnpRAB_SetupList_EnhancedRelocCompleteRes() const;
    void set_const_rnpRAB_SetupItem_EnhancedRelocCompleteRes(const rnpRAB_SetupItem_EnhancedRelocCompleteRes &);
    const rnpRAB_SetupItem_EnhancedRelocCompleteRes *get_const_rnpRAB_SetupItem_EnhancedRelocCompleteRes() const;
    void set_const_rnpRAB_ToBeReleasedList_EnhancedRelocCompleteRes(const rnpRAB_ToBeReleasedList_EnhancedRelocCompleteRes &);
    const rnpRAB_ToBeReleasedList_EnhancedRelocCompleteRes *get_const_rnpRAB_ToBeReleasedList_EnhancedRelocCompleteRes() const;
    void set_const_rnpRAB_ToBeReleasedItem_EnhancedRelocCompleteRes(const rnpRAB_ToBeReleasedItem_EnhancedRelocCompleteRes &);
    const rnpRAB_ToBeReleasedItem_EnhancedRelocCompleteRes *get_const_rnpRAB_ToBeReleasedItem_EnhancedRelocCompleteRes() const;
    void set_const_rnpEnhancedRelocationCompleteFailure(const rnpEnhancedRelocationCompleteFailure &);
    const rnpEnhancedRelocationCompleteFailure *get_const_rnpEnhancedRelocationCompleteFailure() const;
    void set_const_rnpEnhancedRelocationCompleteConfirm(const rnpEnhancedRelocationCompleteConfirm &);
    const rnpEnhancedRelocationCompleteConfirm *get_const_rnpEnhancedRelocationCompleteConfirm() const;
    void set_const_rnpPaging(const rnpPaging &);
    const rnpPaging *get_const_rnpPaging() const;
    void set_const_rnpCommonID(const rnpCommonID &);
    const rnpCommonID *get_const_rnpCommonID() const;
    void set_const_rnpCN_InvokeTrace(const rnpCN_InvokeTrace &);
    const rnpCN_InvokeTrace *get_const_rnpCN_InvokeTrace() const;
    void set_const_rnpCN_DeactivateTrace(const rnpCN_DeactivateTrace &);
    const rnpCN_DeactivateTrace *get_const_rnpCN_DeactivateTrace() const;
    void set_const_rnpLocationReportingControl(const rnpLocationReportingControl &);
    const rnpLocationReportingControl *get_const_rnpLocationReportingControl() const;
    void set_const_rnpLocationReport(const rnpLocationReport &);
    const rnpLocationReport *get_const_rnpLocationReport() const;
    void set_const_rnpInitialUE_Message(const rnpInitialUE_Message &);
    const rnpInitialUE_Message *get_const_rnpInitialUE_Message() const;
    void set_const_rnpDirectTransfer(const rnpDirectTransfer &);
    const rnpDirectTransfer *get_const_rnpDirectTransfer() const;
    void set_const_rnpRedirectionIndication(const rnpRedirectionIndication &);
    const rnpRedirectionIndication *get_const_rnpRedirectionIndication() const;
    void set_const_rnpOverload(const rnpOverload &);
    const rnpOverload *get_const_rnpOverload() const;
    void set_const_rnpErrorIndication(const rnpErrorIndication &);
    const rnpErrorIndication *get_const_rnpErrorIndication() const;
    void set_const_rnpSRNS_DataForwardCommand(const rnpSRNS_DataForwardCommand &);
    const rnpSRNS_DataForwardCommand *get_const_rnpSRNS_DataForwardCommand() const;
    void set_const_rnpForwardSRNS_Context(const rnpForwardSRNS_Context &);
    const rnpForwardSRNS_Context *get_const_rnpForwardSRNS_Context() const;
    void set_const_rnpRAB_AssignmentRequest(const rnpRAB_AssignmentRequest &);
    const rnpRAB_AssignmentRequest *get_const_rnpRAB_AssignmentRequest() const;
    void set_const_rnpRAB_SetupOrModifyList(const rnpRAB_SetupOrModifyList &);
    const rnpRAB_SetupOrModifyList *get_const_rnpRAB_SetupOrModifyList() const;
    void set_const_rnpRAB_SetupOrModifyItemFirst(const rnpRAB_SetupOrModifyItemFirst &);
    const rnpRAB_SetupOrModifyItemFirst *get_const_rnpRAB_SetupOrModifyItemFirst() const;
    void set_const_rnpTransportLayerInformation(const rnpTransportLayerInformation &);
    const rnpTransportLayerInformation *get_const_rnpTransportLayerInformation() const;
    void set_const_rnpRAB_SetupOrModifyItemSecond(const rnpRAB_SetupOrModifyItemSecond &);
    const rnpRAB_SetupOrModifyItemSecond *get_const_rnpRAB_SetupOrModifyItemSecond() const;
    void set_const_rnpRAB_AssignmentResponse(const rnpRAB_AssignmentResponse &);
    const rnpRAB_AssignmentResponse *get_const_rnpRAB_AssignmentResponse() const;
    void set_const_rnpRAB_SetupOrModifiedList(const rnpRAB_SetupOrModifiedList &);
    const rnpRAB_SetupOrModifiedList *get_const_rnpRAB_SetupOrModifiedList() const;
    void set_const_rnpRAB_SetupOrModifiedItem(const rnpRAB_SetupOrModifiedItem &);
    const rnpRAB_SetupOrModifiedItem *get_const_rnpRAB_SetupOrModifiedItem() const;
    void set_const_rnpRAB_ReleasedList(const rnpRAB_ReleasedList &);
    const rnpRAB_ReleasedList *get_const_rnpRAB_ReleasedList() const;
    void set_const_rnpRAB_ReleasedItem(const rnpRAB_ReleasedItem &);
    const rnpRAB_ReleasedItem *get_const_rnpRAB_ReleasedItem() const;
    void set_const_rnpRAB_QueuedList(const rnpRAB_QueuedList &);
    const rnpRAB_QueuedList *get_const_rnpRAB_QueuedList() const;
    void set_const_rnpRAB_QueuedItem(const rnpRAB_QueuedItem &);
    const rnpRAB_QueuedItem *get_const_rnpRAB_QueuedItem() const;
    void set_const_rnpRAB_ReleaseFailedList(const rnpRAB_ReleaseFailedList &);
    const rnpRAB_ReleaseFailedList *get_const_rnpRAB_ReleaseFailedList() const;
    void set_const_rnpGERAN_Iumode_RAB_FailedList_RABAssgntResponse(const rnpGERAN_Iumode_RAB_FailedList_RABAssgntResponse &);
    const rnpGERAN_Iumode_RAB_FailedList_RABAssgntResponse *get_const_rnpGERAN_Iumode_RAB_FailedList_RABAssgntResponse() const;
    void set_const_rnpGERAN_Iumode_RAB_Failed_RABAssgntResponse_Item(const rnpGERAN_Iumode_RAB_Failed_RABAssgntResponse_Item &);
    const rnpGERAN_Iumode_RAB_Failed_RABAssgntResponse_Item *get_const_rnpGERAN_Iumode_RAB_Failed_RABAssgntResponse_Item() const;
    void set_const_rnpPrivateMessage(const rnpPrivateMessage &);
    const rnpPrivateMessage *get_const_rnpPrivateMessage() const;
    void set_const_rnpRANAP_RelocationInformation(const rnpRANAP_RelocationInformation &);
    const rnpRANAP_RelocationInformation *get_const_rnpRANAP_RelocationInformation() const;
    void set_const_rnpDirectTransferInformationList_RANAP_RelocInf(const rnpDirectTransferInformationList_RANAP_RelocInf &);
    const rnpDirectTransferInformationList_RANAP_RelocInf *get_const_rnpDirectTransferInformationList_RANAP_RelocInf() const;
    void set_const_rnpDirectTransferInformationItem_RANAP_RelocInf(const rnpDirectTransferInformationItem_RANAP_RelocInf &);
    const rnpDirectTransferInformationItem_RANAP_RelocInf *get_const_rnpDirectTransferInformationItem_RANAP_RelocInf() const;
    void set_const_rnpRAB_ContextList_RANAP_RelocInf(const rnpRAB_ContextList_RANAP_RelocInf &);
    const rnpRAB_ContextList_RANAP_RelocInf *get_const_rnpRAB_ContextList_RANAP_RelocInf() const;
    void set_const_rnpRAB_ContextItem_RANAP_RelocInf(const rnpRAB_ContextItem_RANAP_RelocInf &);
    const rnpRAB_ContextItem_RANAP_RelocInf *get_const_rnpRAB_ContextItem_RANAP_RelocInf() const;
    void set_const_rnpRANAP_EnhancedRelocationInformationRequest(const rnpRANAP_EnhancedRelocationInformationRequest &);
    const rnpRANAP_EnhancedRelocationInformationRequest *get_const_rnpRANAP_EnhancedRelocationInformationRequest() const;
    void set_const_rnpRAB_SetupList_EnhRelocInfoReq(const rnpRAB_SetupList_EnhRelocInfoReq &);
    const rnpRAB_SetupList_EnhRelocInfoReq *get_const_rnpRAB_SetupList_EnhRelocInfoReq() const;
    void set_const_rnpRAB_SetupItem_EnhRelocInfoReq(const rnpRAB_SetupItem_EnhRelocInfoReq &);
    const rnpRAB_SetupItem_EnhRelocInfoReq *get_const_rnpRAB_SetupItem_EnhRelocInfoReq() const;
    void set_const_rnpRANAP_EnhancedRelocationInformationResponse(const rnpRANAP_EnhancedRelocationInformationResponse &);
    const rnpRANAP_EnhancedRelocationInformationResponse *get_const_rnpRANAP_EnhancedRelocationInformationResponse() const;
    void set_const_rnpRAB_SetupList_EnhRelocInfoRes(const rnpRAB_SetupList_EnhRelocInfoRes &);
    const rnpRAB_SetupList_EnhRelocInfoRes *get_const_rnpRAB_SetupList_EnhRelocInfoRes() const;
    void set_const_rnpRAB_SetupItem_EnhRelocInfoRes(const rnpRAB_SetupItem_EnhRelocInfoRes &);
    const rnpRAB_SetupItem_EnhRelocInfoRes *get_const_rnpRAB_SetupItem_EnhRelocInfoRes() const;
    void set_const_rnpRAB_FailedList_EnhRelocInfoRes(const rnpRAB_FailedList_EnhRelocInfoRes &);
    const rnpRAB_FailedList_EnhRelocInfoRes *get_const_rnpRAB_FailedList_EnhRelocInfoRes() const;
    void set_const_rnpRAB_FailedItem_EnhRelocInfoRes(const rnpRAB_FailedItem_EnhRelocInfoRes &);
    const rnpRAB_FailedItem_EnhRelocInfoRes *get_const_rnpRAB_FailedItem_EnhRelocInfoRes() const;
    void set_const_rnpRAB_ModifyRequest(const rnpRAB_ModifyRequest &);
    const rnpRAB_ModifyRequest *get_const_rnpRAB_ModifyRequest() const;
    void set_const_rnpRAB_ModifyList(const rnpRAB_ModifyList &);
    const rnpRAB_ModifyList *get_const_rnpRAB_ModifyList() const;
    void set_const_rnpRAB_ModifyItem(const rnpRAB_ModifyItem &);
    const rnpRAB_ModifyItem *get_const_rnpRAB_ModifyItem() const;
    void set_const_rnpLocationRelatedDataRequest(const rnpLocationRelatedDataRequest &);
    const rnpLocationRelatedDataRequest *get_const_rnpLocationRelatedDataRequest() const;
    void set_const_rnpLocationRelatedDataResponse(const rnpLocationRelatedDataResponse &);
    const rnpLocationRelatedDataResponse *get_const_rnpLocationRelatedDataResponse() const;
    void set_const_rnpLocationRelatedDataFailure(const rnpLocationRelatedDataFailure &);
    const rnpLocationRelatedDataFailure *get_const_rnpLocationRelatedDataFailure() const;
    void set_const_rnpInformationTransferIndication(const rnpInformationTransferIndication &);
    const rnpInformationTransferIndication *get_const_rnpInformationTransferIndication() const;
    void set_const_rnpInformationTransferConfirmation(const rnpInformationTransferConfirmation &);
    const rnpInformationTransferConfirmation *get_const_rnpInformationTransferConfirmation() const;
    void set_const_rnpInformationTransferFailure(const rnpInformationTransferFailure &);
    const rnpInformationTransferFailure *get_const_rnpInformationTransferFailure() const;
    void set_const_rnpUESpecificInformationIndication(const rnpUESpecificInformationIndication &);
    const rnpUESpecificInformationIndication *get_const_rnpUESpecificInformationIndication() const;
    void set_const_rnpDirectInformationTransfer(const rnpDirectInformationTransfer &);
    const rnpDirectInformationTransfer *get_const_rnpDirectInformationTransfer() const;
    void set_const_rnpUplinkInformationExchangeRequest(const rnpUplinkInformationExchangeRequest &);
    const rnpUplinkInformationExchangeRequest *get_const_rnpUplinkInformationExchangeRequest() const;
    void set_const_rnpUplinkInformationExchangeResponse(const rnpUplinkInformationExchangeResponse &);
    const rnpUplinkInformationExchangeResponse *get_const_rnpUplinkInformationExchangeResponse() const;
    void set_const_rnpUplinkInformationExchangeFailure(const rnpUplinkInformationExchangeFailure &);
    const rnpUplinkInformationExchangeFailure *get_const_rnpUplinkInformationExchangeFailure() const;
    void set_const_rnpMBMSSessionStart(const rnpMBMSSessionStart &);
    const rnpMBMSSessionStart *get_const_rnpMBMSSessionStart() const;
    void set_const_rnpMBMSSynchronisationInformation(const rnpMBMSSynchronisationInformation &);
    const rnpMBMSSynchronisationInformation *get_const_rnpMBMSSynchronisationInformation() const;
    void set_const_rnpMBMSSessionStartResponse(const rnpMBMSSessionStartResponse &);
    const rnpMBMSSessionStartResponse *get_const_rnpMBMSSessionStartResponse() const;
    void set_const_rnpMBMSSessionStartFailure(const rnpMBMSSessionStartFailure &);
    const rnpMBMSSessionStartFailure *get_const_rnpMBMSSessionStartFailure() const;
    void set_const_rnpMBMSSessionUpdate(const rnpMBMSSessionUpdate &);
    const rnpMBMSSessionUpdate *get_const_rnpMBMSSessionUpdate() const;
    void set_const_rnpMBMSSessionUpdateResponse(const rnpMBMSSessionUpdateResponse &);
    const rnpMBMSSessionUpdateResponse *get_const_rnpMBMSSessionUpdateResponse() const;
    void set_const_rnpMBMSSessionUpdateFailure(const rnpMBMSSessionUpdateFailure &);
    const rnpMBMSSessionUpdateFailure *get_const_rnpMBMSSessionUpdateFailure() const;
    void set_const_rnpMBMSSessionStop(const rnpMBMSSessionStop &);
    const rnpMBMSSessionStop *get_const_rnpMBMSSessionStop() const;
    void set_const_rnpMBMSSessionStopResponse(const rnpMBMSSessionStopResponse &);
    const rnpMBMSSessionStopResponse *get_const_rnpMBMSSessionStopResponse() const;
    void set_const_rnpMBMSUELinkingRequest(const rnpMBMSUELinkingRequest &);
    const rnpMBMSUELinkingRequest *get_const_rnpMBMSUELinkingRequest() const;
    void set_const_rnpLeftMBMSBearerService_IEs(const rnpLeftMBMSBearerService_IEs &);
    const rnpLeftMBMSBearerService_IEs *get_const_rnpLeftMBMSBearerService_IEs() const;
    void set_const_rnpMBMSUELinkingResponse(const rnpMBMSUELinkingResponse &);
    const rnpMBMSUELinkingResponse *get_const_rnpMBMSUELinkingResponse() const;
    void set_const_rnpUnsuccessfulLinking_IEs(const rnpUnsuccessfulLinking_IEs &);
    const rnpUnsuccessfulLinking_IEs *get_const_rnpUnsuccessfulLinking_IEs() const;
    void set_const_rnpMBMSRegistrationRequest(const rnpMBMSRegistrationRequest &);
    const rnpMBMSRegistrationRequest *get_const_rnpMBMSRegistrationRequest() const;
    void set_const_rnpMBMSRegistrationResponse(const rnpMBMSRegistrationResponse &);
    const rnpMBMSRegistrationResponse *get_const_rnpMBMSRegistrationResponse() const;
    void set_const_rnpMBMSRegistrationFailure(const rnpMBMSRegistrationFailure &);
    const rnpMBMSRegistrationFailure *get_const_rnpMBMSRegistrationFailure() const;
    void set_const_rnpMBMSCNDe_RegistrationRequest(const rnpMBMSCNDe_RegistrationRequest &);
    const rnpMBMSCNDe_RegistrationRequest *get_const_rnpMBMSCNDe_RegistrationRequest() const;
    void set_const_rnpMBMSCNDe_RegistrationResponse(const rnpMBMSCNDe_RegistrationResponse &);
    const rnpMBMSCNDe_RegistrationResponse *get_const_rnpMBMSCNDe_RegistrationResponse() const;
    void set_const_rnpMBMSRABEstablishmentIndication(const rnpMBMSRABEstablishmentIndication &);
    const rnpMBMSRABEstablishmentIndication *get_const_rnpMBMSRABEstablishmentIndication() const;
    void set_const_rnpMBMSRABReleaseRequest(const rnpMBMSRABReleaseRequest &);
    const rnpMBMSRABReleaseRequest *get_const_rnpMBMSRABReleaseRequest() const;
    void set_const_rnpMBMSRABRelease(const rnpMBMSRABRelease &);
    const rnpMBMSRABRelease *get_const_rnpMBMSRABRelease() const;
    void set_const_rnpMBMSRABReleaseFailure(const rnpMBMSRABReleaseFailure &);
    const rnpMBMSRABReleaseFailure *get_const_rnpMBMSRABReleaseFailure() const;
    void set_const_rnpSRVCC_CSKeysRequest(const rnpSRVCC_CSKeysRequest &);
    const rnpSRVCC_CSKeysRequest *get_const_rnpSRVCC_CSKeysRequest() const;
    void set_const_rnpSRVCC_CSKeysResponse(const rnpSRVCC_CSKeysResponse &);
    const rnpSRVCC_CSKeysResponse *get_const_rnpSRVCC_CSKeysResponse() const;
    void set_const_rnpUeRadioCapabilityMatchRequest(const rnpUeRadioCapabilityMatchRequest &);
    const rnpUeRadioCapabilityMatchRequest *get_const_rnpUeRadioCapabilityMatchRequest() const;
    void set_const_rnpUeRadioCapabilityMatchResponse(const rnpUeRadioCapabilityMatchResponse &);
    const rnpUeRadioCapabilityMatchResponse *get_const_rnpUeRadioCapabilityMatchResponse() const;
    void set_const_rnpAccuracyFulfilmentIndicator(const rnpAccuracyFulfilmentIndicator &);
    const rnpAccuracyFulfilmentIndicator *get_const_rnpAccuracyFulfilmentIndicator() const;
    void set_const_rnpAlt_RAB_Parameters(const rnpAlt_RAB_Parameters &);
    const rnpAlt_RAB_Parameters *get_const_rnpAlt_RAB_Parameters() const;
    void set_const_rnpAlt_RAB_Parameter_ExtendedGuaranteedBitrateInf(const rnpAlt_RAB_Parameter_ExtendedGuaranteedBitrateInf &);
    const rnpAlt_RAB_Parameter_ExtendedGuaranteedBitrateInf *get_const_rnpAlt_RAB_Parameter_ExtendedGuaranteedBitrateInf() const;
    void set_const_rnpAlt_RAB_Parameter_SupportedGuaranteedBitrateInf(const rnpAlt_RAB_Parameter_SupportedGuaranteedBitrateInf &);
    const rnpAlt_RAB_Parameter_SupportedGuaranteedBitrateInf *get_const_rnpAlt_RAB_Parameter_SupportedGuaranteedBitrateInf() const;
    void set_const_rnpAlt_RAB_Parameter_ExtendedMaxBitrateInf(const rnpAlt_RAB_Parameter_ExtendedMaxBitrateInf &);
    const rnpAlt_RAB_Parameter_ExtendedMaxBitrateInf *get_const_rnpAlt_RAB_Parameter_ExtendedMaxBitrateInf() const;
    void set_const_rnpAlt_RAB_Parameter_SupportedMaxBitrateInf(const rnpAlt_RAB_Parameter_SupportedMaxBitrateInf &);
    const rnpAlt_RAB_Parameter_SupportedMaxBitrateInf *get_const_rnpAlt_RAB_Parameter_SupportedMaxBitrateInf() const;
    void set_const_rnpAlternativeRABConfigurationRequest(const rnpAlternativeRABConfigurationRequest &);
    const rnpAlternativeRABConfigurationRequest *get_const_rnpAlternativeRABConfigurationRequest() const;
    void set_const_rnpAPN(const rnpAPN &);
    const rnpAPN *get_const_rnpAPN() const;
    void set_const_rnpAreaIdentity(const rnpAreaIdentity &);
    const rnpAreaIdentity *get_const_rnpAreaIdentity() const;
    void set_const_rnpAss_RAB_Parameters(const rnpAss_RAB_Parameters &);
    const rnpAss_RAB_Parameters *get_const_rnpAss_RAB_Parameters() const;
    void set_const_rnpAss_RAB_Parameter_ExtendedGuaranteedBitrateList(const rnpAss_RAB_Parameter_ExtendedGuaranteedBitrateList &);
    const rnpAss_RAB_Parameter_ExtendedGuaranteedBitrateList *get_const_rnpAss_RAB_Parameter_ExtendedGuaranteedBitrateList() const;
    void set_const_rnpAss_RAB_Parameter_ExtendedMaxBitrateList(const rnpAss_RAB_Parameter_ExtendedMaxBitrateList &);
    const rnpAss_RAB_Parameter_ExtendedMaxBitrateList *get_const_rnpAss_RAB_Parameter_ExtendedMaxBitrateList() const;
    void set_const_rnpBroadcastAssistanceDataDecipheringKeys(const rnpBroadcastAssistanceDataDecipheringKeys &);
    const rnpBroadcastAssistanceDataDecipheringKeys *get_const_rnpBroadcastAssistanceDataDecipheringKeys() const;
    void set_const_rnpCause(const rnpCause &);
    const rnpCause *get_const_rnpCause() const;
    void set_const_rnpCell_Access_Mode(const rnpCell_Access_Mode &);
    const rnpCell_Access_Mode *get_const_rnpCell_Access_Mode() const;
    void set_const_rnpCellLoadInformationGroup(const rnpCellLoadInformationGroup &);
    const rnpCellLoadInformationGroup *get_const_rnpCellLoadInformationGroup() const;
    void set_const_rnpClientType(const rnpClientType &);
    const rnpClientType *get_const_rnpClientType() const;
    void set_const_rnpCriticalityDiagnostics(const rnpCriticalityDiagnostics &);
    const rnpCriticalityDiagnostics *get_const_rnpCriticalityDiagnostics() const;
    void set_const_rnpMessageStructure(const rnpMessageStructure &);
    const rnpMessageStructure *get_const_rnpMessageStructure() const;
    void set_const_rnpChosenEncryptionAlgorithm(const rnpChosenEncryptionAlgorithm &);
    const rnpChosenEncryptionAlgorithm *get_const_rnpChosenEncryptionAlgorithm() const;
    void set_const_rnpChosenIntegrityProtectionAlgorithm(const rnpChosenIntegrityProtectionAlgorithm &);
    const rnpChosenIntegrityProtectionAlgorithm *get_const_rnpChosenIntegrityProtectionAlgorithm() const;
    void set_const_rnpClassmarkInformation2(const rnpClassmarkInformation2 &);
    const rnpClassmarkInformation2 *get_const_rnpClassmarkInformation2() const;
    void set_const_rnpClassmarkInformation3(const rnpClassmarkInformation3 &);
    const rnpClassmarkInformation3 *get_const_rnpClassmarkInformation3() const;
    void set_const_rnpCN_DomainIndicator(const rnpCN_DomainIndicator &);
    const rnpCN_DomainIndicator *get_const_rnpCN_DomainIndicator() const;
    void set_const_rnpCorrelation_ID(const rnpCorrelation_ID &);
    const rnpCorrelation_ID *get_const_rnpCorrelation_ID() const;
    void set_const_rnpCSFB_Information(const rnpCSFB_Information &);
    const rnpCSFB_Information *get_const_rnpCSFB_Information() const;
    void set_const_rnpCSG_Id(const rnpCSG_Id &);
    const rnpCSG_Id *get_const_rnpCSG_Id() const;
    void set_const_rnpCSG_Id_List(const rnpCSG_Id_List &);
    const rnpCSG_Id_List *get_const_rnpCSG_Id_List() const;
    void set_const_rnpCSG_Membership_Status(const rnpCSG_Membership_Status &);
    const rnpCSG_Membership_Status *get_const_rnpCSG_Membership_Status() const;
    void set_const_rnpDeltaRAListofIdleModeUEs(const rnpDeltaRAListofIdleModeUEs &);
    const rnpDeltaRAListofIdleModeUEs *get_const_rnpDeltaRAListofIdleModeUEs() const;
    void set_const_rnpD_RNTI(const rnpD_RNTI &);
    const rnpD_RNTI *get_const_rnpD_RNTI() const;
    void set_const_rnpDRX_CycleLengthCoefficient(const rnpDRX_CycleLengthCoefficient &);
    const rnpDRX_CycleLengthCoefficient *get_const_rnpDRX_CycleLengthCoefficient() const;
    void set_const_rnpEARFCN_Extended(const rnpEARFCN_Extended &);
    const rnpEARFCN_Extended *get_const_rnpEARFCN_Extended() const;
    void set_const_rnpE_DCH_MAC_d_Flow_ID(const rnpE_DCH_MAC_d_Flow_ID &);
    const rnpE_DCH_MAC_d_Flow_ID *get_const_rnpE_DCH_MAC_d_Flow_ID() const;
    void set_const_rnpEncryptionInformation(const rnpEncryptionInformation &);
    const rnpEncryptionInformation *get_const_rnpEncryptionInformation() const;
    void set_const_rnpEncryptionKey(const rnpEncryptionKey &);
    const rnpEncryptionKey *get_const_rnpEncryptionKey() const;
    void set_const_rnpEnd_Of_CSFB(const rnpEnd_Of_CSFB &);
    const rnpEnd_Of_CSFB *get_const_rnpEnd_Of_CSFB() const;
    void set_const_rnpE_UTRAN_Service_Handover(const rnpE_UTRAN_Service_Handover &);
    const rnpE_UTRAN_Service_Handover *get_const_rnpE_UTRAN_Service_Handover() const;
    void set_const_rnpExtendedRNC_ID(const rnpExtendedRNC_ID &);
    const rnpExtendedRNC_ID *get_const_rnpExtendedRNC_ID() const;
    void set_const_rnpFrequenceLayerConvergenceFlag(const rnpFrequenceLayerConvergenceFlag &);
    const rnpFrequenceLayerConvergenceFlag *get_const_rnpFrequenceLayerConvergenceFlag() const;
    void set_const_rnpGANSS_PositioningDataSet(const rnpGANSS_PositioningDataSet &);
    const rnpGANSS_PositioningDataSet *get_const_rnpGANSS_PositioningDataSet() const;
    void set_const_rnpGERAN_BSC_Container(const rnpGERAN_BSC_Container &);
    const rnpGERAN_BSC_Container *get_const_rnpGERAN_BSC_Container() const;
    void set_const_rnpGERAN_Classmark(const rnpGERAN_Classmark &);
    const rnpGERAN_Classmark *get_const_rnpGERAN_Classmark() const;
    void set_const_rnpGlobalCN_ID(const rnpGlobalCN_ID &);
    const rnpGlobalCN_ID *get_const_rnpGlobalCN_ID() const;
    void set_const_rnpGlobalRNC_ID(const rnpGlobalRNC_ID &);
    const rnpGlobalRNC_ID *get_const_rnpGlobalRNC_ID() const;
    void set_const_rnpHigherBitratesThan16MbpsFlag(const rnpHigherBitratesThan16MbpsFlag &);
    const rnpHigherBitratesThan16MbpsFlag *get_const_rnpHigherBitratesThan16MbpsFlag() const;
    void set_const_rnpHS_DSCH_MAC_d_Flow_ID(const rnpHS_DSCH_MAC_d_Flow_ID &);
    const rnpHS_DSCH_MAC_d_Flow_ID *get_const_rnpHS_DSCH_MAC_d_Flow_ID() const;
    void set_const_rnpIMSI(const rnpIMSI &);
    const rnpIMSI *get_const_rnpIMSI() const;
    void set_const_rnpIncludeVelocity(const rnpIncludeVelocity &);
    const rnpIncludeVelocity *get_const_rnpIncludeVelocity() const;
    void set_const_rnpInformationExchangeID(const rnpInformationExchangeID &);
    const rnpInformationExchangeID *get_const_rnpInformationExchangeID() const;
    void set_const_rnpInformationExchangeType(const rnpInformationExchangeType &);
    const rnpInformationExchangeType *get_const_rnpInformationExchangeType() const;
    void set_const_rnpInformationRequested(const rnpInformationRequested &);
    const rnpInformationRequested *get_const_rnpInformationRequested() const;
    void set_const_rnpInformationRequestType(const rnpInformationRequestType &);
    const rnpInformationRequestType *get_const_rnpInformationRequestType() const;
    void set_const_rnpInformationTransferID(const rnpInformationTransferID &);
    const rnpInformationTransferID *get_const_rnpInformationTransferID() const;
    void set_const_rnpInformationTransferType(const rnpInformationTransferType &);
    const rnpInformationTransferType *get_const_rnpInformationTransferType() const;
    void set_const_rnpIntegrityProtectionInformation(const rnpIntegrityProtectionInformation &);
    const rnpIntegrityProtectionInformation *get_const_rnpIntegrityProtectionInformation() const;
    void set_const_rnpIntegrityProtectionKey(const rnpIntegrityProtectionKey &);
    const rnpIntegrityProtectionKey *get_const_rnpIntegrityProtectionKey() const;
    void set_const_rnpInterSystemInformationTransferType(const rnpInterSystemInformationTransferType &);
    const rnpInterSystemInformationTransferType *get_const_rnpInterSystemInformationTransferType() const;
    void set_const_rnpInterSystemInformation_TransparentContainer(const rnpInterSystemInformation_TransparentContainer &);
    const rnpInterSystemInformation_TransparentContainer *get_const_rnpInterSystemInformation_TransparentContainer() const;
    void set_const_rnpIPMulticastAddress(const rnpIPMulticastAddress &);
    const rnpIPMulticastAddress *get_const_rnpIPMulticastAddress() const;
    void set_const_rnpIuSignallingConnectionIdentifier(const rnpIuSignallingConnectionIdentifier &);
    const rnpIuSignallingConnectionIdentifier *get_const_rnpIuSignallingConnectionIdentifier() const;
    void set_const_rnpIuTransportAssociation(const rnpIuTransportAssociation &);
    const rnpIuTransportAssociation *get_const_rnpIuTransportAssociation() const;
    void set_const_rnpKeyStatus(const rnpKeyStatus &);
    const rnpKeyStatus *get_const_rnpKeyStatus() const;
    void set_const_rnpLAI(const rnpLAI &);
    const rnpLAI *get_const_rnpLAI() const;
    void set_const_rnpLastKnownServiceArea(const rnpLastKnownServiceArea &);
    const rnpLastKnownServiceArea *get_const_rnpLastKnownServiceArea() const;
    void set_const_rnpLHN_ID(const rnpLHN_ID &);
    const rnpLHN_ID *get_const_rnpLHN_ID() const;
    void set_const_rnpLocationRelatedDataRequestType(const rnpLocationRelatedDataRequestType &);
    const rnpLocationRelatedDataRequestType *get_const_rnpLocationRelatedDataRequestType() const;
    void set_const_rnpLocationRelatedDataRequestTypeSpecificToGERANIuMode(const rnpLocationRelatedDataRequestTypeSpecificToGERANIuMode &);
    const rnpLocationRelatedDataRequestTypeSpecificToGERANIuMode *get_const_rnpLocationRelatedDataRequestTypeSpecificToGERANIuMode() const;
    void set_const_rnpL3_Information(const rnpL3_Information &);
    const rnpL3_Information *get_const_rnpL3_Information() const;
    void set_const_rnpM4Report(const rnpM4Report &);
    const rnpM4Report *get_const_rnpM4Report() const;
    void set_const_rnpM5Report(const rnpM5Report &);
    const rnpM5Report *get_const_rnpM5Report() const;
    void set_const_rnpM6Report(const rnpM6Report &);
    const rnpM6Report *get_const_rnpM6Report() const;
    void set_const_rnpM7Report(const rnpM7Report &);
    const rnpM7Report *get_const_rnpM7Report() const;
    void set_const_rnpManagement_Based_MDT_Allowed(const rnpManagement_Based_MDT_Allowed &);
    const rnpManagement_Based_MDT_Allowed *get_const_rnpManagement_Based_MDT_Allowed() const;
    void set_const_rnpMBMSBearerServiceType(const rnpMBMSBearerServiceType &);
    const rnpMBMSBearerServiceType *get_const_rnpMBMSBearerServiceType() const;
    void set_const_rnpMBMSCNDe_Registration(const rnpMBMSCNDe_Registration &);
    const rnpMBMSCNDe_Registration *get_const_rnpMBMSCNDe_Registration() const;
    void set_const_rnpMBMSCountingInformation(const rnpMBMSCountingInformation &);
    const rnpMBMSCountingInformation *get_const_rnpMBMSCountingInformation() const;
    void set_const_rnpMBMSLinkingInformation(const rnpMBMSLinkingInformation &);
    const rnpMBMSLinkingInformation *get_const_rnpMBMSLinkingInformation() const;
    void set_const_rnpMBMSRegistrationRequestType(const rnpMBMSRegistrationRequestType &);
    const rnpMBMSRegistrationRequestType *get_const_rnpMBMSRegistrationRequestType() const;
    void set_const_rnpMBMSServiceArea(const rnpMBMSServiceArea &);
    const rnpMBMSServiceArea *get_const_rnpMBMSServiceArea() const;
    void set_const_rnpMBMSSessionDuration(const rnpMBMSSessionDuration &);
    const rnpMBMSSessionDuration *get_const_rnpMBMSSessionDuration() const;
    void set_const_rnpMBMSSessionIdentity(const rnpMBMSSessionIdentity &);
    const rnpMBMSSessionIdentity *get_const_rnpMBMSSessionIdentity() const;
    void set_const_rnpMBMSSessionRepetitionNumber(const rnpMBMSSessionRepetitionNumber &);
    const rnpMBMSSessionRepetitionNumber *get_const_rnpMBMSSessionRepetitionNumber() const;
    void set_const_rnpMDT_Configuration(const rnpMDT_Configuration &);
    const rnpMDT_Configuration *get_const_rnpMDT_Configuration() const;
    void set_const_rnpMDT_PLMN_List(const rnpMDT_PLMN_List &);
    const rnpMDT_PLMN_List *get_const_rnpMDT_PLMN_List() const;
    void set_const_rnpMSISDN(const rnpMSISDN &);
    const rnpMSISDN *get_const_rnpMSISDN() const;
    void set_const_rnpNAS_PDU(const rnpNAS_PDU &);
    const rnpNAS_PDU *get_const_rnpNAS_PDU() const;
    void set_const_rnpNAS_SequenceNumber(const rnpNAS_SequenceNumber &);
    const rnpNAS_SequenceNumber *get_const_rnpNAS_SequenceNumber() const;
    void set_const_rnpNewBSS_To_OldBSS_Information(const rnpNewBSS_To_OldBSS_Information &);
    const rnpNewBSS_To_OldBSS_Information *get_const_rnpNewBSS_To_OldBSS_Information() const;
    void set_const_rnpNonSearchingIndication(const rnpNonSearchingIndication &);
    const rnpNonSearchingIndication *get_const_rnpNonSearchingIndication() const;
    void set_const_rnpNumberOfSteps(const rnpNumberOfSteps &);
    const rnpNumberOfSteps *get_const_rnpNumberOfSteps() const;
    void set_const_rnpOffload_RAB_Parameters(const rnpOffload_RAB_Parameters &);
    const rnpOffload_RAB_Parameters *get_const_rnpOffload_RAB_Parameters() const;
    void set_const_rnpOldBSS_ToNewBSS_Information(const rnpOldBSS_ToNewBSS_Information &);
    const rnpOldBSS_ToNewBSS_Information *get_const_rnpOldBSS_ToNewBSS_Information() const;
    void set_const_rnpOMC_ID(const rnpOMC_ID &);
    const rnpOMC_ID *get_const_rnpOMC_ID() const;
    void set_const_rnpOut_Of_UTRAN(const rnpOut_Of_UTRAN &);
    const rnpOut_Of_UTRAN *get_const_rnpOut_Of_UTRAN() const;
    void set_const_rnpPagingAreaID(const rnpPagingAreaID &);
    const rnpPagingAreaID *get_const_rnpPagingAreaID() const;
    void set_const_rnpPagingCause(const rnpPagingCause &);
    const rnpPagingCause *get_const_rnpPagingCause() const;
    void set_const_rnpPDP_TypeInformation(const rnpPDP_TypeInformation &);
    const rnpPDP_TypeInformation *get_const_rnpPDP_TypeInformation() const;
    void set_const_rnpPDP_TypeInformation_extension(const rnpPDP_TypeInformation_extension &);
    const rnpPDP_TypeInformation_extension *get_const_rnpPDP_TypeInformation_extension() const;
    void set_const_rnpPeriodicLocationInfo(const rnpPeriodicLocationInfo &);
    const rnpPeriodicLocationInfo *get_const_rnpPeriodicLocationInfo() const;
    void set_const_rnpPermanentNAS_UE_ID(const rnpPermanentNAS_UE_ID &);
    const rnpPermanentNAS_UE_ID *get_const_rnpPermanentNAS_UE_ID() const;
    void set_const_rnpPLMNidentity(const rnpPLMNidentity &);
    const rnpPLMNidentity *get_const_rnpPLMNidentity() const;
    void set_const_rnpPositioningPriority(const rnpPositioningPriority &);
    const rnpPositioningPriority *get_const_rnpPositioningPriority() const;
    void set_const_rnpPositionData(const rnpPositionData &);
    const rnpPositionData *get_const_rnpPositionData() const;
    void set_const_rnpPositionDataSpecificToGERANIuMode(const rnpPositionDataSpecificToGERANIuMode &);
    const rnpPositionDataSpecificToGERANIuMode *get_const_rnpPositionDataSpecificToGERANIuMode() const;
    void set_const_rnpPriority_Class_Indicator(const rnpPriority_Class_Indicator &);
    const rnpPriority_Class_Indicator *get_const_rnpPriority_Class_Indicator() const;
    void set_const_rnpProvidedData(const rnpProvidedData &);
    const rnpProvidedData *get_const_rnpProvidedData() const;
    void set_const_rnpRAB_ID(const rnpRAB_ID &);
    const rnpRAB_ID *get_const_rnpRAB_ID() const;
    void set_const_rnpRAB_Parameter_ExtendedGuaranteedBitrateList(const rnpRAB_Parameter_ExtendedGuaranteedBitrateList &);
    const rnpRAB_Parameter_ExtendedGuaranteedBitrateList *get_const_rnpRAB_Parameter_ExtendedGuaranteedBitrateList() const;
    void set_const_rnpRAB_Parameter_ExtendedMaxBitrateList(const rnpRAB_Parameter_ExtendedMaxBitrateList &);
    const rnpRAB_Parameter_ExtendedMaxBitrateList *get_const_rnpRAB_Parameter_ExtendedMaxBitrateList() const;
    void set_const_rnpRAB_Parameters(const rnpRAB_Parameters &);
    const rnpRAB_Parameters *get_const_rnpRAB_Parameters() const;
    void set_const_rnpRABParametersList(const rnpRABParametersList &);
    const rnpRABParametersList *get_const_rnpRABParametersList() const;
    void set_const_rnpRAC(const rnpRAC &);
    const rnpRAC *get_const_rnpRAC() const;
    void set_const_rnpRAListofIdleModeUEs(const rnpRAListofIdleModeUEs &);
    const rnpRAListofIdleModeUEs *get_const_rnpRAListofIdleModeUEs() const;
    void set_const_rnpLAListofIdleModeUEs(const rnpLAListofIdleModeUEs &);
    const rnpLAListofIdleModeUEs *get_const_rnpLAListofIdleModeUEs() const;
    void set_const_rnpRAT_Type(const rnpRAT_Type &);
    const rnpRAT_Type *get_const_rnpRAT_Type() const;
    void set_const_rnpRedirectAttemptFlag(const rnpRedirectAttemptFlag &);
    const rnpRedirectAttemptFlag *get_const_rnpRedirectAttemptFlag() const;
    void set_const_rnpRedirectionCompleted(const rnpRedirectionCompleted &);
    const rnpRedirectionCompleted *get_const_rnpRedirectionCompleted() const;
    void set_const_rnpRejectCauseValue(const rnpRejectCauseValue &);
    const rnpRejectCauseValue *get_const_rnpRejectCauseValue() const;
    void set_const_rnpRelocationType(const rnpRelocationType &);
    const rnpRelocationType *get_const_rnpRelocationType() const;
    void set_const_rnpRequestedGANSSAssistanceData(const rnpRequestedGANSSAssistanceData &);
    const rnpRequestedGANSSAssistanceData *get_const_rnpRequestedGANSSAssistanceData() const;
    void set_const_rnpRequested_RAB_Parameter_ExtendedMaxBitrateList(const rnpRequested_RAB_Parameter_ExtendedMaxBitrateList &);
    const rnpRequested_RAB_Parameter_ExtendedMaxBitrateList *get_const_rnpRequested_RAB_Parameter_ExtendedMaxBitrateList() const;
    void set_const_rnpRequested_RAB_Parameter_ExtendedGuaranteedBitrateList(const rnpRequested_RAB_Parameter_ExtendedGuaranteedBitrateList &);
    const rnpRequested_RAB_Parameter_ExtendedGuaranteedBitrateList *get_const_rnpRequested_RAB_Parameter_ExtendedGuaranteedBitrateList() const;
    void set_const_rnpRequestType(const rnpRequestType &);
    const rnpRequestType *get_const_rnpRequestType() const;
    void set_const_rnpResponseTime(const rnpResponseTime &);
    const rnpResponseTime *get_const_rnpResponseTime() const;
    void set_const_rnpRNSAPRelocationParameters(const rnpRNSAPRelocationParameters &);
    const rnpRNSAPRelocationParameters *get_const_rnpRNSAPRelocationParameters() const;
    void set_const_rnpRRC_Container(const rnpRRC_Container &);
    const rnpRRC_Container *get_const_rnpRRC_Container() const;
    void set_const_rnpRSRVCC_HO_Indication(const rnpRSRVCC_HO_Indication &);
    const rnpRSRVCC_HO_Indication *get_const_rnpRSRVCC_HO_Indication() const;
    void set_const_rnpRSRVCC_Information(const rnpRSRVCC_Information &);
    const rnpRSRVCC_Information *get_const_rnpRSRVCC_Information() const;
    void set_const_rnpRSRVCC_Operation_Possible(const rnpRSRVCC_Operation_Possible &);
    const rnpRSRVCC_Operation_Possible *get_const_rnpRSRVCC_Operation_Possible() const;
    void set_const_rnpSAI(const rnpSAI &);
    const rnpSAI *get_const_rnpSAI() const;
    void set_const_rnpSAPI(const rnpSAPI &);
    const rnpSAPI *get_const_rnpSAPI() const;
    void set_const_rnpSessionUpdateID(const rnpSessionUpdateID &);
    const rnpSessionUpdateID *get_const_rnpSessionUpdateID() const;
    void set_const_rnpSession_Re_establishment_Indicator(const rnpSession_Re_establishment_Indicator &);
    const rnpSession_Re_establishment_Indicator *get_const_rnpSession_Re_establishment_Indicator() const;
    void set_const_rnpSignallingIndication(const rnpSignallingIndication &);
    const rnpSignallingIndication *get_const_rnpSignallingIndication() const;
    void set_const_rnpSNA_Access_Information(const rnpSNA_Access_Information &);
    const rnpSNA_Access_Information *get_const_rnpSNA_Access_Information() const;
    void set_const_rnpSource_ToTarget_TransparentContainer(const rnpSource_ToTarget_TransparentContainer &);
    const rnpSource_ToTarget_TransparentContainer *get_const_rnpSource_ToTarget_TransparentContainer() const;
    void set_const_rnpSourceBSS_ToTargetBSS_TransparentContainer(const rnpSourceBSS_ToTargetBSS_TransparentContainer &);
    const rnpSourceBSS_ToTargetBSS_TransparentContainer *get_const_rnpSourceBSS_ToTargetBSS_TransparentContainer() const;
    void set_const_rnpSourceID(const rnpSourceID &);
    const rnpSourceID *get_const_rnpSourceID() const;
    void set_const_rnpSourceRNC_ToTargetRNC_TransparentContainer(const rnpSourceRNC_ToTargetRNC_TransparentContainer &);
    const rnpSourceRNC_ToTargetRNC_TransparentContainer *get_const_rnpSourceRNC_ToTargetRNC_TransparentContainer() const;
    void set_const_rnpIRAT_Measurement_Configuration(const rnpIRAT_Measurement_Configuration &);
    const rnpIRAT_Measurement_Configuration *get_const_rnpIRAT_Measurement_Configuration() const;
    void set_const_rnpRSRQ_Type(const rnpRSRQ_Type &);
    const rnpRSRQ_Type *get_const_rnpRSRQ_Type() const;
    void set_const_rnpRSRQ_Extension(const rnpRSRQ_Extension &);
    const rnpRSRQ_Extension *get_const_rnpRSRQ_Extension() const;
    void set_const_rnpSubscriberProfileIDforRFP(const rnpSubscriberProfileIDforRFP &);
    const rnpSubscriberProfileIDforRFP *get_const_rnpSubscriberProfileIDforRFP() const;
    void set_const_rnpSupportedRAB_ParameterBitrateList(const rnpSupportedRAB_ParameterBitrateList &);
    const rnpSupportedRAB_ParameterBitrateList *get_const_rnpSupportedRAB_ParameterBitrateList() const;
    void set_const_rnpSRB_TrCH_Mapping(const rnpSRB_TrCH_Mapping &);
    const rnpSRB_TrCH_Mapping *get_const_rnpSRB_TrCH_Mapping() const;
    void set_const_rnpSRVCC_HO_Indication(const rnpSRVCC_HO_Indication &);
    const rnpSRVCC_HO_Indication *get_const_rnpSRVCC_HO_Indication() const;
    void set_const_rnpSRVCC_Information(const rnpSRVCC_Information &);
    const rnpSRVCC_Information *get_const_rnpSRVCC_Information() const;
    void set_const_rnpSRVCC_Operation_Possible(const rnpSRVCC_Operation_Possible &);
    const rnpSRVCC_Operation_Possible *get_const_rnpSRVCC_Operation_Possible() const;
    void set_const_rnpTarget_ToSource_TransparentContainer(const rnpTarget_ToSource_TransparentContainer &);
    const rnpTarget_ToSource_TransparentContainer *get_const_rnpTarget_ToSource_TransparentContainer() const;
    void set_const_rnpTargetBSS_ToSourceBSS_TransparentContainer(const rnpTargetBSS_ToSourceBSS_TransparentContainer &);
    const rnpTargetBSS_ToSourceBSS_TransparentContainer *get_const_rnpTargetBSS_ToSourceBSS_TransparentContainer() const;
    void set_const_rnpTargetID(const rnpTargetID &);
    const rnpTargetID *get_const_rnpTargetID() const;
    void set_const_rnpTargetRNC_ToSourceRNC_TransparentContainer(const rnpTargetRNC_ToSourceRNC_TransparentContainer &);
    const rnpTargetRNC_ToSourceRNC_TransparentContainer *get_const_rnpTargetRNC_ToSourceRNC_TransparentContainer() const;
    void set_const_rnpTemporaryUE_ID(const rnpTemporaryUE_ID &);
    const rnpTemporaryUE_ID *get_const_rnpTemporaryUE_ID() const;
    void set_const_rnpTimeToMBMSDataTransfer(const rnpTimeToMBMSDataTransfer &);
    const rnpTimeToMBMSDataTransfer *get_const_rnpTimeToMBMSDataTransfer() const;
    void set_const_rnpTimingDifferenceULDL(const rnpTimingDifferenceULDL &);
    const rnpTimingDifferenceULDL *get_const_rnpTimingDifferenceULDL() const;
    void set_const_rnpTMGI(const rnpTMGI &);
    const rnpTMGI *get_const_rnpTMGI() const;
    void set_const_rnpTracePropagationParameters(const rnpTracePropagationParameters &);
    const rnpTracePropagationParameters *get_const_rnpTracePropagationParameters() const;
    void set_const_rnpTraceRecordingSessionInformation(const rnpTraceRecordingSessionInformation &);
    const rnpTraceRecordingSessionInformation *get_const_rnpTraceRecordingSessionInformation() const;
    void set_const_rnpTraceRecordingSessionReference(const rnpTraceRecordingSessionReference &);
    const rnpTraceRecordingSessionReference *get_const_rnpTraceRecordingSessionReference() const;
    void set_const_rnpTraceReference(const rnpTraceReference &);
    const rnpTraceReference *get_const_rnpTraceReference() const;
    void set_const_rnpTraceType(const rnpTraceType &);
    const rnpTraceType *get_const_rnpTraceType() const;
    void set_const_rnpTransportLayerAddress(const rnpTransportLayerAddress &);
    const rnpTransportLayerAddress *get_const_rnpTransportLayerAddress() const;
    void set_const_rnpTriggerID(const rnpTriggerID &);
    const rnpTriggerID *get_const_rnpTriggerID() const;
    void set_const_rnpTunnelInformation(const rnpTunnelInformation &);
    const rnpTunnelInformation *get_const_rnpTunnelInformation() const;
    void set_const_rnpTypeOfError(const rnpTypeOfError &);
    const rnpTypeOfError *get_const_rnpTypeOfError() const;
    void set_const_rnpUE_AggregateMaximumBitRate(const rnpUE_AggregateMaximumBitRate &);
    const rnpUE_AggregateMaximumBitRate *get_const_rnpUE_AggregateMaximumBitRate() const;
    void set_const_rnpUE_History_Information(const rnpUE_History_Information &);
    const rnpUE_History_Information *get_const_rnpUE_History_Information() const;
    void set_const_rnpUE_ID(const rnpUE_ID &);
    const rnpUE_ID *get_const_rnpUE_ID() const;
    void set_const_rnpUESBI_Iu(const rnpUESBI_Iu &);
    const rnpUESBI_Iu *get_const_rnpUESBI_Iu() const;
    void set_const_rnpUTRAN_CellID(const rnpUTRAN_CellID &);
    const rnpUTRAN_CellID *get_const_rnpUTRAN_CellID() const;
    void set_const_rnpVelocityEstimate(const rnpVelocityEstimate &);
    const rnpVelocityEstimate *get_const_rnpVelocityEstimate() const;
    void set_const_rnpVerticalAccuracyCode(const rnpVerticalAccuracyCode &);
    const rnpVerticalAccuracyCode *get_const_rnpVerticalAccuracyCode() const;
    void set_const_rnpVoiceSupportMatchIndicator(const rnpVoiceSupportMatchIndicator &);
    const rnpVoiceSupportMatchIndicator *get_const_rnpVoiceSupportMatchIndicator() const;
#endif
};

/* Specific PDU classes */

class OSS_PUBLIC rnpRANAP_PDU_PDU : public ConcretePDU {
public:
    rnpRANAP_PDU_PDU();
    void set_data(rnpRANAP_PDU &);
    rnpRANAP_PDU *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRANAP_PDU & d);
    const rnpRANAP_PDU *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpIu_ReleaseCommand_PDU : public ConcretePDU {
public:
    rnpIu_ReleaseCommand_PDU();
    void set_data(rnpIu_ReleaseCommand &);
    rnpIu_ReleaseCommand *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpIu_ReleaseCommand & d);
    const rnpIu_ReleaseCommand *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpIu_ReleaseComplete_PDU : public ConcretePDU {
public:
    rnpIu_ReleaseComplete_PDU();
    void set_data(rnpIu_ReleaseComplete &);
    rnpIu_ReleaseComplete *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpIu_ReleaseComplete & d);
    const rnpIu_ReleaseComplete *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRAB_DataVolumeReportList_PDU : public ConcretePDU {
public:
    rnpRAB_DataVolumeReportList_PDU();
    void set_data(rnpRAB_DataVolumeReportList &);
    rnpRAB_DataVolumeReportList *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRAB_DataVolumeReportList & d);
    const rnpRAB_DataVolumeReportList *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRAB_DataVolumeReportItem_PDU : public ConcretePDU {
public:
    rnpRAB_DataVolumeReportItem_PDU();
    void set_data(rnpRAB_DataVolumeReportItem &);
    rnpRAB_DataVolumeReportItem *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRAB_DataVolumeReportItem & d);
    const rnpRAB_DataVolumeReportItem *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRAB_ReleasedList_IuRelComp_PDU : public ConcretePDU {
public:
    rnpRAB_ReleasedList_IuRelComp_PDU();
    void set_data(rnpRAB_ReleasedList_IuRelComp &);
    rnpRAB_ReleasedList_IuRelComp *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRAB_ReleasedList_IuRelComp & d);
    const rnpRAB_ReleasedList_IuRelComp *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRAB_ReleasedItem_IuRelComp_PDU : public ConcretePDU {
public:
    rnpRAB_ReleasedItem_IuRelComp_PDU();
    void set_data(rnpRAB_ReleasedItem_IuRelComp &);
    rnpRAB_ReleasedItem_IuRelComp *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRAB_ReleasedItem_IuRelComp & d);
    const rnpRAB_ReleasedItem_IuRelComp *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRelocationRequired_PDU : public ConcretePDU {
public:
    rnpRelocationRequired_PDU();
    void set_data(rnpRelocationRequired &);
    rnpRelocationRequired *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRelocationRequired & d);
    const rnpRelocationRequired *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRelocationCommand_PDU : public ConcretePDU {
public:
    rnpRelocationCommand_PDU();
    void set_data(rnpRelocationCommand &);
    rnpRelocationCommand *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRelocationCommand & d);
    const rnpRelocationCommand *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRAB_RelocationReleaseList_PDU : public ConcretePDU {
public:
    rnpRAB_RelocationReleaseList_PDU();
    void set_data(rnpRAB_RelocationReleaseList &);
    rnpRAB_RelocationReleaseList *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRAB_RelocationReleaseList & d);
    const rnpRAB_RelocationReleaseList *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRAB_RelocationReleaseItem_PDU : public ConcretePDU {
public:
    rnpRAB_RelocationReleaseItem_PDU();
    void set_data(rnpRAB_RelocationReleaseItem &);
    rnpRAB_RelocationReleaseItem *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRAB_RelocationReleaseItem & d);
    const rnpRAB_RelocationReleaseItem *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRAB_DataForwardingList_PDU : public ConcretePDU {
public:
    rnpRAB_DataForwardingList_PDU();
    void set_data(rnpRAB_DataForwardingList &);
    rnpRAB_DataForwardingList *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRAB_DataForwardingList & d);
    const rnpRAB_DataForwardingList *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRAB_DataForwardingItem_PDU : public ConcretePDU {
public:
    rnpRAB_DataForwardingItem_PDU();
    void set_data(rnpRAB_DataForwardingItem &);
    rnpRAB_DataForwardingItem *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRAB_DataForwardingItem & d);
    const rnpRAB_DataForwardingItem *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRelocationPreparationFailure_PDU : public ConcretePDU {
public:
    rnpRelocationPreparationFailure_PDU();
    void set_data(rnpRelocationPreparationFailure &);
    rnpRelocationPreparationFailure *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRelocationPreparationFailure & d);
    const rnpRelocationPreparationFailure *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRelocationRequest_PDU : public ConcretePDU {
public:
    rnpRelocationRequest_PDU();
    void set_data(rnpRelocationRequest &);
    rnpRelocationRequest *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRelocationRequest & d);
    const rnpRelocationRequest *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRAB_SetupList_RelocReq_PDU : public ConcretePDU {
public:
    rnpRAB_SetupList_RelocReq_PDU();
    void set_data(rnpRAB_SetupList_RelocReq &);
    rnpRAB_SetupList_RelocReq *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRAB_SetupList_RelocReq & d);
    const rnpRAB_SetupList_RelocReq *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRAB_SetupItem_RelocReq_PDU : public ConcretePDU {
public:
    rnpRAB_SetupItem_RelocReq_PDU();
    void set_data(rnpRAB_SetupItem_RelocReq &);
    rnpRAB_SetupItem_RelocReq *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRAB_SetupItem_RelocReq & d);
    const rnpRAB_SetupItem_RelocReq *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpCNMBMSLinkingInformation_PDU : public ConcretePDU {
public:
    rnpCNMBMSLinkingInformation_PDU();
    void set_data(rnpCNMBMSLinkingInformation &);
    rnpCNMBMSLinkingInformation *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpCNMBMSLinkingInformation & d);
    const rnpCNMBMSLinkingInformation *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpJoinedMBMSBearerService_IEs_PDU : public ConcretePDU {
public:
    rnpJoinedMBMSBearerService_IEs_PDU();
    void set_data(rnpJoinedMBMSBearerService_IEs &);
    rnpJoinedMBMSBearerService_IEs *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpJoinedMBMSBearerService_IEs & d);
    const rnpJoinedMBMSBearerService_IEs *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRelocationRequestAcknowledge_PDU : public ConcretePDU {
public:
    rnpRelocationRequestAcknowledge_PDU();
    void set_data(rnpRelocationRequestAcknowledge &);
    rnpRelocationRequestAcknowledge *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRelocationRequestAcknowledge & d);
    const rnpRelocationRequestAcknowledge *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRAB_SetupList_RelocReqAck_PDU : public ConcretePDU {
public:
    rnpRAB_SetupList_RelocReqAck_PDU();
    void set_data(rnpRAB_SetupList_RelocReqAck &);
    rnpRAB_SetupList_RelocReqAck *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRAB_SetupList_RelocReqAck & d);
    const rnpRAB_SetupList_RelocReqAck *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRAB_SetupItem_RelocReqAck_PDU : public ConcretePDU {
public:
    rnpRAB_SetupItem_RelocReqAck_PDU();
    void set_data(rnpRAB_SetupItem_RelocReqAck &);
    rnpRAB_SetupItem_RelocReqAck *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRAB_SetupItem_RelocReqAck & d);
    const rnpRAB_SetupItem_RelocReqAck *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRAB_FailedList_PDU : public ConcretePDU {
public:
    rnpRAB_FailedList_PDU();
    void set_data(rnpRAB_FailedList &);
    rnpRAB_FailedList *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRAB_FailedList & d);
    const rnpRAB_FailedList *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRAB_FailedItem_PDU : public ConcretePDU {
public:
    rnpRAB_FailedItem_PDU();
    void set_data(rnpRAB_FailedItem &);
    rnpRAB_FailedItem *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRAB_FailedItem & d);
    const rnpRAB_FailedItem *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRelocationFailure_PDU : public ConcretePDU {
public:
    rnpRelocationFailure_PDU();
    void set_data(rnpRelocationFailure &);
    rnpRelocationFailure *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRelocationFailure & d);
    const rnpRelocationFailure *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRelocationCancel_PDU : public ConcretePDU {
public:
    rnpRelocationCancel_PDU();
    void set_data(rnpRelocationCancel &);
    rnpRelocationCancel *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRelocationCancel & d);
    const rnpRelocationCancel *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRelocationCancelAcknowledge_PDU : public ConcretePDU {
public:
    rnpRelocationCancelAcknowledge_PDU();
    void set_data(rnpRelocationCancelAcknowledge &);
    rnpRelocationCancelAcknowledge *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRelocationCancelAcknowledge & d);
    const rnpRelocationCancelAcknowledge *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpSRNS_ContextRequest_PDU : public ConcretePDU {
public:
    rnpSRNS_ContextRequest_PDU();
    void set_data(rnpSRNS_ContextRequest &);
    rnpSRNS_ContextRequest *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpSRNS_ContextRequest & d);
    const rnpSRNS_ContextRequest *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRAB_DataForwardingList_SRNS_CtxReq_PDU : public ConcretePDU {
public:
    rnpRAB_DataForwardingList_SRNS_CtxReq_PDU();
    void set_data(rnpRAB_DataForwardingList_SRNS_CtxReq &);
    rnpRAB_DataForwardingList_SRNS_CtxReq *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRAB_DataForwardingList_SRNS_CtxReq & d);
    const rnpRAB_DataForwardingList_SRNS_CtxReq *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRAB_DataForwardingItem_SRNS_CtxReq_PDU : public ConcretePDU {
public:
    rnpRAB_DataForwardingItem_SRNS_CtxReq_PDU();
    void set_data(rnpRAB_DataForwardingItem_SRNS_CtxReq &);
    rnpRAB_DataForwardingItem_SRNS_CtxReq *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRAB_DataForwardingItem_SRNS_CtxReq & d);
    const rnpRAB_DataForwardingItem_SRNS_CtxReq *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpSRNS_ContextResponse_PDU : public ConcretePDU {
public:
    rnpSRNS_ContextResponse_PDU();
    void set_data(rnpSRNS_ContextResponse &);
    rnpSRNS_ContextResponse *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpSRNS_ContextResponse & d);
    const rnpSRNS_ContextResponse *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRAB_ContextList_PDU : public ConcretePDU {
public:
    rnpRAB_ContextList_PDU();
    void set_data(rnpRAB_ContextList &);
    rnpRAB_ContextList *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRAB_ContextList & d);
    const rnpRAB_ContextList *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRAB_ContextItem_PDU : public ConcretePDU {
public:
    rnpRAB_ContextItem_PDU();
    void set_data(rnpRAB_ContextItem &);
    rnpRAB_ContextItem *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRAB_ContextItem & d);
    const rnpRAB_ContextItem *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRAB_ContextFailedtoTransferList_PDU : public ConcretePDU {
public:
    rnpRAB_ContextFailedtoTransferList_PDU();
    void set_data(rnpRAB_ContextFailedtoTransferList &);
    rnpRAB_ContextFailedtoTransferList *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRAB_ContextFailedtoTransferList & d);
    const rnpRAB_ContextFailedtoTransferList *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRABs_ContextFailedtoTransferItem_PDU : public ConcretePDU {
public:
    rnpRABs_ContextFailedtoTransferItem_PDU();
    void set_data(rnpRABs_ContextFailedtoTransferItem &);
    rnpRABs_ContextFailedtoTransferItem *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRABs_ContextFailedtoTransferItem & d);
    const rnpRABs_ContextFailedtoTransferItem *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpSecurityModeCommand_PDU : public ConcretePDU {
public:
    rnpSecurityModeCommand_PDU();
    void set_data(rnpSecurityModeCommand &);
    rnpSecurityModeCommand *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpSecurityModeCommand & d);
    const rnpSecurityModeCommand *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpSecurityModeComplete_PDU : public ConcretePDU {
public:
    rnpSecurityModeComplete_PDU();
    void set_data(rnpSecurityModeComplete &);
    rnpSecurityModeComplete *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpSecurityModeComplete & d);
    const rnpSecurityModeComplete *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpSecurityModeReject_PDU : public ConcretePDU {
public:
    rnpSecurityModeReject_PDU();
    void set_data(rnpSecurityModeReject &);
    rnpSecurityModeReject *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpSecurityModeReject & d);
    const rnpSecurityModeReject *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpDataVolumeReportRequest_PDU : public ConcretePDU {
public:
    rnpDataVolumeReportRequest_PDU();
    void set_data(rnpDataVolumeReportRequest &);
    rnpDataVolumeReportRequest *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpDataVolumeReportRequest & d);
    const rnpDataVolumeReportRequest *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRAB_DataVolumeReportRequestList_PDU : public ConcretePDU {
public:
    rnpRAB_DataVolumeReportRequestList_PDU();
    void set_data(rnpRAB_DataVolumeReportRequestList &);
    rnpRAB_DataVolumeReportRequestList *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRAB_DataVolumeReportRequestList & d);
    const rnpRAB_DataVolumeReportRequestList *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRAB_DataVolumeReportRequestItem_PDU : public ConcretePDU {
public:
    rnpRAB_DataVolumeReportRequestItem_PDU();
    void set_data(rnpRAB_DataVolumeReportRequestItem &);
    rnpRAB_DataVolumeReportRequestItem *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRAB_DataVolumeReportRequestItem & d);
    const rnpRAB_DataVolumeReportRequestItem *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpDataVolumeReport_PDU : public ConcretePDU {
public:
    rnpDataVolumeReport_PDU();
    void set_data(rnpDataVolumeReport &);
    rnpDataVolumeReport *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpDataVolumeReport & d);
    const rnpDataVolumeReport *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRAB_FailedtoReportList_PDU : public ConcretePDU {
public:
    rnpRAB_FailedtoReportList_PDU();
    void set_data(rnpRAB_FailedtoReportList &);
    rnpRAB_FailedtoReportList *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRAB_FailedtoReportList & d);
    const rnpRAB_FailedtoReportList *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRABs_failed_to_reportItem_PDU : public ConcretePDU {
public:
    rnpRABs_failed_to_reportItem_PDU();
    void set_data(rnpRABs_failed_to_reportItem &);
    rnpRABs_failed_to_reportItem *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRABs_failed_to_reportItem & d);
    const rnpRABs_failed_to_reportItem *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpReset_PDU : public ConcretePDU {
public:
    rnpReset_PDU();
    void set_data(rnpReset &);
    rnpReset *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpReset & d);
    const rnpReset *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpResetAcknowledge_PDU : public ConcretePDU {
public:
    rnpResetAcknowledge_PDU();
    void set_data(rnpResetAcknowledge &);
    rnpResetAcknowledge *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpResetAcknowledge & d);
    const rnpResetAcknowledge *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpResetResource_PDU : public ConcretePDU {
public:
    rnpResetResource_PDU();
    void set_data(rnpResetResource &);
    rnpResetResource *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpResetResource & d);
    const rnpResetResource *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpResetResourceList_PDU : public ConcretePDU {
public:
    rnpResetResourceList_PDU();
    void set_data(rnpResetResourceList &);
    rnpResetResourceList *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpResetResourceList & d);
    const rnpResetResourceList *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpResetResourceItem_PDU : public ConcretePDU {
public:
    rnpResetResourceItem_PDU();
    void set_data(rnpResetResourceItem &);
    rnpResetResourceItem *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpResetResourceItem & d);
    const rnpResetResourceItem *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpResetResourceAcknowledge_PDU : public ConcretePDU {
public:
    rnpResetResourceAcknowledge_PDU();
    void set_data(rnpResetResourceAcknowledge &);
    rnpResetResourceAcknowledge *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpResetResourceAcknowledge & d);
    const rnpResetResourceAcknowledge *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpResetResourceAckList_PDU : public ConcretePDU {
public:
    rnpResetResourceAckList_PDU();
    void set_data(rnpResetResourceAckList &);
    rnpResetResourceAckList *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpResetResourceAckList & d);
    const rnpResetResourceAckList *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpResetResourceAckItem_PDU : public ConcretePDU {
public:
    rnpResetResourceAckItem_PDU();
    void set_data(rnpResetResourceAckItem &);
    rnpResetResourceAckItem *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpResetResourceAckItem & d);
    const rnpResetResourceAckItem *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRAB_ReleaseRequest_PDU : public ConcretePDU {
public:
    rnpRAB_ReleaseRequest_PDU();
    void set_data(rnpRAB_ReleaseRequest &);
    rnpRAB_ReleaseRequest *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRAB_ReleaseRequest & d);
    const rnpRAB_ReleaseRequest *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRAB_ReleaseList_PDU : public ConcretePDU {
public:
    rnpRAB_ReleaseList_PDU();
    void set_data(rnpRAB_ReleaseList &);
    rnpRAB_ReleaseList *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRAB_ReleaseList & d);
    const rnpRAB_ReleaseList *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRAB_ReleaseItem_PDU : public ConcretePDU {
public:
    rnpRAB_ReleaseItem_PDU();
    void set_data(rnpRAB_ReleaseItem &);
    rnpRAB_ReleaseItem *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRAB_ReleaseItem & d);
    const rnpRAB_ReleaseItem *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpIu_ReleaseRequest_PDU : public ConcretePDU {
public:
    rnpIu_ReleaseRequest_PDU();
    void set_data(rnpIu_ReleaseRequest &);
    rnpIu_ReleaseRequest *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpIu_ReleaseRequest & d);
    const rnpIu_ReleaseRequest *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRelocationDetect_PDU : public ConcretePDU {
public:
    rnpRelocationDetect_PDU();
    void set_data(rnpRelocationDetect &);
    rnpRelocationDetect *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRelocationDetect & d);
    const rnpRelocationDetect *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRelocationComplete_PDU : public ConcretePDU {
public:
    rnpRelocationComplete_PDU();
    void set_data(rnpRelocationComplete &);
    rnpRelocationComplete *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRelocationComplete & d);
    const rnpRelocationComplete *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpEnhancedRelocationCompleteRequest_PDU : public ConcretePDU {
public:
    rnpEnhancedRelocationCompleteRequest_PDU();
    void set_data(rnpEnhancedRelocationCompleteRequest &);
    rnpEnhancedRelocationCompleteRequest *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpEnhancedRelocationCompleteRequest & d);
    const rnpEnhancedRelocationCompleteRequest *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRAB_SetupList_EnhancedRelocCompleteReq_PDU : public ConcretePDU {
public:
    rnpRAB_SetupList_EnhancedRelocCompleteReq_PDU();
    void set_data(rnpRAB_SetupList_EnhancedRelocCompleteReq &);
    rnpRAB_SetupList_EnhancedRelocCompleteReq *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRAB_SetupList_EnhancedRelocCompleteReq & d);
    const rnpRAB_SetupList_EnhancedRelocCompleteReq *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRAB_SetupItem_EnhancedRelocCompleteReq_PDU : public ConcretePDU {
public:
    rnpRAB_SetupItem_EnhancedRelocCompleteReq_PDU();
    void set_data(rnpRAB_SetupItem_EnhancedRelocCompleteReq &);
    rnpRAB_SetupItem_EnhancedRelocCompleteReq *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRAB_SetupItem_EnhancedRelocCompleteReq & d);
    const rnpRAB_SetupItem_EnhancedRelocCompleteReq *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpEnhancedRelocationCompleteResponse_PDU : public ConcretePDU {
public:
    rnpEnhancedRelocationCompleteResponse_PDU();
    void set_data(rnpEnhancedRelocationCompleteResponse &);
    rnpEnhancedRelocationCompleteResponse *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpEnhancedRelocationCompleteResponse & d);
    const rnpEnhancedRelocationCompleteResponse *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRAB_SetupList_EnhancedRelocCompleteRes_PDU : public ConcretePDU {
public:
    rnpRAB_SetupList_EnhancedRelocCompleteRes_PDU();
    void set_data(rnpRAB_SetupList_EnhancedRelocCompleteRes &);
    rnpRAB_SetupList_EnhancedRelocCompleteRes *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRAB_SetupList_EnhancedRelocCompleteRes & d);
    const rnpRAB_SetupList_EnhancedRelocCompleteRes *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRAB_SetupItem_EnhancedRelocCompleteRes_PDU : public ConcretePDU {
public:
    rnpRAB_SetupItem_EnhancedRelocCompleteRes_PDU();
    void set_data(rnpRAB_SetupItem_EnhancedRelocCompleteRes &);
    rnpRAB_SetupItem_EnhancedRelocCompleteRes *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRAB_SetupItem_EnhancedRelocCompleteRes & d);
    const rnpRAB_SetupItem_EnhancedRelocCompleteRes *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRAB_ToBeReleasedList_EnhancedRelocCompleteRes_PDU : public ConcretePDU {
public:
    rnpRAB_ToBeReleasedList_EnhancedRelocCompleteRes_PDU();
    void set_data(rnpRAB_ToBeReleasedList_EnhancedRelocCompleteRes &);
    rnpRAB_ToBeReleasedList_EnhancedRelocCompleteRes *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRAB_ToBeReleasedList_EnhancedRelocCompleteRes & d);
    const rnpRAB_ToBeReleasedList_EnhancedRelocCompleteRes *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRAB_ToBeReleasedItem_EnhancedRelocCompleteRes_PDU : public ConcretePDU {
public:
    rnpRAB_ToBeReleasedItem_EnhancedRelocCompleteRes_PDU();
    void set_data(rnpRAB_ToBeReleasedItem_EnhancedRelocCompleteRes &);
    rnpRAB_ToBeReleasedItem_EnhancedRelocCompleteRes *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRAB_ToBeReleasedItem_EnhancedRelocCompleteRes & d);
    const rnpRAB_ToBeReleasedItem_EnhancedRelocCompleteRes *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpEnhancedRelocationCompleteFailure_PDU : public ConcretePDU {
public:
    rnpEnhancedRelocationCompleteFailure_PDU();
    void set_data(rnpEnhancedRelocationCompleteFailure &);
    rnpEnhancedRelocationCompleteFailure *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpEnhancedRelocationCompleteFailure & d);
    const rnpEnhancedRelocationCompleteFailure *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpEnhancedRelocationCompleteConfirm_PDU : public ConcretePDU {
public:
    rnpEnhancedRelocationCompleteConfirm_PDU();
    void set_data(rnpEnhancedRelocationCompleteConfirm &);
    rnpEnhancedRelocationCompleteConfirm *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpEnhancedRelocationCompleteConfirm & d);
    const rnpEnhancedRelocationCompleteConfirm *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpPaging_PDU : public ConcretePDU {
public:
    rnpPaging_PDU();
    void set_data(rnpPaging &);
    rnpPaging *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpPaging & d);
    const rnpPaging *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpCommonID_PDU : public ConcretePDU {
public:
    rnpCommonID_PDU();
    void set_data(rnpCommonID &);
    rnpCommonID *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpCommonID & d);
    const rnpCommonID *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpCN_InvokeTrace_PDU : public ConcretePDU {
public:
    rnpCN_InvokeTrace_PDU();
    void set_data(rnpCN_InvokeTrace &);
    rnpCN_InvokeTrace *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpCN_InvokeTrace & d);
    const rnpCN_InvokeTrace *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpCN_DeactivateTrace_PDU : public ConcretePDU {
public:
    rnpCN_DeactivateTrace_PDU();
    void set_data(rnpCN_DeactivateTrace &);
    rnpCN_DeactivateTrace *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpCN_DeactivateTrace & d);
    const rnpCN_DeactivateTrace *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpLocationReportingControl_PDU : public ConcretePDU {
public:
    rnpLocationReportingControl_PDU();
    void set_data(rnpLocationReportingControl &);
    rnpLocationReportingControl *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpLocationReportingControl & d);
    const rnpLocationReportingControl *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpLocationReport_PDU : public ConcretePDU {
public:
    rnpLocationReport_PDU();
    void set_data(rnpLocationReport &);
    rnpLocationReport *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpLocationReport & d);
    const rnpLocationReport *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpInitialUE_Message_PDU : public ConcretePDU {
public:
    rnpInitialUE_Message_PDU();
    void set_data(rnpInitialUE_Message &);
    rnpInitialUE_Message *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpInitialUE_Message & d);
    const rnpInitialUE_Message *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpDirectTransfer_PDU : public ConcretePDU {
public:
    rnpDirectTransfer_PDU();
    void set_data(rnpDirectTransfer &);
    rnpDirectTransfer *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpDirectTransfer & d);
    const rnpDirectTransfer *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRedirectionIndication_PDU : public ConcretePDU {
public:
    rnpRedirectionIndication_PDU();
    void set_data(rnpRedirectionIndication &);
    rnpRedirectionIndication *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRedirectionIndication & d);
    const rnpRedirectionIndication *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpOverload_PDU : public ConcretePDU {
public:
    rnpOverload_PDU();
    void set_data(rnpOverload &);
    rnpOverload *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpOverload & d);
    const rnpOverload *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpErrorIndication_PDU : public ConcretePDU {
public:
    rnpErrorIndication_PDU();
    void set_data(rnpErrorIndication &);
    rnpErrorIndication *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpErrorIndication & d);
    const rnpErrorIndication *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpSRNS_DataForwardCommand_PDU : public ConcretePDU {
public:
    rnpSRNS_DataForwardCommand_PDU();
    void set_data(rnpSRNS_DataForwardCommand &);
    rnpSRNS_DataForwardCommand *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpSRNS_DataForwardCommand & d);
    const rnpSRNS_DataForwardCommand *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpForwardSRNS_Context_PDU : public ConcretePDU {
public:
    rnpForwardSRNS_Context_PDU();
    void set_data(rnpForwardSRNS_Context &);
    rnpForwardSRNS_Context *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpForwardSRNS_Context & d);
    const rnpForwardSRNS_Context *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRAB_AssignmentRequest_PDU : public ConcretePDU {
public:
    rnpRAB_AssignmentRequest_PDU();
    void set_data(rnpRAB_AssignmentRequest &);
    rnpRAB_AssignmentRequest *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRAB_AssignmentRequest & d);
    const rnpRAB_AssignmentRequest *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRAB_SetupOrModifyList_PDU : public ConcretePDU {
public:
    rnpRAB_SetupOrModifyList_PDU();
    void set_data(rnpRAB_SetupOrModifyList &);
    rnpRAB_SetupOrModifyList *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRAB_SetupOrModifyList & d);
    const rnpRAB_SetupOrModifyList *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRAB_SetupOrModifyItemFirst_PDU : public ConcretePDU {
public:
    rnpRAB_SetupOrModifyItemFirst_PDU();
    void set_data(rnpRAB_SetupOrModifyItemFirst &);
    rnpRAB_SetupOrModifyItemFirst *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRAB_SetupOrModifyItemFirst & d);
    const rnpRAB_SetupOrModifyItemFirst *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpTransportLayerInformation_PDU : public ConcretePDU {
public:
    rnpTransportLayerInformation_PDU();
    void set_data(rnpTransportLayerInformation &);
    rnpTransportLayerInformation *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpTransportLayerInformation & d);
    const rnpTransportLayerInformation *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRAB_SetupOrModifyItemSecond_PDU : public ConcretePDU {
public:
    rnpRAB_SetupOrModifyItemSecond_PDU();
    void set_data(rnpRAB_SetupOrModifyItemSecond &);
    rnpRAB_SetupOrModifyItemSecond *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRAB_SetupOrModifyItemSecond & d);
    const rnpRAB_SetupOrModifyItemSecond *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRAB_AssignmentResponse_PDU : public ConcretePDU {
public:
    rnpRAB_AssignmentResponse_PDU();
    void set_data(rnpRAB_AssignmentResponse &);
    rnpRAB_AssignmentResponse *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRAB_AssignmentResponse & d);
    const rnpRAB_AssignmentResponse *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRAB_SetupOrModifiedList_PDU : public ConcretePDU {
public:
    rnpRAB_SetupOrModifiedList_PDU();
    void set_data(rnpRAB_SetupOrModifiedList &);
    rnpRAB_SetupOrModifiedList *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRAB_SetupOrModifiedList & d);
    const rnpRAB_SetupOrModifiedList *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRAB_SetupOrModifiedItem_PDU : public ConcretePDU {
public:
    rnpRAB_SetupOrModifiedItem_PDU();
    void set_data(rnpRAB_SetupOrModifiedItem &);
    rnpRAB_SetupOrModifiedItem *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRAB_SetupOrModifiedItem & d);
    const rnpRAB_SetupOrModifiedItem *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRAB_ReleasedList_PDU : public ConcretePDU {
public:
    rnpRAB_ReleasedList_PDU();
    void set_data(rnpRAB_ReleasedList &);
    rnpRAB_ReleasedList *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRAB_ReleasedList & d);
    const rnpRAB_ReleasedList *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRAB_ReleasedItem_PDU : public ConcretePDU {
public:
    rnpRAB_ReleasedItem_PDU();
    void set_data(rnpRAB_ReleasedItem &);
    rnpRAB_ReleasedItem *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRAB_ReleasedItem & d);
    const rnpRAB_ReleasedItem *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRAB_QueuedList_PDU : public ConcretePDU {
public:
    rnpRAB_QueuedList_PDU();
    void set_data(rnpRAB_QueuedList &);
    rnpRAB_QueuedList *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRAB_QueuedList & d);
    const rnpRAB_QueuedList *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRAB_QueuedItem_PDU : public ConcretePDU {
public:
    rnpRAB_QueuedItem_PDU();
    void set_data(rnpRAB_QueuedItem &);
    rnpRAB_QueuedItem *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRAB_QueuedItem & d);
    const rnpRAB_QueuedItem *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRAB_ReleaseFailedList_PDU : public ConcretePDU {
public:
    rnpRAB_ReleaseFailedList_PDU();
    void set_data(rnpRAB_ReleaseFailedList &);
    rnpRAB_ReleaseFailedList *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRAB_ReleaseFailedList & d);
    const rnpRAB_ReleaseFailedList *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpGERAN_Iumode_RAB_FailedList_RABAssgntResponse_PDU : public ConcretePDU {
public:
    rnpGERAN_Iumode_RAB_FailedList_RABAssgntResponse_PDU();
    void set_data(rnpGERAN_Iumode_RAB_FailedList_RABAssgntResponse &);
    rnpGERAN_Iumode_RAB_FailedList_RABAssgntResponse *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpGERAN_Iumode_RAB_FailedList_RABAssgntResponse & d);
    const rnpGERAN_Iumode_RAB_FailedList_RABAssgntResponse *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpGERAN_Iumode_RAB_Failed_RABAssgntResponse_Item_PDU : public ConcretePDU {
public:
    rnpGERAN_Iumode_RAB_Failed_RABAssgntResponse_Item_PDU();
    void set_data(rnpGERAN_Iumode_RAB_Failed_RABAssgntResponse_Item &);
    rnpGERAN_Iumode_RAB_Failed_RABAssgntResponse_Item *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpGERAN_Iumode_RAB_Failed_RABAssgntResponse_Item & d);
    const rnpGERAN_Iumode_RAB_Failed_RABAssgntResponse_Item *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpPrivateMessage_PDU : public ConcretePDU {
public:
    rnpPrivateMessage_PDU();
    void set_data(rnpPrivateMessage &);
    rnpPrivateMessage *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpPrivateMessage & d);
    const rnpPrivateMessage *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRANAP_RelocationInformation_PDU : public ConcretePDU {
public:
    rnpRANAP_RelocationInformation_PDU();
    void set_data(rnpRANAP_RelocationInformation &);
    rnpRANAP_RelocationInformation *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRANAP_RelocationInformation & d);
    const rnpRANAP_RelocationInformation *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpDirectTransferInformationList_RANAP_RelocInf_PDU : public ConcretePDU {
public:
    rnpDirectTransferInformationList_RANAP_RelocInf_PDU();
    void set_data(rnpDirectTransferInformationList_RANAP_RelocInf &);
    rnpDirectTransferInformationList_RANAP_RelocInf *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpDirectTransferInformationList_RANAP_RelocInf & d);
    const rnpDirectTransferInformationList_RANAP_RelocInf *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpDirectTransferInformationItem_RANAP_RelocInf_PDU : public ConcretePDU {
public:
    rnpDirectTransferInformationItem_RANAP_RelocInf_PDU();
    void set_data(rnpDirectTransferInformationItem_RANAP_RelocInf &);
    rnpDirectTransferInformationItem_RANAP_RelocInf *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpDirectTransferInformationItem_RANAP_RelocInf & d);
    const rnpDirectTransferInformationItem_RANAP_RelocInf *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRAB_ContextList_RANAP_RelocInf_PDU : public ConcretePDU {
public:
    rnpRAB_ContextList_RANAP_RelocInf_PDU();
    void set_data(rnpRAB_ContextList_RANAP_RelocInf &);
    rnpRAB_ContextList_RANAP_RelocInf *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRAB_ContextList_RANAP_RelocInf & d);
    const rnpRAB_ContextList_RANAP_RelocInf *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRAB_ContextItem_RANAP_RelocInf_PDU : public ConcretePDU {
public:
    rnpRAB_ContextItem_RANAP_RelocInf_PDU();
    void set_data(rnpRAB_ContextItem_RANAP_RelocInf &);
    rnpRAB_ContextItem_RANAP_RelocInf *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRAB_ContextItem_RANAP_RelocInf & d);
    const rnpRAB_ContextItem_RANAP_RelocInf *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRANAP_EnhancedRelocationInformationRequest_PDU : public ConcretePDU {
public:
    rnpRANAP_EnhancedRelocationInformationRequest_PDU();
    void set_data(rnpRANAP_EnhancedRelocationInformationRequest &);
    rnpRANAP_EnhancedRelocationInformationRequest *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRANAP_EnhancedRelocationInformationRequest & d);
    const rnpRANAP_EnhancedRelocationInformationRequest *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRAB_SetupList_EnhRelocInfoReq_PDU : public ConcretePDU {
public:
    rnpRAB_SetupList_EnhRelocInfoReq_PDU();
    void set_data(rnpRAB_SetupList_EnhRelocInfoReq &);
    rnpRAB_SetupList_EnhRelocInfoReq *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRAB_SetupList_EnhRelocInfoReq & d);
    const rnpRAB_SetupList_EnhRelocInfoReq *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRAB_SetupItem_EnhRelocInfoReq_PDU : public ConcretePDU {
public:
    rnpRAB_SetupItem_EnhRelocInfoReq_PDU();
    void set_data(rnpRAB_SetupItem_EnhRelocInfoReq &);
    rnpRAB_SetupItem_EnhRelocInfoReq *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRAB_SetupItem_EnhRelocInfoReq & d);
    const rnpRAB_SetupItem_EnhRelocInfoReq *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRANAP_EnhancedRelocationInformationResponse_PDU : public ConcretePDU {
public:
    rnpRANAP_EnhancedRelocationInformationResponse_PDU();
    void set_data(rnpRANAP_EnhancedRelocationInformationResponse &);
    rnpRANAP_EnhancedRelocationInformationResponse *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRANAP_EnhancedRelocationInformationResponse & d);
    const rnpRANAP_EnhancedRelocationInformationResponse *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRAB_SetupList_EnhRelocInfoRes_PDU : public ConcretePDU {
public:
    rnpRAB_SetupList_EnhRelocInfoRes_PDU();
    void set_data(rnpRAB_SetupList_EnhRelocInfoRes &);
    rnpRAB_SetupList_EnhRelocInfoRes *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRAB_SetupList_EnhRelocInfoRes & d);
    const rnpRAB_SetupList_EnhRelocInfoRes *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRAB_SetupItem_EnhRelocInfoRes_PDU : public ConcretePDU {
public:
    rnpRAB_SetupItem_EnhRelocInfoRes_PDU();
    void set_data(rnpRAB_SetupItem_EnhRelocInfoRes &);
    rnpRAB_SetupItem_EnhRelocInfoRes *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRAB_SetupItem_EnhRelocInfoRes & d);
    const rnpRAB_SetupItem_EnhRelocInfoRes *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRAB_FailedList_EnhRelocInfoRes_PDU : public ConcretePDU {
public:
    rnpRAB_FailedList_EnhRelocInfoRes_PDU();
    void set_data(rnpRAB_FailedList_EnhRelocInfoRes &);
    rnpRAB_FailedList_EnhRelocInfoRes *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRAB_FailedList_EnhRelocInfoRes & d);
    const rnpRAB_FailedList_EnhRelocInfoRes *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRAB_FailedItem_EnhRelocInfoRes_PDU : public ConcretePDU {
public:
    rnpRAB_FailedItem_EnhRelocInfoRes_PDU();
    void set_data(rnpRAB_FailedItem_EnhRelocInfoRes &);
    rnpRAB_FailedItem_EnhRelocInfoRes *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRAB_FailedItem_EnhRelocInfoRes & d);
    const rnpRAB_FailedItem_EnhRelocInfoRes *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRAB_ModifyRequest_PDU : public ConcretePDU {
public:
    rnpRAB_ModifyRequest_PDU();
    void set_data(rnpRAB_ModifyRequest &);
    rnpRAB_ModifyRequest *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRAB_ModifyRequest & d);
    const rnpRAB_ModifyRequest *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRAB_ModifyList_PDU : public ConcretePDU {
public:
    rnpRAB_ModifyList_PDU();
    void set_data(rnpRAB_ModifyList &);
    rnpRAB_ModifyList *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRAB_ModifyList & d);
    const rnpRAB_ModifyList *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRAB_ModifyItem_PDU : public ConcretePDU {
public:
    rnpRAB_ModifyItem_PDU();
    void set_data(rnpRAB_ModifyItem &);
    rnpRAB_ModifyItem *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRAB_ModifyItem & d);
    const rnpRAB_ModifyItem *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpLocationRelatedDataRequest_PDU : public ConcretePDU {
public:
    rnpLocationRelatedDataRequest_PDU();
    void set_data(rnpLocationRelatedDataRequest &);
    rnpLocationRelatedDataRequest *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpLocationRelatedDataRequest & d);
    const rnpLocationRelatedDataRequest *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpLocationRelatedDataResponse_PDU : public ConcretePDU {
public:
    rnpLocationRelatedDataResponse_PDU();
    void set_data(rnpLocationRelatedDataResponse &);
    rnpLocationRelatedDataResponse *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpLocationRelatedDataResponse & d);
    const rnpLocationRelatedDataResponse *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpLocationRelatedDataFailure_PDU : public ConcretePDU {
public:
    rnpLocationRelatedDataFailure_PDU();
    void set_data(rnpLocationRelatedDataFailure &);
    rnpLocationRelatedDataFailure *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpLocationRelatedDataFailure & d);
    const rnpLocationRelatedDataFailure *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpInformationTransferIndication_PDU : public ConcretePDU {
public:
    rnpInformationTransferIndication_PDU();
    void set_data(rnpInformationTransferIndication &);
    rnpInformationTransferIndication *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpInformationTransferIndication & d);
    const rnpInformationTransferIndication *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpInformationTransferConfirmation_PDU : public ConcretePDU {
public:
    rnpInformationTransferConfirmation_PDU();
    void set_data(rnpInformationTransferConfirmation &);
    rnpInformationTransferConfirmation *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpInformationTransferConfirmation & d);
    const rnpInformationTransferConfirmation *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpInformationTransferFailure_PDU : public ConcretePDU {
public:
    rnpInformationTransferFailure_PDU();
    void set_data(rnpInformationTransferFailure &);
    rnpInformationTransferFailure *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpInformationTransferFailure & d);
    const rnpInformationTransferFailure *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpUESpecificInformationIndication_PDU : public ConcretePDU {
public:
    rnpUESpecificInformationIndication_PDU();
    void set_data(rnpUESpecificInformationIndication &);
    rnpUESpecificInformationIndication *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpUESpecificInformationIndication & d);
    const rnpUESpecificInformationIndication *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpDirectInformationTransfer_PDU : public ConcretePDU {
public:
    rnpDirectInformationTransfer_PDU();
    void set_data(rnpDirectInformationTransfer &);
    rnpDirectInformationTransfer *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpDirectInformationTransfer & d);
    const rnpDirectInformationTransfer *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpUplinkInformationExchangeRequest_PDU : public ConcretePDU {
public:
    rnpUplinkInformationExchangeRequest_PDU();
    void set_data(rnpUplinkInformationExchangeRequest &);
    rnpUplinkInformationExchangeRequest *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpUplinkInformationExchangeRequest & d);
    const rnpUplinkInformationExchangeRequest *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpUplinkInformationExchangeResponse_PDU : public ConcretePDU {
public:
    rnpUplinkInformationExchangeResponse_PDU();
    void set_data(rnpUplinkInformationExchangeResponse &);
    rnpUplinkInformationExchangeResponse *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpUplinkInformationExchangeResponse & d);
    const rnpUplinkInformationExchangeResponse *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpUplinkInformationExchangeFailure_PDU : public ConcretePDU {
public:
    rnpUplinkInformationExchangeFailure_PDU();
    void set_data(rnpUplinkInformationExchangeFailure &);
    rnpUplinkInformationExchangeFailure *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpUplinkInformationExchangeFailure & d);
    const rnpUplinkInformationExchangeFailure *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpMBMSSessionStart_PDU : public ConcretePDU {
public:
    rnpMBMSSessionStart_PDU();
    void set_data(rnpMBMSSessionStart &);
    rnpMBMSSessionStart *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpMBMSSessionStart & d);
    const rnpMBMSSessionStart *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpMBMSSynchronisationInformation_PDU : public ConcretePDU {
public:
    rnpMBMSSynchronisationInformation_PDU();
    void set_data(rnpMBMSSynchronisationInformation &);
    rnpMBMSSynchronisationInformation *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpMBMSSynchronisationInformation & d);
    const rnpMBMSSynchronisationInformation *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpMBMSSessionStartResponse_PDU : public ConcretePDU {
public:
    rnpMBMSSessionStartResponse_PDU();
    void set_data(rnpMBMSSessionStartResponse &);
    rnpMBMSSessionStartResponse *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpMBMSSessionStartResponse & d);
    const rnpMBMSSessionStartResponse *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpMBMSSessionStartFailure_PDU : public ConcretePDU {
public:
    rnpMBMSSessionStartFailure_PDU();
    void set_data(rnpMBMSSessionStartFailure &);
    rnpMBMSSessionStartFailure *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpMBMSSessionStartFailure & d);
    const rnpMBMSSessionStartFailure *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpMBMSSessionUpdate_PDU : public ConcretePDU {
public:
    rnpMBMSSessionUpdate_PDU();
    void set_data(rnpMBMSSessionUpdate &);
    rnpMBMSSessionUpdate *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpMBMSSessionUpdate & d);
    const rnpMBMSSessionUpdate *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpMBMSSessionUpdateResponse_PDU : public ConcretePDU {
public:
    rnpMBMSSessionUpdateResponse_PDU();
    void set_data(rnpMBMSSessionUpdateResponse &);
    rnpMBMSSessionUpdateResponse *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpMBMSSessionUpdateResponse & d);
    const rnpMBMSSessionUpdateResponse *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpMBMSSessionUpdateFailure_PDU : public ConcretePDU {
public:
    rnpMBMSSessionUpdateFailure_PDU();
    void set_data(rnpMBMSSessionUpdateFailure &);
    rnpMBMSSessionUpdateFailure *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpMBMSSessionUpdateFailure & d);
    const rnpMBMSSessionUpdateFailure *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpMBMSSessionStop_PDU : public ConcretePDU {
public:
    rnpMBMSSessionStop_PDU();
    void set_data(rnpMBMSSessionStop &);
    rnpMBMSSessionStop *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpMBMSSessionStop & d);
    const rnpMBMSSessionStop *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpMBMSSessionStopResponse_PDU : public ConcretePDU {
public:
    rnpMBMSSessionStopResponse_PDU();
    void set_data(rnpMBMSSessionStopResponse &);
    rnpMBMSSessionStopResponse *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpMBMSSessionStopResponse & d);
    const rnpMBMSSessionStopResponse *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpMBMSUELinkingRequest_PDU : public ConcretePDU {
public:
    rnpMBMSUELinkingRequest_PDU();
    void set_data(rnpMBMSUELinkingRequest &);
    rnpMBMSUELinkingRequest *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpMBMSUELinkingRequest & d);
    const rnpMBMSUELinkingRequest *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpLeftMBMSBearerService_IEs_PDU : public ConcretePDU {
public:
    rnpLeftMBMSBearerService_IEs_PDU();
    void set_data(rnpLeftMBMSBearerService_IEs &);
    rnpLeftMBMSBearerService_IEs *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpLeftMBMSBearerService_IEs & d);
    const rnpLeftMBMSBearerService_IEs *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpMBMSUELinkingResponse_PDU : public ConcretePDU {
public:
    rnpMBMSUELinkingResponse_PDU();
    void set_data(rnpMBMSUELinkingResponse &);
    rnpMBMSUELinkingResponse *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpMBMSUELinkingResponse & d);
    const rnpMBMSUELinkingResponse *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpUnsuccessfulLinking_IEs_PDU : public ConcretePDU {
public:
    rnpUnsuccessfulLinking_IEs_PDU();
    void set_data(rnpUnsuccessfulLinking_IEs &);
    rnpUnsuccessfulLinking_IEs *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpUnsuccessfulLinking_IEs & d);
    const rnpUnsuccessfulLinking_IEs *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpMBMSRegistrationRequest_PDU : public ConcretePDU {
public:
    rnpMBMSRegistrationRequest_PDU();
    void set_data(rnpMBMSRegistrationRequest &);
    rnpMBMSRegistrationRequest *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpMBMSRegistrationRequest & d);
    const rnpMBMSRegistrationRequest *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpMBMSRegistrationResponse_PDU : public ConcretePDU {
public:
    rnpMBMSRegistrationResponse_PDU();
    void set_data(rnpMBMSRegistrationResponse &);
    rnpMBMSRegistrationResponse *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpMBMSRegistrationResponse & d);
    const rnpMBMSRegistrationResponse *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpMBMSRegistrationFailure_PDU : public ConcretePDU {
public:
    rnpMBMSRegistrationFailure_PDU();
    void set_data(rnpMBMSRegistrationFailure &);
    rnpMBMSRegistrationFailure *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpMBMSRegistrationFailure & d);
    const rnpMBMSRegistrationFailure *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpMBMSCNDe_RegistrationRequest_PDU : public ConcretePDU {
public:
    rnpMBMSCNDe_RegistrationRequest_PDU();
    void set_data(rnpMBMSCNDe_RegistrationRequest &);
    rnpMBMSCNDe_RegistrationRequest *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpMBMSCNDe_RegistrationRequest & d);
    const rnpMBMSCNDe_RegistrationRequest *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpMBMSCNDe_RegistrationResponse_PDU : public ConcretePDU {
public:
    rnpMBMSCNDe_RegistrationResponse_PDU();
    void set_data(rnpMBMSCNDe_RegistrationResponse &);
    rnpMBMSCNDe_RegistrationResponse *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpMBMSCNDe_RegistrationResponse & d);
    const rnpMBMSCNDe_RegistrationResponse *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpMBMSRABEstablishmentIndication_PDU : public ConcretePDU {
public:
    rnpMBMSRABEstablishmentIndication_PDU();
    void set_data(rnpMBMSRABEstablishmentIndication &);
    rnpMBMSRABEstablishmentIndication *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpMBMSRABEstablishmentIndication & d);
    const rnpMBMSRABEstablishmentIndication *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpMBMSRABReleaseRequest_PDU : public ConcretePDU {
public:
    rnpMBMSRABReleaseRequest_PDU();
    void set_data(rnpMBMSRABReleaseRequest &);
    rnpMBMSRABReleaseRequest *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpMBMSRABReleaseRequest & d);
    const rnpMBMSRABReleaseRequest *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpMBMSRABRelease_PDU : public ConcretePDU {
public:
    rnpMBMSRABRelease_PDU();
    void set_data(rnpMBMSRABRelease &);
    rnpMBMSRABRelease *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpMBMSRABRelease & d);
    const rnpMBMSRABRelease *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpMBMSRABReleaseFailure_PDU : public ConcretePDU {
public:
    rnpMBMSRABReleaseFailure_PDU();
    void set_data(rnpMBMSRABReleaseFailure &);
    rnpMBMSRABReleaseFailure *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpMBMSRABReleaseFailure & d);
    const rnpMBMSRABReleaseFailure *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpSRVCC_CSKeysRequest_PDU : public ConcretePDU {
public:
    rnpSRVCC_CSKeysRequest_PDU();
    void set_data(rnpSRVCC_CSKeysRequest &);
    rnpSRVCC_CSKeysRequest *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpSRVCC_CSKeysRequest & d);
    const rnpSRVCC_CSKeysRequest *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpSRVCC_CSKeysResponse_PDU : public ConcretePDU {
public:
    rnpSRVCC_CSKeysResponse_PDU();
    void set_data(rnpSRVCC_CSKeysResponse &);
    rnpSRVCC_CSKeysResponse *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpSRVCC_CSKeysResponse & d);
    const rnpSRVCC_CSKeysResponse *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpUeRadioCapabilityMatchRequest_PDU : public ConcretePDU {
public:
    rnpUeRadioCapabilityMatchRequest_PDU();
    void set_data(rnpUeRadioCapabilityMatchRequest &);
    rnpUeRadioCapabilityMatchRequest *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpUeRadioCapabilityMatchRequest & d);
    const rnpUeRadioCapabilityMatchRequest *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpUeRadioCapabilityMatchResponse_PDU : public ConcretePDU {
public:
    rnpUeRadioCapabilityMatchResponse_PDU();
    void set_data(rnpUeRadioCapabilityMatchResponse &);
    rnpUeRadioCapabilityMatchResponse *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpUeRadioCapabilityMatchResponse & d);
    const rnpUeRadioCapabilityMatchResponse *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpAccuracyFulfilmentIndicator_PDU : public ConcretePDU {
public:
    rnpAccuracyFulfilmentIndicator_PDU();
    void set_data(rnpAccuracyFulfilmentIndicator &);
    rnpAccuracyFulfilmentIndicator *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpAccuracyFulfilmentIndicator & d);
    const rnpAccuracyFulfilmentIndicator *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpAlt_RAB_Parameters_PDU : public ConcretePDU {
public:
    rnpAlt_RAB_Parameters_PDU();
    void set_data(rnpAlt_RAB_Parameters &);
    rnpAlt_RAB_Parameters *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpAlt_RAB_Parameters & d);
    const rnpAlt_RAB_Parameters *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpAlt_RAB_Parameter_ExtendedGuaranteedBitrateInf_PDU : public ConcretePDU {
public:
    rnpAlt_RAB_Parameter_ExtendedGuaranteedBitrateInf_PDU();
    void set_data(rnpAlt_RAB_Parameter_ExtendedGuaranteedBitrateInf &);
    rnpAlt_RAB_Parameter_ExtendedGuaranteedBitrateInf *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpAlt_RAB_Parameter_ExtendedGuaranteedBitrateInf & d);
    const rnpAlt_RAB_Parameter_ExtendedGuaranteedBitrateInf *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpAlt_RAB_Parameter_SupportedGuaranteedBitrateInf_PDU : public ConcretePDU {
public:
    rnpAlt_RAB_Parameter_SupportedGuaranteedBitrateInf_PDU();
    void set_data(rnpAlt_RAB_Parameter_SupportedGuaranteedBitrateInf &);
    rnpAlt_RAB_Parameter_SupportedGuaranteedBitrateInf *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpAlt_RAB_Parameter_SupportedGuaranteedBitrateInf & d);
    const rnpAlt_RAB_Parameter_SupportedGuaranteedBitrateInf *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpAlt_RAB_Parameter_ExtendedMaxBitrateInf_PDU : public ConcretePDU {
public:
    rnpAlt_RAB_Parameter_ExtendedMaxBitrateInf_PDU();
    void set_data(rnpAlt_RAB_Parameter_ExtendedMaxBitrateInf &);
    rnpAlt_RAB_Parameter_ExtendedMaxBitrateInf *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpAlt_RAB_Parameter_ExtendedMaxBitrateInf & d);
    const rnpAlt_RAB_Parameter_ExtendedMaxBitrateInf *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpAlt_RAB_Parameter_SupportedMaxBitrateInf_PDU : public ConcretePDU {
public:
    rnpAlt_RAB_Parameter_SupportedMaxBitrateInf_PDU();
    void set_data(rnpAlt_RAB_Parameter_SupportedMaxBitrateInf &);
    rnpAlt_RAB_Parameter_SupportedMaxBitrateInf *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpAlt_RAB_Parameter_SupportedMaxBitrateInf & d);
    const rnpAlt_RAB_Parameter_SupportedMaxBitrateInf *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpAlternativeRABConfigurationRequest_PDU : public ConcretePDU {
public:
    rnpAlternativeRABConfigurationRequest_PDU();
    void set_data(rnpAlternativeRABConfigurationRequest &);
    rnpAlternativeRABConfigurationRequest *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpAlternativeRABConfigurationRequest & d);
    const rnpAlternativeRABConfigurationRequest *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpAPN_PDU : public ConcretePDU {
public:
    rnpAPN_PDU();
    void set_data(rnpAPN &);
    rnpAPN *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpAPN & d);
    const rnpAPN *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpAreaIdentity_PDU : public ConcretePDU {
public:
    rnpAreaIdentity_PDU();
    void set_data(rnpAreaIdentity &);
    rnpAreaIdentity *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpAreaIdentity & d);
    const rnpAreaIdentity *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpAss_RAB_Parameters_PDU : public ConcretePDU {
public:
    rnpAss_RAB_Parameters_PDU();
    void set_data(rnpAss_RAB_Parameters &);
    rnpAss_RAB_Parameters *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpAss_RAB_Parameters & d);
    const rnpAss_RAB_Parameters *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpAss_RAB_Parameter_ExtendedGuaranteedBitrateList_PDU : public ConcretePDU {
public:
    rnpAss_RAB_Parameter_ExtendedGuaranteedBitrateList_PDU();
    void set_data(rnpAss_RAB_Parameter_ExtendedGuaranteedBitrateList &);
    rnpAss_RAB_Parameter_ExtendedGuaranteedBitrateList *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpAss_RAB_Parameter_ExtendedGuaranteedBitrateList & d);
    const rnpAss_RAB_Parameter_ExtendedGuaranteedBitrateList *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpAss_RAB_Parameter_ExtendedMaxBitrateList_PDU : public ConcretePDU {
public:
    rnpAss_RAB_Parameter_ExtendedMaxBitrateList_PDU();
    void set_data(rnpAss_RAB_Parameter_ExtendedMaxBitrateList &);
    rnpAss_RAB_Parameter_ExtendedMaxBitrateList *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpAss_RAB_Parameter_ExtendedMaxBitrateList & d);
    const rnpAss_RAB_Parameter_ExtendedMaxBitrateList *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpBroadcastAssistanceDataDecipheringKeys_PDU : public ConcretePDU {
public:
    rnpBroadcastAssistanceDataDecipheringKeys_PDU();
    void set_data(rnpBroadcastAssistanceDataDecipheringKeys &);
    rnpBroadcastAssistanceDataDecipheringKeys *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpBroadcastAssistanceDataDecipheringKeys & d);
    const rnpBroadcastAssistanceDataDecipheringKeys *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpCause_PDU : public ConcretePDU {
public:
    rnpCause_PDU();
    void set_data(rnpCause &);
    rnpCause *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpCause & d);
    const rnpCause *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpCell_Access_Mode_PDU : public ConcretePDU {
public:
    rnpCell_Access_Mode_PDU();
    void set_data(rnpCell_Access_Mode &);
    rnpCell_Access_Mode *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpCell_Access_Mode & d);
    const rnpCell_Access_Mode *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpCellLoadInformationGroup_PDU : public ConcretePDU {
public:
    rnpCellLoadInformationGroup_PDU();
    void set_data(rnpCellLoadInformationGroup &);
    rnpCellLoadInformationGroup *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpCellLoadInformationGroup & d);
    const rnpCellLoadInformationGroup *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpClientType_PDU : public ConcretePDU {
public:
    rnpClientType_PDU();
    void set_data(rnpClientType &);
    rnpClientType *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpClientType & d);
    const rnpClientType *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpCriticalityDiagnostics_PDU : public ConcretePDU {
public:
    rnpCriticalityDiagnostics_PDU();
    void set_data(rnpCriticalityDiagnostics &);
    rnpCriticalityDiagnostics *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpCriticalityDiagnostics & d);
    const rnpCriticalityDiagnostics *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpMessageStructure_PDU : public ConcretePDU {
public:
    rnpMessageStructure_PDU();
    void set_data(rnpMessageStructure &);
    rnpMessageStructure *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpMessageStructure & d);
    const rnpMessageStructure *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpChosenEncryptionAlgorithm_PDU : public ConcretePDU {
public:
    rnpChosenEncryptionAlgorithm_PDU();
    void set_data(rnpChosenEncryptionAlgorithm &);
    rnpChosenEncryptionAlgorithm *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpChosenEncryptionAlgorithm & d);
    const rnpChosenEncryptionAlgorithm *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpChosenIntegrityProtectionAlgorithm_PDU : public ConcretePDU {
public:
    rnpChosenIntegrityProtectionAlgorithm_PDU();
    void set_data(rnpChosenIntegrityProtectionAlgorithm &);
    rnpChosenIntegrityProtectionAlgorithm *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpChosenIntegrityProtectionAlgorithm & d);
    const rnpChosenIntegrityProtectionAlgorithm *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpClassmarkInformation2_PDU : public ConcretePDU {
public:
    rnpClassmarkInformation2_PDU();
    void set_data(rnpClassmarkInformation2 &);
    rnpClassmarkInformation2 *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpClassmarkInformation2 & d);
    const rnpClassmarkInformation2 *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpClassmarkInformation3_PDU : public ConcretePDU {
public:
    rnpClassmarkInformation3_PDU();
    void set_data(rnpClassmarkInformation3 &);
    rnpClassmarkInformation3 *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpClassmarkInformation3 & d);
    const rnpClassmarkInformation3 *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpCN_DomainIndicator_PDU : public ConcretePDU {
public:
    rnpCN_DomainIndicator_PDU();
    void set_data(rnpCN_DomainIndicator &);
    rnpCN_DomainIndicator *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpCN_DomainIndicator & d);
    const rnpCN_DomainIndicator *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpCorrelation_ID_PDU : public ConcretePDU {
public:
    rnpCorrelation_ID_PDU();
    void set_data(rnpCorrelation_ID &);
    rnpCorrelation_ID *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpCorrelation_ID & d);
    const rnpCorrelation_ID *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpCSFB_Information_PDU : public ConcretePDU {
public:
    rnpCSFB_Information_PDU();
    void set_data(rnpCSFB_Information &);
    rnpCSFB_Information *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpCSFB_Information & d);
    const rnpCSFB_Information *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpCSG_Id_PDU : public ConcretePDU {
public:
    rnpCSG_Id_PDU();
    void set_data(rnpCSG_Id &);
    rnpCSG_Id *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpCSG_Id & d);
    const rnpCSG_Id *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpCSG_Id_List_PDU : public ConcretePDU {
public:
    rnpCSG_Id_List_PDU();
    void set_data(rnpCSG_Id_List &);
    rnpCSG_Id_List *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpCSG_Id_List & d);
    const rnpCSG_Id_List *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpCSG_Membership_Status_PDU : public ConcretePDU {
public:
    rnpCSG_Membership_Status_PDU();
    void set_data(rnpCSG_Membership_Status &);
    rnpCSG_Membership_Status *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpCSG_Membership_Status & d);
    const rnpCSG_Membership_Status *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpDeltaRAListofIdleModeUEs_PDU : public ConcretePDU {
public:
    rnpDeltaRAListofIdleModeUEs_PDU();
    void set_data(rnpDeltaRAListofIdleModeUEs &);
    rnpDeltaRAListofIdleModeUEs *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpDeltaRAListofIdleModeUEs & d);
    const rnpDeltaRAListofIdleModeUEs *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpD_RNTI_PDU : public ConcretePDU {
public:
    rnpD_RNTI_PDU();
    void set_data(rnpD_RNTI &);
    rnpD_RNTI *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpD_RNTI & d);
    const rnpD_RNTI *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpDRX_CycleLengthCoefficient_PDU : public ConcretePDU {
public:
    rnpDRX_CycleLengthCoefficient_PDU();
    void set_data(rnpDRX_CycleLengthCoefficient &);
    rnpDRX_CycleLengthCoefficient *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpDRX_CycleLengthCoefficient & d);
    const rnpDRX_CycleLengthCoefficient *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpEARFCN_Extended_PDU : public ConcretePDU {
public:
    rnpEARFCN_Extended_PDU();
    void set_data(rnpEARFCN_Extended &);
    rnpEARFCN_Extended *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpEARFCN_Extended & d);
    const rnpEARFCN_Extended *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpE_DCH_MAC_d_Flow_ID_PDU : public ConcretePDU {
public:
    rnpE_DCH_MAC_d_Flow_ID_PDU();
    void set_data(rnpE_DCH_MAC_d_Flow_ID &);
    rnpE_DCH_MAC_d_Flow_ID *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpE_DCH_MAC_d_Flow_ID & d);
    const rnpE_DCH_MAC_d_Flow_ID *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpEncryptionInformation_PDU : public ConcretePDU {
public:
    rnpEncryptionInformation_PDU();
    void set_data(rnpEncryptionInformation &);
    rnpEncryptionInformation *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpEncryptionInformation & d);
    const rnpEncryptionInformation *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpEncryptionKey_PDU : public ConcretePDU {
public:
    rnpEncryptionKey_PDU();
    void set_data(rnpEncryptionKey &);
    rnpEncryptionKey *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpEncryptionKey & d);
    const rnpEncryptionKey *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpEnd_Of_CSFB_PDU : public ConcretePDU {
public:
    rnpEnd_Of_CSFB_PDU();
    void set_data(rnpEnd_Of_CSFB &);
    rnpEnd_Of_CSFB *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpEnd_Of_CSFB & d);
    const rnpEnd_Of_CSFB *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpE_UTRAN_Service_Handover_PDU : public ConcretePDU {
public:
    rnpE_UTRAN_Service_Handover_PDU();
    void set_data(rnpE_UTRAN_Service_Handover &);
    rnpE_UTRAN_Service_Handover *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpE_UTRAN_Service_Handover & d);
    const rnpE_UTRAN_Service_Handover *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpExtendedRNC_ID_PDU : public ConcretePDU {
public:
    rnpExtendedRNC_ID_PDU();
    void set_data(rnpExtendedRNC_ID &);
    rnpExtendedRNC_ID *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpExtendedRNC_ID & d);
    const rnpExtendedRNC_ID *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpFrequenceLayerConvergenceFlag_PDU : public ConcretePDU {
public:
    rnpFrequenceLayerConvergenceFlag_PDU();
    void set_data(rnpFrequenceLayerConvergenceFlag &);
    rnpFrequenceLayerConvergenceFlag *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpFrequenceLayerConvergenceFlag & d);
    const rnpFrequenceLayerConvergenceFlag *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpGANSS_PositioningDataSet_PDU : public ConcretePDU {
public:
    rnpGANSS_PositioningDataSet_PDU();
    void set_data(rnpGANSS_PositioningDataSet &);
    rnpGANSS_PositioningDataSet *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpGANSS_PositioningDataSet & d);
    const rnpGANSS_PositioningDataSet *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpGERAN_BSC_Container_PDU : public ConcretePDU {
public:
    rnpGERAN_BSC_Container_PDU();
    void set_data(rnpGERAN_BSC_Container &);
    rnpGERAN_BSC_Container *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpGERAN_BSC_Container & d);
    const rnpGERAN_BSC_Container *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpGERAN_Classmark_PDU : public ConcretePDU {
public:
    rnpGERAN_Classmark_PDU();
    void set_data(rnpGERAN_Classmark &);
    rnpGERAN_Classmark *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpGERAN_Classmark & d);
    const rnpGERAN_Classmark *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpGlobalCN_ID_PDU : public ConcretePDU {
public:
    rnpGlobalCN_ID_PDU();
    void set_data(rnpGlobalCN_ID &);
    rnpGlobalCN_ID *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpGlobalCN_ID & d);
    const rnpGlobalCN_ID *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpGlobalRNC_ID_PDU : public ConcretePDU {
public:
    rnpGlobalRNC_ID_PDU();
    void set_data(rnpGlobalRNC_ID &);
    rnpGlobalRNC_ID *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpGlobalRNC_ID & d);
    const rnpGlobalRNC_ID *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpHigherBitratesThan16MbpsFlag_PDU : public ConcretePDU {
public:
    rnpHigherBitratesThan16MbpsFlag_PDU();
    void set_data(rnpHigherBitratesThan16MbpsFlag &);
    rnpHigherBitratesThan16MbpsFlag *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpHigherBitratesThan16MbpsFlag & d);
    const rnpHigherBitratesThan16MbpsFlag *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpHS_DSCH_MAC_d_Flow_ID_PDU : public ConcretePDU {
public:
    rnpHS_DSCH_MAC_d_Flow_ID_PDU();
    void set_data(rnpHS_DSCH_MAC_d_Flow_ID &);
    rnpHS_DSCH_MAC_d_Flow_ID *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpHS_DSCH_MAC_d_Flow_ID & d);
    const rnpHS_DSCH_MAC_d_Flow_ID *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpIMSI_PDU : public ConcretePDU {
public:
    rnpIMSI_PDU();
    void set_data(rnpIMSI &);
    rnpIMSI *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpIMSI & d);
    const rnpIMSI *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpIncludeVelocity_PDU : public ConcretePDU {
public:
    rnpIncludeVelocity_PDU();
    void set_data(rnpIncludeVelocity &);
    rnpIncludeVelocity *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpIncludeVelocity & d);
    const rnpIncludeVelocity *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpInformationExchangeID_PDU : public ConcretePDU {
public:
    rnpInformationExchangeID_PDU();
    void set_data(rnpInformationExchangeID &);
    rnpInformationExchangeID *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpInformationExchangeID & d);
    const rnpInformationExchangeID *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpInformationExchangeType_PDU : public ConcretePDU {
public:
    rnpInformationExchangeType_PDU();
    void set_data(rnpInformationExchangeType &);
    rnpInformationExchangeType *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpInformationExchangeType & d);
    const rnpInformationExchangeType *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpInformationRequested_PDU : public ConcretePDU {
public:
    rnpInformationRequested_PDU();
    void set_data(rnpInformationRequested &);
    rnpInformationRequested *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpInformationRequested & d);
    const rnpInformationRequested *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpInformationRequestType_PDU : public ConcretePDU {
public:
    rnpInformationRequestType_PDU();
    void set_data(rnpInformationRequestType &);
    rnpInformationRequestType *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpInformationRequestType & d);
    const rnpInformationRequestType *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpInformationTransferID_PDU : public ConcretePDU {
public:
    rnpInformationTransferID_PDU();
    void set_data(rnpInformationTransferID &);
    rnpInformationTransferID *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpInformationTransferID & d);
    const rnpInformationTransferID *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpInformationTransferType_PDU : public ConcretePDU {
public:
    rnpInformationTransferType_PDU();
    void set_data(rnpInformationTransferType &);
    rnpInformationTransferType *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpInformationTransferType & d);
    const rnpInformationTransferType *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpIntegrityProtectionInformation_PDU : public ConcretePDU {
public:
    rnpIntegrityProtectionInformation_PDU();
    void set_data(rnpIntegrityProtectionInformation &);
    rnpIntegrityProtectionInformation *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpIntegrityProtectionInformation & d);
    const rnpIntegrityProtectionInformation *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpIntegrityProtectionKey_PDU : public ConcretePDU {
public:
    rnpIntegrityProtectionKey_PDU();
    void set_data(rnpIntegrityProtectionKey &);
    rnpIntegrityProtectionKey *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpIntegrityProtectionKey & d);
    const rnpIntegrityProtectionKey *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpInterSystemInformationTransferType_PDU : public ConcretePDU {
public:
    rnpInterSystemInformationTransferType_PDU();
    void set_data(rnpInterSystemInformationTransferType &);
    rnpInterSystemInformationTransferType *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpInterSystemInformationTransferType & d);
    const rnpInterSystemInformationTransferType *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpInterSystemInformation_TransparentContainer_PDU : public ConcretePDU {
public:
    rnpInterSystemInformation_TransparentContainer_PDU();
    void set_data(rnpInterSystemInformation_TransparentContainer &);
    rnpInterSystemInformation_TransparentContainer *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpInterSystemInformation_TransparentContainer & d);
    const rnpInterSystemInformation_TransparentContainer *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpIPMulticastAddress_PDU : public ConcretePDU {
public:
    rnpIPMulticastAddress_PDU();
    void set_data(rnpIPMulticastAddress &);
    rnpIPMulticastAddress *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpIPMulticastAddress & d);
    const rnpIPMulticastAddress *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpIuSignallingConnectionIdentifier_PDU : public ConcretePDU {
public:
    rnpIuSignallingConnectionIdentifier_PDU();
    void set_data(rnpIuSignallingConnectionIdentifier &);
    rnpIuSignallingConnectionIdentifier *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpIuSignallingConnectionIdentifier & d);
    const rnpIuSignallingConnectionIdentifier *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpIuTransportAssociation_PDU : public ConcretePDU {
public:
    rnpIuTransportAssociation_PDU();
    void set_data(rnpIuTransportAssociation &);
    rnpIuTransportAssociation *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpIuTransportAssociation & d);
    const rnpIuTransportAssociation *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpKeyStatus_PDU : public ConcretePDU {
public:
    rnpKeyStatus_PDU();
    void set_data(rnpKeyStatus &);
    rnpKeyStatus *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpKeyStatus & d);
    const rnpKeyStatus *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpLAI_PDU : public ConcretePDU {
public:
    rnpLAI_PDU();
    void set_data(rnpLAI &);
    rnpLAI *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpLAI & d);
    const rnpLAI *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpLastKnownServiceArea_PDU : public ConcretePDU {
public:
    rnpLastKnownServiceArea_PDU();
    void set_data(rnpLastKnownServiceArea &);
    rnpLastKnownServiceArea *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpLastKnownServiceArea & d);
    const rnpLastKnownServiceArea *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpLHN_ID_PDU : public ConcretePDU {
public:
    rnpLHN_ID_PDU();
    void set_data(rnpLHN_ID &);
    rnpLHN_ID *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpLHN_ID & d);
    const rnpLHN_ID *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpLocationRelatedDataRequestType_PDU : public ConcretePDU {
public:
    rnpLocationRelatedDataRequestType_PDU();
    void set_data(rnpLocationRelatedDataRequestType &);
    rnpLocationRelatedDataRequestType *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpLocationRelatedDataRequestType & d);
    const rnpLocationRelatedDataRequestType *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpLocationRelatedDataRequestTypeSpecificToGERANIuMode_PDU : public ConcretePDU {
public:
    rnpLocationRelatedDataRequestTypeSpecificToGERANIuMode_PDU();
    void set_data(rnpLocationRelatedDataRequestTypeSpecificToGERANIuMode &);
    rnpLocationRelatedDataRequestTypeSpecificToGERANIuMode *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpLocationRelatedDataRequestTypeSpecificToGERANIuMode & d);
    const rnpLocationRelatedDataRequestTypeSpecificToGERANIuMode *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpL3_Information_PDU : public ConcretePDU {
public:
    rnpL3_Information_PDU();
    void set_data(rnpL3_Information &);
    rnpL3_Information *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpL3_Information & d);
    const rnpL3_Information *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpM4Report_PDU : public ConcretePDU {
public:
    rnpM4Report_PDU();
    void set_data(rnpM4Report &);
    rnpM4Report *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpM4Report & d);
    const rnpM4Report *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpM5Report_PDU : public ConcretePDU {
public:
    rnpM5Report_PDU();
    void set_data(rnpM5Report &);
    rnpM5Report *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpM5Report & d);
    const rnpM5Report *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpM6Report_PDU : public ConcretePDU {
public:
    rnpM6Report_PDU();
    void set_data(rnpM6Report &);
    rnpM6Report *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpM6Report & d);
    const rnpM6Report *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpM7Report_PDU : public ConcretePDU {
public:
    rnpM7Report_PDU();
    void set_data(rnpM7Report &);
    rnpM7Report *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpM7Report & d);
    const rnpM7Report *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpManagement_Based_MDT_Allowed_PDU : public ConcretePDU {
public:
    rnpManagement_Based_MDT_Allowed_PDU();
    void set_data(rnpManagement_Based_MDT_Allowed &);
    rnpManagement_Based_MDT_Allowed *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpManagement_Based_MDT_Allowed & d);
    const rnpManagement_Based_MDT_Allowed *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpMBMSBearerServiceType_PDU : public ConcretePDU {
public:
    rnpMBMSBearerServiceType_PDU();
    void set_data(rnpMBMSBearerServiceType &);
    rnpMBMSBearerServiceType *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpMBMSBearerServiceType & d);
    const rnpMBMSBearerServiceType *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpMBMSCNDe_Registration_PDU : public ConcretePDU {
public:
    rnpMBMSCNDe_Registration_PDU();
    void set_data(rnpMBMSCNDe_Registration &);
    rnpMBMSCNDe_Registration *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpMBMSCNDe_Registration & d);
    const rnpMBMSCNDe_Registration *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpMBMSCountingInformation_PDU : public ConcretePDU {
public:
    rnpMBMSCountingInformation_PDU();
    void set_data(rnpMBMSCountingInformation &);
    rnpMBMSCountingInformation *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpMBMSCountingInformation & d);
    const rnpMBMSCountingInformation *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpMBMSLinkingInformation_PDU : public ConcretePDU {
public:
    rnpMBMSLinkingInformation_PDU();
    void set_data(rnpMBMSLinkingInformation &);
    rnpMBMSLinkingInformation *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpMBMSLinkingInformation & d);
    const rnpMBMSLinkingInformation *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpMBMSRegistrationRequestType_PDU : public ConcretePDU {
public:
    rnpMBMSRegistrationRequestType_PDU();
    void set_data(rnpMBMSRegistrationRequestType &);
    rnpMBMSRegistrationRequestType *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpMBMSRegistrationRequestType & d);
    const rnpMBMSRegistrationRequestType *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpMBMSServiceArea_PDU : public ConcretePDU {
public:
    rnpMBMSServiceArea_PDU();
    void set_data(rnpMBMSServiceArea &);
    rnpMBMSServiceArea *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpMBMSServiceArea & d);
    const rnpMBMSServiceArea *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpMBMSSessionDuration_PDU : public ConcretePDU {
public:
    rnpMBMSSessionDuration_PDU();
    void set_data(rnpMBMSSessionDuration &);
    rnpMBMSSessionDuration *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpMBMSSessionDuration & d);
    const rnpMBMSSessionDuration *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpMBMSSessionIdentity_PDU : public ConcretePDU {
public:
    rnpMBMSSessionIdentity_PDU();
    void set_data(rnpMBMSSessionIdentity &);
    rnpMBMSSessionIdentity *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpMBMSSessionIdentity & d);
    const rnpMBMSSessionIdentity *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpMBMSSessionRepetitionNumber_PDU : public ConcretePDU {
public:
    rnpMBMSSessionRepetitionNumber_PDU();
    void set_data(rnpMBMSSessionRepetitionNumber &);
    rnpMBMSSessionRepetitionNumber *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpMBMSSessionRepetitionNumber & d);
    const rnpMBMSSessionRepetitionNumber *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpMDT_Configuration_PDU : public ConcretePDU {
public:
    rnpMDT_Configuration_PDU();
    void set_data(rnpMDT_Configuration &);
    rnpMDT_Configuration *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpMDT_Configuration & d);
    const rnpMDT_Configuration *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpMDT_PLMN_List_PDU : public ConcretePDU {
public:
    rnpMDT_PLMN_List_PDU();
    void set_data(rnpMDT_PLMN_List &);
    rnpMDT_PLMN_List *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpMDT_PLMN_List & d);
    const rnpMDT_PLMN_List *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpMSISDN_PDU : public ConcretePDU {
public:
    rnpMSISDN_PDU();
    void set_data(rnpMSISDN &);
    rnpMSISDN *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpMSISDN & d);
    const rnpMSISDN *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpNAS_PDU_PDU : public ConcretePDU {
public:
    rnpNAS_PDU_PDU();
    void set_data(rnpNAS_PDU &);
    rnpNAS_PDU *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpNAS_PDU & d);
    const rnpNAS_PDU *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpNAS_SequenceNumber_PDU : public ConcretePDU {
public:
    rnpNAS_SequenceNumber_PDU();
    void set_data(rnpNAS_SequenceNumber &);
    rnpNAS_SequenceNumber *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpNAS_SequenceNumber & d);
    const rnpNAS_SequenceNumber *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpNewBSS_To_OldBSS_Information_PDU : public ConcretePDU {
public:
    rnpNewBSS_To_OldBSS_Information_PDU();
    void set_data(rnpNewBSS_To_OldBSS_Information &);
    rnpNewBSS_To_OldBSS_Information *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpNewBSS_To_OldBSS_Information & d);
    const rnpNewBSS_To_OldBSS_Information *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpNonSearchingIndication_PDU : public ConcretePDU {
public:
    rnpNonSearchingIndication_PDU();
    void set_data(rnpNonSearchingIndication &);
    rnpNonSearchingIndication *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpNonSearchingIndication & d);
    const rnpNonSearchingIndication *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpNumberOfSteps_PDU : public ConcretePDU {
public:
    rnpNumberOfSteps_PDU();
    void set_data(rnpNumberOfSteps &);
    rnpNumberOfSteps *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpNumberOfSteps & d);
    const rnpNumberOfSteps *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpOffload_RAB_Parameters_PDU : public ConcretePDU {
public:
    rnpOffload_RAB_Parameters_PDU();
    void set_data(rnpOffload_RAB_Parameters &);
    rnpOffload_RAB_Parameters *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpOffload_RAB_Parameters & d);
    const rnpOffload_RAB_Parameters *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpOldBSS_ToNewBSS_Information_PDU : public ConcretePDU {
public:
    rnpOldBSS_ToNewBSS_Information_PDU();
    void set_data(rnpOldBSS_ToNewBSS_Information &);
    rnpOldBSS_ToNewBSS_Information *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpOldBSS_ToNewBSS_Information & d);
    const rnpOldBSS_ToNewBSS_Information *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpOMC_ID_PDU : public ConcretePDU {
public:
    rnpOMC_ID_PDU();
    void set_data(rnpOMC_ID &);
    rnpOMC_ID *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpOMC_ID & d);
    const rnpOMC_ID *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpOut_Of_UTRAN_PDU : public ConcretePDU {
public:
    rnpOut_Of_UTRAN_PDU();
    void set_data(rnpOut_Of_UTRAN &);
    rnpOut_Of_UTRAN *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpOut_Of_UTRAN & d);
    const rnpOut_Of_UTRAN *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpPagingAreaID_PDU : public ConcretePDU {
public:
    rnpPagingAreaID_PDU();
    void set_data(rnpPagingAreaID &);
    rnpPagingAreaID *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpPagingAreaID & d);
    const rnpPagingAreaID *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpPagingCause_PDU : public ConcretePDU {
public:
    rnpPagingCause_PDU();
    void set_data(rnpPagingCause &);
    rnpPagingCause *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpPagingCause & d);
    const rnpPagingCause *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpPDP_TypeInformation_PDU : public ConcretePDU {
public:
    rnpPDP_TypeInformation_PDU();
    void set_data(rnpPDP_TypeInformation &);
    rnpPDP_TypeInformation *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpPDP_TypeInformation & d);
    const rnpPDP_TypeInformation *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpPDP_TypeInformation_extension_PDU : public ConcretePDU {
public:
    rnpPDP_TypeInformation_extension_PDU();
    void set_data(rnpPDP_TypeInformation_extension &);
    rnpPDP_TypeInformation_extension *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpPDP_TypeInformation_extension & d);
    const rnpPDP_TypeInformation_extension *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpPeriodicLocationInfo_PDU : public ConcretePDU {
public:
    rnpPeriodicLocationInfo_PDU();
    void set_data(rnpPeriodicLocationInfo &);
    rnpPeriodicLocationInfo *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpPeriodicLocationInfo & d);
    const rnpPeriodicLocationInfo *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpPermanentNAS_UE_ID_PDU : public ConcretePDU {
public:
    rnpPermanentNAS_UE_ID_PDU();
    void set_data(rnpPermanentNAS_UE_ID &);
    rnpPermanentNAS_UE_ID *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpPermanentNAS_UE_ID & d);
    const rnpPermanentNAS_UE_ID *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpPLMNidentity_PDU : public ConcretePDU {
public:
    rnpPLMNidentity_PDU();
    void set_data(rnpPLMNidentity &);
    rnpPLMNidentity *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpPLMNidentity & d);
    const rnpPLMNidentity *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpPositioningPriority_PDU : public ConcretePDU {
public:
    rnpPositioningPriority_PDU();
    void set_data(rnpPositioningPriority &);
    rnpPositioningPriority *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpPositioningPriority & d);
    const rnpPositioningPriority *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpPositionData_PDU : public ConcretePDU {
public:
    rnpPositionData_PDU();
    void set_data(rnpPositionData &);
    rnpPositionData *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpPositionData & d);
    const rnpPositionData *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpPositionDataSpecificToGERANIuMode_PDU : public ConcretePDU {
public:
    rnpPositionDataSpecificToGERANIuMode_PDU();
    void set_data(rnpPositionDataSpecificToGERANIuMode &);
    rnpPositionDataSpecificToGERANIuMode *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpPositionDataSpecificToGERANIuMode & d);
    const rnpPositionDataSpecificToGERANIuMode *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpPriority_Class_Indicator_PDU : public ConcretePDU {
public:
    rnpPriority_Class_Indicator_PDU();
    void set_data(rnpPriority_Class_Indicator &);
    rnpPriority_Class_Indicator *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpPriority_Class_Indicator & d);
    const rnpPriority_Class_Indicator *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpProvidedData_PDU : public ConcretePDU {
public:
    rnpProvidedData_PDU();
    void set_data(rnpProvidedData &);
    rnpProvidedData *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpProvidedData & d);
    const rnpProvidedData *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRAB_ID_PDU : public ConcretePDU {
public:
    rnpRAB_ID_PDU();
    void set_data(rnpRAB_ID &);
    rnpRAB_ID *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRAB_ID & d);
    const rnpRAB_ID *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRAB_Parameter_ExtendedGuaranteedBitrateList_PDU : public ConcretePDU {
public:
    rnpRAB_Parameter_ExtendedGuaranteedBitrateList_PDU();
    void set_data(rnpRAB_Parameter_ExtendedGuaranteedBitrateList &);
    rnpRAB_Parameter_ExtendedGuaranteedBitrateList *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRAB_Parameter_ExtendedGuaranteedBitrateList & d);
    const rnpRAB_Parameter_ExtendedGuaranteedBitrateList *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRAB_Parameter_ExtendedMaxBitrateList_PDU : public ConcretePDU {
public:
    rnpRAB_Parameter_ExtendedMaxBitrateList_PDU();
    void set_data(rnpRAB_Parameter_ExtendedMaxBitrateList &);
    rnpRAB_Parameter_ExtendedMaxBitrateList *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRAB_Parameter_ExtendedMaxBitrateList & d);
    const rnpRAB_Parameter_ExtendedMaxBitrateList *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRAB_Parameters_PDU : public ConcretePDU {
public:
    rnpRAB_Parameters_PDU();
    void set_data(rnpRAB_Parameters &);
    rnpRAB_Parameters *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRAB_Parameters & d);
    const rnpRAB_Parameters *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRABParametersList_PDU : public ConcretePDU {
public:
    rnpRABParametersList_PDU();
    void set_data(rnpRABParametersList &);
    rnpRABParametersList *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRABParametersList & d);
    const rnpRABParametersList *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRAC_PDU : public ConcretePDU {
public:
    rnpRAC_PDU();
    void set_data(rnpRAC &);
    rnpRAC *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRAC & d);
    const rnpRAC *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRAListofIdleModeUEs_PDU : public ConcretePDU {
public:
    rnpRAListofIdleModeUEs_PDU();
    void set_data(rnpRAListofIdleModeUEs &);
    rnpRAListofIdleModeUEs *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRAListofIdleModeUEs & d);
    const rnpRAListofIdleModeUEs *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpLAListofIdleModeUEs_PDU : public ConcretePDU {
public:
    rnpLAListofIdleModeUEs_PDU();
    void set_data(rnpLAListofIdleModeUEs &);
    rnpLAListofIdleModeUEs *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpLAListofIdleModeUEs & d);
    const rnpLAListofIdleModeUEs *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRAT_Type_PDU : public ConcretePDU {
public:
    rnpRAT_Type_PDU();
    void set_data(rnpRAT_Type &);
    rnpRAT_Type *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRAT_Type & d);
    const rnpRAT_Type *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRedirectAttemptFlag_PDU : public ConcretePDU {
public:
    rnpRedirectAttemptFlag_PDU();
    void set_data(rnpRedirectAttemptFlag &);
    rnpRedirectAttemptFlag *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRedirectAttemptFlag & d);
    const rnpRedirectAttemptFlag *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRedirectionCompleted_PDU : public ConcretePDU {
public:
    rnpRedirectionCompleted_PDU();
    void set_data(rnpRedirectionCompleted &);
    rnpRedirectionCompleted *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRedirectionCompleted & d);
    const rnpRedirectionCompleted *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRejectCauseValue_PDU : public ConcretePDU {
public:
    rnpRejectCauseValue_PDU();
    void set_data(rnpRejectCauseValue &);
    rnpRejectCauseValue *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRejectCauseValue & d);
    const rnpRejectCauseValue *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRelocationType_PDU : public ConcretePDU {
public:
    rnpRelocationType_PDU();
    void set_data(rnpRelocationType &);
    rnpRelocationType *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRelocationType & d);
    const rnpRelocationType *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRequestedGANSSAssistanceData_PDU : public ConcretePDU {
public:
    rnpRequestedGANSSAssistanceData_PDU();
    void set_data(rnpRequestedGANSSAssistanceData &);
    rnpRequestedGANSSAssistanceData *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRequestedGANSSAssistanceData & d);
    const rnpRequestedGANSSAssistanceData *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRequested_RAB_Parameter_ExtendedMaxBitrateList_PDU : public ConcretePDU {
public:
    rnpRequested_RAB_Parameter_ExtendedMaxBitrateList_PDU();
    void set_data(rnpRequested_RAB_Parameter_ExtendedMaxBitrateList &);
    rnpRequested_RAB_Parameter_ExtendedMaxBitrateList *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRequested_RAB_Parameter_ExtendedMaxBitrateList & d);
    const rnpRequested_RAB_Parameter_ExtendedMaxBitrateList *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRequested_RAB_Parameter_ExtendedGuaranteedBitrateList_PDU : public ConcretePDU {
public:
    rnpRequested_RAB_Parameter_ExtendedGuaranteedBitrateList_PDU();
    void set_data(rnpRequested_RAB_Parameter_ExtendedGuaranteedBitrateList &);
    rnpRequested_RAB_Parameter_ExtendedGuaranteedBitrateList *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRequested_RAB_Parameter_ExtendedGuaranteedBitrateList & d);
    const rnpRequested_RAB_Parameter_ExtendedGuaranteedBitrateList *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRequestType_PDU : public ConcretePDU {
public:
    rnpRequestType_PDU();
    void set_data(rnpRequestType &);
    rnpRequestType *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRequestType & d);
    const rnpRequestType *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpResponseTime_PDU : public ConcretePDU {
public:
    rnpResponseTime_PDU();
    void set_data(rnpResponseTime &);
    rnpResponseTime *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpResponseTime & d);
    const rnpResponseTime *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRNSAPRelocationParameters_PDU : public ConcretePDU {
public:
    rnpRNSAPRelocationParameters_PDU();
    void set_data(rnpRNSAPRelocationParameters &);
    rnpRNSAPRelocationParameters *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRNSAPRelocationParameters & d);
    const rnpRNSAPRelocationParameters *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRRC_Container_PDU : public ConcretePDU {
public:
    rnpRRC_Container_PDU();
    void set_data(rnpRRC_Container &);
    rnpRRC_Container *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRRC_Container & d);
    const rnpRRC_Container *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRSRVCC_HO_Indication_PDU : public ConcretePDU {
public:
    rnpRSRVCC_HO_Indication_PDU();
    void set_data(rnpRSRVCC_HO_Indication &);
    rnpRSRVCC_HO_Indication *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRSRVCC_HO_Indication & d);
    const rnpRSRVCC_HO_Indication *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRSRVCC_Information_PDU : public ConcretePDU {
public:
    rnpRSRVCC_Information_PDU();
    void set_data(rnpRSRVCC_Information &);
    rnpRSRVCC_Information *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRSRVCC_Information & d);
    const rnpRSRVCC_Information *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRSRVCC_Operation_Possible_PDU : public ConcretePDU {
public:
    rnpRSRVCC_Operation_Possible_PDU();
    void set_data(rnpRSRVCC_Operation_Possible &);
    rnpRSRVCC_Operation_Possible *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRSRVCC_Operation_Possible & d);
    const rnpRSRVCC_Operation_Possible *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpSAI_PDU : public ConcretePDU {
public:
    rnpSAI_PDU();
    void set_data(rnpSAI &);
    rnpSAI *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpSAI & d);
    const rnpSAI *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpSAPI_PDU : public ConcretePDU {
public:
    rnpSAPI_PDU();
    void set_data(rnpSAPI &);
    rnpSAPI *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpSAPI & d);
    const rnpSAPI *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpSessionUpdateID_PDU : public ConcretePDU {
public:
    rnpSessionUpdateID_PDU();
    void set_data(rnpSessionUpdateID &);
    rnpSessionUpdateID *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpSessionUpdateID & d);
    const rnpSessionUpdateID *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpSession_Re_establishment_Indicator_PDU : public ConcretePDU {
public:
    rnpSession_Re_establishment_Indicator_PDU();
    void set_data(rnpSession_Re_establishment_Indicator &);
    rnpSession_Re_establishment_Indicator *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpSession_Re_establishment_Indicator & d);
    const rnpSession_Re_establishment_Indicator *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpSignallingIndication_PDU : public ConcretePDU {
public:
    rnpSignallingIndication_PDU();
    void set_data(rnpSignallingIndication &);
    rnpSignallingIndication *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpSignallingIndication & d);
    const rnpSignallingIndication *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpSNA_Access_Information_PDU : public ConcretePDU {
public:
    rnpSNA_Access_Information_PDU();
    void set_data(rnpSNA_Access_Information &);
    rnpSNA_Access_Information *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpSNA_Access_Information & d);
    const rnpSNA_Access_Information *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpSource_ToTarget_TransparentContainer_PDU : public ConcretePDU {
public:
    rnpSource_ToTarget_TransparentContainer_PDU();
    void set_data(rnpSource_ToTarget_TransparentContainer &);
    rnpSource_ToTarget_TransparentContainer *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpSource_ToTarget_TransparentContainer & d);
    const rnpSource_ToTarget_TransparentContainer *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpSourceBSS_ToTargetBSS_TransparentContainer_PDU : public ConcretePDU {
public:
    rnpSourceBSS_ToTargetBSS_TransparentContainer_PDU();
    void set_data(rnpSourceBSS_ToTargetBSS_TransparentContainer &);
    rnpSourceBSS_ToTargetBSS_TransparentContainer *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpSourceBSS_ToTargetBSS_TransparentContainer & d);
    const rnpSourceBSS_ToTargetBSS_TransparentContainer *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpSourceID_PDU : public ConcretePDU {
public:
    rnpSourceID_PDU();
    void set_data(rnpSourceID &);
    rnpSourceID *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpSourceID & d);
    const rnpSourceID *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpSourceRNC_ToTargetRNC_TransparentContainer_PDU : public ConcretePDU {
public:
    rnpSourceRNC_ToTargetRNC_TransparentContainer_PDU();
    void set_data(rnpSourceRNC_ToTargetRNC_TransparentContainer &);
    rnpSourceRNC_ToTargetRNC_TransparentContainer *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpSourceRNC_ToTargetRNC_TransparentContainer & d);
    const rnpSourceRNC_ToTargetRNC_TransparentContainer *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpIRAT_Measurement_Configuration_PDU : public ConcretePDU {
public:
    rnpIRAT_Measurement_Configuration_PDU();
    void set_data(rnpIRAT_Measurement_Configuration &);
    rnpIRAT_Measurement_Configuration *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpIRAT_Measurement_Configuration & d);
    const rnpIRAT_Measurement_Configuration *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRSRQ_Type_PDU : public ConcretePDU {
public:
    rnpRSRQ_Type_PDU();
    void set_data(rnpRSRQ_Type &);
    rnpRSRQ_Type *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRSRQ_Type & d);
    const rnpRSRQ_Type *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpRSRQ_Extension_PDU : public ConcretePDU {
public:
    rnpRSRQ_Extension_PDU();
    void set_data(rnpRSRQ_Extension &);
    rnpRSRQ_Extension *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpRSRQ_Extension & d);
    const rnpRSRQ_Extension *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpSubscriberProfileIDforRFP_PDU : public ConcretePDU {
public:
    rnpSubscriberProfileIDforRFP_PDU();
    void set_data(rnpSubscriberProfileIDforRFP &);
    rnpSubscriberProfileIDforRFP *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpSubscriberProfileIDforRFP & d);
    const rnpSubscriberProfileIDforRFP *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpSupportedRAB_ParameterBitrateList_PDU : public ConcretePDU {
public:
    rnpSupportedRAB_ParameterBitrateList_PDU();
    void set_data(rnpSupportedRAB_ParameterBitrateList &);
    rnpSupportedRAB_ParameterBitrateList *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpSupportedRAB_ParameterBitrateList & d);
    const rnpSupportedRAB_ParameterBitrateList *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpSRB_TrCH_Mapping_PDU : public ConcretePDU {
public:
    rnpSRB_TrCH_Mapping_PDU();
    void set_data(rnpSRB_TrCH_Mapping &);
    rnpSRB_TrCH_Mapping *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpSRB_TrCH_Mapping & d);
    const rnpSRB_TrCH_Mapping *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpSRVCC_HO_Indication_PDU : public ConcretePDU {
public:
    rnpSRVCC_HO_Indication_PDU();
    void set_data(rnpSRVCC_HO_Indication &);
    rnpSRVCC_HO_Indication *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpSRVCC_HO_Indication & d);
    const rnpSRVCC_HO_Indication *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpSRVCC_Information_PDU : public ConcretePDU {
public:
    rnpSRVCC_Information_PDU();
    void set_data(rnpSRVCC_Information &);
    rnpSRVCC_Information *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpSRVCC_Information & d);
    const rnpSRVCC_Information *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpSRVCC_Operation_Possible_PDU : public ConcretePDU {
public:
    rnpSRVCC_Operation_Possible_PDU();
    void set_data(rnpSRVCC_Operation_Possible &);
    rnpSRVCC_Operation_Possible *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpSRVCC_Operation_Possible & d);
    const rnpSRVCC_Operation_Possible *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpTarget_ToSource_TransparentContainer_PDU : public ConcretePDU {
public:
    rnpTarget_ToSource_TransparentContainer_PDU();
    void set_data(rnpTarget_ToSource_TransparentContainer &);
    rnpTarget_ToSource_TransparentContainer *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpTarget_ToSource_TransparentContainer & d);
    const rnpTarget_ToSource_TransparentContainer *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpTargetBSS_ToSourceBSS_TransparentContainer_PDU : public ConcretePDU {
public:
    rnpTargetBSS_ToSourceBSS_TransparentContainer_PDU();
    void set_data(rnpTargetBSS_ToSourceBSS_TransparentContainer &);
    rnpTargetBSS_ToSourceBSS_TransparentContainer *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpTargetBSS_ToSourceBSS_TransparentContainer & d);
    const rnpTargetBSS_ToSourceBSS_TransparentContainer *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpTargetID_PDU : public ConcretePDU {
public:
    rnpTargetID_PDU();
    void set_data(rnpTargetID &);
    rnpTargetID *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpTargetID & d);
    const rnpTargetID *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpTargetRNC_ToSourceRNC_TransparentContainer_PDU : public ConcretePDU {
public:
    rnpTargetRNC_ToSourceRNC_TransparentContainer_PDU();
    void set_data(rnpTargetRNC_ToSourceRNC_TransparentContainer &);
    rnpTargetRNC_ToSourceRNC_TransparentContainer *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpTargetRNC_ToSourceRNC_TransparentContainer & d);
    const rnpTargetRNC_ToSourceRNC_TransparentContainer *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpTemporaryUE_ID_PDU : public ConcretePDU {
public:
    rnpTemporaryUE_ID_PDU();
    void set_data(rnpTemporaryUE_ID &);
    rnpTemporaryUE_ID *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpTemporaryUE_ID & d);
    const rnpTemporaryUE_ID *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpTimeToMBMSDataTransfer_PDU : public ConcretePDU {
public:
    rnpTimeToMBMSDataTransfer_PDU();
    void set_data(rnpTimeToMBMSDataTransfer &);
    rnpTimeToMBMSDataTransfer *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpTimeToMBMSDataTransfer & d);
    const rnpTimeToMBMSDataTransfer *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpTimingDifferenceULDL_PDU : public ConcretePDU {
public:
    rnpTimingDifferenceULDL_PDU();
    void set_data(rnpTimingDifferenceULDL &);
    rnpTimingDifferenceULDL *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpTimingDifferenceULDL & d);
    const rnpTimingDifferenceULDL *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpTMGI_PDU : public ConcretePDU {
public:
    rnpTMGI_PDU();
    void set_data(rnpTMGI &);
    rnpTMGI *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpTMGI & d);
    const rnpTMGI *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpTracePropagationParameters_PDU : public ConcretePDU {
public:
    rnpTracePropagationParameters_PDU();
    void set_data(rnpTracePropagationParameters &);
    rnpTracePropagationParameters *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpTracePropagationParameters & d);
    const rnpTracePropagationParameters *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpTraceRecordingSessionInformation_PDU : public ConcretePDU {
public:
    rnpTraceRecordingSessionInformation_PDU();
    void set_data(rnpTraceRecordingSessionInformation &);
    rnpTraceRecordingSessionInformation *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpTraceRecordingSessionInformation & d);
    const rnpTraceRecordingSessionInformation *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpTraceRecordingSessionReference_PDU : public ConcretePDU {
public:
    rnpTraceRecordingSessionReference_PDU();
    void set_data(rnpTraceRecordingSessionReference &);
    rnpTraceRecordingSessionReference *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpTraceRecordingSessionReference & d);
    const rnpTraceRecordingSessionReference *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpTraceReference_PDU : public ConcretePDU {
public:
    rnpTraceReference_PDU();
    void set_data(rnpTraceReference &);
    rnpTraceReference *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpTraceReference & d);
    const rnpTraceReference *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpTraceType_PDU : public ConcretePDU {
public:
    rnpTraceType_PDU();
    void set_data(rnpTraceType &);
    rnpTraceType *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpTraceType & d);
    const rnpTraceType *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpTransportLayerAddress_PDU : public ConcretePDU {
public:
    rnpTransportLayerAddress_PDU();
    void set_data(rnpTransportLayerAddress &);
    rnpTransportLayerAddress *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpTransportLayerAddress & d);
    const rnpTransportLayerAddress *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpTriggerID_PDU : public ConcretePDU {
public:
    rnpTriggerID_PDU();
    void set_data(rnpTriggerID &);
    rnpTriggerID *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpTriggerID & d);
    const rnpTriggerID *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpTunnelInformation_PDU : public ConcretePDU {
public:
    rnpTunnelInformation_PDU();
    void set_data(rnpTunnelInformation &);
    rnpTunnelInformation *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpTunnelInformation & d);
    const rnpTunnelInformation *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpTypeOfError_PDU : public ConcretePDU {
public:
    rnpTypeOfError_PDU();
    void set_data(rnpTypeOfError &);
    rnpTypeOfError *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpTypeOfError & d);
    const rnpTypeOfError *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpUE_AggregateMaximumBitRate_PDU : public ConcretePDU {
public:
    rnpUE_AggregateMaximumBitRate_PDU();
    void set_data(rnpUE_AggregateMaximumBitRate &);
    rnpUE_AggregateMaximumBitRate *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpUE_AggregateMaximumBitRate & d);
    const rnpUE_AggregateMaximumBitRate *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpUE_History_Information_PDU : public ConcretePDU {
public:
    rnpUE_History_Information_PDU();
    void set_data(rnpUE_History_Information &);
    rnpUE_History_Information *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpUE_History_Information & d);
    const rnpUE_History_Information *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpUE_ID_PDU : public ConcretePDU {
public:
    rnpUE_ID_PDU();
    void set_data(rnpUE_ID &);
    rnpUE_ID *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpUE_ID & d);
    const rnpUE_ID *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpUESBI_Iu_PDU : public ConcretePDU {
public:
    rnpUESBI_Iu_PDU();
    void set_data(rnpUESBI_Iu &);
    rnpUESBI_Iu *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpUESBI_Iu & d);
    const rnpUESBI_Iu *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpUTRAN_CellID_PDU : public ConcretePDU {
public:
    rnpUTRAN_CellID_PDU();
    void set_data(rnpUTRAN_CellID &);
    rnpUTRAN_CellID *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpUTRAN_CellID & d);
    const rnpUTRAN_CellID *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpVelocityEstimate_PDU : public ConcretePDU {
public:
    rnpVelocityEstimate_PDU();
    void set_data(rnpVelocityEstimate &);
    rnpVelocityEstimate *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpVelocityEstimate & d);
    const rnpVelocityEstimate *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpVerticalAccuracyCode_PDU : public ConcretePDU {
public:
    rnpVerticalAccuracyCode_PDU();
    void set_data(rnpVerticalAccuracyCode &);
    rnpVerticalAccuracyCode *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpVerticalAccuracyCode & d);
    const rnpVerticalAccuracyCode *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC rnpVoiceSupportMatchIndicator_PDU : public ConcretePDU {
public:
    rnpVoiceSupportMatchIndicator_PDU();
    void set_data(rnpVoiceSupportMatchIndicator &);
    rnpVoiceSupportMatchIndicator *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const rnpVoiceSupportMatchIndicator & d);
    const rnpVoiceSupportMatchIndicator *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

/* Control object class */

class OSS_PUBLIC ranap_Control : public OssControl {
public:
    ranap_Control();
    ranap_Control(const ranap_Control &);
};


/* External definitions for named values */

const OSS_INT32 rnpid_RAB_Assignment = 0;

const OSS_INT32 rnpid_Iu_Release = 1;

const OSS_INT32 rnpid_RelocationPreparation = 2;

const OSS_INT32 rnpid_RelocationResourceAllocation = 3;

const OSS_INT32 rnpid_RelocationCancel = 4;

const OSS_INT32 rnpid_SRNS_ContextTransfer = 5;

const OSS_INT32 rnpid_SecurityModeControl = 6;

const OSS_INT32 rnpid_DataVolumeReport = 7;

const OSS_INT32 rnpid_Reset = 9;

const OSS_INT32 rnpid_RAB_ReleaseRequest = 10;

const OSS_INT32 rnpid_Iu_ReleaseRequest = 11;

const OSS_INT32 rnpid_RelocationDetect = 12;

const OSS_INT32 rnpid_RelocationComplete = 13;

const OSS_INT32 rnpid_Paging = 14;

const OSS_INT32 rnpid_CommonID = 15;

const OSS_INT32 rnpid_CN_InvokeTrace = 16;

const OSS_INT32 rnpid_LocationReportingControl = 17;

const OSS_INT32 rnpid_LocationReport = 18;

const OSS_INT32 rnpid_InitialUE_Message = 19;

const OSS_INT32 rnpid_DirectTransfer = 20;

const OSS_INT32 rnpid_OverloadControl = 21;

const OSS_INT32 rnpid_ErrorIndication = 22;

const OSS_INT32 rnpid_SRNS_DataForward = 23;

const OSS_INT32 rnpid_ForwardSRNS_Context = 24;

const OSS_INT32 rnpid_privateMessage = 25;

const OSS_INT32 rnpid_CN_DeactivateTrace = 26;

const OSS_INT32 rnpid_ResetResource = 27;

const OSS_INT32 rnpid_RANAP_Relocation = 28;

const OSS_INT32 rnpid_RAB_ModifyRequest = 29;

const OSS_INT32 rnpid_LocationRelatedData = 30;

const OSS_INT32 rnpid_InformationTransfer = 31;

const OSS_INT32 rnpid_UESpecificInformation = 32;

const OSS_INT32 rnpid_UplinkInformationExchange = 33;

const OSS_INT32 rnpid_DirectInformationTransfer = 34;

const OSS_INT32 rnpid_MBMSSessionStart = 35;

const OSS_INT32 rnpid_MBMSSessionUpdate = 36;

const OSS_INT32 rnpid_MBMSSessionStop = 37;

const OSS_INT32 rnpid_MBMSUELinking = 38;

const OSS_INT32 rnpid_MBMSRegistration = 39;

const OSS_INT32 rnpid_MBMSCNDe_Registration_Procedure = 40;

const OSS_INT32 rnpid_MBMSRABEstablishmentIndication = 41;

const OSS_INT32 rnpid_MBMSRABRelease = 42;

const OSS_INT32 rnpid_enhancedRelocationComplete = 43;

const OSS_INT32 rnpid_enhancedRelocationCompleteConfirm = 44;

const OSS_INT32 rnpid_RANAPenhancedRelocation = 45;

const OSS_INT32 rnpid_SRVCCPreparation = 46;

const OSS_INT32 rnpid_UeRadioCapabilityMatch = 47;

const OSS_INT32 rnpmaxPrivateIEs = USHRT_MAX;

const OSS_INT32 rnpmaxProtocolExtensions = USHRT_MAX;

const OSS_INT32 rnpmaxProtocolIEs = USHRT_MAX;

const OSS_INT32 rnpmaxNrOfDTs = 15;

const OSS_INT32 rnpmaxNrOfErrors = 256;

const OSS_INT32 rnpmaxNrOfIuSigConIds = 250;

const OSS_INT32 rnpmaxNrOfPDPDirections = 2;

const OSS_INT32 rnpmaxNrOfPoints = 15;

const OSS_INT32 rnpmaxNrOfRABs = 256;

const OSS_INT32 rnpmaxNrOfSeparateTrafficDirections = 2;

const OSS_INT32 rnpmaxNrOfSRBs = 8;

const OSS_INT32 rnpmaxNrOfVol = 2;

const OSS_INT32 rnpmaxNrOfLevels = 256;

const OSS_INT32 rnpmaxNrOfAltValues = 16;

const OSS_INT32 rnpmaxNrOfPLMNsSN = 32;

const OSS_INT32 rnpmaxNrOfLAs = 65536;

const OSS_INT32 rnpmaxNrOfSNAs = 65536;

const OSS_INT32 rnpmaxNrOfUEsToBeTraced = 64;

const OSS_INT32 rnpmaxNrOfInterfaces = 16;

const OSS_INT32 rnpmaxRAB_Subflows = 7;

const OSS_INT32 rnpmaxRAB_SubflowCombination = 64;

const OSS_INT32 rnpmaxSet = 9;

const OSS_INT32 rnpmaxNrOfHSDSCHMACdFlows_1 = 7;

const OSS_INT32 rnpmaxnoofMulticastServicesPerUE = 128;

const OSS_INT32 rnpmaxnoofMulticastServicesPerRNC = 512;

const OSS_INT32 rnpmaxMBMSRA = 65536;

const OSS_INT32 rnpmaxNrOfEDCHMACdFlows_1 = 7;

const OSS_INT32 rnpmaxGANSSSet = 9;

const OSS_INT32 rnpmaxNrOfCSGs = 256;

const OSS_INT32 rnpmaxNrOfEUTRAFreqs = 8;

const OSS_INT32 rnpmaxNrOfCellIds = 32;

const OSS_INT32 rnpmaxNrOfRAIs = 8;

const OSS_INT32 rnpmaxNrOfLAIs = 8;

const OSS_INT32 rnpmaxSizeOfIMSInfo = 32;

const OSS_INT32 rnpmaxnoofMDTPLMNs = 16;

const OSS_INT32 rnpid_AreaIdentity = 0;

const OSS_INT32 rnpid_CN_DomainIndicator = 3;

const OSS_INT32 rnpid_Cause = 4;

const OSS_INT32 rnpid_ChosenEncryptionAlgorithm = 5;

const OSS_INT32 rnpid_ChosenIntegrityProtectionAlgorithm = 6;

const OSS_INT32 rnpid_ClassmarkInformation2 = 7;

const OSS_INT32 rnpid_ClassmarkInformation3 = 8;

const OSS_INT32 rnpid_CriticalityDiagnostics = 9;

const OSS_INT32 rnpid_EncryptionInformation = 11;

const OSS_INT32 rnpid_IntegrityProtectionInformation = 12;

const OSS_INT32 rnpid_IuTransportAssociation = 13;

const OSS_INT32 rnpid_L3_Information = 14;

const OSS_INT32 rnpid_LAI = 15;

const OSS_INT32 rnpid_NAS_PDU = 16;

const OSS_INT32 rnpid_NonSearchingIndication = 17;

const OSS_INT32 rnpid_NumberOfSteps = 18;

const OSS_INT32 rnpid_OMC_ID = 19;

const OSS_INT32 rnpid_OldBSS_ToNewBSS_Information = 20;

const OSS_INT32 rnpid_PagingAreaID = 21;

const OSS_INT32 rnpid_PagingCause = 22;

const OSS_INT32 rnpid_PermanentNAS_UE_ID = 23;

const OSS_INT32 rnpid_RAB_ContextItem = 24;

const OSS_INT32 rnpid_RAB_ContextList = 25;

const OSS_INT32 rnpid_RAB_DataForwardingItem = 26;

const OSS_INT32 rnpid_RAB_DataForwardingItem_SRNS_CtxReq = 27;

const OSS_INT32 rnpid_RAB_DataForwardingList = 28;

const OSS_INT32 rnpid_RAB_DataForwardingList_SRNS_CtxReq = 29;

const OSS_INT32 rnpid_RAB_DataVolumeReportItem = 30;

const OSS_INT32 rnpid_RAB_DataVolumeReportList = 31;

const OSS_INT32 rnpid_RAB_DataVolumeReportRequestItem = 32;

const OSS_INT32 rnpid_RAB_DataVolumeReportRequestList = 33;

const OSS_INT32 rnpid_RAB_FailedItem = 34;

const OSS_INT32 rnpid_RAB_FailedList = 35;

const OSS_INT32 rnpid_RAB_QueuedItem = 37;

const OSS_INT32 rnpid_RAB_QueuedList = 38;

const OSS_INT32 rnpid_RAB_ReleaseFailedList = 39;

const OSS_INT32 rnpid_RAB_ReleaseItem = 40;

const OSS_INT32 rnpid_RAB_ReleaseList = 41;

const OSS_INT32 rnpid_RAB_ReleasedItem = 42;

const OSS_INT32 rnpid_RAB_ReleasedList = 43;

const OSS_INT32 rnpid_RAB_ReleasedList_IuRelComp = 44;

const OSS_INT32 rnpid_RAB_RelocationReleaseItem = 45;

const OSS_INT32 rnpid_RAB_RelocationReleaseList = 46;

const OSS_INT32 rnpid_RAB_SetupItem_RelocReq = 47;

const OSS_INT32 rnpid_RAB_SetupItem_RelocReqAck = 48;

const OSS_INT32 rnpid_RAB_SetupList_RelocReq = 49;

const OSS_INT32 rnpid_RAB_SetupList_RelocReqAck = 50;

const OSS_INT32 rnpid_RAB_SetupOrModifiedItem = 51;

const OSS_INT32 rnpid_RAB_SetupOrModifiedList = 52;

const OSS_INT32 rnpid_RAB_SetupOrModifyItem = 53;

const OSS_INT32 rnpid_RAB_SetupOrModifyList = 54;

const OSS_INT32 rnpid_RAC = 55;

const OSS_INT32 rnpid_RelocationType = 56;

const OSS_INT32 rnpid_RequestType = 57;

const OSS_INT32 rnpid_SAI = 58;

const OSS_INT32 rnpid_SAPI = 59;

const OSS_INT32 rnpid_SourceID = 60;

const OSS_INT32 rnpid_Source_ToTarget_TransparentContainer = 61;

const OSS_INT32 rnpid_TargetID = 62;

const OSS_INT32 rnpid_Target_ToSource_TransparentContainer = 63;

const OSS_INT32 rnpid_TemporaryUE_ID = 64;

const OSS_INT32 rnpid_TraceReference = 65;

const OSS_INT32 rnpid_TraceType = 66;

const OSS_INT32 rnpid_TransportLayerAddress = 67;

const OSS_INT32 rnpid_TriggerID = 68;

const OSS_INT32 rnpid_UE_ID = 69;

const OSS_INT32 rnpid_RAB_FailedtoReportItem = 71;

const OSS_INT32 rnpid_RAB_FailedtoReportList = 72;

const OSS_INT32 rnpid_KeyStatus = 75;

const OSS_INT32 rnpid_DRX_CycleLengthCoefficient = 76;

const OSS_INT32 rnpid_IuSigConIdList = 77;

const OSS_INT32 rnpid_IuSigConIdItem = 78;

const OSS_INT32 rnpid_IuSigConId = 79;

const OSS_INT32 rnpid_DirectTransferInformationItem_RANAP_RelocInf = 80;

const OSS_INT32 rnpid_DirectTransferInformationList_RANAP_RelocInf = 81;

const OSS_INT32 rnpid_RAB_ContextItem_RANAP_RelocInf = 82;

const OSS_INT32 rnpid_RAB_ContextList_RANAP_RelocInf = 83;

const OSS_INT32 rnpid_RAB_ContextFailedtoTransferItem = 84;

const OSS_INT32 rnpid_RAB_ContextFailedtoTransferList = 85;

const OSS_INT32 rnpid_GlobalRNC_ID = 86;

const OSS_INT32 rnpid_RAB_ReleasedItem_IuRelComp = 87;

const OSS_INT32 rnpid_MessageStructure = 88;

const OSS_INT32 rnpid_Alt_RAB_Parameters = 89;

const OSS_INT32 rnpid_Ass_RAB_Parameters = 90;

const OSS_INT32 rnpid_RAB_ModifyList = 91;

const OSS_INT32 rnpid_RAB_ModifyItem = 92;

const OSS_INT32 rnpid_TypeOfError = 93;

const OSS_INT32 rnpid_BroadcastAssistanceDataDecipheringKeys = 94;

const OSS_INT32 rnpid_LocationRelatedDataRequestType = 95;

const OSS_INT32 rnpid_GlobalCN_ID = 96;

const OSS_INT32 rnpid_LastKnownServiceArea = 97;

const OSS_INT32 rnpid_SRB_TrCH_Mapping = 98;

const OSS_INT32 rnpid_InterSystemInformation_TransparentContainer = 99;

const OSS_INT32 rnpid_NewBSS_To_OldBSS_Information = 100;

const OSS_INT32 rnpid_SourceRNC_PDCP_context_info = 103;

const OSS_INT32 rnpid_InformationTransferID = 104;

const OSS_INT32 rnpid_SNA_Access_Information = 105;

const OSS_INT32 rnpid_ProvidedData = 106;

const OSS_INT32 rnpid_GERAN_BSC_Container = 107;

const OSS_INT32 rnpid_GERAN_Classmark = 108;

const OSS_INT32 rnpid_GERAN_Iumode_RAB_Failed_RABAssgntResponse_Item = 109;

const OSS_INT32 rnpid_GERAN_Iumode_RAB_FailedList_RABAssgntResponse = 110;

const OSS_INT32 rnpid_VerticalAccuracyCode = 111;

const OSS_INT32 rnpid_ResponseTime = 112;

const OSS_INT32 rnpid_PositioningPriority = 113;

const OSS_INT32 rnpid_ClientType = 114;

const OSS_INT32 rnpid_LocationRelatedDataRequestTypeSpecificToGERANIuMode = 115;

const OSS_INT32 rnpid_SignallingIndication = 116;

const OSS_INT32 rnpid_hS_DSCH_MAC_d_Flow_ID = 117;

const OSS_INT32 rnpid_UESBI_Iu = 118;

const OSS_INT32 rnpid_PositionData = 119;

const OSS_INT32 rnpid_PositionDataSpecificToGERANIuMode = 120;

const OSS_INT32 rnpid_CellLoadInformationGroup = 121;

const OSS_INT32 rnpid_AccuracyFulfilmentIndicator = 122;

const OSS_INT32 rnpid_InformationTransferType = 123;

const OSS_INT32 rnpid_TraceRecordingSessionInformation = 124;

const OSS_INT32 rnpid_TracePropagationParameters = 125;

const OSS_INT32 rnpid_InterSystemInformationTransferType = 126;

const OSS_INT32 rnpid_SelectedPLMN_ID = 127;

const OSS_INT32 rnpid_RedirectionCompleted = 128;

const OSS_INT32 rnpid_RedirectionIndication = 129;

const OSS_INT32 rnpid_NAS_SequenceNumber = 130;

const OSS_INT32 rnpid_RejectCauseValue = 131;

const OSS_INT32 rnpid_APN = 132;

const OSS_INT32 rnpid_CNMBMSLinkingInformation = 133;

const OSS_INT32 rnpid_DeltaRAListofIdleModeUEs = 134;

const OSS_INT32 rnpid_FrequenceLayerConvergenceFlag = 135;

const OSS_INT32 rnpid_InformationExchangeID = 136;

const OSS_INT32 rnpid_InformationExchangeType = 137;

const OSS_INT32 rnpid_InformationRequested = 138;

const OSS_INT32 rnpid_InformationRequestType = 139;

const OSS_INT32 rnpid_IPMulticastAddress = 140;

const OSS_INT32 rnpid_JoinedMBMSBearerServicesList = 141;

const OSS_INT32 rnpid_LeftMBMSBearerServicesList = 142;

const OSS_INT32 rnpid_MBMSBearerServiceType = 143;

const OSS_INT32 rnpid_MBMSCNDe_Registration = 144;

const OSS_INT32 rnpid_MBMSServiceArea = 145;

const OSS_INT32 rnpid_MBMSSessionDuration = 146;

const OSS_INT32 rnpid_MBMSSessionIdentity = 147;

const OSS_INT32 rnpid_PDP_TypeInformation = 148;

const OSS_INT32 rnpid_RAB_Parameters = 149;

const OSS_INT32 rnpid_RAListofIdleModeUEs = 150;

const OSS_INT32 rnpid_MBMSRegistrationRequestType = 151;

const OSS_INT32 rnpid_SessionUpdateID = 152;

const OSS_INT32 rnpid_TMGI = 153;

const OSS_INT32 rnpid_TransportLayerInformation = 154;

const OSS_INT32 rnpid_UnsuccessfulLinkingList = 155;

const OSS_INT32 rnpid_MBMSLinkingInformation = 156;

const OSS_INT32 rnpid_MBMSSessionRepetitionNumber = 157;

const OSS_INT32 rnpid_AlternativeRABConfiguration = 158;

const OSS_INT32 rnpid_AlternativeRABConfigurationRequest = 159;

const OSS_INT32 rnpid_E_DCH_MAC_d_Flow_ID = 160;

const OSS_INT32 rnpid_SourceBSS_ToTargetBSS_TransparentContainer = 161;

const OSS_INT32 rnpid_TargetBSS_ToSourceBSS_TransparentContainer = 162;

const OSS_INT32 rnpid_TimeToMBMSDataTransfer = 163;

const OSS_INT32 rnpid_IncludeVelocity = 164;

const OSS_INT32 rnpid_VelocityEstimate = 165;

const OSS_INT32 rnpid_RedirectAttemptFlag = 166;

const OSS_INT32 rnpid_RAT_Type = 167;

const OSS_INT32 rnpid_PeriodicLocationInfo = 168;

const OSS_INT32 rnpid_MBMSCountingInformation = 169;

const OSS_INT32 rnpid_ExtendedRNC_ID = 171;

const OSS_INT32 rnpid_Alt_RAB_Parameter_ExtendedGuaranteedBitrateInf = 172;

const OSS_INT32 rnpid_Alt_RAB_Parameter_ExtendedMaxBitrateInf = 173;

const OSS_INT32 rnpid_Ass_RAB_Parameter_ExtendedGuaranteedBitrateList = 174;

const OSS_INT32 rnpid_Ass_RAB_Parameter_ExtendedMaxBitrateList = 175;

const OSS_INT32 rnpid_RAB_Parameter_ExtendedGuaranteedBitrateList = 176;

const OSS_INT32 rnpid_RAB_Parameter_ExtendedMaxBitrateList = 177;

const OSS_INT32 rnpid_Requested_RAB_Parameter_ExtendedMaxBitrateList = 178;

const OSS_INT32 rnpid_Requested_RAB_Parameter_ExtendedGuaranteedBitrateList = 179;

const OSS_INT32 rnpid_LAofIdleModeUEs = 180;

const OSS_INT32 rnpid_newLAListofIdleModeUEs = 181;

const OSS_INT32 rnpid_LAListwithNoIdleModeUEsAnyMore = 182;

const OSS_INT32 rnpid_GANSS_PositioningDataSet = 184;

const OSS_INT32 rnpid_RequestedGANSSAssistanceData = 185;

const OSS_INT32 rnpid_BroadcastGANSSAssistanceDataDecipheringKeys = 186;

const OSS_INT32 rnpid_d_RNTI_for_NoIuCSUP = 187;

const OSS_INT32 rnpid_RAB_SetupList_EnhancedRelocCompleteReq = 188;

const OSS_INT32 rnpid_RAB_SetupItem_EnhancedRelocCompleteReq = 189;

const OSS_INT32 rnpid_RAB_SetupList_EnhancedRelocCompleteRes = 190;

const OSS_INT32 rnpid_RAB_SetupItem_EnhancedRelocCompleteRes = 191;

const OSS_INT32 rnpid_RAB_SetupList_EnhRelocInfoReq = 192;

const OSS_INT32 rnpid_RAB_SetupItem_EnhRelocInfoReq = 193;

const OSS_INT32 rnpid_RAB_SetupList_EnhRelocInfoRes = 194;

const OSS_INT32 rnpid_RAB_SetupItem_EnhRelocInfoRes = 195;

const OSS_INT32 rnpid_OldIuSigConId = 196;

const OSS_INT32 rnpid_RAB_FailedList_EnhRelocInfoRes = 197;

const OSS_INT32 rnpid_RAB_FailedItem_EnhRelocInfoRes = 198;

const OSS_INT32 rnpid_UE_History_Information = 200;

const OSS_INT32 rnpid_MBMSSynchronisationInformation = 201;

const OSS_INT32 rnpid_SubscriberProfileIDforRFP = 202;

const OSS_INT32 rnpid_CSG_Id = 203;

const OSS_INT32 rnpid_OldIuSigConIdCS = 204;

const OSS_INT32 rnpid_OldIuSigConIdPS = 205;

const OSS_INT32 rnpid_GlobalCN_IDCS = 206;

const OSS_INT32 rnpid_GlobalCN_IDPS = 207;

const OSS_INT32 rnpid_RAB_ToBeReleasedItem_EnhancedRelocCompleteRes = 209;

const OSS_INT32 rnpid_RAB_ToBeReleasedList_EnhancedRelocCompleteRes = 210;

const OSS_INT32 rnpid_Relocation_TargetRNC_ID = 212;

const OSS_INT32 rnpid_Relocation_TargetExtendedRNC_ID = 213;

const OSS_INT32 rnpid_Alt_RAB_Parameter_SupportedGuaranteedBitrateInf = 214;

const OSS_INT32 rnpid_Alt_RAB_Parameter_SupportedMaxBitrateInf = 215;

const OSS_INT32 rnpid_Ass_RAB_Parameter_SupportedGuaranteedBitrateList = 216;

const OSS_INT32 rnpid_Ass_RAB_Parameter_SupportedMaxBitrateList = 217;

const OSS_INT32 rnpid_RAB_Parameter_SupportedGuaranteedBitrateList = 218;

const OSS_INT32 rnpid_RAB_Parameter_SupportedMaxBitrateList = 219;

const OSS_INT32 rnpid_Requested_RAB_Parameter_SupportedMaxBitrateList = 220;

const OSS_INT32 rnpid_Requested_RAB_Parameter_SupportedGuaranteedBitrateList = 221;

const OSS_INT32 rnpid_Relocation_SourceRNC_ID = 222;

const OSS_INT32 rnpid_Relocation_SourceExtendedRNC_ID = 223;

const OSS_INT32 rnpid_EncryptionKey = 224;

const OSS_INT32 rnpid_IntegrityProtectionKey = 225;

const OSS_INT32 rnpid_SRVCC_HO_Indication = 226;

const OSS_INT32 rnpid_SRVCC_Information = 227;

const OSS_INT32 rnpid_SRVCC_Operation_Possible = 228;

const OSS_INT32 rnpid_CSG_Id_List = 229;

const OSS_INT32 rnpid_PSRABtobeReplaced = 230;

const OSS_INT32 rnpid_E_UTRAN_Service_Handover = 231;

const OSS_INT32 rnpid_UE_AggregateMaximumBitRate = 233;

const OSS_INT32 rnpid_CSG_Membership_Status = 234;

const OSS_INT32 rnpid_Cell_Access_Mode = 235;

const OSS_INT32 rnpid_IP_Source_Address = 236;

const OSS_INT32 rnpid_CSFB_Information = 237;

const OSS_INT32 rnpid_PDP_TypeInformation_extension = 238;

const OSS_INT32 rnpid_MSISDN = 239;

const OSS_INT32 rnpid_Offload_RAB_Parameters = 240;

const OSS_INT32 rnpid_LGW_TransportLayerAddress = 241;

const OSS_INT32 rnpid_Correlation_ID = 242;

const OSS_INT32 rnpid_IRAT_Measurement_Configuration = 243;

const OSS_INT32 rnpid_MDT_Configuration = 244;

const OSS_INT32 rnpid_Priority_Class_Indicator = 245;

const OSS_INT32 rnpid_RNSAPRelocationParameters = 247;

const OSS_INT32 rnpid_RABParametersList = 248;

const OSS_INT32 rnpid_Management_Based_MDT_Allowed = 249;

const OSS_INT32 rnpid_HigherBitratesThan16MbpsFlag = 250;

const OSS_INT32 rnpid_Trace_Collection_Entity_IP_Addess = 251;

const OSS_INT32 rnpid_End_Of_CSFB = 252;

const OSS_INT32 rnpid_Out_Of_UTRAN = 254;

const OSS_INT32 rnpid_TraceRecordingSessionReference = 255;

const OSS_INT32 rnpid_IMSI = 256;

const OSS_INT32 rnpid_VoiceSupportMatchIndicator = 258;

const OSS_INT32 rnpid_RSRVCC_HO_Indication = 259;

const OSS_INT32 rnpid_RSRVCC_Information = 260;

const OSS_INT32 rnpid_AnchorPLMN_ID = 261;

const OSS_INT32 rnpid_Tunnel_Information_for_BBF = 262;

const OSS_INT32 rnpid_Management_Based_MDT_PLMN_List = 263;

const OSS_INT32 rnpid_SignallingBasedMDTPLMNList = 264;

const OSS_INT32 rnpid_M4Report = 265;

const OSS_INT32 rnpid_M5Report = 266;

const OSS_INT32 rnpid_M6Report = 267;

const OSS_INT32 rnpid_M7Report = 268;

const OSS_INT32 rnpid_TimingDifferenceULDL = 269;

const OSS_INT32 rnpid_Serving_Cell_Identifier = 270;

const OSS_INT32 rnpid_EARFCN_Extended = 271;

const OSS_INT32 rnpid_RSRVCC_Operation_Possible = 272;

const OSS_INT32 rnpid_SIPTO_LGW_TransportLayerAddress = 273;

const OSS_INT32 rnpid_SIPTO_Correlation_ID = 274;

const OSS_INT32 rnpid_LHN_ID = 275;

const OSS_INT32 rnpid_Session_Re_establishment_Indicator = 276;

const OSS_INT32 rnpid_LastE_UTRANPLMNIdentity = 277;

const OSS_INT32 rnpid_RSRQ_Type = 278;

const OSS_INT32 rnpid_RSRQ_Extension = 279;

#endif // OSS_ranap
